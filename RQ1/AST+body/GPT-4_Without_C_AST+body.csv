Signature,Early_Version,Late_Version,Early_Signature,Late_Signature,Diff_Signature,Early_Implementation,Late_Implementation,Diff_Implementation,Early_Implementation_AST_Node,Late_Implementation_AST_Node,Diff_Implementation.1,Early_Comment,Late_Comment,Diff_Comment,Early_Annotation,Late_Annotation,Diff_Annotation,Early_Callback,Late_Callback,Diff_Callback,GT_CI_ControlFlow,GT_Change_Type,GT_CI_Type,pred_change,pred_CI,change_description,CI_description
<android.os.StrictMode.ThreadPolicy.Builder: Builder permitUnbufferedIo()>,28,29,<android.os.StrictMode.ThreadPolicy.Builder: Builder permitUnbufferedIo()>,<android.os.StrictMode.ThreadPolicy.Builder: Builder permitUnbufferedIo()>,0,"{
    return disable(DETECT_UNBUFFERED_IO);
}","{
    return disable(DETECT_THREAD_UNBUFFERED_IO);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return disable(DETECT_UNBUFFERED_IO), []), Statement(}, [])])  Statement({, [])  Statement(return disable(DETECT_UNBUFFERED_IO), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return disable(DETECT_THREAD_UNBUFFERED_IO), []), Statement(}, [])])  Statement({, [])  Statement(return disable(DETECT_THREAD_UNBUFFERED_IO), [])  Statement(}, [])",1,"/**
 * Disable detection of unbuffered input/output operations.
 */","/**
 * Disable detection of unbuffered input/output operations.
 */",0,,[@NonNull],1,0,0,0,1,1,1,"1,5",1,"The return statement has changed from `disable(DETECT_UNBUFFERED_IO)` to `disable(DETECT_THREAD_UNBUFFERED_IO)`. Additionally, the `disable()` method's parameter has also changed. Hence, the code change type is 1,5.","The change in the return statement could cause the API to return a different value, leading to a potential Compatibility Issue. Therefore, the CI type is 1."
<android.app.NotificationManager: int getCurrentInterruptionFilter()>,23,24,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,0,"{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        Log.e(TAG, ""Unable to talk to notification manager. Woe!"", e);
    }
    return INTERRUPTION_FILTER_UNKNOWN;
}","{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])]), Statement(try {, []), MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, ""Unable to talk to notification manager. Woe!"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unable to talk to notification manager. Woe!"", []), Expression(e, [])]), Statement(}, []), Statement(return INTERRUPTION_FILTER_UNKNOWN, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])])    VariableReference(final INotificationManager service, [])    Expression(getService(), [])  Statement(try {, [])  MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])])    VariableReference(return zenModeToInterruptionFilter(service, [])    Expression(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, ""Unable to talk to notification manager. Woe!"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unable to talk to notification manager. Woe!"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unable to talk to notification manager. Woe!"", [])    Expression(e, [])  Statement(}, [])  Statement(return INTERRUPTION_FILTER_UNKNOWN, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])]), Statement(try {, []), MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])])    VariableReference(final INotificationManager service, [])    Expression(getService(), [])  Statement(try {, [])  MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])])    VariableReference(return zenModeToInterruptionFilter(service, [])    Expression(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Gets the current notification interruption filter.
 *
 * <p>
 * The interruption filter defines which notifications are allowed to interrupt the user
 * (e.g. via sound &amp; vibration) and is applied globally.
 * @return One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when
 * unavailable.
 *
 * <p>
 * Only available if policy access is granted to this package.
 * See {@link #isNotificationPolicyAccessGranted}.
 */","/**
 * Gets the current notification interruption filter.
 *
 * <p>
 * The interruption filter defines which notifications are allowed to interrupt the user
 * (e.g. via sound &amp; vibration) and is applied globally.
 * @return One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when
 * unavailable.
 */",1,,[@InterruptionFilter],0,0,0,0,"1,2","1,2","1,2","1,2","1,2","A return statement returning INTERRUPTION_FILTER_UNKNOWN is deleted and replaced by an exception handling statement (throw e.rethrowFromSystemServer()), and new annotation.","The removed return statement and the added exception handling statement could cause the API to behave differently, leading to a different return value or exception being thrown. Thus, the CI type is both 1 and 2."
<android.app.NotificationManager: int getCurrentInterruptionFilter()>,25,26,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,0,"{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])]), Statement(try {, []), MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])])    VariableReference(final INotificationManager service, [])    Expression(getService(), [])  Statement(try {, [])  MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])])    VariableReference(return zenModeToInterruptionFilter(service, [])    Expression(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])]), Statement(try {, []), MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final INotificationManager service, []), Expression(getService(), [])])    VariableReference(final INotificationManager service, [])    Expression(getService(), [])  Statement(try {, [])  MethodCall(return zenModeToInterruptionFilter(service.getZenMode()), [VariableReference(return zenModeToInterruptionFilter(service, []), Expression(), [])])    VariableReference(return zenModeToInterruptionFilter(service, [])    Expression(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Gets the current notification interruption filter.
 *
 * <p>
 * The interruption filter defines which notifications are allowed to interrupt the user
 * (e.g. via sound &amp; vibration) and is applied globally.
 * @return One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when
 * unavailable.
 */","/**
 * Gets the current notification interruption filter.
 * <p>
 * The interruption filter defines which notifications are allowed to
 * interrupt the user (e.g. via sound &amp; vibration) and is applied
 * globally.
 */",1,[@InterruptionFilter],[@InterruptionFilter],0,0,0,0,0,0,0,0,0,There are no changes in the method implementations between early and late versions; all statements are the same.,"No compatibility issues arise as there are no changes in the implementation, and thus the behavior of the API remains consistent between versions."
<android.os.Environment: boolean isExternalStorageEmulated()>,27,28,<android.os.Environment: boolean isExternalStorageEmulated()>,<android.os.Environment: boolean isExternalStorageEmulated()>,0,"{
    if (isStorageDisabled())
        return false;
    final File externalDir = sCurrentUser.getExternalDirs()[0];
    return isExternalStorageEmulated(externalDir);
}","{
    final File externalDir = sCurrentUser.getExternalDirs()[0];
    return isExternalStorageEmulated(externalDir);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (isStorageDisabled()), []), Statement(return false, []), AssignmentExpression(=, [VariableReference(final File externalDir, []), Expression(sCurrentUser.getExternalDirs()[0], [])]), Statement(return isExternalStorageEmulated(externalDir), []), Statement(}, [])])  Statement({, [])  Statement(if (isStorageDisabled()), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(final File externalDir, []), Expression(sCurrentUser.getExternalDirs()[0], [])])    VariableReference(final File externalDir, [])    Expression(sCurrentUser.getExternalDirs()[0], [])  Statement(return isExternalStorageEmulated(externalDir), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final File externalDir, []), Expression(sCurrentUser.getExternalDirs()[0], [])]), Statement(return isExternalStorageEmulated(externalDir), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final File externalDir, []), Expression(sCurrentUser.getExternalDirs()[0], [])])    VariableReference(final File externalDir, [])    Expression(sCurrentUser.getExternalDirs()[0], [])  Statement(return isExternalStorageEmulated(externalDir), [])  Statement(}, [])",1,"/**
 * Returns whether the primary shared/external storage media is emulated.
 * <p>
 * The contents of emulated storage devices are backed by a private user
 * data partition, which means there is little benefit to apps storing data
 * here instead of the private directories returned by
 * {@link Context#getFilesDir()}, etc.
 * <p>
 * This returns true when emulated storage is backed by either internal
 * storage or an adopted storage device.
 *
 * @see DevicePolicyManager#setStorageEncryption(android.content.ComponentName,
 * boolean)
 */","/**
 * Returns whether the primary shared/external storage media is emulated.
 * <p>
 * The contents of emulated storage devices are backed by a private user
 * data partition, which means there is little benefit to apps storing data
 * here instead of the private directories returned by
 * {@link Context#getFilesDir()}, etc.
 * <p>
 * This returns true when emulated storage is backed by either internal
 * storage or an adopted storage device.
 *
 * @see DevicePolicyManager#setStorageEncryption(android.content.ComponentName,
 * boolean)
 */",0,,,0,0,0,0,1,"1,3",1,3,1,"The control dependency has changed as the 'if (isStorageDisabled())' condition and its associated return statement have been removed, so the change type is 3.","Removing the 'if (isStorageDisabled())' condition and its associated 'return false' statement potentially changes the behavior of the method, possibly leading to different return values. Therefore, the CI type is 1."
"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",23,24,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",android.app.usage.NetworkStatsManager.queryDetails,0,"{
    NetworkTemplate template = createTemplate(networkType, subscriberId);
    if (template == null) {
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(NetworkTemplate template, []), Expression(createTemplate(networkType, subscriberId), [])]), AssignmentExpression(=, [VariableReference(if (template, []), Expression(, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(NetworkTemplate template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(NetworkTemplate template, [])    Expression(createTemplate(networkType, subscriberId), [])  AssignmentExpression(=, [VariableReference(if (template, []), Expression(, [])])    VariableReference(if (template, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])",1,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time or uid. This means
 * buckets' start and end timestamps are going to be between 'startTime' and 'endTime'
 * parameters, state is going to be {@link NetworkStats.Bucket#STATE_ALL} and uid will vary.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time or uid. This means
 * buckets' start and end timestamps are going to be between 'startTime' and 'endTime'
 * parameters. State is going to be {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE} and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",1,,,0,0,0,0,1,"1,2,3","1,2","2,3",2,"In the late implementation, the `createTemplate` method call is now encapsulated within a try-catch block to handle `IllegalArgumentException`, which wasn't present in the early version. This causes control dependency change and exception handling statement change, so the code change type is 2,3.","The introduction of exception handling for `IllegalArgumentException` means the method can now throw a different exception than in the early version, potentially altering the behavior of the API. This qualifies as Compatibility Issue type 2."
"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",25,26,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>","<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",0,"{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])",0,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time or uid. This means
 * buckets' start and end timestamps are going to be between 'startTime' and 'endTime'
 * parameters. State is going to be {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE} and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",1,,,0,0,0,0,1,0,0,0,0,"There is no change in the method implementation between the early version and the late version, so the code change type is 0.","Since there are no changes in the method implementation, there are no potential compatibility issues. The CI type is 0."
"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",26,27,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>","<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",0,"{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, mFlags, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])",1,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",0,,,0,0,0,0,"1,2","1,5",1,"1,4",1,"The constructor call for `NetworkStats` has changed in the late version to include an additional parameter `mFlags`. This means the return statement has been changed, as well as other relevant statements creating an instance of `NetworkStats`, so the change type is 1,4.","The change in the constructor call for `NetworkStats` can alter the returned value, potentially leading to different behaviors when the API is invoked. Therefore, the CI type is 1."
"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",27,28,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>","<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",0,"{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, mFlags, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, mFlags, startTime, endTime, mService);
    result.startUserUidEnumeration();
    return result;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(NetworkTemplate template, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])]), Statement(} catch (IllegalArgumentException e) {, []), Statement(if (DBG), []), MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(NetworkStats result, []), AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime, mService), [])]), MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(NetworkTemplate template, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(template, []), Expression(createTemplate(networkType, subscriberId), [])])    VariableReference(template, [])    Expression(createTemplate(networkType, subscriberId), [])  Statement(} catch (IllegalArgumentException e) {, [])  Statement(if (DBG), [])  MethodCall(Log.e(TAG, ""Cannot create template"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create template"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create template"", [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(NetworkStats result, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime, mService), [])])    VariableReference(result, [])    Expression(new NetworkStats(mContext, template, mFlags, startTime, endTime, mService), [])  MethodCall(result.startUserUidEnumeration(), [VariableReference(result, []), Expression(, [])])    VariableReference(result, [])    Expression(, [])  Statement(return result, [])  Statement(}, [])",1,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE},
 * default network is going to be {@link NetworkStats.Bucket#DEFAULT_NETWORK_ALL},
 * metered is going to be {@link NetworkStats.Bucket#METERED_ALL},
 * and roaming is going to be {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",1,,,0,0,0,0,"1,2","1,5",1,"1,5",1,"The constructor call of `NetworkStats` has changed in the late version, adding an additional parameter `mService`. Therefore, the code change type is 1 (due to potential changes in the return value) and 5 (due to changes in the dependent API).","The addition of the extra parameter in the `NetworkStats` constructor could potentially lead to the API returning a different value or different behavior. Thus, the CI type is 1."
<android.animation.ValueAnimator: long getFrameDelay()>,23,24,<android.animation.ValueAnimator: long getFrameDelay()>,<android.animation.ValueAnimator: long getFrameDelay()>,0,"{
    return Choreographer.getFrameDelay();
}","{
    return AnimationHandler.getInstance().getFrameDelay();
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return Choreographer.getFrameDelay(), [VariableReference(return Choreographer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Choreographer.getFrameDelay(), [VariableReference(return Choreographer, []), Expression(, [])])    VariableReference(return Choreographer, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return AnimationHandler.getInstance().getFrameDelay(), [VariableReference(return AnimationHandler, []), Expression().getFrameDelay(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return AnimationHandler.getInstance().getFrameDelay(), [VariableReference(return AnimationHandler, []), Expression().getFrameDelay(, [])])    VariableReference(return AnimationHandler, [])    Expression().getFrameDelay(, [])  Statement(}, [])",1,"/**
 * The amount of time, in milliseconds, between each frame of the animation. This is a
 * requested time that the animation will attempt to honor, but the actual delay between
 * frames may be different, depending on system load and capabilities. This is a static
 * function because the same delay will be applied to all animations, since they are all
 * run off of a single timing loop.
 *
 * The frame delay may be ignored when the animation system uses an external timing
 * source, such as the display refresh rate (vsync), to govern animations.
 *
 * @return the requested time between frames, in milliseconds
 */","/**
 * The amount of time, in milliseconds, between each frame of the animation. This is a
 * requested time that the animation will attempt to honor, but the actual delay between
 * frames may be different, depending on system load and capabilities. This is a static
 * function because the same delay will be applied to all animations, since they are all
 * run off of a single timing loop.
 *
 * The frame delay may be ignored when the animation system uses an external timing
 * source, such as the display refresh rate (vsync), to govern animations.
 *
 * Note that this method should be called from the same thread that {@link #start()} is
 * called in order to check the frame delay for that animation. A runtime exception will be
 * thrown if the calling thread does not have a Looper.
 *
 * @return the requested time between frames, in milliseconds
 */",1,,,0,0,0,0,1,1,1,"1,5",1,"The method call in the return statement has changed from `Choreographer.getFrameDelay()` to `AnimationHandler.getInstance().getFrameDelay()`. This indicates that the implementation now relies on a different method (dependent API change) for fetching the frame delay, so the change type is 1,5.","Since the return value now depends on a different API, it might return a different value. This introduces a potential compatibility issue related to different return values, so the CI type is 1."
<android.provider.Settings: boolean canDrawOverlays(Context)>,23,24,<android.provider.Settings: boolean canDrawOverlays(Context)>,<android.provider.Settings: boolean canDrawOverlays(Context)>,0,"{
    int uid = Binder.getCallingUid();
    return Settings.isCallingPackageAllowedToDrawOverlays(context, uid, Settings.getPackageNameForUid(context, uid), false);
}","{
    return Settings.isCallingPackageAllowedToDrawOverlays(context, Process.myUid(), context.getOpPackageName(), false);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int uid, []), Expression(Binder.getCallingUid(), [])]), MethodCall(return Settings.isCallingPackageAllowedToDrawOverlays(context, uid, Settings.getPackageNameForUid(context, uid), false), [VariableReference(return Settings, []), Expression(context, []), Expression(uid, []), Expression(Settings.getPackageNameForUid(context, []), Expression(uid), []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int uid, []), Expression(Binder.getCallingUid(), [])])    VariableReference(int uid, [])    Expression(Binder.getCallingUid(), [])  MethodCall(return Settings.isCallingPackageAllowedToDrawOverlays(context, uid, Settings.getPackageNameForUid(context, uid), false), [VariableReference(return Settings, []), Expression(context, []), Expression(uid, []), Expression(Settings.getPackageNameForUid(context, []), Expression(uid), []), Expression(false, [])])    VariableReference(return Settings, [])    Expression(context, [])    Expression(uid, [])    Expression(Settings.getPackageNameForUid(context, [])    Expression(uid), [])    Expression(false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return Settings.isCallingPackageAllowedToDrawOverlays(context, Process.myUid(), context.getOpPackageName(), false), [VariableReference(return Settings, []), Expression(context, []), Expression(Process.myUid(), []), Expression(context.getOpPackageName(), []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Settings.isCallingPackageAllowedToDrawOverlays(context, Process.myUid(), context.getOpPackageName(), false), [VariableReference(return Settings, []), Expression(context, []), Expression(Process.myUid(), []), Expression(context.getOpPackageName(), []), Expression(false, [])])    VariableReference(return Settings, [])    Expression(context, [])    Expression(Process.myUid(), [])    Expression(context.getOpPackageName(), [])    Expression(false, [])  Statement(}, [])",1,"/**
 * An app can use this method to check if it is currently allowed to draw on top of other
 * apps. In order to be allowed to do so, an app must first declare the
 * {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission in its manifest. If it
 * is currently disallowed, it can prompt the user to grant it this capability through a
 * management UI by sending an Intent with action
 * {@link android.provider.Settings#ACTION_MANAGE_OVERLAY_PERMISSION}.
 *
 * @param context A context
 * @return true if the calling app can draw on top of other apps, false otherwise.
 */","/**
 * Checks if the specified context can draw on top of other apps. As of API
 * level 23, an app cannot draw on top of other apps unless it declares the
 * {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission in its
 * manifest, <em>and</em> the user specifically grants the app this
 * capability. To prompt the user to grant this approval, the app must send an
 * intent with the action
 * {@link android.provider.Settings#ACTION_MANAGE_OVERLAY_PERMISSION}, which
 * causes the system to display a permission management screen.
 *
 * @param context App context.
 * @return true if the specified context can draw on top of other apps, false otherwise
 */",1,,,0,0,0,0,"1,2","1,5",1,"3,5",1,"The method no longer uses `Binder.getCallingUid()` and `Settings.getPackageNameForUid(context, uid)`, but instead uses `Process.myUid()` and `context.getOpPackageName()`. This indicates the control dependency is changed, and the dependent API (getCallingUid, getPackageNameForUid) is also replaced. Thus, the code changes are type 3,5.","The changes in the control flow and dependent API may result in different `uid` and package name values, thereby potentially leading to different return values. Hence, a CI type of 1 is introduced, as the API's behavior could change with respect to the return value."
<android.app.NotificationManager.Policy: String toString()>,23,24,<android.app.NotificationManager.Policy: String toString()>,<android.app.NotificationManager.Policy: String toString()>,0,"{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + ""]"";
}","{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + "",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects) + ""]"";
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])])    VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, [])    Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])])    VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, [])    Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,1,1,"1,4",1,"The return statement has been modified by adding an additional string component ("",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects)). This falls under change types 1 (Return statement changed) and 4 (Other statement changed).","The change in the return statement can lead to different return values (strings), indicating a potential Compatibility Issue due to different return values or types. Thus, the CI type is 1."
<android.app.NotificationManager.Policy: String toString()>,27,28,<android.app.NotificationManager.Policy: String toString()>,<android.app.NotificationManager.Policy: String toString()>,0,"{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + "",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects) + ""]"";
}","{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + "",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects) + "",areChannelsBypassingDnd="" + (((state & STATE_CHANNELS_BYPASSING_DND) != 0) ? ""true"" : ""false"") + ""]"";
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])])    VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, [])    Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, []), Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])])    VariableReference(return ""NotificationManager.Policy["" + ""priorityCategories, [])    Expression("" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,1,1,"1,4",1,"In the new implementation, the return statement has changed with the addition of the condition checking for the `state & STATE_CHANNELS_BYPASSING_DND` and including the result in the returned string. Hence, the code change type is 1,4.","This change modifies the string returned by the `toString()` method, which can lead to different return values under certain conditions. Therefore, the CI type is 1."
<android.text.Html: String toHtml(Spanned)>,23,24,<android.text.Html: String toHtml(Spanned)>,<android.text.Html: String toHtml(Spanned)>,0,"{
    StringBuilder out = new StringBuilder();
    withinHtml(out, text);
    return out.toString();
}","{
    return toHtml(text, TO_HTML_PARAGRAPH_LINES_CONSECUTIVE);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(StringBuilder out, []), Expression(new StringBuilder(), [])]), Statement(withinHtml(out, text), []), MethodCall(return out.toString(), [VariableReference(return out, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(StringBuilder out, []), Expression(new StringBuilder(), [])])    VariableReference(StringBuilder out, [])    Expression(new StringBuilder(), [])  Statement(withinHtml(out, text), [])  MethodCall(return out.toString(), [VariableReference(return out, []), Expression(, [])])    VariableReference(return out, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return toHtml(text, TO_HTML_PARAGRAPH_LINES_CONSECUTIVE), []), Statement(}, [])])  Statement({, [])  Statement(return toHtml(text, TO_HTML_PARAGRAPH_LINES_CONSECUTIVE), [])  Statement(}, [])",1,"/**
 * Returns an HTML representation of the provided Spanned text. A best effort is
 * made to add HTML tags corresponding to spans. Also note that HTML metacharacters
 * (such as ""&lt;"" and ""&amp;"") within the input text are escaped.
 *
 * @param text input text to convert
 * @return string containing input converted to HTML
 */","/**
 * @deprecated use {@link #toHtml(Spanned, int)} instead.
 */",1,,[@Deprecated],1,0,0,0,1,"1,4,5",1,"1,4,5",1,"The late implementation has been refactored to use the `toHtml(text, TO_HTML_PARAGRAPH_LINES_CONSECUTIVE)` method directly instead of manually building the HTML string. This change modifies the return statement, introduces an additional parameter to a dependent method call, and changes the core mechanism to convert `Spanned` text to HTML. The dependent method `toHtml` is used with a new parameter, so the change type is 1,4,5.","The refactoring of the return statement and the reliance on the method `toHtml` with an additional parameter can lead to different HTML output, potentially changing the return value. Therefore, the CI type is 1."
<android.app.Activity: void stopLockTask()>,27,28,<android.app.Activity: void stopLockTask()>,<android.app.Activity: void stopLockTask()>,0,"{
    try {
        ActivityManager.getService().stopLockTaskMode();
    } catch (RemoteException e) {
    }
}","{
    try {
        ActivityManager.getService().stopLockTaskModeByToken(mToken);
    } catch (RemoteException e) {
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManager.getService().stopLockTaskMode(), [VariableReference(ActivityManager, []), Expression().stopLockTaskMode(, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManager.getService().stopLockTaskMode(), [VariableReference(ActivityManager, []), Expression().stopLockTaskMode(, [])])    VariableReference(ActivityManager, [])    Expression().stopLockTaskMode(, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManager.getService().stopLockTaskModeByToken(mToken), [VariableReference(ActivityManager, []), Expression().stopLockTaskModeByToken(mToken, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManager.getService().stopLockTaskModeByToken(mToken), [VariableReference(ActivityManager, []), Expression().stopLockTaskModeByToken(mToken, [])])    VariableReference(ActivityManager, [])    Expression().stopLockTaskModeByToken(mToken, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Allow the user to switch away from the current task.
 *
 * Called to end the mode started by {@link Activity#startLockTask}. This
 * can only be called by activities that have successfully called
 * startLockTask previously.
 *
 * This will allow the user to exit this app and move onto other activities.
 * <p>Note: This method should only be called when the activity is user-facing. That is,
 * between onResume() and onPause().
 * <p>Note: If there are other tasks below this one that are also locked then calling this
 * method will immediately finish this task and resume the previous locked one, remaining in
 * lockTask mode.
 *
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */","/**
 * Stop the current task from being locked.
 *
 * <p>Called to end the LockTask or screen pinning mode started by {@link #startLockTask()}.
 * This can only be called by activities that have called {@link #startLockTask()} previously.
 *
 * <p><strong>Note:</strong> If the device is in LockTask mode that is not initially started
 * by this activity, then calling this method will not terminate the LockTask mode, but only
 * finish its own task. The device will remain in LockTask mode, until the activity which
 * started the LockTask mode calls this method, or until its whitelist authorization is revoked
 * by {@link DevicePolicyManager#setLockTaskPackages(ComponentName, String[])}.
 *
 * @see #startLockTask()
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */",1,,,0,0,0,0,1,4,0,"3,5",0,The method name called within the 'try' block has changed from `stopLockTaskMode()` to `stopLockTaskModeByToken(mToken)` and it uses an additional parameter `mToken`. This indicates a control dependency change (3) and a dependent API change (5).,"Despite the changes in method name and parameters, this alteration does not affect the return type nor does it introduce new exception handling that changes behavior significantly. Hence, there is no Compatibility Issue (0)."
<android.app.Activity: void stopLockTask()>,28,29,<android.app.Activity: void stopLockTask()>,<android.app.Activity: void stopLockTask()>,0,"{
    try {
        ActivityManager.getService().stopLockTaskModeByToken(mToken);
    } catch (RemoteException e) {
    }
}","{
    try {
        ActivityTaskManager.getService().stopLockTaskModeByToken(mToken);
    } catch (RemoteException e) {
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManager.getService().stopLockTaskModeByToken(mToken), [VariableReference(ActivityManager, []), Expression().stopLockTaskModeByToken(mToken, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManager.getService().stopLockTaskModeByToken(mToken), [VariableReference(ActivityManager, []), Expression().stopLockTaskModeByToken(mToken, [])])    VariableReference(ActivityManager, [])    Expression().stopLockTaskModeByToken(mToken, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityTaskManager.getService().stopLockTaskModeByToken(mToken), [VariableReference(ActivityTaskManager, []), Expression().stopLockTaskModeByToken(mToken, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityTaskManager.getService().stopLockTaskModeByToken(mToken), [VariableReference(ActivityTaskManager, []), Expression().stopLockTaskModeByToken(mToken, [])])    VariableReference(ActivityTaskManager, [])    Expression().stopLockTaskModeByToken(mToken, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Stop the current task from being locked.
 *
 * <p>Called to end the LockTask or screen pinning mode started by {@link #startLockTask()}.
 * This can only be called by activities that have called {@link #startLockTask()} previously.
 *
 * <p><strong>Note:</strong> If the device is in LockTask mode that is not initially started
 * by this activity, then calling this method will not terminate the LockTask mode, but only
 * finish its own task. The device will remain in LockTask mode, until the activity which
 * started the LockTask mode calls this method, or until its whitelist authorization is revoked
 * by {@link DevicePolicyManager#setLockTaskPackages(ComponentName, String[])}.
 *
 * @see #startLockTask()
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */","/**
 * Stop the current task from being locked.
 *
 * <p>Called to end the LockTask or screen pinning mode started by {@link #startLockTask()}.
 * This can only be called by activities that have called {@link #startLockTask()} previously.
 *
 * <p><strong>Note:</strong> If the device is in LockTask mode that is not initially started
 * by this activity, then calling this method will not terminate the LockTask mode, but only
 * finish its own task. The device will remain in LockTask mode, until the activity which
 * started the LockTask mode calls this method, or until its whitelist authorization is revoked
 * by {@link DevicePolicyManager#setLockTaskPackages(ComponentName, String[])}.
 *
 * @see #startLockTask()
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */",0,,,0,0,0,0,1,4,0,5,0,"The dependent API has changed from `ActivityManager.getService().stopLockTaskModeByToken(mToken)` to `ActivityTaskManager.getService().stopLockTaskModeByToken(mToken)`, so the code change type is 5.","Given that both `ActivityManager` and `ActivityTaskManager` implementations are assumed to be equivalent in this context, the change does not necessarily lead to different behaviors. Therefore, there is no compatibility issue in this case."
<android.animation.ValueAnimator: void end()>,23,24,<android.animation.ValueAnimator: void end()>,<android.animation.ValueAnimator: void end()>,0,"{
    AnimationHandler handler = getOrCreateAnimationHandler();
    if (!handler.mAnimations.contains(this) && !handler.mPendingAnimations.contains(this)) {
        // Special case if the animation has not yet started; get it ready for ending
        mStartedDelay = false;
        startAnimation(handler);
        mStarted = true;
    } else if (!mInitialized) {
        initAnimation();
    }
    animateValue(mPlayingBackwards ? 0f : 1f);
    endAnimation(handler);
}","{
    if (Looper.myLooper() == null) {
        throw new AndroidRuntimeException(""Animators may only be run on Looper threads"");
    }
    if (!mRunning) {
        // Special case if the animation has not yet started; get it ready for ending
        startAnimation();
        mStarted = true;
    } else if (!mInitialized) {
        initAnimation();
    }
    animateValue(shouldPlayBackward(mRepeatCount) ? 0f : 1f);
    endAnimation();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(AnimationHandler handler, []), Expression(getOrCreateAnimationHandler(), [])]), Statement(// Special case if the animation has not yet started, []), Statement(get it ready for ending, []), AssignmentExpression(=, [VariableReference(mStartedDelay, []), Expression(false, [])]), Statement(startAnimation(handler), []), AssignmentExpression(=, [VariableReference(mStarted, []), Expression(true, [])]), Statement(} else if (!mInitialized) {, []), Statement(initAnimation(), []), Statement(}, []), Statement(animateValue(mPlayingBackwards ? 0f : 1f), []), Statement(endAnimation(handler), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(AnimationHandler handler, []), Expression(getOrCreateAnimationHandler(), [])])    VariableReference(AnimationHandler handler, [])    Expression(getOrCreateAnimationHandler(), [])  Statement(// Special case if the animation has not yet started, [])  Statement(get it ready for ending, [])  AssignmentExpression(=, [VariableReference(mStartedDelay, []), Expression(false, [])])    VariableReference(mStartedDelay, [])    Expression(false, [])  Statement(startAnimation(handler), [])  AssignmentExpression(=, [VariableReference(mStarted, []), Expression(true, [])])    VariableReference(mStarted, [])    Expression(true, [])  Statement(} else if (!mInitialized) {, [])  Statement(initAnimation(), [])  Statement(}, [])  Statement(animateValue(mPlayingBackwards ? 0f : 1f), [])  Statement(endAnimation(handler), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (Looper.myLooper(), []), Expression(, [])]), Statement(throw new AndroidRuntimeException(""Animators may only be run on Looper threads""), []), Statement(}, []), Statement(if (!mRunning) {, []), Statement(// Special case if the animation has not yet started, []), Statement(get it ready for ending, []), Statement(startAnimation(), []), AssignmentExpression(=, [VariableReference(mStarted, []), Expression(true, [])]), Statement(} else if (!mInitialized) {, []), Statement(initAnimation(), []), Statement(}, []), Statement(animateValue(shouldPlayBackward(mRepeatCount) ? 0f : 1f), []), Statement(endAnimation(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (Looper.myLooper(), []), Expression(, [])])    VariableReference(if (Looper.myLooper(), [])    Expression(, [])  Statement(throw new AndroidRuntimeException(""Animators may only be run on Looper threads""), [])  Statement(}, [])  Statement(if (!mRunning) {, [])  Statement(// Special case if the animation has not yet started, [])  Statement(get it ready for ending, [])  Statement(startAnimation(), [])  AssignmentExpression(=, [VariableReference(mStarted, []), Expression(true, [])])    VariableReference(mStarted, [])    Expression(true, [])  Statement(} else if (!mInitialized) {, [])  Statement(initAnimation(), [])  Statement(}, [])  Statement(animateValue(shouldPlayBackward(mRepeatCount) ? 0f : 1f), [])  Statement(endAnimation(), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,"2,3,4",2,"2,3,4,5",2,"The late version introduces a new exception throw statement (`throw new AndroidRuntimeException(""Animators may only be run on Looper threads"")`) in case `Looper.myLooper()` returns null, changes in control flow (`if (!mRunning)`) and updates in statements under those control conditions such as changes from `startAnimation(handler)` to `startAnimation()` and `animateValue(mPlayingBackwards ? 0f : 1f)` to `animateValue(shouldPlayBackward(mRepeatCount) ? 0f : 1f)`. Also, the `startAnimation` and `endAnimation` methods may have different implementations (`handler` variable is removed). Thus, the code change types are 2,3,4,5.","The introduction of the new exception handling statement can lead to different exception behaviors and control flow, which may result in different types of exceptions thrown, causing CI type 2."
"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int,Theme)>",23,24,"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int,Theme)>","<android.content.res.Resources: Drawable loadDrawable(TypedValue,int,Theme)>",0,"{
    if (TRACE_FOR_PRELOAD) {
        // Log only framework resources
        if ((id >>> 24) == 0x1) {
            final String name = getResourceName(id);
            if (name != null) {
                Log.d(""PreloadDrawable"", name);
            }
        }
    }
    final boolean isColorDrawable;
    final DrawableCache caches;
    final long key;
    if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
        isColorDrawable = true;
        caches = mColorDrawableCache;
        key = value.data;
    } else {
        isColorDrawable = false;
        caches = mDrawableCache;
        key = (((long) value.assetCookie) << 32) | value.data;
    }
    // that was inflated against the specified theme.
    if (!mPreloading) {
        final Drawable cachedDrawable = caches.getInstance(key, theme);
        if (cachedDrawable != null) {
            return cachedDrawable;
        }
    }
    // Next, check preloaded drawables. These may contain unresolved theme
    // attributes.
    final ConstantState cs;
    if (isColorDrawable) {
        cs = sPreloadedColorDrawables.get(key);
    } else {
        cs = sPreloadedDrawables[mConfiguration.getLayoutDirection()].get(key);
    }
    Drawable dr;
    if (cs != null) {
        dr = cs.newDrawable(this);
    } else if (isColorDrawable) {
        dr = new ColorDrawable(value.data);
    } else {
        dr = loadDrawableForCookie(value, id, null);
    }
    // Determine if the drawable has unresolved theme attributes. If it
    // does, we'll need to apply a theme and store it in a theme-specific
    // cache.
    final boolean canApplyTheme = dr != null && dr.canApplyTheme();
    if (canApplyTheme && theme != null) {
        dr = dr.mutate();
        dr.applyTheme(theme);
        dr.clearMutated();
    }
    // cache: preload, not themed, null theme, or theme-specific.
    if (dr != null) {
        dr.setChangingConfigurations(value.changingConfigurations);
        cacheDrawable(value, isColorDrawable, caches, theme, canApplyTheme, key, dr);
    }
    return dr;
}","{
    return mResourcesImpl.loadDrawable(this, value, id, theme, true);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (TRACE_FOR_PRELOAD) {, []), Statement(// Log only framework resources, []), AssignmentExpression(=, [VariableReference(if ((id >>> 24), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final String name, []), Expression(getResourceName(id), [])]), AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null) {, [])]), MethodCall(Log.d(""PreloadDrawable"", name), [VariableReference(Log, []), Expression(""PreloadDrawable"", []), Expression(name, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(final boolean isColorDrawable, []), Statement(final DrawableCache caches, []), Statement(final long key, []), AssignmentExpression(=, [VariableReference(if (value.type >, []), Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])]), AssignmentExpression(=, [VariableReference(isColorDrawable, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(caches, []), Expression(mColorDrawableCache, [])]), AssignmentExpression(=, [VariableReference(key, []), Expression(value.data, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(isColorDrawable, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(caches, []), Expression(mDrawableCache, [])]), AssignmentExpression(=, [VariableReference(key, []), Expression((((long) value.assetCookie) << 32) | value.data, [])]), Statement(}, []), Statement(// that was inflated against the specified theme., []), Statement(if (!mPreloading) {, []), AssignmentExpression(=, [VariableReference(final Drawable cachedDrawable, []), Expression(caches.getInstance(key, theme), [])]), AssignmentExpression(=, [VariableReference(if (cachedDrawable !, []), Expression(null) {, [])]), Statement(return cachedDrawable, []), Statement(}, []), Statement(}, []), Statement(// Next, check preloaded drawables. These may contain unresolved theme, []), Statement(// attributes., []), Statement(final ConstantState cs, []), Statement(if (isColorDrawable) {, []), AssignmentExpression(=, [VariableReference(cs, []), Expression(sPreloadedColorDrawables.get(key), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(cs, []), Expression(sPreloadedDrawables[mConfiguration.getLayoutDirection()].get(key), [])]), Statement(}, []), Statement(Drawable dr, []), AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(cs.newDrawable(this), [])]), Statement(} else if (isColorDrawable) {, []), AssignmentExpression(=, [VariableReference(dr, []), Expression(new ColorDrawable(value.data), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(dr, []), Expression(loadDrawableForCookie(value, id, null), [])]), Statement(}, []), Statement(// Determine if the drawable has unresolved theme attributes. If it, []), Statement(// does, we'll need to apply a theme and store it in a theme-specific, []), Statement(// cache., []), AssignmentExpression(=, [VariableReference(final boolean canApplyTheme, []), Expression(dr !, [])]), AssignmentExpression(=, [VariableReference(if (canApplyTheme && theme !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(dr.mutate(), [])]), MethodCall(dr.applyTheme(theme), [VariableReference(dr, []), Expression(theme, [])]), MethodCall(dr.clearMutated(), [VariableReference(dr, []), Expression(, [])]), Statement(}, []), Statement(// cache: preload, not themed, null theme, or theme-specific., []), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])]), MethodCall(dr.setChangingConfigurations(value.changingConfigurations), [VariableReference(dr, []), Expression(value.changingConfigurations, [])]), Statement(cacheDrawable(value, isColorDrawable, caches, theme, canApplyTheme, key, dr), []), Statement(}, []), Statement(return dr, []), Statement(}, [])])  Statement({, [])  Statement(if (TRACE_FOR_PRELOAD) {, [])  Statement(// Log only framework resources, [])  AssignmentExpression(=, [VariableReference(if ((id >>> 24), []), Expression(, [])])    VariableReference(if ((id >>> 24), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final String name, []), Expression(getResourceName(id), [])])    VariableReference(final String name, [])    Expression(getResourceName(id), [])  AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null) {, [])])    VariableReference(if (name !, [])    Expression(null) {, [])  MethodCall(Log.d(""PreloadDrawable"", name), [VariableReference(Log, []), Expression(""PreloadDrawable"", []), Expression(name, [])])    VariableReference(Log, [])    Expression(""PreloadDrawable"", [])    Expression(name, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(final boolean isColorDrawable, [])  Statement(final DrawableCache caches, [])  Statement(final long key, [])  AssignmentExpression(=, [VariableReference(if (value.type >, []), Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])])    VariableReference(if (value.type >, [])    Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])  AssignmentExpression(=, [VariableReference(isColorDrawable, []), Expression(true, [])])    VariableReference(isColorDrawable, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(caches, []), Expression(mColorDrawableCache, [])])    VariableReference(caches, [])    Expression(mColorDrawableCache, [])  AssignmentExpression(=, [VariableReference(key, []), Expression(value.data, [])])    VariableReference(key, [])    Expression(value.data, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(isColorDrawable, []), Expression(false, [])])    VariableReference(isColorDrawable, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(caches, []), Expression(mDrawableCache, [])])    VariableReference(caches, [])    Expression(mDrawableCache, [])  AssignmentExpression(=, [VariableReference(key, []), Expression((((long) value.assetCookie) << 32) | value.data, [])])    VariableReference(key, [])    Expression((((long) value.assetCookie) << 32) | value.data, [])  Statement(}, [])  Statement(// that was inflated against the specified theme., [])  Statement(if (!mPreloading) {, [])  AssignmentExpression(=, [VariableReference(final Drawable cachedDrawable, []), Expression(caches.getInstance(key, theme), [])])    VariableReference(final Drawable cachedDrawable, [])    Expression(caches.getInstance(key, theme), [])  AssignmentExpression(=, [VariableReference(if (cachedDrawable !, []), Expression(null) {, [])])    VariableReference(if (cachedDrawable !, [])    Expression(null) {, [])  Statement(return cachedDrawable, [])  Statement(}, [])  Statement(}, [])  Statement(// Next, check preloaded drawables. These may contain unresolved theme, [])  Statement(// attributes., [])  Statement(final ConstantState cs, [])  Statement(if (isColorDrawable) {, [])  AssignmentExpression(=, [VariableReference(cs, []), Expression(sPreloadedColorDrawables.get(key), [])])    VariableReference(cs, [])    Expression(sPreloadedColorDrawables.get(key), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(cs, []), Expression(sPreloadedDrawables[mConfiguration.getLayoutDirection()].get(key), [])])    VariableReference(cs, [])    Expression(sPreloadedDrawables[mConfiguration.getLayoutDirection()].get(key), [])  Statement(}, [])  Statement(Drawable dr, [])  AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])])    VariableReference(if (cs !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(cs.newDrawable(this), [])])    VariableReference(dr, [])    Expression(cs.newDrawable(this), [])  Statement(} else if (isColorDrawable) {, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(new ColorDrawable(value.data), [])])    VariableReference(dr, [])    Expression(new ColorDrawable(value.data), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(loadDrawableForCookie(value, id, null), [])])    VariableReference(dr, [])    Expression(loadDrawableForCookie(value, id, null), [])  Statement(}, [])  Statement(// Determine if the drawable has unresolved theme attributes. If it, [])  Statement(// does, we'll need to apply a theme and store it in a theme-specific, [])  Statement(// cache., [])  AssignmentExpression(=, [VariableReference(final boolean canApplyTheme, []), Expression(dr !, [])])    VariableReference(final boolean canApplyTheme, [])    Expression(dr !, [])  AssignmentExpression(=, [VariableReference(if (canApplyTheme && theme !, []), Expression(null) {, [])])    VariableReference(if (canApplyTheme && theme !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(dr.mutate(), [])])    VariableReference(dr, [])    Expression(dr.mutate(), [])  MethodCall(dr.applyTheme(theme), [VariableReference(dr, []), Expression(theme, [])])    VariableReference(dr, [])    Expression(theme, [])  MethodCall(dr.clearMutated(), [VariableReference(dr, []), Expression(, [])])    VariableReference(dr, [])    Expression(, [])  Statement(}, [])  Statement(// cache: preload, not themed, null theme, or theme-specific., [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])])    VariableReference(if (dr !, [])    Expression(null) {, [])  MethodCall(dr.setChangingConfigurations(value.changingConfigurations), [VariableReference(dr, []), Expression(value.changingConfigurations, [])])    VariableReference(dr, [])    Expression(value.changingConfigurations, [])  Statement(cacheDrawable(value, isColorDrawable, caches, theme, canApplyTheme, key, dr), [])  Statement(}, [])  Statement(return dr, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mResourcesImpl.loadDrawable(this, value, id, theme, true), [VariableReference(return mResourcesImpl, []), Expression(this, []), Expression(value, []), Expression(id, []), Expression(theme, []), Expression(true, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mResourcesImpl.loadDrawable(this, value, id, theme, true), [VariableReference(return mResourcesImpl, []), Expression(this, []), Expression(value, []), Expression(id, []), Expression(theme, []), Expression(true, [])])    VariableReference(return mResourcesImpl, [])    Expression(this, [])    Expression(value, [])    Expression(id, [])    Expression(theme, [])    Expression(true, [])  Statement(}, [])",1,,,0,[@Nullable],[@NonNull],1,0,0,0,"1,2","1,3,4",1,"1,5",1,"The return statement has changed from a detailed implementation to a call to an external method `mResourcesImpl.loadDrawable()`, leading to a potential change in return value. The return type's annotation also changed from `@Nullable` to `@NonNull`. Since the method the current implementation relies on has changed, the code change type is 1,5.","The change in the return type annotation and the return value itself indicates a potential difference in returned values which might cause a different behavior in clients relying on this method. Therefore, the CI type is 1."
<android.os.BatteryManager: boolean isCharging()>,23,24,<android.os.BatteryManager: boolean isCharging()>,<android.os.BatteryManager: boolean isCharging()>,0,"{
    try {
        return mBatteryStats.isCharging();
    } catch (RemoteException e) {
        return true;
    }
}","{
    try {
        return mBatteryStats.isCharging();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mBatteryStats.isCharging(), [VariableReference(return mBatteryStats, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), Statement(return true, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mBatteryStats.isCharging(), [VariableReference(return mBatteryStats, []), Expression(, [])])    VariableReference(return mBatteryStats, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  Statement(return true, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mBatteryStats.isCharging(), [VariableReference(return mBatteryStats, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mBatteryStats.isCharging(), [VariableReference(return mBatteryStats, []), Expression(, [])])    VariableReference(return mBatteryStats, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Return true if the battery is currently considered to be charging.  This means that
 * the device is plugged in and is supplying sufficient power that the battery level is
 * going up (or the battery is fully charged).  Changes in this state are matched by
 * broadcasts of {@link #ACTION_CHARGING} and {@link #ACTION_DISCHARGING}.
 */
","/**
 * Return true if the battery is currently considered to be charging.  This means that
 * the device is plugged in and is supplying sufficient power that the battery level is
 * going up (or the battery is fully charged).  Changes in this state are matched by
 * broadcasts of {@link #ACTION_CHARGING} and {@link #ACTION_DISCHARGING}.
 */
",0,,,0,0,0,0,1,"1,2","1,2","1,2","1,2","A return statement (return true) is removed and replaced with a new exception handling statement (throw e.rethrowFromSystemServer()), so the change type is 1,2.","The removed return statement and introduced exception handling can lead to different behavior, potentially returning different values and handling exceptions differently. Thus, the CI type is 1,2."
<android.app.ApplicationContext: Drawable peekWallpaper()>,4,5,<android.app.ApplicationContext: Drawable peekWallpaper()>,<android.app.ApplicationContext: Drawable peekWallpaper()>,0,"{
    if (mWallpaper != null) {
        return mWallpaper;
    }
    mWallpaperCallback = new WallpaperCallback(this);
    mWallpaper = getCurrentWallpaperLocked();
    return mWallpaper;
}","{
    return getWallpaperManager().peekDrawable();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mWallpaper !, []), Expression(null) {, [])]), Statement(return mWallpaper, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mWallpaperCallback, []), Expression(new WallpaperCallback(this), [])]), AssignmentExpression(=, [VariableReference(mWallpaper, []), Expression(getCurrentWallpaperLocked(), [])]), Statement(return mWallpaper, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mWallpaper !, []), Expression(null) {, [])])    VariableReference(if (mWallpaper !, [])    Expression(null) {, [])  Statement(return mWallpaper, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mWallpaperCallback, []), Expression(new WallpaperCallback(this), [])])    VariableReference(mWallpaperCallback, [])    Expression(new WallpaperCallback(this), [])  AssignmentExpression(=, [VariableReference(mWallpaper, []), Expression(getCurrentWallpaperLocked(), [])])    VariableReference(mWallpaper, [])    Expression(getCurrentWallpaperLocked(), [])  Statement(return mWallpaper, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return getWallpaperManager().peekDrawable(), [VariableReference(return getWallpaperManager(), []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return getWallpaperManager().peekDrawable(), [VariableReference(return getWallpaperManager(), []), Expression(, [])])    VariableReference(return getWallpaperManager(), [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,"1,3,4",1,"1,5",1,"The return statement has changed from returning `mWallpaper` to returning the `Drawable` from `getWallpaperManager().peekDrawable()`. The method now relies on the `getWallpaperManager().peekDrawable()` call, indicating a dependency on a different API, so the code change type is 1,5.","The change in the return statement and reliance on a different dependent API may result in different return values, leading to potential compatibility issues. Hence, the CI type is 1."
"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int)>",4,5,"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int)>","<android.content.res.Resources: Drawable loadDrawable(TypedValue,int)>",0,"{
    if (TRACE_FOR_PRELOAD) {
        // Log only framework resources
        if ((id >>> 24) == 0x1) {
            final String name = getResourceName(id);
            if (name != null)
                android.util.Log.d(""PreloadDrawable"", name);
        }
    }
    final long key = (((long) value.assetCookie) << 32) | value.data;
    Drawable dr = getCachedDrawable(key);
    if (dr != null) {
        return dr;
    }
    Drawable.ConstantState cs = mPreloadedDrawables.get(key);
    if (cs != null) {
        dr = cs.newDrawable();
    } else {
        if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
            dr = new ColorDrawable(value.data);
        }
        if (dr == null) {
            if (value.string == null) {
                throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value);
            }
            String file = value.string.toString();
            if (DEBUG_LOAD)
                Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file);
            if (file.endsWith("".xml"")) {
                try {
                    XmlResourceParser rp = loadXmlResourceParser(file, id, value.assetCookie, ""drawable"");
                    dr = Drawable.createFromXml(this, rp);
                    rp.close();
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            } else {
                try {
                    InputStream is = mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_BUFFER);
                    // System.out.println(""Opened file "" + file + "": "" + is);
                    dr = Drawable.createFromResourceStream(this, value, is, file);
                    is.close();
                // System.out.println(""Created stream: "" + dr);
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            }
        }
    }
    if (dr != null) {
        dr.setChangingConfigurations(value.changingConfigurations);
        cs = dr.getConstantState();
        if (cs != null) {
            if (mPreloading) {
                sPreloadedDrawables.put(key, cs);
            } else {
                synchronized (mTmpValue) {
                    // Log.i(TAG, ""Saving cached drawable @ #"" +
                    // Integer.toHexString(key.intValue())
                    // + "" in "" + this + "": "" + cs);
                    mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs));
                }
            }
        }
    }
    return dr;
}","{
    if (TRACE_FOR_PRELOAD) {
        // Log only framework resources
        if ((id >>> 24) == 0x1) {
            final String name = getResourceName(id);
            if (name != null)
                android.util.Log.d(""PreloadDrawable"", name);
        }
    }
    final long key = (((long) value.assetCookie) << 32) | value.data;
    Drawable dr = getCachedDrawable(key);
    if (dr != null) {
        return dr;
    }
    Drawable.ConstantState cs = sPreloadedDrawables.get(key);
    if (cs != null) {
        dr = cs.newDrawable(this);
    } else {
        if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
            dr = new ColorDrawable(value.data);
        }
        if (dr == null) {
            if (value.string == null) {
                throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value);
            }
            String file = value.string.toString();
            if (DEBUG_LOAD)
                Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file);
            if (file.endsWith("".xml"")) {
                try {
                    XmlResourceParser rp = loadXmlResourceParser(file, id, value.assetCookie, ""drawable"");
                    dr = Drawable.createFromXml(this, rp);
                    rp.close();
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            } else {
                try {
                    InputStream is = mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_STREAMING);
                    // System.out.println(""Opened file "" + file + "": "" + is);
                    dr = Drawable.createFromResourceStream(this, value, is, file, null);
                    is.close();
                // System.out.println(""Created stream: "" + dr);
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            }
        }
    }
    if (dr != null) {
        dr.setChangingConfigurations(value.changingConfigurations);
        cs = dr.getConstantState();
        if (cs != null) {
            if (mPreloading) {
                sPreloadedDrawables.put(key, cs);
            } else {
                synchronized (mTmpValue) {
                    // Log.i(TAG, ""Saving cached drawable @ #"" +
                    // Integer.toHexString(key.intValue())
                    // + "" in "" + this + "": "" + cs);
                    mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs));
                }
            }
        }
    }
    return dr;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (TRACE_FOR_PRELOAD) {, []), Statement(// Log only framework resources, []), AssignmentExpression(=, [VariableReference(if ((id >>> 24), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final String name, []), Expression(getResourceName(id), [])]), AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null), [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final long key, []), Expression((((long) value.assetCookie) << 32) | value.data, [])]), AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(getCachedDrawable(key), [])]), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])]), Statement(return dr, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Drawable.ConstantState cs, []), Expression(mPreloadedDrawables.get(key), [])]), AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(cs.newDrawable(), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(if (value.type >, []), Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(new ColorDrawable(value.data), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (value.string, []), Expression(, [])]), Statement(throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value), []), Statement(}, []), AssignmentExpression(=, [VariableReference(String file, []), Expression(value.string.toString(), [])]), Statement(if (DEBUG_LOAD), []), MethodCall(Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file), [VariableReference(Log, []), Expression(TAG, []), Expression(""Loading drawable for cookie "" + value.assetCookie + "": "" + file, [])]), MethodCall(if (file.endsWith("".xml"")), [VariableReference(if (file, []), Expression("".xml""), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(XmlResourceParser rp, []), Expression(loadXmlResourceParser(file, id, value.assetCookie, ""drawable""), [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromXml(this, rp), [])]), MethodCall(rp.close(), [VariableReference(rp, []), Expression(, [])]), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])]), MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])]), Statement(throw rnf, []), Statement(}, []), Statement(} else {, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(InputStream is, []), Expression(mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_BUFFER), [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromResourceStream(this, value, is, file), [])]), MethodCall(is.close(), [VariableReference(is, []), Expression(, [])]), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])]), MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])]), Statement(throw rnf, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])]), MethodCall(dr.setChangingConfigurations(value.changingConfigurations), [VariableReference(dr, []), Expression(value.changingConfigurations, [])]), AssignmentExpression(=, [VariableReference(cs, []), Expression(dr.getConstantState(), [])]), AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])]), Statement(if (mPreloading) {, []), MethodCall(sPreloadedDrawables.put(key, cs), [VariableReference(sPreloadedDrawables, []), Expression(key, []), Expression(cs, [])]), Statement(} else {, []), Statement(synchronized (mTmpValue) {, []), MethodCall(// Integer.toHexString(key.intValue()), [VariableReference(// Integer, []), Expression(key.intValue(), [])]), Statement(// + "" in "" + this + "": "" + cs), []), MethodCall(mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs)), [VariableReference(mDrawableCache, []), Expression(key, []), Expression(new WeakReference<Drawable.ConstantState>(cs), [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return dr, []), Statement(}, [])])  Statement({, [])  Statement(if (TRACE_FOR_PRELOAD) {, [])  Statement(// Log only framework resources, [])  AssignmentExpression(=, [VariableReference(if ((id >>> 24), []), Expression(, [])])    VariableReference(if ((id >>> 24), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final String name, []), Expression(getResourceName(id), [])])    VariableReference(final String name, [])    Expression(getResourceName(id), [])  AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null), [])])    VariableReference(if (name !, [])    Expression(null), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final long key, []), Expression((((long) value.assetCookie) << 32) | value.data, [])])    VariableReference(final long key, [])    Expression((((long) value.assetCookie) << 32) | value.data, [])  AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(getCachedDrawable(key), [])])    VariableReference(Drawable dr, [])    Expression(getCachedDrawable(key), [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])])    VariableReference(if (dr !, [])    Expression(null) {, [])  Statement(return dr, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Drawable.ConstantState cs, []), Expression(mPreloadedDrawables.get(key), [])])    VariableReference(Drawable.ConstantState cs, [])    Expression(mPreloadedDrawables.get(key), [])  AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])])    VariableReference(if (cs !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(cs.newDrawable(), [])])    VariableReference(dr, [])    Expression(cs.newDrawable(), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(if (value.type >, []), Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])])    VariableReference(if (value.type >, [])    Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(new ColorDrawable(value.data), [])])    VariableReference(dr, [])    Expression(new ColorDrawable(value.data), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])])    VariableReference(if (dr, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (value.string, []), Expression(, [])])    VariableReference(if (value.string, [])    Expression(, [])  Statement(throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(String file, []), Expression(value.string.toString(), [])])    VariableReference(String file, [])    Expression(value.string.toString(), [])  Statement(if (DEBUG_LOAD), [])  MethodCall(Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file), [VariableReference(Log, []), Expression(TAG, []), Expression(""Loading drawable for cookie "" + value.assetCookie + "": "" + file, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Loading drawable for cookie "" + value.assetCookie + "": "" + file, [])  MethodCall(if (file.endsWith("".xml"")), [VariableReference(if (file, []), Expression("".xml""), [])])    VariableReference(if (file, [])    Expression("".xml""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(XmlResourceParser rp, []), Expression(loadXmlResourceParser(file, id, value.assetCookie, ""drawable""), [])])    VariableReference(XmlResourceParser rp, [])    Expression(loadXmlResourceParser(file, id, value.assetCookie, ""drawable""), [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromXml(this, rp), [])])    VariableReference(dr, [])    Expression(Drawable.createFromXml(this, rp), [])  MethodCall(rp.close(), [VariableReference(rp, []), Expression(, [])])    VariableReference(rp, [])    Expression(, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])])    VariableReference(NotFoundException rnf, [])    Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])  MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])])    VariableReference(rnf, [])    Expression(e, [])  Statement(throw rnf, [])  Statement(}, [])  Statement(} else {, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(InputStream is, []), Expression(mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_BUFFER), [])])    VariableReference(InputStream is, [])    Expression(mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_BUFFER), [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromResourceStream(this, value, is, file), [])])    VariableReference(dr, [])    Expression(Drawable.createFromResourceStream(this, value, is, file), [])  MethodCall(is.close(), [VariableReference(is, []), Expression(, [])])    VariableReference(is, [])    Expression(, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])])    VariableReference(NotFoundException rnf, [])    Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])  MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])])    VariableReference(rnf, [])    Expression(e, [])  Statement(throw rnf, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])])    VariableReference(if (dr !, [])    Expression(null) {, [])  MethodCall(dr.setChangingConfigurations(value.changingConfigurations), [VariableReference(dr, []), Expression(value.changingConfigurations, [])])    VariableReference(dr, [])    Expression(value.changingConfigurations, [])  AssignmentExpression(=, [VariableReference(cs, []), Expression(dr.getConstantState(), [])])    VariableReference(cs, [])    Expression(dr.getConstantState(), [])  AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])])    VariableReference(if (cs !, [])    Expression(null) {, [])  Statement(if (mPreloading) {, [])  MethodCall(sPreloadedDrawables.put(key, cs), [VariableReference(sPreloadedDrawables, []), Expression(key, []), Expression(cs, [])])    VariableReference(sPreloadedDrawables, [])    Expression(key, [])    Expression(cs, [])  Statement(} else {, [])  Statement(synchronized (mTmpValue) {, [])  MethodCall(// Integer.toHexString(key.intValue()), [VariableReference(// Integer, []), Expression(key.intValue(), [])])    VariableReference(// Integer, [])    Expression(key.intValue(), [])  Statement(// + "" in "" + this + "": "" + cs), [])  MethodCall(mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs)), [VariableReference(mDrawableCache, []), Expression(key, []), Expression(new WeakReference<Drawable.ConstantState>(cs), [])])    VariableReference(mDrawableCache, [])    Expression(key, [])    Expression(new WeakReference<Drawable.ConstantState>(cs), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return dr, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (TRACE_FOR_PRELOAD) {, []), Statement(// Log only framework resources, []), AssignmentExpression(=, [VariableReference(if ((id >>> 24), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final String name, []), Expression(getResourceName(id), [])]), AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null), [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final long key, []), Expression((((long) value.assetCookie) << 32) | value.data, [])]), AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(getCachedDrawable(key), [])]), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])]), Statement(return dr, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Drawable.ConstantState cs, []), Expression(sPreloadedDrawables.get(key), [])]), AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(cs.newDrawable(this), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(if (value.type >, []), Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(new ColorDrawable(value.data), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (value.string, []), Expression(, [])]), Statement(throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value), []), Statement(}, []), AssignmentExpression(=, [VariableReference(String file, []), Expression(value.string.toString(), [])]), Statement(if (DEBUG_LOAD), []), MethodCall(Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file), [VariableReference(Log, []), Expression(TAG, []), Expression(""Loading drawable for cookie "" + value.assetCookie + "": "" + file, [])]), MethodCall(if (file.endsWith("".xml"")), [VariableReference(if (file, []), Expression("".xml""), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(XmlResourceParser rp, []), Expression(loadXmlResourceParser(file, id, value.assetCookie, ""drawable""), [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromXml(this, rp), [])]), MethodCall(rp.close(), [VariableReference(rp, []), Expression(, [])]), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])]), MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])]), Statement(throw rnf, []), Statement(}, []), Statement(} else {, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(InputStream is, []), Expression(mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_STREAMING), [])]), AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromResourceStream(this, value, is, file, null), [])]), MethodCall(is.close(), [VariableReference(is, []), Expression(, [])]), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])]), MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])]), Statement(throw rnf, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])]), MethodCall(dr.setChangingConfigurations(value.changingConfigurations), [VariableReference(dr, []), Expression(value.changingConfigurations, [])]), AssignmentExpression(=, [VariableReference(cs, []), Expression(dr.getConstantState(), [])]), AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])]), Statement(if (mPreloading) {, []), MethodCall(sPreloadedDrawables.put(key, cs), [VariableReference(sPreloadedDrawables, []), Expression(key, []), Expression(cs, [])]), Statement(} else {, []), Statement(synchronized (mTmpValue) {, []), MethodCall(// Integer.toHexString(key.intValue()), [VariableReference(// Integer, []), Expression(key.intValue(), [])]), Statement(// + "" in "" + this + "": "" + cs), []), MethodCall(mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs)), [VariableReference(mDrawableCache, []), Expression(key, []), Expression(new WeakReference<Drawable.ConstantState>(cs), [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return dr, []), Statement(}, [])])  Statement({, [])  Statement(if (TRACE_FOR_PRELOAD) {, [])  Statement(// Log only framework resources, [])  AssignmentExpression(=, [VariableReference(if ((id >>> 24), []), Expression(, [])])    VariableReference(if ((id >>> 24), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final String name, []), Expression(getResourceName(id), [])])    VariableReference(final String name, [])    Expression(getResourceName(id), [])  AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null), [])])    VariableReference(if (name !, [])    Expression(null), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final long key, []), Expression((((long) value.assetCookie) << 32) | value.data, [])])    VariableReference(final long key, [])    Expression((((long) value.assetCookie) << 32) | value.data, [])  AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(getCachedDrawable(key), [])])    VariableReference(Drawable dr, [])    Expression(getCachedDrawable(key), [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])])    VariableReference(if (dr !, [])    Expression(null) {, [])  Statement(return dr, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Drawable.ConstantState cs, []), Expression(sPreloadedDrawables.get(key), [])])    VariableReference(Drawable.ConstantState cs, [])    Expression(sPreloadedDrawables.get(key), [])  AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])])    VariableReference(if (cs !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(cs.newDrawable(this), [])])    VariableReference(dr, [])    Expression(cs.newDrawable(this), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(if (value.type >, []), Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])])    VariableReference(if (value.type >, [])    Expression(TypedValue.TYPE_FIRST_COLOR_INT && value.type <, [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(new ColorDrawable(value.data), [])])    VariableReference(dr, [])    Expression(new ColorDrawable(value.data), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])])    VariableReference(if (dr, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (value.string, []), Expression(, [])])    VariableReference(if (value.string, [])    Expression(, [])  Statement(throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(String file, []), Expression(value.string.toString(), [])])    VariableReference(String file, [])    Expression(value.string.toString(), [])  Statement(if (DEBUG_LOAD), [])  MethodCall(Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file), [VariableReference(Log, []), Expression(TAG, []), Expression(""Loading drawable for cookie "" + value.assetCookie + "": "" + file, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Loading drawable for cookie "" + value.assetCookie + "": "" + file, [])  MethodCall(if (file.endsWith("".xml"")), [VariableReference(if (file, []), Expression("".xml""), [])])    VariableReference(if (file, [])    Expression("".xml""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(XmlResourceParser rp, []), Expression(loadXmlResourceParser(file, id, value.assetCookie, ""drawable""), [])])    VariableReference(XmlResourceParser rp, [])    Expression(loadXmlResourceParser(file, id, value.assetCookie, ""drawable""), [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromXml(this, rp), [])])    VariableReference(dr, [])    Expression(Drawable.createFromXml(this, rp), [])  MethodCall(rp.close(), [VariableReference(rp, []), Expression(, [])])    VariableReference(rp, [])    Expression(, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])])    VariableReference(NotFoundException rnf, [])    Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])  MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])])    VariableReference(rnf, [])    Expression(e, [])  Statement(throw rnf, [])  Statement(}, [])  Statement(} else {, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(InputStream is, []), Expression(mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_STREAMING), [])])    VariableReference(InputStream is, [])    Expression(mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_STREAMING), [])  AssignmentExpression(=, [VariableReference(dr, []), Expression(Drawable.createFromResourceStream(this, value, is, file, null), [])])    VariableReference(dr, [])    Expression(Drawable.createFromResourceStream(this, value, is, file, null), [])  MethodCall(is.close(), [VariableReference(is, []), Expression(, [])])    VariableReference(is, [])    Expression(, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(NotFoundException rnf, []), Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])])    VariableReference(NotFoundException rnf, [])    Expression(new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id)), [])  MethodCall(rnf.initCause(e), [VariableReference(rnf, []), Expression(e, [])])    VariableReference(rnf, [])    Expression(e, [])  Statement(throw rnf, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null) {, [])])    VariableReference(if (dr !, [])    Expression(null) {, [])  MethodCall(dr.setChangingConfigurations(value.changingConfigurations), [VariableReference(dr, []), Expression(value.changingConfigurations, [])])    VariableReference(dr, [])    Expression(value.changingConfigurations, [])  AssignmentExpression(=, [VariableReference(cs, []), Expression(dr.getConstantState(), [])])    VariableReference(cs, [])    Expression(dr.getConstantState(), [])  AssignmentExpression(=, [VariableReference(if (cs !, []), Expression(null) {, [])])    VariableReference(if (cs !, [])    Expression(null) {, [])  Statement(if (mPreloading) {, [])  MethodCall(sPreloadedDrawables.put(key, cs), [VariableReference(sPreloadedDrawables, []), Expression(key, []), Expression(cs, [])])    VariableReference(sPreloadedDrawables, [])    Expression(key, [])    Expression(cs, [])  Statement(} else {, [])  Statement(synchronized (mTmpValue) {, [])  MethodCall(// Integer.toHexString(key.intValue()), [VariableReference(// Integer, []), Expression(key.intValue(), [])])    VariableReference(// Integer, [])    Expression(key.intValue(), [])  Statement(// + "" in "" + this + "": "" + cs), [])  MethodCall(mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs)), [VariableReference(mDrawableCache, []), Expression(key, []), Expression(new WeakReference<Drawable.ConstantState>(cs), [])])    VariableReference(mDrawableCache, [])    Expression(key, [])    Expression(new WeakReference<Drawable.ConstantState>(cs), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return dr, [])  Statement(}, [])",1,"/*package*/
","/*package*/
",0,,,0,0,0,0,"1,2","1,3,4,5",1,"2,3,4",2,"The late version introduces changes in exception handling and control dependency. Specifically, the `catch` block now uses `AssetManager.ACCESS_STREAMING` instead of `AssetManager.ACCESS_BUFFER`, which affects how the resource is accessed. Additionally, some method calls and parameters have been modified (e.g., `cs.newDrawable(this)` instead of `cs.newDrawable()`, and `Drawable.createFromResourceStream(this, value, is, file, null)` instead of `Drawable.createFromResourceStream(this, value, is, file)`). Hence, the implementation contains changes in exception handling (2), control dependency (3), and other statements (4).","The exception handling changes (catch block modifications) and changes in control dependencies can lead to different exception handling paths. This could cause different exceptions to be thrown or handled differently, leading to a compatibility issue. Thus, the CI type is 2."
"<android.content.pm.ResolveInfo: void dump(Printer,String)>",4,5,"<android.content.pm.ResolveInfo: void dump(Printer,String)>","<android.content.pm.ResolveInfo: void dump(Printer,String)>",0,"{
    if (filter != null) {
        pw.println(prefix + ""Filter:"");
        filter.dump(pw, prefix + ""  "");
    } else {
        pw.println(prefix + ""Filter: null"");
    }
    pw.println(prefix + ""priority="" + priority + "" preferredOrder="" + preferredOrder + "" match=0x"" + Integer.toHexString(match) + "" specificIndex="" + specificIndex + "" isDefault="" + isDefault);
    pw.println(prefix + ""labelRes=0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel="" + nonLocalizedLabel + "" icon=0x"" + Integer.toHexString(icon));
    if (activityInfo != null) {
        pw.println(prefix + ""ActivityInfo:"");
        activityInfo.dump(pw, prefix + ""  "");
    } else if (serviceInfo != null) {
        pw.println(prefix + ""ServiceInfo:"");
    // TODO
    // serviceInfo.dump(pw, prefix + ""  "");
    }
}","{
    if (filter != null) {
        pw.println(prefix + ""Filter:"");
        filter.dump(pw, prefix + ""  "");
    }
    pw.println(prefix + ""priority="" + priority + "" preferredOrder="" + preferredOrder + "" match=0x"" + Integer.toHexString(match) + "" specificIndex="" + specificIndex + "" isDefault="" + isDefault);
    if (resolvePackageName != null) {
        pw.println(prefix + ""resolvePackageName="" + resolvePackageName);
    }
    if (labelRes != 0 || nonLocalizedLabel != null || icon != 0) {
        pw.println(prefix + ""labelRes=0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel="" + nonLocalizedLabel + "" icon=0x"" + Integer.toHexString(icon));
    }
    if (activityInfo != null) {
        pw.println(prefix + ""ActivityInfo:"");
        activityInfo.dump(pw, prefix + ""  "");
    } else if (serviceInfo != null) {
        pw.println(prefix + ""ServiceInfo:"");
        serviceInfo.dump(pw, prefix + ""  "");
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (filter !, []), Expression(null) {, [])]), MethodCall(pw.println(prefix + ""Filter:""), [VariableReference(pw, []), Expression(prefix + ""Filter:"", [])]), MethodCall(filter.dump(pw, prefix + ""  ""), [VariableReference(filter, []), Expression(pw, []), Expression(prefix + ""  "", [])]), Statement(} else {, []), MethodCall(pw.println(prefix + ""Filter: null""), [VariableReference(pw, []), Expression(prefix + ""Filter: null"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(pw.println(prefix + ""priority, []), Expression("" + priority + "" preferredOrder, [])]), AssignmentExpression(=, [VariableReference(pw.println(prefix + ""labelRes, []), Expression(0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel, [])]), AssignmentExpression(=, [VariableReference(if (activityInfo !, []), Expression(null) {, [])]), MethodCall(pw.println(prefix + ""ActivityInfo:""), [VariableReference(pw, []), Expression(prefix + ""ActivityInfo:"", [])]), MethodCall(activityInfo.dump(pw, prefix + ""  ""), [VariableReference(activityInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])]), AssignmentExpression(=, [VariableReference(} else if (serviceInfo !, []), Expression(null) {, [])]), MethodCall(pw.println(prefix + ""ServiceInfo:""), [VariableReference(pw, []), Expression(prefix + ""ServiceInfo:"", [])]), Statement(// TODO, []), MethodCall(// serviceInfo.dump(pw, prefix + ""  ""), [VariableReference(// serviceInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (filter !, []), Expression(null) {, [])])    VariableReference(if (filter !, [])    Expression(null) {, [])  MethodCall(pw.println(prefix + ""Filter:""), [VariableReference(pw, []), Expression(prefix + ""Filter:"", [])])    VariableReference(pw, [])    Expression(prefix + ""Filter:"", [])  MethodCall(filter.dump(pw, prefix + ""  ""), [VariableReference(filter, []), Expression(pw, []), Expression(prefix + ""  "", [])])    VariableReference(filter, [])    Expression(pw, [])    Expression(prefix + ""  "", [])  Statement(} else {, [])  MethodCall(pw.println(prefix + ""Filter: null""), [VariableReference(pw, []), Expression(prefix + ""Filter: null"", [])])    VariableReference(pw, [])    Expression(prefix + ""Filter: null"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(pw.println(prefix + ""priority, []), Expression("" + priority + "" preferredOrder, [])])    VariableReference(pw.println(prefix + ""priority, [])    Expression("" + priority + "" preferredOrder, [])  AssignmentExpression(=, [VariableReference(pw.println(prefix + ""labelRes, []), Expression(0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel, [])])    VariableReference(pw.println(prefix + ""labelRes, [])    Expression(0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel, [])  AssignmentExpression(=, [VariableReference(if (activityInfo !, []), Expression(null) {, [])])    VariableReference(if (activityInfo !, [])    Expression(null) {, [])  MethodCall(pw.println(prefix + ""ActivityInfo:""), [VariableReference(pw, []), Expression(prefix + ""ActivityInfo:"", [])])    VariableReference(pw, [])    Expression(prefix + ""ActivityInfo:"", [])  MethodCall(activityInfo.dump(pw, prefix + ""  ""), [VariableReference(activityInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])])    VariableReference(activityInfo, [])    Expression(pw, [])    Expression(prefix + ""  "", [])  AssignmentExpression(=, [VariableReference(} else if (serviceInfo !, []), Expression(null) {, [])])    VariableReference(} else if (serviceInfo !, [])    Expression(null) {, [])  MethodCall(pw.println(prefix + ""ServiceInfo:""), [VariableReference(pw, []), Expression(prefix + ""ServiceInfo:"", [])])    VariableReference(pw, [])    Expression(prefix + ""ServiceInfo:"", [])  Statement(// TODO, [])  MethodCall(// serviceInfo.dump(pw, prefix + ""  ""), [VariableReference(// serviceInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])])    VariableReference(// serviceInfo, [])    Expression(pw, [])    Expression(prefix + ""  "", [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (filter !, []), Expression(null) {, [])]), MethodCall(pw.println(prefix + ""Filter:""), [VariableReference(pw, []), Expression(prefix + ""Filter:"", [])]), MethodCall(filter.dump(pw, prefix + ""  ""), [VariableReference(filter, []), Expression(pw, []), Expression(prefix + ""  "", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(pw.println(prefix + ""priority, []), Expression("" + priority + "" preferredOrder, [])]), AssignmentExpression(=, [VariableReference(if (resolvePackageName !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(pw.println(prefix + ""resolvePackageName, []), Expression("" + resolvePackageName), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (labelRes !, []), Expression(0 || nonLocalizedLabel !, [])]), AssignmentExpression(=, [VariableReference(pw.println(prefix + ""labelRes, []), Expression(0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (activityInfo !, []), Expression(null) {, [])]), MethodCall(pw.println(prefix + ""ActivityInfo:""), [VariableReference(pw, []), Expression(prefix + ""ActivityInfo:"", [])]), MethodCall(activityInfo.dump(pw, prefix + ""  ""), [VariableReference(activityInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])]), AssignmentExpression(=, [VariableReference(} else if (serviceInfo !, []), Expression(null) {, [])]), MethodCall(pw.println(prefix + ""ServiceInfo:""), [VariableReference(pw, []), Expression(prefix + ""ServiceInfo:"", [])]), MethodCall(serviceInfo.dump(pw, prefix + ""  ""), [VariableReference(serviceInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (filter !, []), Expression(null) {, [])])    VariableReference(if (filter !, [])    Expression(null) {, [])  MethodCall(pw.println(prefix + ""Filter:""), [VariableReference(pw, []), Expression(prefix + ""Filter:"", [])])    VariableReference(pw, [])    Expression(prefix + ""Filter:"", [])  MethodCall(filter.dump(pw, prefix + ""  ""), [VariableReference(filter, []), Expression(pw, []), Expression(prefix + ""  "", [])])    VariableReference(filter, [])    Expression(pw, [])    Expression(prefix + ""  "", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(pw.println(prefix + ""priority, []), Expression("" + priority + "" preferredOrder, [])])    VariableReference(pw.println(prefix + ""priority, [])    Expression("" + priority + "" preferredOrder, [])  AssignmentExpression(=, [VariableReference(if (resolvePackageName !, []), Expression(null) {, [])])    VariableReference(if (resolvePackageName !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(pw.println(prefix + ""resolvePackageName, []), Expression("" + resolvePackageName), [])])    VariableReference(pw.println(prefix + ""resolvePackageName, [])    Expression("" + resolvePackageName), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (labelRes !, []), Expression(0 || nonLocalizedLabel !, [])])    VariableReference(if (labelRes !, [])    Expression(0 || nonLocalizedLabel !, [])  AssignmentExpression(=, [VariableReference(pw.println(prefix + ""labelRes, []), Expression(0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel, [])])    VariableReference(pw.println(prefix + ""labelRes, [])    Expression(0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (activityInfo !, []), Expression(null) {, [])])    VariableReference(if (activityInfo !, [])    Expression(null) {, [])  MethodCall(pw.println(prefix + ""ActivityInfo:""), [VariableReference(pw, []), Expression(prefix + ""ActivityInfo:"", [])])    VariableReference(pw, [])    Expression(prefix + ""ActivityInfo:"", [])  MethodCall(activityInfo.dump(pw, prefix + ""  ""), [VariableReference(activityInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])])    VariableReference(activityInfo, [])    Expression(pw, [])    Expression(prefix + ""  "", [])  AssignmentExpression(=, [VariableReference(} else if (serviceInfo !, []), Expression(null) {, [])])    VariableReference(} else if (serviceInfo !, [])    Expression(null) {, [])  MethodCall(pw.println(prefix + ""ServiceInfo:""), [VariableReference(pw, []), Expression(prefix + ""ServiceInfo:"", [])])    VariableReference(pw, [])    Expression(prefix + ""ServiceInfo:"", [])  MethodCall(serviceInfo.dump(pw, prefix + ""  ""), [VariableReference(serviceInfo, []), Expression(pw, []), Expression(prefix + ""  "", [])])    VariableReference(serviceInfo, [])    Expression(pw, [])    Expression(prefix + ""  "", [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,0,0,0,1,"2,4",0,"3,4",1,"The code changes involve control dependency changes (the addition and removal of 'if' conditions) and other statement changes (modified printing and dumping logic for variables such as `resolvePackageName`, `labelRes`, `serviceInfo`, and others). Therefore, the change types are 3 and 4.","The conditions and statements added or removed may influence the output or behavior of the method, potentially leading to different return values or states when executed. Therefore, a CI caused by potential different return values or types is identified, and the CI type is 1."
<android.webkit.WebView: void clearMatches()>,4,5,<android.webkit.WebView: void clearMatches()>,<android.webkit.WebView: void clearMatches()>,0,"{
    mFindIsUp = false;
    nativeSetFindIsDown();
    // Now that the dialog has been removed, ensure that we scroll to a
    // location that is not beyond the end of the page.
    pinScrollTo(mScrollX, mScrollY, false, 0);
    invalidate();
}","{
    if (mFindIsUp) {
        recordNewContentSize(mContentWidth, mContentHeight - mFindHeight, false);
        mFindIsUp = false;
    }
    nativeSetFindIsDown();
    // Now that the dialog has been removed, ensure that we scroll to a
    // location that is not beyond the end of the page.
    pinScrollTo(mScrollX, mScrollY, false, 0);
    invalidate();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mFindIsUp, []), Expression(false, [])]), Statement(nativeSetFindIsDown(), []), Statement(// Now that the dialog has been removed, ensure that we scroll to a, []), Statement(// location that is not beyond the end of the page., []), Statement(pinScrollTo(mScrollX, mScrollY, false, 0), []), Statement(invalidate(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mFindIsUp, []), Expression(false, [])])    VariableReference(mFindIsUp, [])    Expression(false, [])  Statement(nativeSetFindIsDown(), [])  Statement(// Now that the dialog has been removed, ensure that we scroll to a, [])  Statement(// location that is not beyond the end of the page., [])  Statement(pinScrollTo(mScrollX, mScrollY, false, 0), [])  Statement(invalidate(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (mFindIsUp) {, []), Statement(recordNewContentSize(mContentWidth, mContentHeight - mFindHeight, false), []), AssignmentExpression(=, [VariableReference(mFindIsUp, []), Expression(false, [])]), Statement(}, []), Statement(nativeSetFindIsDown(), []), Statement(// Now that the dialog has been removed, ensure that we scroll to a, []), Statement(// location that is not beyond the end of the page., []), Statement(pinScrollTo(mScrollX, mScrollY, false, 0), []), Statement(invalidate(), []), Statement(}, [])])  Statement({, [])  Statement(if (mFindIsUp) {, [])  Statement(recordNewContentSize(mContentWidth, mContentHeight - mFindHeight, false), [])  AssignmentExpression(=, [VariableReference(mFindIsUp, []), Expression(false, [])])    VariableReference(mFindIsUp, [])    Expression(false, [])  Statement(}, [])  Statement(nativeSetFindIsDown(), [])  Statement(// Now that the dialog has been removed, ensure that we scroll to a, [])  Statement(// location that is not beyond the end of the page., [])  Statement(pinScrollTo(mScrollX, mScrollY, false, 0), [])  Statement(invalidate(), [])  Statement(}, [])",1,"/*
     * Clear the highlighting surrounding text matches created by findAll.
     */
","/*
     * Clear the highlighting surrounding text matches created by findAll.
     */
",0,,,0,0,0,0,1,"2,4",0,"3,4",0,"A control dependency change is introduced with an `if` statement checking the value of `mFindIsUp`. Additionally, a new call to `recordNewContentSize` is added within this conditional block. Therefore, the code change type is 3,4.","The added control dependency with the `if` statement and the call to `recordNewContentSize` do not affect the exceptions thrown or the return type since the method returns `void` and no new exception handling is introduced. Thus, there are no compatibility issues. The CI type is 0."
<android.widget.VideoView: boolean isPlaying()>,4,5,<android.widget.VideoView: boolean isPlaying()>,<android.widget.VideoView: boolean isPlaying()>,0,"{
    if (mMediaPlayer != null && mIsPrepared) {
        return mMediaPlayer.isPlaying();
    }
    return false;
}","{
    return isInPlaybackState() && mMediaPlayer.isPlaying();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mMediaPlayer !, []), Expression(null && mIsPrepared) {, [])]), MethodCall(return mMediaPlayer.isPlaying(), [VariableReference(return mMediaPlayer, []), Expression(, [])]), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mMediaPlayer !, []), Expression(null && mIsPrepared) {, [])])    VariableReference(if (mMediaPlayer !, [])    Expression(null && mIsPrepared) {, [])  MethodCall(return mMediaPlayer.isPlaying(), [VariableReference(return mMediaPlayer, []), Expression(, [])])    VariableReference(return mMediaPlayer, [])    Expression(, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return isInPlaybackState() && mMediaPlayer.isPlaying(), [VariableReference(return isInPlaybackState() && mMediaPlayer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return isInPlaybackState() && mMediaPlayer.isPlaying(), [VariableReference(return isInPlaybackState() && mMediaPlayer, []), Expression(, [])])    VariableReference(return isInPlaybackState() && mMediaPlayer, [])    Expression(, [])  Statement(}, [])",1,,,0,,,0,0,0,0,1,"1,2",1,"1,3,5",1,"The implementation of the method has changed significantly. The early version checks if `mMediaPlayer` is not null and `mIsPrepared` is true, and then returns `mMediaPlayer.isPlaying()` or `false` otherwise. The late version directly returns `isInPlaybackState() && mMediaPlayer.isPlaying()`. The changes involve the introduction of a new method `isInPlaybackState()` and the removal of the explicit `mIsPrepared` check. The change types are 1,3,5.","The new control dependency introduced through `isInPlaybackState()` could potentially cause the method to return different values compared to the previous version, resulting in a CI type of 1."
<android.view.Surface: String toString()>,4,5,<android.view.Surface: String toString()>,<android.view.Surface: String toString()>,0,"{
    return ""Surface(native-token="" + mSurface + "")"";
}","{
    return ""Surface(native-token="" + mSurfaceControl + "")"";
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""Surface(native-token, []), Expression("" + mSurface + "")"", [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""Surface(native-token, []), Expression("" + mSurface + "")"", [])])    VariableReference(return ""Surface(native-token, [])    Expression("" + mSurface + "")"", [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""Surface(native-token, []), Expression("" + mSurfaceControl + "")"", [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""Surface(native-token, []), Expression("" + mSurfaceControl + "")"", [])])    VariableReference(return ""Surface(native-token, [])    Expression("" + mSurfaceControl + "")"", [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,1,1,"1,4",1,"The return statement has changed from ""Surface(native-token="" + mSurface + "")"" to ""Surface(native-token="" + mSurfaceControl + ""), so the code change type is 1. Additionally, the underlying variable in the return statement has changed from mSurface to mSurfaceControl, meaning there is another statement change not related to control, exceptions, or dependent APIs, thus type 4 is also applicable.","The change in the return statement can potentially lead to different return values (i.e., the string representation will be different), so the CI type is 1."
<android.webkit.BrowserFrame: void didFirstLayout()>,4,5,<android.webkit.BrowserFrame: void didFirstLayout()>,<android.webkit.BrowserFrame: void didFirstLayout()>,0,"{
    if (!mFirstLayoutDone) {
        mFirstLayoutDone = true;
        // ensure {@link WebViewCore#webkitDraw} is called as we were
        // blocking the update in {@link #loadStarted}
        mWebViewCore.contentDraw();
    }
    mWebViewCore.mEndScaleZoom = true;
}","{
    if (!mFirstLayoutDone) {
        mFirstLayoutDone = true;
        // ensure {@link WebViewCore#webkitDraw} is called as we were
        // blocking the update in {@link #loadStarted}
        mWebViewCore.contentDraw();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!mFirstLayoutDone) {, []), AssignmentExpression(=, [VariableReference(mFirstLayoutDone, []), Expression(true, [])]), Statement(// ensure {@link WebViewCore#webkitDraw} is called as we were, []), Statement(// blocking the update in {@link #loadStarted}, []), MethodCall(mWebViewCore.contentDraw(), [VariableReference(mWebViewCore, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mWebViewCore.mEndScaleZoom, []), Expression(true, [])]), Statement(}, [])])  Statement({, [])  Statement(if (!mFirstLayoutDone) {, [])  AssignmentExpression(=, [VariableReference(mFirstLayoutDone, []), Expression(true, [])])    VariableReference(mFirstLayoutDone, [])    Expression(true, [])  Statement(// ensure {@link WebViewCore#webkitDraw} is called as we were, [])  Statement(// blocking the update in {@link #loadStarted}, [])  MethodCall(mWebViewCore.contentDraw(), [VariableReference(mWebViewCore, []), Expression(, [])])    VariableReference(mWebViewCore, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mWebViewCore.mEndScaleZoom, []), Expression(true, [])])    VariableReference(mWebViewCore.mEndScaleZoom, [])    Expression(true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!mFirstLayoutDone) {, []), AssignmentExpression(=, [VariableReference(mFirstLayoutDone, []), Expression(true, [])]), Statement(// ensure {@link WebViewCore#webkitDraw} is called as we were, []), Statement(// blocking the update in {@link #loadStarted}, []), MethodCall(mWebViewCore.contentDraw(), [VariableReference(mWebViewCore, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!mFirstLayoutDone) {, [])  AssignmentExpression(=, [VariableReference(mFirstLayoutDone, []), Expression(true, [])])    VariableReference(mFirstLayoutDone, [])    Expression(true, [])  Statement(// ensure {@link WebViewCore#webkitDraw} is called as we were, [])  Statement(// blocking the update in {@link #loadStarted}, [])  MethodCall(mWebViewCore.contentDraw(), [VariableReference(mWebViewCore, []), Expression(, [])])    VariableReference(mWebViewCore, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/* package */
","/* package */
",0,,,0,0,0,0,1,"3,4",0,4,0,"The assignment statement `mWebViewCore.mEndScaleZoom = true;` has been removed in the late version. This falls under ""Other statement changed"" as it does not directly involve return statements, exception handling, or control dependency.","The removed statement `mWebViewCore.mEndScaleZoom = true;` might affect internal state or behavior, but it does not directly cause a different return value or exception handling in the API itself. Hence, there is no direct compatibility issue."
<android.hardware.Camera.Parameters: void setPictureFormat(int)>,4,5,<android.hardware.Camera.Parameters: void setPictureFormat(int)>,<android.hardware.Camera.Parameters: void setPictureFormat(int)>,0,"{
    String s = cameraFormatForPixelFormat(pixel_format);
    if (s == null) {
        throw new IllegalArgumentException();
    }
    set(""picture-format"", s);
}","{
    String s = cameraFormatForPixelFormat(pixel_format);
    if (s == null) {
        throw new IllegalArgumentException(""Invalid pixel_format="" + pixel_format);
    }
    set(KEY_PICTURE_FORMAT, s);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String s, []), Expression(cameraFormatForPixelFormat(pixel_format), [])]), AssignmentExpression(=, [VariableReference(if (s, []), Expression(, [])]), Statement(throw new IllegalArgumentException(), []), Statement(}, []), Statement(set(""picture-format"", s), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String s, []), Expression(cameraFormatForPixelFormat(pixel_format), [])])    VariableReference(String s, [])    Expression(cameraFormatForPixelFormat(pixel_format), [])  AssignmentExpression(=, [VariableReference(if (s, []), Expression(, [])])    VariableReference(if (s, [])    Expression(, [])  Statement(throw new IllegalArgumentException(), [])  Statement(}, [])  Statement(set(""picture-format"", s), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String s, []), Expression(cameraFormatForPixelFormat(pixel_format), [])]), AssignmentExpression(=, [VariableReference(if (s, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(throw new IllegalArgumentException(""Invalid pixel_format, []), Expression("" + pixel_format), [])]), Statement(}, []), Statement(set(KEY_PICTURE_FORMAT, s), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String s, []), Expression(cameraFormatForPixelFormat(pixel_format), [])])    VariableReference(String s, [])    Expression(cameraFormatForPixelFormat(pixel_format), [])  AssignmentExpression(=, [VariableReference(if (s, []), Expression(, [])])    VariableReference(if (s, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(throw new IllegalArgumentException(""Invalid pixel_format, []), Expression("" + pixel_format), [])])    VariableReference(throw new IllegalArgumentException(""Invalid pixel_format, [])    Expression("" + pixel_format), [])  Statement(}, [])  Statement(set(KEY_PICTURE_FORMAT, s), [])  Statement(}, [])",1,"/**
 * Sets the image format for pictures.
 *
 * @param pixel_format the desired picture format
 * (<var>PixelFormat.YCbCr_420_SP</var>,
 * <var>PixelFormat.RGB_565</var>, or
 * <var>PixelFormat.JPEG</var>)
 * @see android.graphics.PixelFormat
 */
","/**
 * Sets the image format for pictures.
 *
 * @param pixel_format the desired picture format
 * (<var>PixelFormat.YCbCr_420_SP (NV21)</var>,
 * <var>PixelFormat.RGB_565</var>, or
 * <var>PixelFormat.JPEG</var>)
 * @see android.graphics.PixelFormat
 */
",1,,,0,0,0,0,"1,2","2,3,4,5",2,"2,4",2,"The statement in the `if` block when `s == null` has changed from `throw new IllegalArgumentException()` to `throw new IllegalArgumentException(""Invalid pixel_format="" + pixel_format);`, adding a custom error message. Additionally, the parameter to the `set` method changed from `""picture-format""` to `KEY_PICTURE_FORMAT`, which is a minor change in the usage of string constants.","The change in the exception throwing statement could lead to different exception behaviors/output (more detailed message in the late version), and the CI type is 2."
<android.hardware.Camera.Parameters: Size getPictureSize()>,4,5,<android.hardware.Camera.Parameters: Size getPictureSize()>,<android.hardware.Camera.Parameters: Size getPictureSize()>,0,"{
    String pair = get(""picture-size"");
    if (pair == null)
        return null;
    String[] dims = pair.split(""x"");
    if (dims.length != 2)
        return null;
    return new Size(Integer.parseInt(dims[0]), Integer.parseInt(dims[1]));
}","{
    String pair = get(KEY_PICTURE_SIZE);
    return strToSize(pair);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String pair, []), Expression(get(""picture-size""), [])]), AssignmentExpression(=, [VariableReference(if (pair, []), Expression(, [])]), Statement(return null, []), AssignmentExpression(=, [VariableReference(String[] dims, []), Expression(pair.split(""x""), [])]), AssignmentExpression(=, [VariableReference(if (dims.length !, []), Expression(2), [])]), Statement(return null, []), MethodCall(return new Size(Integer.parseInt(dims[0]), Integer.parseInt(dims[1])), [VariableReference(return new Size(Integer, []), Expression(dims[0]), []), Expression(Integer.parseInt(dims[1]), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String pair, []), Expression(get(""picture-size""), [])])    VariableReference(String pair, [])    Expression(get(""picture-size""), [])  AssignmentExpression(=, [VariableReference(if (pair, []), Expression(, [])])    VariableReference(if (pair, [])    Expression(, [])  Statement(return null, [])  AssignmentExpression(=, [VariableReference(String[] dims, []), Expression(pair.split(""x""), [])])    VariableReference(String[] dims, [])    Expression(pair.split(""x""), [])  AssignmentExpression(=, [VariableReference(if (dims.length !, []), Expression(2), [])])    VariableReference(if (dims.length !, [])    Expression(2), [])  Statement(return null, [])  MethodCall(return new Size(Integer.parseInt(dims[0]), Integer.parseInt(dims[1])), [VariableReference(return new Size(Integer, []), Expression(dims[0]), []), Expression(Integer.parseInt(dims[1]), [])])    VariableReference(return new Size(Integer, [])    Expression(dims[0]), [])    Expression(Integer.parseInt(dims[1]), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String pair, []), Expression(get(KEY_PICTURE_SIZE), [])]), Statement(return strToSize(pair), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String pair, []), Expression(get(KEY_PICTURE_SIZE), [])])    VariableReference(String pair, [])    Expression(get(KEY_PICTURE_SIZE), [])  Statement(return strToSize(pair), [])  Statement(}, [])",1,"/**
 * Returns the dimension setting for pictures.
 *
 * @return a Size object with the height and width setting
 * for pictures
 */
","/**
 * Returns the dimension setting for pictures.
 *
 * @return a Size object with the height and width setting
 * for pictures
 */
",0,,,0,0,0,0,1,"1,3,4",1,"1,5",1,"The return statement has changed from directly parsing the size from a string to calling an external method `strToSize` that does the parsing. The key used for fetching the picture size has also changed from a hardcoded string ""picture-size"" to a constant `KEY_PICTURE_SIZE`. Therefore, the code change type is 1,5.","The change in the return statement and the key used to fetch the picture size may result in different return values, leading to potential compatibility issues. Therefore, the CI type is 1."
<android.animation.ValueAnimator: void end()>,15,16,<android.animation.ValueAnimator: void end()>,<android.animation.ValueAnimator: void end()>,0,"{
    if (!sAnimations.get().contains(this) && !sPendingAnimations.get().contains(this)) {
        // Special case if the animation has not yet started; get it ready for ending
        mStartedDelay = false;
        startAnimation();
    } else if (!mInitialized) {
        initAnimation();
    }
    // was supposed to repeat an odd number of times
    if (mRepeatCount > 0 && (mRepeatCount & 0x01) == 1) {
        animateValue(0f);
    } else {
        animateValue(1f);
    }
    endAnimation();
}","{
    AnimationHandler handler = getOrCreateAnimationHandler();
    if (!handler.mAnimations.contains(this) && !handler.mPendingAnimations.contains(this)) {
        // Special case if the animation has not yet started; get it ready for ending
        mStartedDelay = false;
        startAnimation(handler);
        mStarted = true;
    } else if (!mInitialized) {
        initAnimation();
    }
    // was supposed to repeat an odd number of times
    if (mRepeatCount > 0 && (mRepeatCount & 0x01) == 1) {
        animateValue(0f);
    } else {
        animateValue(1f);
    }
    endAnimation(handler);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(if (!sAnimations.get().contains(this) && !sPendingAnimations.get().contains(this)), [VariableReference(if (!sAnimations, []), Expression().contains(this) && !sPendingAnimations.get().contains(this), [])]), Statement(// Special case if the animation has not yet started, []), Statement(get it ready for ending, []), AssignmentExpression(=, [VariableReference(mStartedDelay, []), Expression(false, [])]), Statement(startAnimation(), []), Statement(} else if (!mInitialized) {, []), Statement(initAnimation(), []), Statement(}, []), Statement(// was supposed to repeat an odd number of times, []), AssignmentExpression(=, [VariableReference(if (mRepeatCount > 0 && (mRepeatCount & 0x01), []), Expression(, [])]), Statement(animateValue(0f), []), Statement(} else {, []), Statement(animateValue(1f), []), Statement(}, []), Statement(endAnimation(), []), Statement(}, [])])  Statement({, [])  MethodCall(if (!sAnimations.get().contains(this) && !sPendingAnimations.get().contains(this)), [VariableReference(if (!sAnimations, []), Expression().contains(this) && !sPendingAnimations.get().contains(this), [])])    VariableReference(if (!sAnimations, [])    Expression().contains(this) && !sPendingAnimations.get().contains(this), [])  Statement(// Special case if the animation has not yet started, [])  Statement(get it ready for ending, [])  AssignmentExpression(=, [VariableReference(mStartedDelay, []), Expression(false, [])])    VariableReference(mStartedDelay, [])    Expression(false, [])  Statement(startAnimation(), [])  Statement(} else if (!mInitialized) {, [])  Statement(initAnimation(), [])  Statement(}, [])  Statement(// was supposed to repeat an odd number of times, [])  AssignmentExpression(=, [VariableReference(if (mRepeatCount > 0 && (mRepeatCount & 0x01), []), Expression(, [])])    VariableReference(if (mRepeatCount > 0 && (mRepeatCount & 0x01), [])    Expression(, [])  Statement(animateValue(0f), [])  Statement(} else {, [])  Statement(animateValue(1f), [])  Statement(}, [])  Statement(endAnimation(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(AnimationHandler handler, []), Expression(getOrCreateAnimationHandler(), [])]), Statement(// Special case if the animation has not yet started, []), Statement(get it ready for ending, []), AssignmentExpression(=, [VariableReference(mStartedDelay, []), Expression(false, [])]), Statement(startAnimation(handler), []), AssignmentExpression(=, [VariableReference(mStarted, []), Expression(true, [])]), Statement(} else if (!mInitialized) {, []), Statement(initAnimation(), []), Statement(}, []), Statement(// was supposed to repeat an odd number of times, []), AssignmentExpression(=, [VariableReference(if (mRepeatCount > 0 && (mRepeatCount & 0x01), []), Expression(, [])]), Statement(animateValue(0f), []), Statement(} else {, []), Statement(animateValue(1f), []), Statement(}, []), Statement(endAnimation(handler), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(AnimationHandler handler, []), Expression(getOrCreateAnimationHandler(), [])])    VariableReference(AnimationHandler handler, [])    Expression(getOrCreateAnimationHandler(), [])  Statement(// Special case if the animation has not yet started, [])  Statement(get it ready for ending, [])  AssignmentExpression(=, [VariableReference(mStartedDelay, []), Expression(false, [])])    VariableReference(mStartedDelay, [])    Expression(false, [])  Statement(startAnimation(handler), [])  AssignmentExpression(=, [VariableReference(mStarted, []), Expression(true, [])])    VariableReference(mStarted, [])    Expression(true, [])  Statement(} else if (!mInitialized) {, [])  Statement(initAnimation(), [])  Statement(}, [])  Statement(// was supposed to repeat an odd number of times, [])  AssignmentExpression(=, [VariableReference(if (mRepeatCount > 0 && (mRepeatCount & 0x01), []), Expression(, [])])    VariableReference(if (mRepeatCount > 0 && (mRepeatCount & 0x01), [])    Expression(, [])  Statement(animateValue(0f), [])  Statement(} else {, [])  Statement(animateValue(1f), [])  Statement(}, [])  Statement(endAnimation(handler), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,"1,2","3,4",0,"3,4,5",0,There are several changes in the late version:,- A dependent API (`startAnimation` and `endAnimation`) has its parameters changed (change type 5).
<android.app.Activity: void onConfigurationChanged(Configuration)>,15,16,<android.app.Activity: void onConfigurationChanged(Configuration)>,<android.app.Activity: void onConfigurationChanged(Configuration)>,0,"{
    mCalled = true;
    mFragments.dispatchConfigurationChanged(newConfig);
    if (mWindow != null) {
        // Pass the configuration changed event to the window
        mWindow.onConfigurationChanged(newConfig);
    }
    if (mActionBar != null) {
        // Do this last; the action bar will need to access
        // view changes from above.
        mActionBar.onConfigurationChanged(newConfig);
    }
}","{
    if (DEBUG_LIFECYCLE)
        Slog.v(TAG, ""onConfigurationChanged "" + this + "": "" + newConfig);
    mCalled = true;
    mFragments.dispatchConfigurationChanged(newConfig);
    if (mWindow != null) {
        // Pass the configuration changed event to the window
        mWindow.onConfigurationChanged(newConfig);
    }
    if (mActionBar != null) {
        // Do this last; the action bar will need to access
        // view changes from above.
        mActionBar.onConfigurationChanged(newConfig);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])]), MethodCall(mFragments.dispatchConfigurationChanged(newConfig), [VariableReference(mFragments, []), Expression(newConfig, [])]), AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])]), Statement(// Pass the configuration changed event to the window, []), MethodCall(mWindow.onConfigurationChanged(newConfig), [VariableReference(mWindow, []), Expression(newConfig, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mActionBar !, []), Expression(null) {, [])]), Statement(// Do this last, []), Statement(the action bar will need to access, []), Statement(// view changes from above., []), MethodCall(mActionBar.onConfigurationChanged(newConfig), [VariableReference(mActionBar, []), Expression(newConfig, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])])    VariableReference(mCalled, [])    Expression(true, [])  MethodCall(mFragments.dispatchConfigurationChanged(newConfig), [VariableReference(mFragments, []), Expression(newConfig, [])])    VariableReference(mFragments, [])    Expression(newConfig, [])  AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])])    VariableReference(if (mWindow !, [])    Expression(null) {, [])  Statement(// Pass the configuration changed event to the window, [])  MethodCall(mWindow.onConfigurationChanged(newConfig), [VariableReference(mWindow, []), Expression(newConfig, [])])    VariableReference(mWindow, [])    Expression(newConfig, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mActionBar !, []), Expression(null) {, [])])    VariableReference(if (mActionBar !, [])    Expression(null) {, [])  Statement(// Do this last, [])  Statement(the action bar will need to access, [])  Statement(// view changes from above., [])  MethodCall(mActionBar.onConfigurationChanged(newConfig), [VariableReference(mActionBar, []), Expression(newConfig, [])])    VariableReference(mActionBar, [])    Expression(newConfig, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG_LIFECYCLE), []), MethodCall(Slog.v(TAG, ""onConfigurationChanged "" + this + "": "" + newConfig), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onConfigurationChanged "" + this + "": "" + newConfig, [])]), AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])]), MethodCall(mFragments.dispatchConfigurationChanged(newConfig), [VariableReference(mFragments, []), Expression(newConfig, [])]), AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])]), Statement(// Pass the configuration changed event to the window, []), MethodCall(mWindow.onConfigurationChanged(newConfig), [VariableReference(mWindow, []), Expression(newConfig, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mActionBar !, []), Expression(null) {, [])]), Statement(// Do this last, []), Statement(the action bar will need to access, []), Statement(// view changes from above., []), MethodCall(mActionBar.onConfigurationChanged(newConfig), [VariableReference(mActionBar, []), Expression(newConfig, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG_LIFECYCLE), [])  MethodCall(Slog.v(TAG, ""onConfigurationChanged "" + this + "": "" + newConfig), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onConfigurationChanged "" + this + "": "" + newConfig, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""onConfigurationChanged "" + this + "": "" + newConfig, [])  AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])])    VariableReference(mCalled, [])    Expression(true, [])  MethodCall(mFragments.dispatchConfigurationChanged(newConfig), [VariableReference(mFragments, []), Expression(newConfig, [])])    VariableReference(mFragments, [])    Expression(newConfig, [])  AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])])    VariableReference(if (mWindow !, [])    Expression(null) {, [])  Statement(// Pass the configuration changed event to the window, [])  MethodCall(mWindow.onConfigurationChanged(newConfig), [VariableReference(mWindow, []), Expression(newConfig, [])])    VariableReference(mWindow, [])    Expression(newConfig, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mActionBar !, []), Expression(null) {, [])])    VariableReference(if (mActionBar !, [])    Expression(null) {, [])  Statement(// Do this last, [])  Statement(the action bar will need to access, [])  Statement(// view changes from above., [])  MethodCall(mActionBar.onConfigurationChanged(newConfig), [VariableReference(mActionBar, []), Expression(newConfig, [])])    VariableReference(mActionBar, [])    Expression(newConfig, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Called by the system when the device configuration changes while your
 * activity is running.  Note that this will <em>only</em> be called if
 * you have selected configurations you would like to handle with the
 * {@link android.R.attr#configChanges} attribute in your manifest.  If
 * any configuration change occurs that is not selected to be reported
 * by that attribute, then instead of reporting it the system will stop
 * and restart the activity (to have it launched with the new
 * configuration).
 *
 * <p>At the time that this function has been called, your Resources
 * object will have been updated to return resource values matching the
 * new configuration.
 *
 * @param newConfig The new device configuration.
 */
","/**
 * Called by the system when the device configuration changes while your
 * activity is running.  Note that this will <em>only</em> be called if
 * you have selected configurations you would like to handle with the
 * {@link android.R.attr#configChanges} attribute in your manifest.  If
 * any configuration change occurs that is not selected to be reported
 * by that attribute, then instead of reporting it the system will stop
 * and restart the activity (to have it launched with the new
 * configuration).
 *
 * <p>At the time that this function has been called, your Resources
 * object will have been updated to return resource values matching the
 * new configuration.
 *
 * @param newConfig The new device configuration.
 */
",0,,,0,0,0,0,1,"3,4",0,4,0,"A logging statement `if (DEBUG_LIFECYCLE) Slog.v(TAG, ""onConfigurationChanged "" + this + "": "" + newConfig);` was added before the existing implementation starts. This change does not affect the return value or exception handling directly. Hence, the change type is 4.","The added logging statement does not cause any change to the functionality, it only logs information when DEBUG_LIFECYCLE is true. Thereby, no potential compatibility issues (CI) arise from this change, so the CI type is 0."
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>,15,16,<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>,<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>,0,"{
    mBuiltInZoomControls = enabled;
    mWebView.updateMultiTouchSupport(mContext);
}","{
    throw new MustOverrideException();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mBuiltInZoomControls, []), Expression(enabled, [])]), MethodCall(mWebView.updateMultiTouchSupport(mContext), [VariableReference(mWebView, []), Expression(mContext, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mBuiltInZoomControls, []), Expression(enabled, [])])    VariableReference(mBuiltInZoomControls, [])    Expression(enabled, [])  MethodCall(mWebView.updateMultiTouchSupport(mContext), [VariableReference(mWebView, []), Expression(mContext, [])])    VariableReference(mWebView, [])    Expression(mContext, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new MustOverrideException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new MustOverrideException(), [])  Statement(}, [])",1,"/**
 * Sets whether the zoom mechanism built into WebView is used.
 */
","// {@link WebView#getZoomControls}, which is now hidden.
",1,,,0,0,0,0,1,"2,4",2,2,2,"The early implementation updates a class variable and calls a method, while the late implementation always throws an exception (`MustOverrideException`). This represents a change in exception handling, specifically the introduction of a new exception being thrown.","The introduction of a new exception (`MustOverrideException`) in the late version means that the method will behave differently, potentially causing runtime errors where none existed before. Thus, the CI type is 2."
<android.view.MenuInflater.InflatedOnMenuItemClickListener: boolean onMenuItemClick(MenuItem)>,15,16,<android.view.MenuInflater.InflatedOnMenuItemClickListener: boolean onMenuItemClick(MenuItem)>,<android.view.MenuInflater.InflatedOnMenuItemClickListener: boolean onMenuItemClick(MenuItem)>,0,"{
    try {
        if (mMethod.getReturnType() == Boolean.TYPE) {
            return (Boolean) mMethod.invoke(mContext, item);
        } else {
            mMethod.invoke(mContext, item);
            return true;
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}","{
    try {
        if (mMethod.getReturnType() == Boolean.TYPE) {
            return (Boolean) mMethod.invoke(mRealOwner, item);
        } else {
            mMethod.invoke(mRealOwner, item);
            return true;
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mMethod.getReturnType(), []), Expression(, [])]), MethodCall(return (Boolean) mMethod.invoke(mContext, item), [VariableReference(return (Boolean) mMethod, []), Expression(mContext, []), Expression(item, [])]), Statement(} else {, []), MethodCall(mMethod.invoke(mContext, item), [VariableReference(mMethod, []), Expression(mContext, []), Expression(item, [])]), Statement(return true, []), Statement(}, []), Statement(} catch (Exception e) {, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mMethod.getReturnType(), []), Expression(, [])])    VariableReference(if (mMethod.getReturnType(), [])    Expression(, [])  MethodCall(return (Boolean) mMethod.invoke(mContext, item), [VariableReference(return (Boolean) mMethod, []), Expression(mContext, []), Expression(item, [])])    VariableReference(return (Boolean) mMethod, [])    Expression(mContext, [])    Expression(item, [])  Statement(} else {, [])  MethodCall(mMethod.invoke(mContext, item), [VariableReference(mMethod, []), Expression(mContext, []), Expression(item, [])])    VariableReference(mMethod, [])    Expression(mContext, [])    Expression(item, [])  Statement(return true, [])  Statement(}, [])  Statement(} catch (Exception e) {, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mMethod.getReturnType(), []), Expression(, [])]), MethodCall(return (Boolean) mMethod.invoke(mRealOwner, item), [VariableReference(return (Boolean) mMethod, []), Expression(mRealOwner, []), Expression(item, [])]), Statement(} else {, []), MethodCall(mMethod.invoke(mRealOwner, item), [VariableReference(mMethod, []), Expression(mRealOwner, []), Expression(item, [])]), Statement(return true, []), Statement(}, []), Statement(} catch (Exception e) {, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mMethod.getReturnType(), []), Expression(, [])])    VariableReference(if (mMethod.getReturnType(), [])    Expression(, [])  MethodCall(return (Boolean) mMethod.invoke(mRealOwner, item), [VariableReference(return (Boolean) mMethod, []), Expression(mRealOwner, []), Expression(item, [])])    VariableReference(return (Boolean) mMethod, [])    Expression(mRealOwner, [])    Expression(item, [])  Statement(} else {, [])  MethodCall(mMethod.invoke(mRealOwner, item), [VariableReference(mMethod, []), Expression(mRealOwner, []), Expression(item, [])])    VariableReference(mMethod, [])    Expression(mRealOwner, [])    Expression(item, [])  Statement(return true, [])  Statement(}, [])  Statement(} catch (Exception e) {, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,0,0,0,"1,2","1,5",1,"4,5",0,"The parameter passed to mMethod.invoke changed from mContext to mRealOwner in both return paths, so the code change type is 4,5.","The change does not seem to affect the return value or the exception handling of the API. Instead, it just changes the context from which the method is invoked. Thus, there is no CI."
"<android.content.ContentProviderClient: int update(Uri,ContentValues,String,String[])>",15,16,"<android.content.ContentProviderClient: int update(Uri,ContentValues,String,String[])>","<android.content.ContentProviderClient: int update(Uri,ContentValues,String,String[])>",0,"{
    return mContentProvider.update(url, values, selection, selectionArgs);
}","{
    try {
        return mContentProvider.update(url, values, selection, selectionArgs);
    } catch (DeadObjectException e) {
        if (!mStable) {
            mContentResolver.unstableProviderDied(mContentProvider);
        }
        throw e;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return mContentProvider.update(url, values, selection, selectionArgs), [VariableReference(return mContentProvider, []), Expression(url, []), Expression(values, []), Expression(selection, []), Expression(selectionArgs, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mContentProvider.update(url, values, selection, selectionArgs), [VariableReference(return mContentProvider, []), Expression(url, []), Expression(values, []), Expression(selection, []), Expression(selectionArgs, [])])    VariableReference(return mContentProvider, [])    Expression(url, [])    Expression(values, [])    Expression(selection, [])    Expression(selectionArgs, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mContentProvider.update(url, values, selection, selectionArgs), [VariableReference(return mContentProvider, []), Expression(url, []), Expression(values, []), Expression(selection, []), Expression(selectionArgs, [])]), Statement(} catch (DeadObjectException e) {, []), Statement(if (!mStable) {, []), MethodCall(mContentResolver.unstableProviderDied(mContentProvider), [VariableReference(mContentResolver, []), Expression(mContentProvider, [])]), Statement(}, []), Statement(throw e, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mContentProvider.update(url, values, selection, selectionArgs), [VariableReference(return mContentProvider, []), Expression(url, []), Expression(values, []), Expression(selection, []), Expression(selectionArgs, [])])    VariableReference(return mContentProvider, [])    Expression(url, [])    Expression(values, [])    Expression(selection, [])    Expression(selectionArgs, [])  Statement(} catch (DeadObjectException e) {, [])  Statement(if (!mStable) {, [])  MethodCall(mContentResolver.unstableProviderDied(mContentProvider), [VariableReference(mContentResolver, []), Expression(mContentProvider, [])])    VariableReference(mContentResolver, [])    Expression(mContentProvider, [])  Statement(}, [])  Statement(throw e, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * See {@link ContentProvider#update ContentProvider.update}
 */
","/**
 * See {@link ContentProvider#update ContentProvider.update}
 */
",0,,,0,0,0,0,1,"1,2,3,4","1,2","2,3",2,"In the late version, a try-catch block has been introduced, which catches a `DeadObjectException`. Additionally, an if statement and a method call (`mContentResolver.unstableProviderDied(mContentProvider)`) within the catch block have been added. The code change types are 2 (exception handling statement changed) and 3 (control dependency changed).","The introduction of the try-catch block and the new exception handling could lead to different behavior when the exception occurs. Specifically, the late version throws the caught exception (`DeadObjectException`), while the early version does not handle this exception, potentially resulting in different exception handling behavior. Therefore, the CI type is 2."
<android.widget.TextView: void onStartTemporaryDetach()>,15,16,<android.widget.TextView: void onStartTemporaryDetach()>,<android.widget.TextView: void onStartTemporaryDetach()>,0,"{
    super.onStartTemporaryDetach();
    // usually because this instance is an editable field in a list
    if (!mDispatchTemporaryDetach)
        mTemporaryDetach = true;
    // Because of View recycling in ListView, there is no easy way to know when a TextView with
    // selection becomes visible again. Until a better solution is found, stop text selection
    // mode (if any) as soon as this TextView is recycled.
    hideControllers();
}","{
    super.onStartTemporaryDetach();
    // usually because this instance is an editable field in a list
    if (!mDispatchTemporaryDetach)
        mTemporaryDetach = true;
    // selection state as needed.
    if (mEditor != null)
        mEditor.mTemporaryDetach = true;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onStartTemporaryDetach(), [VariableReference(super, []), Expression(, [])]), Statement(// usually because this instance is an editable field in a list, []), Statement(if (!mDispatchTemporaryDetach), []), AssignmentExpression(=, [VariableReference(mTemporaryDetach, []), Expression(true, [])]), Statement(// Because of View recycling in ListView, there is no easy way to know when a TextView with, []), Statement(// selection becomes visible again. Until a better solution is found, stop text selection, []), Statement(hideControllers(), []), Statement(}, [])])  Statement({, [])  MethodCall(super.onStartTemporaryDetach(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(// usually because this instance is an editable field in a list, [])  Statement(if (!mDispatchTemporaryDetach), [])  AssignmentExpression(=, [VariableReference(mTemporaryDetach, []), Expression(true, [])])    VariableReference(mTemporaryDetach, [])    Expression(true, [])  Statement(// Because of View recycling in ListView, there is no easy way to know when a TextView with, [])  Statement(// selection becomes visible again. Until a better solution is found, stop text selection, [])  Statement(hideControllers(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onStartTemporaryDetach(), [VariableReference(super, []), Expression(, [])]), Statement(// usually because this instance is an editable field in a list, []), Statement(if (!mDispatchTemporaryDetach), []), AssignmentExpression(=, [VariableReference(mTemporaryDetach, []), Expression(true, [])]), Statement(// selection state as needed., []), AssignmentExpression(=, [VariableReference(if (mEditor !, []), Expression(null), [])]), AssignmentExpression(=, [VariableReference(mEditor.mTemporaryDetach, []), Expression(true, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.onStartTemporaryDetach(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(// usually because this instance is an editable field in a list, [])  Statement(if (!mDispatchTemporaryDetach), [])  AssignmentExpression(=, [VariableReference(mTemporaryDetach, []), Expression(true, [])])    VariableReference(mTemporaryDetach, [])    Expression(true, [])  Statement(// selection state as needed., [])  AssignmentExpression(=, [VariableReference(if (mEditor !, []), Expression(null), [])])    VariableReference(if (mEditor !, [])    Expression(null), [])  AssignmentExpression(=, [VariableReference(mEditor.mTemporaryDetach, []), Expression(true, [])])    VariableReference(mEditor.mTemporaryDetach, [])    Expression(true, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,"3,4",0,"3,4",0,"The hideControllers() statement in early version has been replaced with a new control dependency (if statement and assignment) in late version. This involves the change of control dependency as well as other statements, so the change type is classified as 3,4.","The added control dependency doesn't change the return values or the exceptions thrown by the method. Therefore, there is no Compatibility Issue (CI)."
<android.widget.NumberPicker: void setEnabled(boolean)>,15,16,<android.widget.NumberPicker: void setEnabled(boolean)>,<android.widget.NumberPicker: void setEnabled(boolean)>,0,"{
    super.setEnabled(enabled);
    mIncrementButton.setEnabled(enabled);
    mDecrementButton.setEnabled(enabled);
    mInputText.setEnabled(enabled);
}","{
    super.setEnabled(enabled);
    if (!mHasSelectorWheel) {
        mIncrementButton.setEnabled(enabled);
    }
    if (!mHasSelectorWheel) {
        mDecrementButton.setEnabled(enabled);
    }
    mInputText.setEnabled(enabled);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.setEnabled(enabled), [VariableReference(super, []), Expression(enabled, [])]), MethodCall(mIncrementButton.setEnabled(enabled), [VariableReference(mIncrementButton, []), Expression(enabled, [])]), MethodCall(mDecrementButton.setEnabled(enabled), [VariableReference(mDecrementButton, []), Expression(enabled, [])]), MethodCall(mInputText.setEnabled(enabled), [VariableReference(mInputText, []), Expression(enabled, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.setEnabled(enabled), [VariableReference(super, []), Expression(enabled, [])])    VariableReference(super, [])    Expression(enabled, [])  MethodCall(mIncrementButton.setEnabled(enabled), [VariableReference(mIncrementButton, []), Expression(enabled, [])])    VariableReference(mIncrementButton, [])    Expression(enabled, [])  MethodCall(mDecrementButton.setEnabled(enabled), [VariableReference(mDecrementButton, []), Expression(enabled, [])])    VariableReference(mDecrementButton, [])    Expression(enabled, [])  MethodCall(mInputText.setEnabled(enabled), [VariableReference(mInputText, []), Expression(enabled, [])])    VariableReference(mInputText, [])    Expression(enabled, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.setEnabled(enabled), [VariableReference(super, []), Expression(enabled, [])]), Statement(if (!mHasSelectorWheel) {, []), MethodCall(mIncrementButton.setEnabled(enabled), [VariableReference(mIncrementButton, []), Expression(enabled, [])]), Statement(}, []), Statement(if (!mHasSelectorWheel) {, []), MethodCall(mDecrementButton.setEnabled(enabled), [VariableReference(mDecrementButton, []), Expression(enabled, [])]), Statement(}, []), MethodCall(mInputText.setEnabled(enabled), [VariableReference(mInputText, []), Expression(enabled, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.setEnabled(enabled), [VariableReference(super, []), Expression(enabled, [])])    VariableReference(super, [])    Expression(enabled, [])  Statement(if (!mHasSelectorWheel) {, [])  MethodCall(mIncrementButton.setEnabled(enabled), [VariableReference(mIncrementButton, []), Expression(enabled, [])])    VariableReference(mIncrementButton, [])    Expression(enabled, [])  Statement(}, [])  Statement(if (!mHasSelectorWheel) {, [])  MethodCall(mDecrementButton.setEnabled(enabled), [VariableReference(mDecrementButton, []), Expression(enabled, [])])    VariableReference(mDecrementButton, [])    Expression(enabled, [])  Statement(}, [])  MethodCall(mInputText.setEnabled(enabled), [VariableReference(mInputText, []), Expression(enabled, [])])    VariableReference(mInputText, [])    Expression(enabled, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,"3,4",0,3,1,"The control dependency has changed with the introduction of 'if (!mHasSelectorWheel)' condition for enabling 'mIncrementButton' and 'mDecrementButton' in the late implementation, so the change type is 3.","The newly introduced control statement can lead to different behaviors in enabling or disabling 'mIncrementButton' and 'mDecrementButton' based on the value of 'mHasSelectorWheel'. Consequently, the API might yield different results in the late version due to this control flow change, and the CI type is 1."
<android.webkit.WebView: void onResume()>,15,16,<android.webkit.WebView: void onResume()>,<android.webkit.WebView: void onResume()>,0,"{
    checkThread();
    if (mIsPaused) {
        mIsPaused = false;
        mWebViewCore.sendMessage(EventHub.ON_RESUME);
        if (mNativeClass != 0) {
            nativeSetPauseDrawing(mNativeClass, false);
        }
    }
}","{
    checkThread();
    mProvider.onResume();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), Statement(if (mIsPaused) {, []), AssignmentExpression(=, [VariableReference(mIsPaused, []), Expression(false, [])]), MethodCall(mWebViewCore.sendMessage(EventHub.ON_RESUME), [VariableReference(mWebViewCore, []), Expression(EventHub.ON_RESUME, [])]), AssignmentExpression(=, [VariableReference(if (mNativeClass !, []), Expression(0) {, [])]), Statement(nativeSetPauseDrawing(mNativeClass, false), []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  Statement(if (mIsPaused) {, [])  AssignmentExpression(=, [VariableReference(mIsPaused, []), Expression(false, [])])    VariableReference(mIsPaused, [])    Expression(false, [])  MethodCall(mWebViewCore.sendMessage(EventHub.ON_RESUME), [VariableReference(mWebViewCore, []), Expression(EventHub.ON_RESUME, [])])    VariableReference(mWebViewCore, [])    Expression(EventHub.ON_RESUME, [])  AssignmentExpression(=, [VariableReference(if (mNativeClass !, []), Expression(0) {, [])])    VariableReference(if (mNativeClass !, [])    Expression(0) {, [])  Statement(nativeSetPauseDrawing(mNativeClass, false), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(mProvider.onResume(), [VariableReference(mProvider, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(mProvider.onResume(), [VariableReference(mProvider, []), Expression(, [])])    VariableReference(mProvider, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Call this to resume a WebView after a previous call to onPause().
 */
","/**
 * Resumes a WebView after a previous call to onPause().
 */
",1,,,0,0,0,0,1,3,0,"3,5",0,"The control dependency has changed as the 'if' control block has been removed and replaced with a direct call to mProvider.onResume(). The implementation now depends on another method mProvider.onResume(), thus the change types are 3 and 5.","Even though the control structure has changed and a new dependent API is used, there is no indication that this change will lead to different return values or different exception handling based on the provided information. Thus, there is no compatibility issue, so the CI type is 0."
"<android.view.ViewGroup: void dispatchAttachedToWindow(AttachInfo,int)>",15,16,"<android.view.ViewGroup: void dispatchAttachedToWindow(AttachInfo,int)>","<android.view.ViewGroup: void dispatchAttachedToWindow(AttachInfo,int)>",0,"{
    mGroupFlags |= FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    super.dispatchAttachedToWindow(info, visibility);
    mGroupFlags &= ~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    visibility |= mViewFlags & VISIBILITY_MASK;
    final int count = mChildrenCount;
    final View[] children = mChildren;
    for (int i = 0; i < count; i++) {
        children[i].dispatchAttachedToWindow(info, visibility);
    }
}","{
    mGroupFlags |= FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    super.dispatchAttachedToWindow(info, visibility);
    mGroupFlags &= ~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    final int count = mChildrenCount;
    final View[] children = mChildren;
    for (int i = 0; i < count; i++) {
        final View child = children[i];
        child.dispatchAttachedToWindow(info, visibility | (child.mViewFlags & VISIBILITY_MASK));
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mGroupFlags |, []), Expression(FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])]), MethodCall(super.dispatchAttachedToWindow(info, visibility), [VariableReference(super, []), Expression(info, []), Expression(visibility, [])]), AssignmentExpression(=, [VariableReference(mGroupFlags &, []), Expression(~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])]), AssignmentExpression(=, [VariableReference(visibility |, []), Expression(mViewFlags & VISIBILITY_MASK, [])]), AssignmentExpression(=, [VariableReference(final int count, []), Expression(mChildrenCount, [])]), AssignmentExpression(=, [VariableReference(final View[] children, []), Expression(mChildren, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < count, []), Statement(i++) {, []), MethodCall(children[i].dispatchAttachedToWindow(info, visibility), [VariableReference(children[i], []), Expression(info, []), Expression(visibility, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mGroupFlags |, []), Expression(FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])])    VariableReference(mGroupFlags |, [])    Expression(FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])  MethodCall(super.dispatchAttachedToWindow(info, visibility), [VariableReference(super, []), Expression(info, []), Expression(visibility, [])])    VariableReference(super, [])    Expression(info, [])    Expression(visibility, [])  AssignmentExpression(=, [VariableReference(mGroupFlags &, []), Expression(~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])])    VariableReference(mGroupFlags &, [])    Expression(~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])  AssignmentExpression(=, [VariableReference(visibility |, []), Expression(mViewFlags & VISIBILITY_MASK, [])])    VariableReference(visibility |, [])    Expression(mViewFlags & VISIBILITY_MASK, [])  AssignmentExpression(=, [VariableReference(final int count, []), Expression(mChildrenCount, [])])    VariableReference(final int count, [])    Expression(mChildrenCount, [])  AssignmentExpression(=, [VariableReference(final View[] children, []), Expression(mChildren, [])])    VariableReference(final View[] children, [])    Expression(mChildren, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < count, [])  Statement(i++) {, [])  MethodCall(children[i].dispatchAttachedToWindow(info, visibility), [VariableReference(children[i], []), Expression(info, []), Expression(visibility, [])])    VariableReference(children[i], [])    Expression(info, [])    Expression(visibility, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mGroupFlags |, []), Expression(FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])]), MethodCall(super.dispatchAttachedToWindow(info, visibility), [VariableReference(super, []), Expression(info, []), Expression(visibility, [])]), AssignmentExpression(=, [VariableReference(mGroupFlags &, []), Expression(~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])]), AssignmentExpression(=, [VariableReference(final int count, []), Expression(mChildrenCount, [])]), AssignmentExpression(=, [VariableReference(final View[] children, []), Expression(mChildren, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < count, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(final View child, []), Expression(children[i], [])]), MethodCall(child.dispatchAttachedToWindow(info, visibility | (child.mViewFlags & VISIBILITY_MASK)), [VariableReference(child, []), Expression(info, []), Expression(visibility | (child.mViewFlags & VISIBILITY_MASK), [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mGroupFlags |, []), Expression(FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])])    VariableReference(mGroupFlags |, [])    Expression(FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])  MethodCall(super.dispatchAttachedToWindow(info, visibility), [VariableReference(super, []), Expression(info, []), Expression(visibility, [])])    VariableReference(super, [])    Expression(info, [])    Expression(visibility, [])  AssignmentExpression(=, [VariableReference(mGroupFlags &, []), Expression(~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])])    VariableReference(mGroupFlags &, [])    Expression(~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, [])  AssignmentExpression(=, [VariableReference(final int count, []), Expression(mChildrenCount, [])])    VariableReference(final int count, [])    Expression(mChildrenCount, [])  AssignmentExpression(=, [VariableReference(final View[] children, []), Expression(mChildren, [])])    VariableReference(final View[] children, [])    Expression(mChildren, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < count, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(final View child, []), Expression(children[i], [])])    VariableReference(final View child, [])    Expression(children[i], [])  MethodCall(child.dispatchAttachedToWindow(info, visibility | (child.mViewFlags & VISIBILITY_MASK)), [VariableReference(child, []), Expression(info, []), Expression(visibility | (child.mViewFlags & VISIBILITY_MASK), [])])    VariableReference(child, [])    Expression(info, [])    Expression(visibility | (child.mViewFlags & VISIBILITY_MASK), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * {@inheritDoc}
 */
","/**
 * {@inheritDoc}
 */
",0,[@Override],[@Override],0,0,0,0,1,"3,4",0,"1,3",1,"The change includes the removal of the visibility modification (visibility |= mViewFlags & VISIBILITY_MASK) and an alteration within the control dependencies inside the loop. The new control dependency now includes the visibility calculation inside the loop per child, so the code change type is 1,3.","The visibility value passed to the dispatchAttachedToWindow method might differ due to the altered assignment and control dependency, potentially leading to different return values or performance for each child. Therefore, the CI type is 1."
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>,15,16,<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>,<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>,0,"{
    if (mJavaScriptCanOpenWindowsAutomatically != flag) {
        mJavaScriptCanOpenWindowsAutomatically = flag;
        postSync();
    }
}","{
    throw new MustOverrideException();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mJavaScriptCanOpenWindowsAutomatically !, []), Expression(flag) {, [])]), AssignmentExpression(=, [VariableReference(mJavaScriptCanOpenWindowsAutomatically, []), Expression(flag, [])]), Statement(postSync(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mJavaScriptCanOpenWindowsAutomatically !, []), Expression(flag) {, [])])    VariableReference(if (mJavaScriptCanOpenWindowsAutomatically !, [])    Expression(flag) {, [])  AssignmentExpression(=, [VariableReference(mJavaScriptCanOpenWindowsAutomatically, []), Expression(flag, [])])    VariableReference(mJavaScriptCanOpenWindowsAutomatically, [])    Expression(flag, [])  Statement(postSync(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new MustOverrideException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new MustOverrideException(), [])  Statement(}, [])",1,"/**
 * Tell javascript to open windows automatically. This applies to the
 * javascript function window.open().
 * @param flag True if javascript can open windows automatically.
 */
","/**
 * Tells JavaScript to open windows automatically. This applies to the
 * JavaScript function window.open(). The default is false.
 *
 * @param flag true if JavaScript can open windows automatically
 */
",1,,,0,0,0,0,1,"2,3",2,2,2,"The early version has a condition and assignment statement within an if block followed by a method call (`postSync`), whereas the late version throws a new `MustOverrideException`. The code change type is 2.","The introduction of the `throw new MustOverrideException` alters the exception handling behavior of the method in the late version compared to the early version. This could lead to potential Compatibility Issues due to different exception handling, hence the CI type is 2."
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>,15,16,<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>,<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>,0,"{
    try {
        long timeStart = acquireAndLock(READ);
        long retValue = native_1x1_long();
        mDatabase.logTimeStat(mSql, timeStart);
        return retValue;
    } catch (SQLiteDoneException e) {
        throw new SQLiteDoneException(""expected 1 row from this query but query returned no data. check the query: "" + mSql);
    } finally {
        releaseAndUnlock();
    }
}","{
    acquireReference();
    try {
        return getSession().executeForLong(getSql(), getBindArgs(), getConnectionFlags(), null);
    } catch (SQLiteDatabaseCorruptException ex) {
        onCorruption();
        throw ex;
    } finally {
        releaseReference();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(long timeStart, []), Expression(acquireAndLock(READ), [])]), AssignmentExpression(=, [VariableReference(long retValue, []), Expression(native_1x1_long(), [])]), MethodCall(mDatabase.logTimeStat(mSql, timeStart), [VariableReference(mDatabase, []), Expression(mSql, []), Expression(timeStart, [])]), Statement(return retValue, []), Statement(} catch (SQLiteDoneException e) {, []), Statement(} finally {, []), Statement(releaseAndUnlock(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(long timeStart, []), Expression(acquireAndLock(READ), [])])    VariableReference(long timeStart, [])    Expression(acquireAndLock(READ), [])  AssignmentExpression(=, [VariableReference(long retValue, []), Expression(native_1x1_long(), [])])    VariableReference(long retValue, [])    Expression(native_1x1_long(), [])  MethodCall(mDatabase.logTimeStat(mSql, timeStart), [VariableReference(mDatabase, []), Expression(mSql, []), Expression(timeStart, [])])    VariableReference(mDatabase, [])    Expression(mSql, [])    Expression(timeStart, [])  Statement(return retValue, [])  Statement(} catch (SQLiteDoneException e) {, [])  Statement(} finally {, [])  Statement(releaseAndUnlock(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(acquireReference(), []), Statement(try {, []), MethodCall(return getSession().executeForLong(getSql(), getBindArgs(), getConnectionFlags(), null), [VariableReference(return getSession(), []), Expression(getSql(), []), Expression(getBindArgs(), []), Expression(getConnectionFlags(), []), Expression(null, [])]), Statement(} catch (SQLiteDatabaseCorruptException ex) {, []), Statement(onCorruption(), []), Statement(throw ex, []), Statement(} finally {, []), Statement(releaseReference(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(acquireReference(), [])  Statement(try {, [])  MethodCall(return getSession().executeForLong(getSql(), getBindArgs(), getConnectionFlags(), null), [VariableReference(return getSession(), []), Expression(getSql(), []), Expression(getBindArgs(), []), Expression(getConnectionFlags(), []), Expression(null, [])])    VariableReference(return getSession(), [])    Expression(getSql(), [])    Expression(getBindArgs(), [])    Expression(getConnectionFlags(), [])    Expression(null, [])  Statement(} catch (SQLiteDatabaseCorruptException ex) {, [])  Statement(onCorruption(), [])  Statement(throw ex, [])  Statement(} finally {, [])  Statement(releaseReference(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Execute a statement that returns a 1 by 1 table with a numeric value.
 * For example, SELECT COUNT(*) FROM table;
 *
 * @return The result of the query.
 *
 * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
 */
","/**
 * Execute a statement that returns a 1 by 1 table with a numeric value.
 * For example, SELECT COUNT(*) FROM table;
 *
 * @return The result of the query.
 *
 * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
 */
",0,,,0,0,0,0,1,"1,2,4","1,2","1,2,5","1,2","Several statements have changed. The early version uses methods like `acquireAndLock(READ)`, `native_1x1_long()`, and `releaseAndUnlock()`, while the late version uses different methods: `acquireReference()`, `getSession().executeForLong(getSql(), getBindArgs(), getConnectionFlags(), null)` and `releaseReference()`. The exception handling has also changed from `SQLiteDoneException` to `SQLiteDatabaseCorruptException`. Therefore, the code change type is 1,2,5.","The changes in return statement and exception handling could lead to different behavior when the API is invoked. The return value is now dependent on different underlying implementations, and the exceptions being thrown have also changed. Therefore, the CI type is 1,2."
<android.view.InputDevice: int[] getDeviceIds()>,15,16,<android.view.InputDevice: int[] getDeviceIds()>,<android.view.InputDevice: int[] getDeviceIds()>,0,"{
    IWindowManager wm = Display.getWindowManager();
    try {
        return wm.getInputDeviceIds();
    } catch (RemoteException ex) {
        throw new RuntimeException(""Could not get input device ids from Window Manager."", ex);
    }
}","{
    return InputManager.getInstance().getInputDeviceIds();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(IWindowManager wm, []), Expression(Display.getWindowManager(), [])]), Statement(try {, []), MethodCall(return wm.getInputDeviceIds(), [VariableReference(return wm, []), Expression(, [])]), Statement(} catch (RemoteException ex) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(IWindowManager wm, []), Expression(Display.getWindowManager(), [])])    VariableReference(IWindowManager wm, [])    Expression(Display.getWindowManager(), [])  Statement(try {, [])  MethodCall(return wm.getInputDeviceIds(), [VariableReference(return wm, []), Expression(, [])])    VariableReference(return wm, [])    Expression(, [])  Statement(} catch (RemoteException ex) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return InputManager.getInstance().getInputDeviceIds(), [VariableReference(return InputManager, []), Expression().getInputDeviceIds(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return InputManager.getInstance().getInputDeviceIds(), [VariableReference(return InputManager, []), Expression().getInputDeviceIds(, [])])    VariableReference(return InputManager, [])    Expression().getInputDeviceIds(, [])  Statement(}, [])",1,"/**
 * Gets the ids of all input devices in the system.
 * @return The input device ids.
 */
","/**
 * Gets the ids of all input devices in the system.
 * @return The input device ids.
 */
",0,,,0,0,0,0,1,"1,2,4","1,2","1,2,5","1,2","The return statement has changed from `return wm.getInputDeviceIds()` to `return InputManager.getInstance().getInputDeviceIds()`, and the exception handling statement `catch (RemoteException ex)` has been removed. Additionally, the API depends on a different method (`InputManager.getInstance().getInputDeviceIds()` instead of `wm.getInputDeviceIds()`), so the code change type is 1,2,5.","The API potentially returns a different value because it now depends on `InputManager.getInstance().getInputDeviceIds()` instead of `wm.getInputDeviceIds()`. Furthermore, the removal of the catch block changes how exceptions are handled, leading to potential different exception handling, therefore the CI type is 1,2."
<android.database.ContentObservable: void notifyChange(boolean)>,15,16,<android.database.ContentObservable: void notifyChange(boolean)>,<android.database.ContentObservable: void notifyChange(boolean)>,0,"{
    synchronized (mObservers) {
        for (ContentObserver observer : mObservers) {
            observer.onChange(selfChange);
        }
    }
}","{
    synchronized (mObservers) {
        for (ContentObserver observer : mObservers) {
            observer.onChange(selfChange, null);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mObservers) {, []), Statement(for (ContentObserver observer : mObservers) {, []), MethodCall(observer.onChange(selfChange), [VariableReference(observer, []), Expression(selfChange, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mObservers) {, [])  Statement(for (ContentObserver observer : mObservers) {, [])  MethodCall(observer.onChange(selfChange), [VariableReference(observer, []), Expression(selfChange, [])])    VariableReference(observer, [])    Expression(selfChange, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mObservers) {, []), Statement(for (ContentObserver observer : mObservers) {, []), MethodCall(observer.onChange(selfChange, null), [VariableReference(observer, []), Expression(selfChange, []), Expression(null, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mObservers) {, [])  Statement(for (ContentObserver observer : mObservers) {, [])  MethodCall(observer.onChange(selfChange, null), [VariableReference(observer, []), Expression(selfChange, []), Expression(null, [])])    VariableReference(observer, [])    Expression(selfChange, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * invokes onChange on each observer
 * @param selfChange
 */
","/**
 * Invokes {@link ContentObserver#onChange} on each observer.
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange} instead.
 */
",1,,[@Deprecated],1,0,0,0,2,5,0,"4,5",0,"The method call to observer.onChange has added a new parameter (null), and an annotation (@Deprecated) has been added. These changes fall under type 4 and 5, respectively.","Although there have been some modifications in the parameters of the method call and addition of a @Deprecated annotation, these changes do not impact the return values or exception handling. Therefore, no compatibility issue is foreseen, and the CI type is 0."
<android.webkit.WebSettings: int getTextZoom()>,15,16,<android.webkit.WebSettings: int getTextZoom()>,<android.webkit.WebSettings: int getTextZoom()>,0,"{
    return mTextSize;
}","{
    throw new MustOverrideException();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mTextSize, []), Statement(}, [])])  Statement({, [])  Statement(return mTextSize, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new MustOverrideException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new MustOverrideException(), [])  Statement(}, [])",1,"/**
 * Get the text zoom of the page in percent.
 * @return A percent value describing the text zoom.
 * @see setTextSizeZoom
 */
","/**
 * Gets the text zoom of the page in percent.
 *
 * @return a percent value describing the text zoom
 * @see #setTextSizeZoom
 */
",1,,,0,0,0,0,1,"1,2","1,2","1,2","1,2","The early implementation returns the variable `mTextSize`, while the late implementation throws a new exception `MustOverrideException`. The code change type is 1,2.","The change can lead to different return values (from returning `mTextSize` to not returning any value due to an exception) and different exception handling (from not throwing `MustOverrideException` to throwing it). Thus, the CI types are 1,2."
<android.webkit.WebView: void freeMemory()>,15,16,<android.webkit.WebView: void freeMemory()>,<android.webkit.WebView: void freeMemory()>,0,"{
    checkThread();
    mWebViewCore.sendMessage(EventHub.FREE_MEMORY);
}","{
    checkThread();
    mProvider.freeMemory();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(mWebViewCore.sendMessage(EventHub.FREE_MEMORY), [VariableReference(mWebViewCore, []), Expression(EventHub.FREE_MEMORY, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(mWebViewCore.sendMessage(EventHub.FREE_MEMORY), [VariableReference(mWebViewCore, []), Expression(EventHub.FREE_MEMORY, [])])    VariableReference(mWebViewCore, [])    Expression(EventHub.FREE_MEMORY, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(mProvider.freeMemory(), [VariableReference(mProvider, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(mProvider.freeMemory(), [VariableReference(mProvider, []), Expression(, [])])    VariableReference(mProvider, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Call this to inform the view that memory is low so that it can
 * free any available memory.
 */
","/**
 * Informs this WebView that memory is low so that it can free any available
 * memory.
 */
",1,,,0,0,0,0,1,4,0,5,0,"The dependent API has changed from `mWebViewCore.sendMessage(EventHub.FREE_MEMORY)` to `mProvider.freeMemory()`. Therefore, the code change type is 5.","Both the early and late versions of the API `freeMemory()` do not return any value or throw any exceptions. Thus, there is no potential Compatibility Issue (CI type is 0)."
"<android.database.DatabaseUtils: ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement,String[])>",15,16,"<android.database.DatabaseUtils: ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement,String[])>","<android.database.DatabaseUtils: ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase,String,String[])>",0,"{
    prog.bindAllArgsAsStrings(selectionArgs);
    return prog.simpleQueryForBlobFileDescriptor();
}","{
    SQLiteStatement prog = db.compileStatement(query);
    try {
        return blobFileDescriptorForQuery(prog, selectionArgs);
    } finally {
        prog.close();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(prog.bindAllArgsAsStrings(selectionArgs), [VariableReference(prog, []), Expression(selectionArgs, [])]), MethodCall(return prog.simpleQueryForBlobFileDescriptor(), [VariableReference(return prog, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(prog.bindAllArgsAsStrings(selectionArgs), [VariableReference(prog, []), Expression(selectionArgs, [])])    VariableReference(prog, [])    Expression(selectionArgs, [])  MethodCall(return prog.simpleQueryForBlobFileDescriptor(), [VariableReference(return prog, []), Expression(, [])])    VariableReference(return prog, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(SQLiteStatement prog, []), Expression(db.compileStatement(query), [])]), Statement(try {, []), Statement(return blobFileDescriptorForQuery(prog, selectionArgs), []), Statement(} finally {, []), MethodCall(prog.close(), [VariableReference(prog, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(SQLiteStatement prog, []), Expression(db.compileStatement(query), [])])    VariableReference(SQLiteStatement prog, [])    Expression(db.compileStatement(query), [])  Statement(try {, [])  Statement(return blobFileDescriptorForQuery(prog, selectionArgs), [])  Statement(} finally {, [])  MethodCall(prog.close(), [VariableReference(prog, []), Expression(, [])])    VariableReference(prog, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Utility method to run the pre-compiled query and return the blob value in the
 * first column of the first row.
 *
 * @return A read-only file descriptor for a copy of the blob value.
 */
","/**
 * Utility method to run the query on the db and return the blob value in the
 * first column of the first row.
 *
 * @return A read-only file descriptor for a copy of the blob value.
 */
",0,,,0,0,0,0,1,"1,2,4",1,"3,5",1,"The control flow of the method has been changed by introducing a `try-finally` block, and the method now depends on a different API (`db.compileStatement()`). So the change types are 3 and 5.","The change in control flow and the dependence on a different API may lead to different return values since the behavior of `blobFileDescriptorForQuery(prog, selectionArgs)` can be affected by the control flow and the newly introduced `db.compileStatement(query)`. The CI type is 1."
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>,15,16,<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>,<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>,0,"{
    size = pin(size);
    if (mDefaultFixedFontSize != size) {
        mDefaultFixedFontSize = size;
        postSync();
    }
}","{
    throw new MustOverrideException();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(size, []), Expression(pin(size), [])]), AssignmentExpression(=, [VariableReference(if (mDefaultFixedFontSize !, []), Expression(size) {, [])]), AssignmentExpression(=, [VariableReference(mDefaultFixedFontSize, []), Expression(size, [])]), Statement(postSync(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(size, []), Expression(pin(size), [])])    VariableReference(size, [])    Expression(pin(size), [])  AssignmentExpression(=, [VariableReference(if (mDefaultFixedFontSize !, []), Expression(size) {, [])])    VariableReference(if (mDefaultFixedFontSize !, [])    Expression(size) {, [])  AssignmentExpression(=, [VariableReference(mDefaultFixedFontSize, []), Expression(size, [])])    VariableReference(mDefaultFixedFontSize, [])    Expression(size, [])  Statement(postSync(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new MustOverrideException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new MustOverrideException(), [])  Statement(}, [])",1,"/**
 * Set the default fixed font size.
 * @param size A non-negative integer between 1 and 72.
 * Any number outside the specified range will be pinned.
 */
","/**
 * Sets the default fixed font size. The default is 16.
 *
 * @param size a non-negative integer between 1 and 72. Any number outside
 * the specified range will be pinned.
 */
",1,,,0,0,0,0,1,"2,3,4",2,2,2,"The method implementation has changed to throw a new `MustOverrideException`, so the code change type is 2.","The introduction of `throw new MustOverrideException()` alters the exception behavior of the API, leading to a CI type of 2."
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>,15,16,<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>,<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>,0,"{
    checkThread();
    mOverlayHorizontalScrollbar = overlay;
}","{
    checkThread();
    mProvider.setHorizontalScrollbarOverlay(overlay);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), AssignmentExpression(=, [VariableReference(mOverlayHorizontalScrollbar, []), Expression(overlay, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  AssignmentExpression(=, [VariableReference(mOverlayHorizontalScrollbar, []), Expression(overlay, [])])    VariableReference(mOverlayHorizontalScrollbar, [])    Expression(overlay, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(mProvider.setHorizontalScrollbarOverlay(overlay), [VariableReference(mProvider, []), Expression(overlay, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(mProvider.setHorizontalScrollbarOverlay(overlay), [VariableReference(mProvider, []), Expression(overlay, [])])    VariableReference(mProvider, [])    Expression(overlay, [])  Statement(}, [])",1,"/**
 * Specify whether the horizontal scrollbar has overlay style.
 * @param overlay TRUE if horizontal scrollbar should have overlay style.
 */
","/**
 * Specifies whether the horizontal scrollbar has overlay style.
 *
 * @param overlay true if horizontal scrollbar should have overlay style
 */
",0,,,0,0,0,0,1,4,0,"4, 5",0,"The code change involves an assignment statement being replaced with a method call to a presumably external provider (`mProvider.setHorizontalScrollbarOverlay(overlay)`). Therefore, the change type is 4 and 5.","The functionality should theoretically remain the same since the method call suggests a delegation of the same assignment operation to another component. As long as `mProvider.setHorizontalScrollbarOverlay` is functionally equivalent to the previous assignment, there should be no compatibility issue, so the CI type is 0."
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>,15,16,<android.database.sqlite.SQLiteDatabase: boolean isOpen()>,<android.database.sqlite.SQLiteDatabase: boolean isOpen()>,0,"{
    return mNativeHandle != 0;
}","{
    synchronized (mLock) {
        return mConnectionPoolLocked != null;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return mNativeHandle !, []), Expression(0, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return mNativeHandle !, []), Expression(0, [])])    VariableReference(return mNativeHandle !, [])    Expression(0, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mLock) {, []), AssignmentExpression(=, [VariableReference(return mConnectionPoolLocked !, []), Expression(null, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mLock) {, [])  AssignmentExpression(=, [VariableReference(return mConnectionPoolLocked !, []), Expression(null, [])])    VariableReference(return mConnectionPoolLocked !, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * @return true if the DB is currently open (has not been closed)
 */
","/**
 * Returns true if the database is currently open.
 *
 * @return True if the database is currently open (has not been closed).
 */
",1,,,0,0,0,0,1,"1,4",1,"1,3",1,"The early version returns `mNativeHandle != 0`, whereas the late version returns `mConnectionPoolLocked != null` inside a synchronized block, indicating changes in both the return statement and control dependency. Therefore, the change types are 1 and 3.","These changes can lead to different return values, resulting in a potential CI related to different return values or types. Hence, the CI type is 1."
"<android.app.FragmentManagerImpl: void attachFragment(Fragment,int,int)>",15,16,"<android.app.FragmentManagerImpl: void attachFragment(Fragment,int,int)>","<android.app.FragmentManagerImpl: void attachFragment(Fragment,int,int)>",0,"{
    if (DEBUG)
        Log.v(TAG, ""attach: "" + fragment);
    if (fragment.mDetached) {
        fragment.mDetached = false;
        if (!fragment.mAdded) {
            mAdded.add(fragment);
            fragment.mAdded = true;
            if (fragment.mHasMenu && fragment.mMenuVisible) {
                mNeedMenuInvalidate = true;
            }
            moveToState(fragment, mCurState, transition, transitionStyle);
        }
    }
}","{
    if (DEBUG)
        Log.v(TAG, ""attach: "" + fragment);
    if (fragment.mDetached) {
        fragment.mDetached = false;
        if (!fragment.mAdded) {
            if (mAdded == null) {
                mAdded = new ArrayList<Fragment>();
            }
            mAdded.add(fragment);
            fragment.mAdded = true;
            if (fragment.mHasMenu && fragment.mMenuVisible) {
                mNeedMenuInvalidate = true;
            }
            moveToState(fragment, mCurState, transition, transitionStyle, false);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""attach: "" + fragment), [VariableReference(Log, []), Expression(TAG, []), Expression(""attach: "" + fragment, [])]), AssignmentExpression(=, [VariableReference(fragment.mDetached, []), Expression(false, [])]), MethodCall(mAdded.add(fragment), [VariableReference(mAdded, []), Expression(fragment, [])]), AssignmentExpression(=, [VariableReference(fragment.mAdded, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mNeedMenuInvalidate, []), Expression(true, [])]), Statement(}, []), Statement(moveToState(fragment, mCurState, transition, transitionStyle), []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""attach: "" + fragment), [VariableReference(Log, []), Expression(TAG, []), Expression(""attach: "" + fragment, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""attach: "" + fragment, [])  AssignmentExpression(=, [VariableReference(fragment.mDetached, []), Expression(false, [])])    VariableReference(fragment.mDetached, [])    Expression(false, [])  MethodCall(mAdded.add(fragment), [VariableReference(mAdded, []), Expression(fragment, [])])    VariableReference(mAdded, [])    Expression(fragment, [])  AssignmentExpression(=, [VariableReference(fragment.mAdded, []), Expression(true, [])])    VariableReference(fragment.mAdded, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mNeedMenuInvalidate, []), Expression(true, [])])    VariableReference(mNeedMenuInvalidate, [])    Expression(true, [])  Statement(}, [])  Statement(moveToState(fragment, mCurState, transition, transitionStyle), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""attach: "" + fragment), [VariableReference(Log, []), Expression(TAG, []), Expression(""attach: "" + fragment, [])]), AssignmentExpression(=, [VariableReference(fragment.mDetached, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(if (mAdded, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mAdded, []), Expression(new ArrayList<Fragment>(), [])]), Statement(}, []), MethodCall(mAdded.add(fragment), [VariableReference(mAdded, []), Expression(fragment, [])]), AssignmentExpression(=, [VariableReference(fragment.mAdded, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mNeedMenuInvalidate, []), Expression(true, [])]), Statement(}, []), Statement(moveToState(fragment, mCurState, transition, transitionStyle, false), []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""attach: "" + fragment), [VariableReference(Log, []), Expression(TAG, []), Expression(""attach: "" + fragment, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""attach: "" + fragment, [])  AssignmentExpression(=, [VariableReference(fragment.mDetached, []), Expression(false, [])])    VariableReference(fragment.mDetached, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(if (mAdded, []), Expression(, [])])    VariableReference(if (mAdded, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mAdded, []), Expression(new ArrayList<Fragment>(), [])])    VariableReference(mAdded, [])    Expression(new ArrayList<Fragment>(), [])  Statement(}, [])  MethodCall(mAdded.add(fragment), [VariableReference(mAdded, []), Expression(fragment, [])])    VariableReference(mAdded, [])    Expression(fragment, [])  AssignmentExpression(=, [VariableReference(fragment.mAdded, []), Expression(true, [])])    VariableReference(fragment.mAdded, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mNeedMenuInvalidate, []), Expression(true, [])])    VariableReference(mNeedMenuInvalidate, [])    Expression(true, [])  Statement(}, [])  Statement(moveToState(fragment, mCurState, transition, transitionStyle, false), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,0,0,0,"1,2","3,4,5",0,"3,4,5",0,1. The control dependency has changed by adding a condition check for `mAdded` and initializing it if it's `null`. This is classified as a control dependency change (type 3).,
<android.view.View: void getLocationInWindow(int[])>,15,16,<android.view.View: void getLocationInWindow(int[])>,<android.view.View: void getLocationInWindow(int[])>,0,"{
    // When the view is not attached to a window, this method does not make sense
    if (mAttachInfo == null)
        return;
    if (location == null || location.length < 2) {
        throw new IllegalArgumentException(""location must be an array of two integers"");
    }
    float[] position = mAttachInfo.mTmpTransformLocation;
    position[0] = position[1] = 0.0f;
    if (!hasIdentityMatrix()) {
        getMatrix().mapPoints(position);
    }
    position[0] += mLeft;
    position[1] += mTop;
    ViewParent viewParent = mParent;
    while (viewParent instanceof View) {
        final View view = (View) viewParent;
        position[0] -= view.mScrollX;
        position[1] -= view.mScrollY;
        if (!view.hasIdentityMatrix()) {
            view.getMatrix().mapPoints(position);
        }
        position[0] += view.mLeft;
        position[1] += view.mTop;
        viewParent = view.mParent;
    }
    if (viewParent instanceof ViewRootImpl) {
        // *cough*
        final ViewRootImpl vr = (ViewRootImpl) viewParent;
        position[1] -= vr.mCurScrollY;
    }
    location[0] = (int) (position[0] + 0.5f);
    location[1] = (int) (position[1] + 0.5f);
}","{
    if (location == null || location.length < 2) {
        throw new IllegalArgumentException(""location must be an array of two integers"");
    }
    if (mAttachInfo == null) {
        // When the view is not attached to a window, this method does not make sense
        location[0] = location[1] = 0;
        return;
    }
    float[] position = mAttachInfo.mTmpTransformLocation;
    position[0] = position[1] = 0.0f;
    if (!hasIdentityMatrix()) {
        getMatrix().mapPoints(position);
    }
    position[0] += mLeft;
    position[1] += mTop;
    ViewParent viewParent = mParent;
    while (viewParent instanceof View) {
        final View view = (View) viewParent;
        position[0] -= view.mScrollX;
        position[1] -= view.mScrollY;
        if (!view.hasIdentityMatrix()) {
            view.getMatrix().mapPoints(position);
        }
        position[0] += view.mLeft;
        position[1] += view.mTop;
        viewParent = view.mParent;
    }
    if (viewParent instanceof ViewRootImpl) {
        // *cough*
        final ViewRootImpl vr = (ViewRootImpl) viewParent;
        position[1] -= vr.mCurScrollY;
    }
    location[0] = (int) (position[0] + 0.5f);
    location[1] = (int) (position[1] + 0.5f);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// When the view is not attached to a window, this method does not make sense, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), Statement(return, []), AssignmentExpression(=, [VariableReference(if (location, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""location must be an array of two integers""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(float[] position, []), Expression(mAttachInfo.mTmpTransformLocation, [])]), AssignmentExpression(=, [VariableReference(position[0], []), Expression(position[1], [])]), Statement(if (!hasIdentityMatrix()) {, []), MethodCall(getMatrix().mapPoints(position), [VariableReference(getMatrix(), []), Expression(position, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(mLeft, [])]), AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(mTop, [])]), AssignmentExpression(=, [VariableReference(ViewParent viewParent, []), Expression(mParent, [])]), Statement(while (viewParent instanceof View) {, []), AssignmentExpression(=, [VariableReference(final View view, []), Expression((View) viewParent, [])]), AssignmentExpression(=, [VariableReference(position[0] -, []), Expression(view.mScrollX, [])]), AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(view.mScrollY, [])]), MethodCall(if (!view.hasIdentityMatrix()), [VariableReference(if (!view, []), Expression(), [])]), MethodCall(view.getMatrix().mapPoints(position), [VariableReference(view, []), Expression().mapPoints(position, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(view.mLeft, [])]), AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(view.mTop, [])]), AssignmentExpression(=, [VariableReference(viewParent, []), Expression(view.mParent, [])]), Statement(}, []), Statement(if (viewParent instanceof ViewRootImpl) {, []), Statement(// *cough*, []), AssignmentExpression(=, [VariableReference(final ViewRootImpl vr, []), Expression((ViewRootImpl) viewParent, [])]), AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(vr.mCurScrollY, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(location[0], []), Expression((int) (position[0] + 0.5f), [])]), AssignmentExpression(=, [VariableReference(location[1], []), Expression((int) (position[1] + 0.5f), [])]), Statement(}, [])])  Statement({, [])  Statement(// When the view is not attached to a window, this method does not make sense, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  Statement(return, [])  AssignmentExpression(=, [VariableReference(if (location, []), Expression(, [])])    VariableReference(if (location, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""location must be an array of two integers""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(float[] position, []), Expression(mAttachInfo.mTmpTransformLocation, [])])    VariableReference(float[] position, [])    Expression(mAttachInfo.mTmpTransformLocation, [])  AssignmentExpression(=, [VariableReference(position[0], []), Expression(position[1], [])])    VariableReference(position[0], [])    Expression(position[1], [])  Statement(if (!hasIdentityMatrix()) {, [])  MethodCall(getMatrix().mapPoints(position), [VariableReference(getMatrix(), []), Expression(position, [])])    VariableReference(getMatrix(), [])    Expression(position, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(mLeft, [])])    VariableReference(position[0] +, [])    Expression(mLeft, [])  AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(mTop, [])])    VariableReference(position[1] +, [])    Expression(mTop, [])  AssignmentExpression(=, [VariableReference(ViewParent viewParent, []), Expression(mParent, [])])    VariableReference(ViewParent viewParent, [])    Expression(mParent, [])  Statement(while (viewParent instanceof View) {, [])  AssignmentExpression(=, [VariableReference(final View view, []), Expression((View) viewParent, [])])    VariableReference(final View view, [])    Expression((View) viewParent, [])  AssignmentExpression(=, [VariableReference(position[0] -, []), Expression(view.mScrollX, [])])    VariableReference(position[0] -, [])    Expression(view.mScrollX, [])  AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(view.mScrollY, [])])    VariableReference(position[1] -, [])    Expression(view.mScrollY, [])  MethodCall(if (!view.hasIdentityMatrix()), [VariableReference(if (!view, []), Expression(), [])])    VariableReference(if (!view, [])    Expression(), [])  MethodCall(view.getMatrix().mapPoints(position), [VariableReference(view, []), Expression().mapPoints(position, [])])    VariableReference(view, [])    Expression().mapPoints(position, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(view.mLeft, [])])    VariableReference(position[0] +, [])    Expression(view.mLeft, [])  AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(view.mTop, [])])    VariableReference(position[1] +, [])    Expression(view.mTop, [])  AssignmentExpression(=, [VariableReference(viewParent, []), Expression(view.mParent, [])])    VariableReference(viewParent, [])    Expression(view.mParent, [])  Statement(}, [])  Statement(if (viewParent instanceof ViewRootImpl) {, [])  Statement(// *cough*, [])  AssignmentExpression(=, [VariableReference(final ViewRootImpl vr, []), Expression((ViewRootImpl) viewParent, [])])    VariableReference(final ViewRootImpl vr, [])    Expression((ViewRootImpl) viewParent, [])  AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(vr.mCurScrollY, [])])    VariableReference(position[1] -, [])    Expression(vr.mCurScrollY, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(location[0], []), Expression((int) (position[0] + 0.5f), [])])    VariableReference(location[0], [])    Expression((int) (position[0] + 0.5f), [])  AssignmentExpression(=, [VariableReference(location[1], []), Expression((int) (position[1] + 0.5f), [])])    VariableReference(location[1], [])    Expression((int) (position[1] + 0.5f), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (location, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""location must be an array of two integers""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), Statement(// When the view is not attached to a window, this method does not make sense, []), AssignmentExpression(=, [VariableReference(location[0], []), Expression(location[1], [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(float[] position, []), Expression(mAttachInfo.mTmpTransformLocation, [])]), AssignmentExpression(=, [VariableReference(position[0], []), Expression(position[1], [])]), Statement(if (!hasIdentityMatrix()) {, []), MethodCall(getMatrix().mapPoints(position), [VariableReference(getMatrix(), []), Expression(position, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(mLeft, [])]), AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(mTop, [])]), AssignmentExpression(=, [VariableReference(ViewParent viewParent, []), Expression(mParent, [])]), Statement(while (viewParent instanceof View) {, []), AssignmentExpression(=, [VariableReference(final View view, []), Expression((View) viewParent, [])]), AssignmentExpression(=, [VariableReference(position[0] -, []), Expression(view.mScrollX, [])]), AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(view.mScrollY, [])]), MethodCall(if (!view.hasIdentityMatrix()), [VariableReference(if (!view, []), Expression(), [])]), MethodCall(view.getMatrix().mapPoints(position), [VariableReference(view, []), Expression().mapPoints(position, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(view.mLeft, [])]), AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(view.mTop, [])]), AssignmentExpression(=, [VariableReference(viewParent, []), Expression(view.mParent, [])]), Statement(}, []), Statement(if (viewParent instanceof ViewRootImpl) {, []), Statement(// *cough*, []), AssignmentExpression(=, [VariableReference(final ViewRootImpl vr, []), Expression((ViewRootImpl) viewParent, [])]), AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(vr.mCurScrollY, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(location[0], []), Expression((int) (position[0] + 0.5f), [])]), AssignmentExpression(=, [VariableReference(location[1], []), Expression((int) (position[1] + 0.5f), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (location, []), Expression(, [])])    VariableReference(if (location, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""location must be an array of two integers""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  Statement(// When the view is not attached to a window, this method does not make sense, [])  AssignmentExpression(=, [VariableReference(location[0], []), Expression(location[1], [])])    VariableReference(location[0], [])    Expression(location[1], [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(float[] position, []), Expression(mAttachInfo.mTmpTransformLocation, [])])    VariableReference(float[] position, [])    Expression(mAttachInfo.mTmpTransformLocation, [])  AssignmentExpression(=, [VariableReference(position[0], []), Expression(position[1], [])])    VariableReference(position[0], [])    Expression(position[1], [])  Statement(if (!hasIdentityMatrix()) {, [])  MethodCall(getMatrix().mapPoints(position), [VariableReference(getMatrix(), []), Expression(position, [])])    VariableReference(getMatrix(), [])    Expression(position, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(mLeft, [])])    VariableReference(position[0] +, [])    Expression(mLeft, [])  AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(mTop, [])])    VariableReference(position[1] +, [])    Expression(mTop, [])  AssignmentExpression(=, [VariableReference(ViewParent viewParent, []), Expression(mParent, [])])    VariableReference(ViewParent viewParent, [])    Expression(mParent, [])  Statement(while (viewParent instanceof View) {, [])  AssignmentExpression(=, [VariableReference(final View view, []), Expression((View) viewParent, [])])    VariableReference(final View view, [])    Expression((View) viewParent, [])  AssignmentExpression(=, [VariableReference(position[0] -, []), Expression(view.mScrollX, [])])    VariableReference(position[0] -, [])    Expression(view.mScrollX, [])  AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(view.mScrollY, [])])    VariableReference(position[1] -, [])    Expression(view.mScrollY, [])  MethodCall(if (!view.hasIdentityMatrix()), [VariableReference(if (!view, []), Expression(), [])])    VariableReference(if (!view, [])    Expression(), [])  MethodCall(view.getMatrix().mapPoints(position), [VariableReference(view, []), Expression().mapPoints(position, [])])    VariableReference(view, [])    Expression().mapPoints(position, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(position[0] +, []), Expression(view.mLeft, [])])    VariableReference(position[0] +, [])    Expression(view.mLeft, [])  AssignmentExpression(=, [VariableReference(position[1] +, []), Expression(view.mTop, [])])    VariableReference(position[1] +, [])    Expression(view.mTop, [])  AssignmentExpression(=, [VariableReference(viewParent, []), Expression(view.mParent, [])])    VariableReference(viewParent, [])    Expression(view.mParent, [])  Statement(}, [])  Statement(if (viewParent instanceof ViewRootImpl) {, [])  Statement(// *cough*, [])  AssignmentExpression(=, [VariableReference(final ViewRootImpl vr, []), Expression((ViewRootImpl) viewParent, [])])    VariableReference(final ViewRootImpl vr, [])    Expression((ViewRootImpl) viewParent, [])  AssignmentExpression(=, [VariableReference(position[1] -, []), Expression(vr.mCurScrollY, [])])    VariableReference(position[1] -, [])    Expression(vr.mCurScrollY, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(location[0], []), Expression((int) (position[0] + 0.5f), [])])    VariableReference(location[0], [])    Expression((int) (position[0] + 0.5f), [])  AssignmentExpression(=, [VariableReference(location[1], []), Expression((int) (position[1] + 0.5f), [])])    VariableReference(location[1], [])    Expression((int) (position[1] + 0.5f), [])  Statement(}, [])",1,"/**
 * <p>Computes the coordinates of this view in its window. The argument
 * must be an array of two integers. After the method returns, the array
 * contains the x and y location in that order.</p>
 *
 * @param location an array of two integers in which to hold the coordinates
 */
","/**
 * <p>Computes the coordinates of this view in its window. The argument
 * must be an array of two integers. After the method returns, the array
 * contains the x and y location in that order.</p>
 *
 * @param location an array of two integers in which to hold the coordinates
 */
",0,,,0,0,0,0,1,"1,3",1,"1,2","1,2","In the late implementation, an added line `location[0] = location[1] = 0;` assigns a value to the location array before returning when `mAttachInfo` is null. Additionally, this modifies how the method handles exceptions by setting default values rather than returning directly. Therefore, the code change type is 1,2.","Because the early version returns immediately when `mAttachInfo` is null, it may lead to an uninitialized `location` array being used in the client, while the late version sets `location[0]` and `location[1]` to 0 before returning. Additionally, the exception handling logic has been altered. Therefore, different values for the location array can be returned, leading to potential CI caused by different return values and exception handling. Thus, the CI type is 1,2."
"<android.widget.ExpandableListView: ContextMenuInfo createContextMenuInfo(View,int,long)>",15,16,"<android.widget.ExpandableListView: ContextMenuInfo createContextMenuInfo(View,int,long)>","<android.widget.ExpandableListView: ContextMenuInfo createContextMenuInfo(View,int,long)>",0,"{
    if (isHeaderOrFooterPosition(flatListPosition)) {
        // Return normal info for header/footer view context menus
        return new AdapterContextMenuInfo(view, flatListPosition, id);
    }
    final int adjustedPosition = getFlatPositionForConnector(flatListPosition);
    PositionMetadata pm = mConnector.getUnflattenedPos(adjustedPosition);
    ExpandableListPosition pos = pm.position;
    pm.recycle();
    id = getChildOrGroupId(pos);
    long packedPosition = pos.getPackedPosition();
    pos.recycle();
    return new ExpandableListContextMenuInfo(view, packedPosition, id);
}","{
    if (isHeaderOrFooterPosition(flatListPosition)) {
        // Return normal info for header/footer view context menus
        return new AdapterContextMenuInfo(view, flatListPosition, id);
    }
    final int adjustedPosition = getFlatPositionForConnector(flatListPosition);
    PositionMetadata pm = mConnector.getUnflattenedPos(adjustedPosition);
    ExpandableListPosition pos = pm.position;
    id = getChildOrGroupId(pos);
    long packedPosition = pos.getPackedPosition();
    pm.recycle();
    return new ExpandableListContextMenuInfo(view, packedPosition, id);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (isHeaderOrFooterPosition(flatListPosition)) {, []), Statement(// Return normal info for header/footer view context menus, []), Statement(return new AdapterContextMenuInfo(view, flatListPosition, id), []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int adjustedPosition, []), Expression(getFlatPositionForConnector(flatListPosition), [])]), AssignmentExpression(=, [VariableReference(PositionMetadata pm, []), Expression(mConnector.getUnflattenedPos(adjustedPosition), [])]), AssignmentExpression(=, [VariableReference(ExpandableListPosition pos, []), Expression(pm.position, [])]), MethodCall(pm.recycle(), [VariableReference(pm, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(id, []), Expression(getChildOrGroupId(pos), [])]), AssignmentExpression(=, [VariableReference(long packedPosition, []), Expression(pos.getPackedPosition(), [])]), MethodCall(pos.recycle(), [VariableReference(pos, []), Expression(, [])]), Statement(return new ExpandableListContextMenuInfo(view, packedPosition, id), []), Statement(}, [])])  Statement({, [])  Statement(if (isHeaderOrFooterPosition(flatListPosition)) {, [])  Statement(// Return normal info for header/footer view context menus, [])  Statement(return new AdapterContextMenuInfo(view, flatListPosition, id), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int adjustedPosition, []), Expression(getFlatPositionForConnector(flatListPosition), [])])    VariableReference(final int adjustedPosition, [])    Expression(getFlatPositionForConnector(flatListPosition), [])  AssignmentExpression(=, [VariableReference(PositionMetadata pm, []), Expression(mConnector.getUnflattenedPos(adjustedPosition), [])])    VariableReference(PositionMetadata pm, [])    Expression(mConnector.getUnflattenedPos(adjustedPosition), [])  AssignmentExpression(=, [VariableReference(ExpandableListPosition pos, []), Expression(pm.position, [])])    VariableReference(ExpandableListPosition pos, [])    Expression(pm.position, [])  MethodCall(pm.recycle(), [VariableReference(pm, []), Expression(, [])])    VariableReference(pm, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(id, []), Expression(getChildOrGroupId(pos), [])])    VariableReference(id, [])    Expression(getChildOrGroupId(pos), [])  AssignmentExpression(=, [VariableReference(long packedPosition, []), Expression(pos.getPackedPosition(), [])])    VariableReference(long packedPosition, [])    Expression(pos.getPackedPosition(), [])  MethodCall(pos.recycle(), [VariableReference(pos, []), Expression(, [])])    VariableReference(pos, [])    Expression(, [])  Statement(return new ExpandableListContextMenuInfo(view, packedPosition, id), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (isHeaderOrFooterPosition(flatListPosition)) {, []), Statement(// Return normal info for header/footer view context menus, []), Statement(return new AdapterContextMenuInfo(view, flatListPosition, id), []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int adjustedPosition, []), Expression(getFlatPositionForConnector(flatListPosition), [])]), AssignmentExpression(=, [VariableReference(PositionMetadata pm, []), Expression(mConnector.getUnflattenedPos(adjustedPosition), [])]), AssignmentExpression(=, [VariableReference(ExpandableListPosition pos, []), Expression(pm.position, [])]), AssignmentExpression(=, [VariableReference(id, []), Expression(getChildOrGroupId(pos), [])]), AssignmentExpression(=, [VariableReference(long packedPosition, []), Expression(pos.getPackedPosition(), [])]), MethodCall(pm.recycle(), [VariableReference(pm, []), Expression(, [])]), Statement(return new ExpandableListContextMenuInfo(view, packedPosition, id), []), Statement(}, [])])  Statement({, [])  Statement(if (isHeaderOrFooterPosition(flatListPosition)) {, [])  Statement(// Return normal info for header/footer view context menus, [])  Statement(return new AdapterContextMenuInfo(view, flatListPosition, id), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int adjustedPosition, []), Expression(getFlatPositionForConnector(flatListPosition), [])])    VariableReference(final int adjustedPosition, [])    Expression(getFlatPositionForConnector(flatListPosition), [])  AssignmentExpression(=, [VariableReference(PositionMetadata pm, []), Expression(mConnector.getUnflattenedPos(adjustedPosition), [])])    VariableReference(PositionMetadata pm, [])    Expression(mConnector.getUnflattenedPos(adjustedPosition), [])  AssignmentExpression(=, [VariableReference(ExpandableListPosition pos, []), Expression(pm.position, [])])    VariableReference(ExpandableListPosition pos, [])    Expression(pm.position, [])  AssignmentExpression(=, [VariableReference(id, []), Expression(getChildOrGroupId(pos), [])])    VariableReference(id, [])    Expression(getChildOrGroupId(pos), [])  AssignmentExpression(=, [VariableReference(long packedPosition, []), Expression(pos.getPackedPosition(), [])])    VariableReference(long packedPosition, [])    Expression(pos.getPackedPosition(), [])  MethodCall(pm.recycle(), [VariableReference(pm, []), Expression(, [])])    VariableReference(pm, [])    Expression(, [])  Statement(return new ExpandableListContextMenuInfo(view, packedPosition, id), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,0,0,0,1,4,0,4,0,"The `recycle()` method call on the `pm` variable and the position of its assignment have been swapped, but this statement rearrangement does not change the program's behavior. Thus, the change type is 4.","In this case, the rearrangement of statement execution positions does not affect the overall behavior or output of the method. Therefore, there is no compatibility issue, and the CI type is 0."
<android.animation.KeyframeSet: KeyframeSet ofFloat(float)>,17,18,<android.animation.KeyframeSet: KeyframeSet ofFloat(float)>,<android.animation.KeyframeSet: KeyframeSet ofFloat(float)>,0,"{
    int numKeyframes = values.length;
    FloatKeyframe[] keyframes = new FloatKeyframe[Math.max(numKeyframes, 2)];
    if (numKeyframes == 1) {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
        keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
    } else {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f, values[0]);
        for (int i = 1; i < numKeyframes; ++i) {
            keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]);
        }
    }
    return new FloatKeyframeSet(keyframes);
}","{
    boolean badValue = false;
    int numKeyframes = values.length;
    FloatKeyframe[] keyframes = new FloatKeyframe[Math.max(numKeyframes, 2)];
    if (numKeyframes == 1) {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
        keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
        if (Float.isNaN(values[0])) {
            badValue = true;
        }
    } else {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f, values[0]);
        for (int i = 1; i < numKeyframes; ++i) {
            keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]);
            if (Float.isNaN(values[i])) {
                badValue = true;
            }
        }
    }
    if (badValue) {
        Log.w(""Animator"", ""Bad value (NaN) in float animator"");
    }
    return new FloatKeyframeSet(keyframes);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int numKeyframes, []), Expression(values.length, [])]), AssignmentExpression(=, [VariableReference(FloatKeyframe[] keyframes, []), Expression(new FloatKeyframe[Math.max(numKeyframes, 2)], [])]), AssignmentExpression(=, [VariableReference(if (numKeyframes, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f), [])]), AssignmentExpression(=, [VariableReference(keyframes[1], []), Expression((FloatKeyframe) Keyframe.ofFloat(1f, values[0]), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f, values[0]), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(1, [])]), Statement(i < numKeyframes, []), Statement(++i) {, []), AssignmentExpression(=, [VariableReference(keyframes[i], []), Expression((FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]), [])]), Statement(}, []), Statement(}, []), Statement(return new FloatKeyframeSet(keyframes), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int numKeyframes, []), Expression(values.length, [])])    VariableReference(int numKeyframes, [])    Expression(values.length, [])  AssignmentExpression(=, [VariableReference(FloatKeyframe[] keyframes, []), Expression(new FloatKeyframe[Math.max(numKeyframes, 2)], [])])    VariableReference(FloatKeyframe[] keyframes, [])    Expression(new FloatKeyframe[Math.max(numKeyframes, 2)], [])  AssignmentExpression(=, [VariableReference(if (numKeyframes, []), Expression(, [])])    VariableReference(if (numKeyframes, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f), [])])    VariableReference(keyframes[0], [])    Expression((FloatKeyframe) Keyframe.ofFloat(0f), [])  AssignmentExpression(=, [VariableReference(keyframes[1], []), Expression((FloatKeyframe) Keyframe.ofFloat(1f, values[0]), [])])    VariableReference(keyframes[1], [])    Expression((FloatKeyframe) Keyframe.ofFloat(1f, values[0]), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f, values[0]), [])])    VariableReference(keyframes[0], [])    Expression((FloatKeyframe) Keyframe.ofFloat(0f, values[0]), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(1, [])])    VariableReference(for (int i, [])    Expression(1, [])  Statement(i < numKeyframes, [])  Statement(++i) {, [])  AssignmentExpression(=, [VariableReference(keyframes[i], []), Expression((FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]), [])])    VariableReference(keyframes[i], [])    Expression((FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]), [])  Statement(}, [])  Statement(}, [])  Statement(return new FloatKeyframeSet(keyframes), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(boolean badValue, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(int numKeyframes, []), Expression(values.length, [])]), AssignmentExpression(=, [VariableReference(FloatKeyframe[] keyframes, []), Expression(new FloatKeyframe[Math.max(numKeyframes, 2)], [])]), AssignmentExpression(=, [VariableReference(if (numKeyframes, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f), [])]), AssignmentExpression(=, [VariableReference(keyframes[1], []), Expression((FloatKeyframe) Keyframe.ofFloat(1f, values[0]), [])]), MethodCall(if (Float.isNaN(values[0])), [VariableReference(if (Float, []), Expression(values[0]), [])]), AssignmentExpression(=, [VariableReference(badValue, []), Expression(true, [])]), Statement(}, []), Statement(} else {, []), AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f, values[0]), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(1, [])]), Statement(i < numKeyframes, []), Statement(++i) {, []), AssignmentExpression(=, [VariableReference(keyframes[i], []), Expression((FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]), [])]), MethodCall(if (Float.isNaN(values[i])), [VariableReference(if (Float, []), Expression(values[i]), [])]), AssignmentExpression(=, [VariableReference(badValue, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(if (badValue) {, []), MethodCall(Log.w(""Animator"", ""Bad value (NaN) in float animator""), [VariableReference(Log, []), Expression(""Animator"", []), Expression(""Bad value (NaN) in float animator"", [])]), Statement(}, []), Statement(return new FloatKeyframeSet(keyframes), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(boolean badValue, []), Expression(false, [])])    VariableReference(boolean badValue, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(int numKeyframes, []), Expression(values.length, [])])    VariableReference(int numKeyframes, [])    Expression(values.length, [])  AssignmentExpression(=, [VariableReference(FloatKeyframe[] keyframes, []), Expression(new FloatKeyframe[Math.max(numKeyframes, 2)], [])])    VariableReference(FloatKeyframe[] keyframes, [])    Expression(new FloatKeyframe[Math.max(numKeyframes, 2)], [])  AssignmentExpression(=, [VariableReference(if (numKeyframes, []), Expression(, [])])    VariableReference(if (numKeyframes, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f), [])])    VariableReference(keyframes[0], [])    Expression((FloatKeyframe) Keyframe.ofFloat(0f), [])  AssignmentExpression(=, [VariableReference(keyframes[1], []), Expression((FloatKeyframe) Keyframe.ofFloat(1f, values[0]), [])])    VariableReference(keyframes[1], [])    Expression((FloatKeyframe) Keyframe.ofFloat(1f, values[0]), [])  MethodCall(if (Float.isNaN(values[0])), [VariableReference(if (Float, []), Expression(values[0]), [])])    VariableReference(if (Float, [])    Expression(values[0]), [])  AssignmentExpression(=, [VariableReference(badValue, []), Expression(true, [])])    VariableReference(badValue, [])    Expression(true, [])  Statement(}, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(keyframes[0], []), Expression((FloatKeyframe) Keyframe.ofFloat(0f, values[0]), [])])    VariableReference(keyframes[0], [])    Expression((FloatKeyframe) Keyframe.ofFloat(0f, values[0]), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(1, [])])    VariableReference(for (int i, [])    Expression(1, [])  Statement(i < numKeyframes, [])  Statement(++i) {, [])  AssignmentExpression(=, [VariableReference(keyframes[i], []), Expression((FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]), [])])    VariableReference(keyframes[i], [])    Expression((FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]), [])  MethodCall(if (Float.isNaN(values[i])), [VariableReference(if (Float, []), Expression(values[i]), [])])    VariableReference(if (Float, [])    Expression(values[i]), [])  AssignmentExpression(=, [VariableReference(badValue, []), Expression(true, [])])    VariableReference(badValue, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(if (badValue) {, [])  MethodCall(Log.w(""Animator"", ""Bad value (NaN) in float animator""), [VariableReference(Log, []), Expression(""Animator"", []), Expression(""Bad value (NaN) in float animator"", [])])    VariableReference(Log, [])    Expression(""Animator"", [])    Expression(""Bad value (NaN) in float animator"", [])  Statement(}, [])  Statement(return new FloatKeyframeSet(keyframes), [])  Statement(}, [])",1,,,0,,,0,0,0,0,1,"3,4",0,"3,4",0,"A new variable `badValue` has been introduced and is set based on whether any value in the array `values` is NaN. If it is detected that any value is NaN, a warning is logged using `Log.w`. These changes affect control flow (`if` conditions), and additional statements were introduced.","Although there are changes in the control flow and new statements were added, these changes do not affect the return values or exception handling of the method. Therefore, there is no compatibility issue."
<android.view.ViewGroup.MarginLayoutParams: void resolveLayoutDirection(int)>,17,18,<android.view.ViewGroup.MarginLayoutParams: void resolveLayoutDirection(int)>,<android.view.ViewGroup.MarginLayoutParams: void resolveLayoutDirection(int)>,0,"{
    setLayoutDirection(layoutDirection);
    if (!isMarginRelative())
        return;
    switch(layoutDirection) {
        case View.LAYOUT_DIRECTION_RTL:
            leftMargin = (endMargin > DEFAULT_RELATIVE) ? endMargin : initialLeftMargin;
            rightMargin = (startMargin > DEFAULT_RELATIVE) ? startMargin : initialRightMargin;
            break;
        case View.LAYOUT_DIRECTION_LTR:
        default:
            leftMargin = (startMargin > DEFAULT_RELATIVE) ? startMargin : initialLeftMargin;
            rightMargin = (endMargin > DEFAULT_RELATIVE) ? endMargin : initialRightMargin;
            break;
    }
}","{
    setLayoutDirection(layoutDirection);
    // Will use the left and right margins if no relative margin is defined.
    if (!isMarginRelative() || (mMarginFlags & NEED_RESOLUTION_MASK) != NEED_RESOLUTION_MASK)
        return;
    // Proceed with resolution
    doResolveMargins();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(setLayoutDirection(layoutDirection), []), Statement(if (!isMarginRelative()), []), Statement(return, []), Statement(switch(layoutDirection) {, []), Statement(case View.LAYOUT_DIRECTION_RTL:, []), AssignmentExpression(=, [VariableReference(leftMargin, []), Expression((endMargin > DEFAULT_RELATIVE) ? endMargin : initialLeftMargin, [])]), AssignmentExpression(=, [VariableReference(rightMargin, []), Expression((startMargin > DEFAULT_RELATIVE) ? startMargin : initialRightMargin, [])]), Statement(break, []), Statement(case View.LAYOUT_DIRECTION_LTR:, []), Statement(default:, []), AssignmentExpression(=, [VariableReference(leftMargin, []), Expression((startMargin > DEFAULT_RELATIVE) ? startMargin : initialLeftMargin, [])]), AssignmentExpression(=, [VariableReference(rightMargin, []), Expression((endMargin > DEFAULT_RELATIVE) ? endMargin : initialRightMargin, [])]), Statement(break, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(setLayoutDirection(layoutDirection), [])  Statement(if (!isMarginRelative()), [])  Statement(return, [])  Statement(switch(layoutDirection) {, [])  Statement(case View.LAYOUT_DIRECTION_RTL:, [])  AssignmentExpression(=, [VariableReference(leftMargin, []), Expression((endMargin > DEFAULT_RELATIVE) ? endMargin : initialLeftMargin, [])])    VariableReference(leftMargin, [])    Expression((endMargin > DEFAULT_RELATIVE) ? endMargin : initialLeftMargin, [])  AssignmentExpression(=, [VariableReference(rightMargin, []), Expression((startMargin > DEFAULT_RELATIVE) ? startMargin : initialRightMargin, [])])    VariableReference(rightMargin, [])    Expression((startMargin > DEFAULT_RELATIVE) ? startMargin : initialRightMargin, [])  Statement(break, [])  Statement(case View.LAYOUT_DIRECTION_LTR:, [])  Statement(default:, [])  AssignmentExpression(=, [VariableReference(leftMargin, []), Expression((startMargin > DEFAULT_RELATIVE) ? startMargin : initialLeftMargin, [])])    VariableReference(leftMargin, [])    Expression((startMargin > DEFAULT_RELATIVE) ? startMargin : initialLeftMargin, [])  AssignmentExpression(=, [VariableReference(rightMargin, []), Expression((endMargin > DEFAULT_RELATIVE) ? endMargin : initialRightMargin, [])])    VariableReference(rightMargin, [])    Expression((endMargin > DEFAULT_RELATIVE) ? endMargin : initialRightMargin, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(setLayoutDirection(layoutDirection), []), Statement(// Will use the left and right margins if no relative margin is defined., []), AssignmentExpression(=, [VariableReference(if (!isMarginRelative() || (mMarginFlags & NEED_RESOLUTION_MASK) !, []), Expression(NEED_RESOLUTION_MASK), [])]), Statement(return, []), Statement(// Proceed with resolution, []), Statement(doResolveMargins(), []), Statement(}, [])])  Statement({, [])  Statement(setLayoutDirection(layoutDirection), [])  Statement(// Will use the left and right margins if no relative margin is defined., [])  AssignmentExpression(=, [VariableReference(if (!isMarginRelative() || (mMarginFlags & NEED_RESOLUTION_MASK) !, []), Expression(NEED_RESOLUTION_MASK), [])])    VariableReference(if (!isMarginRelative() || (mMarginFlags & NEED_RESOLUTION_MASK) !, [])    Expression(NEED_RESOLUTION_MASK), [])  Statement(return, [])  Statement(// Proceed with resolution, [])  Statement(doResolveMargins(), [])  Statement(}, [])",1,"/**
 * This will be called by {@link android.view.View#requestLayout()}. Left and Right margins
 * may be overridden depending on layout direction.
 */
","/**
 * This will be called by {@link android.view.View#requestLayout()}. Left and Right margins
 * may be overridden depending on layout direction.
 */
",0,[@Override],[@Override],0,0,0,0,1,"1,3",1,"3, 4",1,"The control dependency has changed with the addition of `(mMarginFlags & NEED_RESOLUTION_MASK) != NEED_RESOLUTION_MASK`, and new statements `// Proceed with resolution` and `doResolveMargins()` have been added. Therefore, the code change types are 3 and 4.","The changes in control dependency and additional statements could potentially result in different behaviour when the late version API is invoked, particularly in the values returned by the method. Hence, the CI type is 1."
"<android.appwidget.AppWidgetHost: AppWidgetHostView createView(Context,int,AppWidgetProviderInfo)>",17,18,"<android.appwidget.AppWidgetHost: AppWidgetHostView createView(Context,int,AppWidgetProviderInfo)>","<android.appwidget.AppWidgetHost: AppWidgetHostView createView(Context,int,AppWidgetProviderInfo)>",0,"{
    AppWidgetHostView view = onCreateView(context, appWidgetId, appWidget);
    view.setOnClickHandler(mOnClickHandler);
    view.setAppWidget(appWidgetId, appWidget);
    synchronized (mViews) {
        mViews.put(appWidgetId, view);
    }
    RemoteViews views;
    try {
        views = sService.getAppWidgetViews(appWidgetId);
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
    view.updateAppWidget(views);
    return view;
}","{
    final int userId = mContext.getUserId();
    AppWidgetHostView view = onCreateView(mContext, appWidgetId, appWidget);
    view.setUserId(userId);
    view.setOnClickHandler(mOnClickHandler);
    view.setAppWidget(appWidgetId, appWidget);
    synchronized (mViews) {
        mViews.put(appWidgetId, view);
    }
    RemoteViews views;
    try {
        views = sService.getAppWidgetViews(appWidgetId, userId);
        if (views != null) {
            views.setUser(new UserHandle(mContext.getUserId()));
        }
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
    view.updateAppWidget(views);
    return view;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(AppWidgetHostView view, []), Expression(onCreateView(context, appWidgetId, appWidget), [])]), MethodCall(view.setOnClickHandler(mOnClickHandler), [VariableReference(view, []), Expression(mOnClickHandler, [])]), MethodCall(view.setAppWidget(appWidgetId, appWidget), [VariableReference(view, []), Expression(appWidgetId, []), Expression(appWidget, [])]), Statement(synchronized (mViews) {, []), MethodCall(mViews.put(appWidgetId, view), [VariableReference(mViews, []), Expression(appWidgetId, []), Expression(view, [])]), Statement(}, []), Statement(RemoteViews views, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(views, []), Expression(sService.getAppWidgetViews(appWidgetId), [])]), Statement(} catch (RemoteException e) {, []), Statement(throw new RuntimeException(""system server dead?"", e), []), Statement(}, []), MethodCall(view.updateAppWidget(views), [VariableReference(view, []), Expression(views, [])]), Statement(return view, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(AppWidgetHostView view, []), Expression(onCreateView(context, appWidgetId, appWidget), [])])    VariableReference(AppWidgetHostView view, [])    Expression(onCreateView(context, appWidgetId, appWidget), [])  MethodCall(view.setOnClickHandler(mOnClickHandler), [VariableReference(view, []), Expression(mOnClickHandler, [])])    VariableReference(view, [])    Expression(mOnClickHandler, [])  MethodCall(view.setAppWidget(appWidgetId, appWidget), [VariableReference(view, []), Expression(appWidgetId, []), Expression(appWidget, [])])    VariableReference(view, [])    Expression(appWidgetId, [])    Expression(appWidget, [])  Statement(synchronized (mViews) {, [])  MethodCall(mViews.put(appWidgetId, view), [VariableReference(mViews, []), Expression(appWidgetId, []), Expression(view, [])])    VariableReference(mViews, [])    Expression(appWidgetId, [])    Expression(view, [])  Statement(}, [])  Statement(RemoteViews views, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(views, []), Expression(sService.getAppWidgetViews(appWidgetId), [])])    VariableReference(views, [])    Expression(sService.getAppWidgetViews(appWidgetId), [])  Statement(} catch (RemoteException e) {, [])  Statement(throw new RuntimeException(""system server dead?"", e), [])  Statement(}, [])  MethodCall(view.updateAppWidget(views), [VariableReference(view, []), Expression(views, [])])    VariableReference(view, [])    Expression(views, [])  Statement(return view, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final int userId, []), Expression(mContext.getUserId(), [])]), AssignmentExpression(=, [VariableReference(AppWidgetHostView view, []), Expression(onCreateView(mContext, appWidgetId, appWidget), [])]), MethodCall(view.setUserId(userId), [VariableReference(view, []), Expression(userId, [])]), MethodCall(view.setOnClickHandler(mOnClickHandler), [VariableReference(view, []), Expression(mOnClickHandler, [])]), MethodCall(view.setAppWidget(appWidgetId, appWidget), [VariableReference(view, []), Expression(appWidgetId, []), Expression(appWidget, [])]), Statement(synchronized (mViews) {, []), MethodCall(mViews.put(appWidgetId, view), [VariableReference(mViews, []), Expression(appWidgetId, []), Expression(view, [])]), Statement(}, []), Statement(RemoteViews views, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(views, []), Expression(sService.getAppWidgetViews(appWidgetId, userId), [])]), AssignmentExpression(=, [VariableReference(if (views !, []), Expression(null) {, [])]), MethodCall(views.setUser(new UserHandle(mContext.getUserId())), [VariableReference(views, []), Expression(new UserHandle(mContext.getUserId()), [])]), Statement(}, []), Statement(} catch (RemoteException e) {, []), Statement(throw new RuntimeException(""system server dead?"", e), []), Statement(}, []), MethodCall(view.updateAppWidget(views), [VariableReference(view, []), Expression(views, [])]), Statement(return view, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int userId, []), Expression(mContext.getUserId(), [])])    VariableReference(final int userId, [])    Expression(mContext.getUserId(), [])  AssignmentExpression(=, [VariableReference(AppWidgetHostView view, []), Expression(onCreateView(mContext, appWidgetId, appWidget), [])])    VariableReference(AppWidgetHostView view, [])    Expression(onCreateView(mContext, appWidgetId, appWidget), [])  MethodCall(view.setUserId(userId), [VariableReference(view, []), Expression(userId, [])])    VariableReference(view, [])    Expression(userId, [])  MethodCall(view.setOnClickHandler(mOnClickHandler), [VariableReference(view, []), Expression(mOnClickHandler, [])])    VariableReference(view, [])    Expression(mOnClickHandler, [])  MethodCall(view.setAppWidget(appWidgetId, appWidget), [VariableReference(view, []), Expression(appWidgetId, []), Expression(appWidget, [])])    VariableReference(view, [])    Expression(appWidgetId, [])    Expression(appWidget, [])  Statement(synchronized (mViews) {, [])  MethodCall(mViews.put(appWidgetId, view), [VariableReference(mViews, []), Expression(appWidgetId, []), Expression(view, [])])    VariableReference(mViews, [])    Expression(appWidgetId, [])    Expression(view, [])  Statement(}, [])  Statement(RemoteViews views, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(views, []), Expression(sService.getAppWidgetViews(appWidgetId, userId), [])])    VariableReference(views, [])    Expression(sService.getAppWidgetViews(appWidgetId, userId), [])  AssignmentExpression(=, [VariableReference(if (views !, []), Expression(null) {, [])])    VariableReference(if (views !, [])    Expression(null) {, [])  MethodCall(views.setUser(new UserHandle(mContext.getUserId())), [VariableReference(views, []), Expression(new UserHandle(mContext.getUserId()), [])])    VariableReference(views, [])    Expression(new UserHandle(mContext.getUserId()), [])  Statement(}, [])  Statement(} catch (RemoteException e) {, [])  Statement(throw new RuntimeException(""system server dead?"", e), [])  Statement(}, [])  MethodCall(view.updateAppWidget(views), [VariableReference(view, []), Expression(views, [])])    VariableReference(view, [])    Expression(views, [])  Statement(return view, [])  Statement(}, [])",1,"/**
 * Create the AppWidgetHostView for the given widget.
 * The AppWidgetHost retains a pointer to the newly-created View.
 */
","/**
 * Create the AppWidgetHostView for the given widget.
 * The AppWidgetHost retains a pointer to the newly-created View.
 */
",0,,,0,0,0,0,1|2,"1,3,4,5",1,"3, 4, 5",1,There are several changes:,"3. The `sService.getAppWidgetViews` method now takes `appWidgetId` and `userId` as parameters, and there is additional logic to check if `views` is null and set the user."
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>,17,18,<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>,<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>,0,"{
    setBooleanProperty(PROPERTY_FOCUSED, focused);
}","{
    setBooleanProperty(BOOLEAN_PROPERTY_FOCUSED, focused);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(setBooleanProperty(PROPERTY_FOCUSED, focused), []), Statement(}, [])])  Statement({, [])  Statement(setBooleanProperty(PROPERTY_FOCUSED, focused), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(setBooleanProperty(BOOLEAN_PROPERTY_FOCUSED, focused), []), Statement(}, [])])  Statement({, [])  Statement(setBooleanProperty(BOOLEAN_PROPERTY_FOCUSED, focused), [])  Statement(}, [])",1,"/**
 * Sets whether this node is focused.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param focused True if the node is focused.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
","/**
 * Sets whether this node is focused.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param focused True if the node is focused.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
",0,,,0,0,0,0,2,5,0,5,0,"The change in the identifier from `PROPERTY_FOCUSED` to `BOOLEAN_PROPERTY_FOCUSED` indicates that a dependent property's name has been modified. Hence, the code change type is 5.","This change does not seem to affect the return values or exceptions thrown by the API, so there is no compatibility issue in this case. The CI type is 0."
<android.os.Looper: void quit()>,17,18,<android.os.Looper: void quit()>,<android.os.Looper: void quit()>,0,"{
    mQueue.quit();
}","{
    mQueue.quit(false);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mQueue.quit(), [VariableReference(mQueue, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mQueue.quit(), [VariableReference(mQueue, []), Expression(, [])])    VariableReference(mQueue, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(mQueue.quit(false), [VariableReference(mQueue, []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mQueue.quit(false), [VariableReference(mQueue, []), Expression(false, [])])    VariableReference(mQueue, [])    Expression(false, [])  Statement(}, [])",1,"/**
 * Quits the looper.
 *
 * Causes the {@link #loop} method to terminate as soon as possible.
 */
","/**
 * Quits the looper.
 * <p>
 * Causes the {@link #loop} method to terminate without processing any
 * more messages in the message queue.
 * </p><p>
 * Any attempt to post messages to the queue after the looper is asked to quit will fail.
 * For example, the {@link Handler#sendMessage(Message)} method will return false.
 * </p><p class=""note"">
 * Using this method may be unsafe because some messages may not be delivered
 * before the looper terminates.  Consider using {@link #quitSafely} instead to ensure
 * that all pending work is completed in an orderly manner.
 * </p>
 *
 * @see #quitSafely
 */
",1,,,0,0,0,0,2,5,0,5,0,"The method call `mQueue.quit()` in the early version has been changed to `mQueue.quit(false)` in the late version. The change involves an addition of a parameter to the method being called, which can be attributed to a dependent API change.","The change involves passing a boolean parameter to the `quit` method of the `mQueue` object. Assuming the addition of the boolean parameter 'false' does not fundamentally affect the most common expected behavior (stopping the queue), it should not cause a direct Compatibility Issue. Therefore, the CI type is 0."
<android.os.Parcel: T readParcelable(ClassLoader)>,17,18,<android.os.Parcel: T readParcelable(ClassLoader)>,<android.os.Parcel: T readParcelable(ClassLoader)>,0,"{
    String name = readString();
    if (name == null) {
        return null;
    }
    Parcelable.Creator<T> creator;
    synchronized (mCreators) {
        HashMap<String, Parcelable.Creator> map = mCreators.get(loader);
        if (map == null) {
            map = new HashMap<String, Parcelable.Creator>();
            mCreators.put(loader, map);
        }
        creator = map.get(name);
        if (creator == null) {
            try {
                Class c = loader == null ? Class.forName(name) : Class.forName(name, true, loader);
                Field f = c.getField(""CREATOR"");
                creator = (Parcelable.Creator) f.get(null);
            } catch (IllegalAccessException e) {
                Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e);
                throw new BadParcelableException(""IllegalAccessException when unmarshalling: "" + name);
            } catch (ClassNotFoundException e) {
                Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e);
                throw new BadParcelableException(""ClassNotFoundException when unmarshalling: "" + name);
            } catch (ClassCastException e) {
                throw new BadParcelableException(""Parcelable protocol requires a "" + ""Parcelable.Creator object called "" + "" CREATOR on class "" + name);
            } catch (NoSuchFieldException e) {
                throw new BadParcelableException(""Parcelable protocol requires a "" + ""Parcelable.Creator object called "" + "" CREATOR on class "" + name);
            }
            if (creator == null) {
                throw new BadParcelableException(""Parcelable protocol requires a "" + ""Parcelable.Creator object called "" + "" CREATOR on class "" + name);
            }
            map.put(name, creator);
        }
    }
    if (creator instanceof Parcelable.ClassLoaderCreator<?>) {
        return ((Parcelable.ClassLoaderCreator<T>) creator).createFromParcel(this, loader);
    }
    return creator.createFromParcel(this);
}","{
    Parcelable.Creator<T> creator = readParcelableCreator(loader);
    if (creator == null) {
        return null;
    }
    if (creator instanceof Parcelable.ClassLoaderCreator<?>) {
        return ((Parcelable.ClassLoaderCreator<T>) creator).createFromParcel(this, loader);
    }
    return creator.createFromParcel(this);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String name, []), Expression(readString(), [])]), AssignmentExpression(=, [VariableReference(if (name, []), Expression(, [])]), Statement(return null, []), Statement(}, []), Statement(Parcelable.Creator<T> creator, []), Statement(synchronized (mCreators) {, []), AssignmentExpression(=, [VariableReference(HashMap<String, Parcelable.Creator> map, []), Expression(mCreators.get(loader), [])]), AssignmentExpression(=, [VariableReference(if (map, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(map, []), Expression(new HashMap<String, Parcelable.Creator>(), [])]), MethodCall(mCreators.put(loader, map), [VariableReference(mCreators, []), Expression(loader, []), Expression(map, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(creator, []), Expression(map.get(name), [])]), AssignmentExpression(=, [VariableReference(if (creator, []), Expression(, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(Class c, []), Expression(loader, [])]), AssignmentExpression(=, [VariableReference(Field f, []), Expression(c.getField(""CREATOR""), [])]), AssignmentExpression(=, [VariableReference(creator, []), Expression((Parcelable.Creator) f.get(null), [])]), Statement(} catch (IllegalAccessException e) {, []), MethodCall(Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Class not found when unmarshalling: "" + name + "", []), Expression(e: "" + e, [])]), Statement(throw new BadParcelableException(""IllegalAccessException when unmarshalling: "" + name), []), Statement(} catch (ClassNotFoundException e) {, []), MethodCall(Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Class not found when unmarshalling: "" + name + "", []), Expression(e: "" + e, [])]), Statement(throw new BadParcelableException(""ClassNotFoundException when unmarshalling: "" + name), []), Statement(} catch (ClassCastException e) {, []), Statement(} catch (NoSuchFieldException e) {, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (creator, []), Expression(, [])]), Statement(}, []), MethodCall(map.put(name, creator), [VariableReference(map, []), Expression(name, []), Expression(creator, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(return creator.createFromParcel(this), [VariableReference(return creator, []), Expression(this, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String name, []), Expression(readString(), [])])    VariableReference(String name, [])    Expression(readString(), [])  AssignmentExpression(=, [VariableReference(if (name, []), Expression(, [])])    VariableReference(if (name, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  Statement(Parcelable.Creator<T> creator, [])  Statement(synchronized (mCreators) {, [])  AssignmentExpression(=, [VariableReference(HashMap<String, Parcelable.Creator> map, []), Expression(mCreators.get(loader), [])])    VariableReference(HashMap<String, Parcelable.Creator> map, [])    Expression(mCreators.get(loader), [])  AssignmentExpression(=, [VariableReference(if (map, []), Expression(, [])])    VariableReference(if (map, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(map, []), Expression(new HashMap<String, Parcelable.Creator>(), [])])    VariableReference(map, [])    Expression(new HashMap<String, Parcelable.Creator>(), [])  MethodCall(mCreators.put(loader, map), [VariableReference(mCreators, []), Expression(loader, []), Expression(map, [])])    VariableReference(mCreators, [])    Expression(loader, [])    Expression(map, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(creator, []), Expression(map.get(name), [])])    VariableReference(creator, [])    Expression(map.get(name), [])  AssignmentExpression(=, [VariableReference(if (creator, []), Expression(, [])])    VariableReference(if (creator, [])    Expression(, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Class c, []), Expression(loader, [])])    VariableReference(Class c, [])    Expression(loader, [])  AssignmentExpression(=, [VariableReference(Field f, []), Expression(c.getField(""CREATOR""), [])])    VariableReference(Field f, [])    Expression(c.getField(""CREATOR""), [])  AssignmentExpression(=, [VariableReference(creator, []), Expression((Parcelable.Creator) f.get(null), [])])    VariableReference(creator, [])    Expression((Parcelable.Creator) f.get(null), [])  Statement(} catch (IllegalAccessException e) {, [])  MethodCall(Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Class not found when unmarshalling: "" + name + "", []), Expression(e: "" + e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Class not found when unmarshalling: "" + name + "", [])    Expression(e: "" + e, [])  Statement(throw new BadParcelableException(""IllegalAccessException when unmarshalling: "" + name), [])  Statement(} catch (ClassNotFoundException e) {, [])  MethodCall(Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Class not found when unmarshalling: "" + name + "", []), Expression(e: "" + e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Class not found when unmarshalling: "" + name + "", [])    Expression(e: "" + e, [])  Statement(throw new BadParcelableException(""ClassNotFoundException when unmarshalling: "" + name), [])  Statement(} catch (ClassCastException e) {, [])  Statement(} catch (NoSuchFieldException e) {, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (creator, []), Expression(, [])])    VariableReference(if (creator, [])    Expression(, [])  Statement(}, [])  MethodCall(map.put(name, creator), [VariableReference(map, []), Expression(name, []), Expression(creator, [])])    VariableReference(map, [])    Expression(name, [])    Expression(creator, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(return creator.createFromParcel(this), [VariableReference(return creator, []), Expression(this, [])])    VariableReference(return creator, [])    Expression(this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Parcelable.Creator<T> creator, []), Expression(readParcelableCreator(loader), [])]), AssignmentExpression(=, [VariableReference(if (creator, []), Expression(, [])]), Statement(return null, []), Statement(}, []), Statement(}, []), MethodCall(return creator.createFromParcel(this), [VariableReference(return creator, []), Expression(this, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Parcelable.Creator<T> creator, []), Expression(readParcelableCreator(loader), [])])    VariableReference(Parcelable.Creator<T> creator, [])    Expression(readParcelableCreator(loader), [])  AssignmentExpression(=, [VariableReference(if (creator, []), Expression(, [])])    VariableReference(if (creator, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  Statement(}, [])  MethodCall(return creator.createFromParcel(this), [VariableReference(return creator, []), Expression(this, [])])    VariableReference(return creator, [])    Expression(this, [])  Statement(}, [])",1,"/**
 * Read and return a new Parcelable from the parcel.  The given class loader
 * will be used to load any enclosed Parcelables.  If it is null, the default
 * class loader will be used.
 * @param loader A ClassLoader from which to instantiate the Parcelable
 * object, or null for the default class loader.
 * @return Returns the newly created Parcelable, or null if a null
 * object has been written.
 * @throws BadParcelableException Throws BadParcelableException if there
 * was an error trying to instantiate the Parcelable.
 */
","/**
 * Read and return a new Parcelable from the parcel.  The given class loader
 * will be used to load any enclosed Parcelables.  If it is null, the default
 * class loader will be used.
 * @param loader A ClassLoader from which to instantiate the Parcelable
 * object, or null for the default class loader.
 * @return Returns the newly created Parcelable, or null if a null
 * object has been written.
 * @throws BadParcelableException Throws BadParcelableException if there
 * was an error trying to instantiate the Parcelable.
 */
",0,,,0,0,0,0,1,"2,3,4",2,"4,5",0,"The Late_Implementation uses a helper method `readParcelableCreator(loader)` to obtain the `creator` instead of the manual process done in Early_Implementation. This belongs to other statement change and dependent API change, so the code change type is 4,5.","There are no changes in the return statements or exception handling logic. Thus, there is no potential Compatibility Issue (CI type 0)."
<android.widget.TextView: void onRtlPropertiesChanged(int)>,19,20,<android.widget.TextView: void onRtlPropertiesChanged(int)>,<android.widget.TextView: void onRtlPropertiesChanged(int)>,0,"{
    super.onRtlPropertiesChanged(layoutDirection);
    mTextDir = getTextDirectionHeuristic();
}","{
    super.onRtlPropertiesChanged(layoutDirection);
    mTextDir = getTextDirectionHeuristic();
    if (mLayout != null) {
        checkForRelayout();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onRtlPropertiesChanged(layoutDirection), [VariableReference(super, []), Expression(layoutDirection, [])]), AssignmentExpression(=, [VariableReference(mTextDir, []), Expression(getTextDirectionHeuristic(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.onRtlPropertiesChanged(layoutDirection), [VariableReference(super, []), Expression(layoutDirection, [])])    VariableReference(super, [])    Expression(layoutDirection, [])  AssignmentExpression(=, [VariableReference(mTextDir, []), Expression(getTextDirectionHeuristic(), [])])    VariableReference(mTextDir, [])    Expression(getTextDirectionHeuristic(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onRtlPropertiesChanged(layoutDirection), [VariableReference(super, []), Expression(layoutDirection, [])]), AssignmentExpression(=, [VariableReference(mTextDir, []), Expression(getTextDirectionHeuristic(), [])]), AssignmentExpression(=, [VariableReference(if (mLayout !, []), Expression(null) {, [])]), Statement(checkForRelayout(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.onRtlPropertiesChanged(layoutDirection), [VariableReference(super, []), Expression(layoutDirection, [])])    VariableReference(super, [])    Expression(layoutDirection, [])  AssignmentExpression(=, [VariableReference(mTextDir, []), Expression(getTextDirectionHeuristic(), [])])    VariableReference(mTextDir, [])    Expression(getTextDirectionHeuristic(), [])  AssignmentExpression(=, [VariableReference(if (mLayout !, []), Expression(null) {, [])])    VariableReference(if (mLayout !, [])    Expression(null) {, [])  Statement(checkForRelayout(), [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],0,0,0,0,1,3,0,"3,4",0,"A control statement (if condition) has been added along with its contained statement checkForRelayout(), which is a control dependency change (3) and other statement change (4).","This change does not affect the return statement or introduce a new exception handling mechanism. Hence, there is no potential for a Compatibility Issue (0)."
"<android.app.AlertDialog: void setButton3(CharSequence,Message)>",19,20,"<android.app.AlertDialog: void setButton3(CharSequence,Message)>","<android.app.AlertDialog: void setButton3(CharSequence,OnClickListener)>",0,"{
    setButton(BUTTON_NEUTRAL, text, msg);
}","{
    setButton(BUTTON_NEUTRAL, text, listener);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(setButton(BUTTON_NEUTRAL, text, msg), []), Statement(}, [])])  Statement({, [])  Statement(setButton(BUTTON_NEUTRAL, text, msg), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(setButton(BUTTON_NEUTRAL, text, listener), []), Statement(}, [])])  Statement({, [])  Statement(setButton(BUTTON_NEUTRAL, text, listener), [])  Statement(}, [])",1,"/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_NEUTRAL}.
 */
","/**
 * Set a listener to be invoked when button 3 of the dialog is pressed.
 * @param text The text to display in button 3.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_POSITIVE}
 */
",1,[@Deprecated],[@Deprecated],0,0,0,0,1,5,0,4,0,"The change is in the parameter passed to the `setButton` method, where `msg` is replaced with `listener`. Since this doesn't fall under return statement, exception handling statement, or control dependency change, it is classified as an ""Other statement changed.""","This change does not lead to a Compatibility Issue as it does not result in different return values or exceptions. The API behaviour in terms of its end result (setting a button) remains the same, thus the CI type is 0."
<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>,19,20,<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>,<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>,0,"{
    return runAction(new Action<Set<String>>() {

        @Override
        public Set<String> run(ITextToSpeechService service) throws RemoteException {
            String[] features = service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant());
            if (features != null) {
                final Set<String> featureSet = new HashSet<String>();
                Collections.addAll(featureSet, features);
                return featureSet;
            }
            return null;
        }
    }, null, ""getFeatures"");
}","{
    return runAction(new Action<Set<String>>() {

        @Override
        public Set<String> run(ITextToSpeechService service) throws RemoteException {
            String[] features = null;
            try {
                features = service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant());
            } catch (MissingResourceException e) {
                Log.w(TAG, ""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, e);
                return null;
            }
            if (features != null) {
                final Set<String> featureSet = new HashSet<String>();
                Collections.addAll(featureSet, features);
                return featureSet;
            }
            return null;
        }
    }, null, ""getFeatures"");
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return runAction(new Action<Set<String>>() {, []), Statement(@Override, []), Statement(public Set<String> run(ITextToSpeechService service) throws RemoteException {, []), AssignmentExpression(=, [VariableReference(String[] features, []), Expression(service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()), [])]), AssignmentExpression(=, [VariableReference(if (features !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final Set<String> featureSet, []), Expression(new HashSet<String>(), [])]), MethodCall(Collections.addAll(featureSet, features), [VariableReference(Collections, []), Expression(featureSet, []), Expression(features, [])]), Statement(return featureSet, []), Statement(}, []), Statement(return null, []), Statement(}, []), Statement(}, null, ""getFeatures""), []), Statement(}, [])])  Statement({, [])  Statement(return runAction(new Action<Set<String>>() {, [])  Statement(@Override, [])  Statement(public Set<String> run(ITextToSpeechService service) throws RemoteException {, [])  AssignmentExpression(=, [VariableReference(String[] features, []), Expression(service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()), [])])    VariableReference(String[] features, [])    Expression(service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()), [])  AssignmentExpression(=, [VariableReference(if (features !, []), Expression(null) {, [])])    VariableReference(if (features !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final Set<String> featureSet, []), Expression(new HashSet<String>(), [])])    VariableReference(final Set<String> featureSet, [])    Expression(new HashSet<String>(), [])  MethodCall(Collections.addAll(featureSet, features), [VariableReference(Collections, []), Expression(featureSet, []), Expression(features, [])])    VariableReference(Collections, [])    Expression(featureSet, [])    Expression(features, [])  Statement(return featureSet, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])  Statement(}, null, ""getFeatures""), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return runAction(new Action<Set<String>>() {, []), Statement(@Override, []), Statement(public Set<String> run(ITextToSpeechService service) throws RemoteException {, []), AssignmentExpression(=, [VariableReference(String[] features, []), Expression(null, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(features, []), Expression(service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()), [])]), Statement(} catch (MissingResourceException e) {, []), MethodCall(Log.w(TAG, ""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, []), Expression(e, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (features !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final Set<String> featureSet, []), Expression(new HashSet<String>(), [])]), MethodCall(Collections.addAll(featureSet, features), [VariableReference(Collections, []), Expression(featureSet, []), Expression(features, [])]), Statement(return featureSet, []), Statement(}, []), Statement(return null, []), Statement(}, []), Statement(}, null, ""getFeatures""), []), Statement(}, [])])  Statement({, [])  Statement(return runAction(new Action<Set<String>>() {, [])  Statement(@Override, [])  Statement(public Set<String> run(ITextToSpeechService service) throws RemoteException {, [])  AssignmentExpression(=, [VariableReference(String[] features, []), Expression(null, [])])    VariableReference(String[] features, [])    Expression(null, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(features, []), Expression(service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()), [])])    VariableReference(features, [])    Expression(service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()), [])  Statement(} catch (MissingResourceException e) {, [])  MethodCall(Log.w(TAG, ""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (features !, []), Expression(null) {, [])])    VariableReference(if (features !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final Set<String> featureSet, []), Expression(new HashSet<String>(), [])])    VariableReference(final Set<String> featureSet, [])    Expression(new HashSet<String>(), [])  MethodCall(Collections.addAll(featureSet, features), [VariableReference(Collections, []), Expression(featureSet, []), Expression(features, [])])    VariableReference(Collections, [])    Expression(featureSet, [])    Expression(features, [])  Statement(return featureSet, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])  Statement(}, null, ""getFeatures""), [])  Statement(}, [])",1,"/**
 * Queries the engine for the set of features it supports for a given locale.
 * Features can either be framework defined, e.g.
 * {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.
 * Engine specific keys must be prefixed by the name of the engine they
 * are intended for. These keys can be used as parameters to
 * {@link TextToSpeech#speak(String, int, java.util.HashMap)} and
 * {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.
 *
 * Features are boolean flags, and their values in the synthesis parameters
 * must be behave as per {@link Boolean#parseBoolean(String)}.
 *
 * @param locale The locale to query features for.
 */
","/**
 * Queries the engine for the set of features it supports for a given locale.
 * Features can either be framework defined, e.g.
 * {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.
 * Engine specific keys must be prefixed by the name of the engine they
 * are intended for. These keys can be used as parameters to
 * {@link TextToSpeech#speak(String, int, java.util.HashMap)} and
 * {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.
 *
 * Features are boolean flags, and their values in the synthesis parameters
 * must be behave as per {@link Boolean#parseBoolean(String)}.
 *
 * @param locale The locale to query features for.
 */
",1,,,0,0,0,0,1,"1,2,4","1,2","2, 3","1, 2","The late implementation introduces a `try-catch` block to catch `MissingResourceException` and log a warning before returning `null`. This control dependency change (type 3) leads to a change in exception handling (type 2), which can cause different behavior in terms of return values and exception handling.","Due to the addition of the `try-catch` block and the new behavior for handling `MissingResourceException`, the API might return `null` in cases where it didn't previously, and will also log a warning. This causes potential differences in both return values (CI type 1) and exception handling (CI type 2)."
"<android.app.ActivityThread.ApplicationThread: void dumpProvider(FileDescriptor,IBinder,String[])>",19,20,"<android.app.ActivityThread.ApplicationThread: void dumpProvider(FileDescriptor,IBinder,String[])>","<android.app.ActivityThread.ApplicationThread: void dumpProvider(FileDescriptor,IBinder,String[])>",0,"{
    DumpComponentInfo data = new DumpComponentInfo();
    try {
        data.fd = ParcelFileDescriptor.dup(fd);
        data.token = providertoken;
        data.args = args;
        queueOrSendMessage(H.DUMP_PROVIDER, data);
    } catch (IOException e) {
        Slog.w(TAG, ""dumpProvider failed"", e);
    }
}","{
    DumpComponentInfo data = new DumpComponentInfo();
    try {
        data.fd = ParcelFileDescriptor.dup(fd);
        data.token = providertoken;
        data.args = args;
        sendMessage(H.DUMP_PROVIDER, data, 0, 0, true);
    } catch (IOException e) {
        Slog.w(TAG, ""dumpProvider failed"", e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(DumpComponentInfo data, []), Expression(new DumpComponentInfo(), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(data.fd, []), Expression(ParcelFileDescriptor.dup(fd), [])]), AssignmentExpression(=, [VariableReference(data.token, []), Expression(providertoken, [])]), AssignmentExpression(=, [VariableReference(data.args, []), Expression(args, [])]), Statement(} catch (IOException e) {, []), MethodCall(Slog.w(TAG, ""dumpProvider failed"", e), [VariableReference(Slog, []), Expression(TAG, []), Expression(""dumpProvider failed"", []), Expression(e, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(DumpComponentInfo data, []), Expression(new DumpComponentInfo(), [])])    VariableReference(DumpComponentInfo data, [])    Expression(new DumpComponentInfo(), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(data.fd, []), Expression(ParcelFileDescriptor.dup(fd), [])])    VariableReference(data.fd, [])    Expression(ParcelFileDescriptor.dup(fd), [])  AssignmentExpression(=, [VariableReference(data.token, []), Expression(providertoken, [])])    VariableReference(data.token, [])    Expression(providertoken, [])  AssignmentExpression(=, [VariableReference(data.args, []), Expression(args, [])])    VariableReference(data.args, [])    Expression(args, [])  Statement(} catch (IOException e) {, [])  MethodCall(Slog.w(TAG, ""dumpProvider failed"", e), [VariableReference(Slog, []), Expression(TAG, []), Expression(""dumpProvider failed"", []), Expression(e, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""dumpProvider failed"", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(DumpComponentInfo data, []), Expression(new DumpComponentInfo(), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(data.fd, []), Expression(ParcelFileDescriptor.dup(fd), [])]), AssignmentExpression(=, [VariableReference(data.token, []), Expression(providertoken, [])]), AssignmentExpression(=, [VariableReference(data.args, []), Expression(args, [])]), Statement(} catch (IOException e) {, []), MethodCall(Slog.w(TAG, ""dumpProvider failed"", e), [VariableReference(Slog, []), Expression(TAG, []), Expression(""dumpProvider failed"", []), Expression(e, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(DumpComponentInfo data, []), Expression(new DumpComponentInfo(), [])])    VariableReference(DumpComponentInfo data, [])    Expression(new DumpComponentInfo(), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(data.fd, []), Expression(ParcelFileDescriptor.dup(fd), [])])    VariableReference(data.fd, [])    Expression(ParcelFileDescriptor.dup(fd), [])  AssignmentExpression(=, [VariableReference(data.token, []), Expression(providertoken, [])])    VariableReference(data.token, [])    Expression(providertoken, [])  AssignmentExpression(=, [VariableReference(data.args, []), Expression(args, [])])    VariableReference(data.args, [])    Expression(args, [])  Statement(} catch (IOException e) {, [])  MethodCall(Slog.w(TAG, ""dumpProvider failed"", e), [VariableReference(Slog, []), Expression(TAG, []), Expression(""dumpProvider failed"", []), Expression(e, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""dumpProvider failed"", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,0,0,0,1,4,0,4,0,"The code that sends a message to the handler has changed from `queueOrSendMessage(H.DUMP_PROVIDER, data)` to `sendMessage(H.DUMP_PROVIDER, data, 0, 0, true)`. This alteration is considered as an ""Other statement changed"" type since it doesn't fall into return statement, exception handling statement, or control dependency changes.","The change in the message-sending code is not likely to lead to different return values or different exceptions. Therefore, no Compatibility Issue arises."
<android.widget.PopupWindow.PopupDecorView: void requestEnterTransition(Transition)>,23,24,<android.widget.PopupWindow.PopupDecorView: void requestEnterTransition(Transition)>,<android.widget.PopupWindow.PopupDecorView: void requestEnterTransition(Transition)>,0,"{
    final ViewTreeObserver observer = getViewTreeObserver();
    if (observer != null && transition != null) {
        final Transition enterTransition = transition.clone();
        // Postpone the enter transition after the first layout pass.
        observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                final ViewTreeObserver observer = getViewTreeObserver();
                if (observer != null) {
                    observer.removeOnGlobalLayoutListener(this);
                }
                final Rect epicenter = getRelativeAnchorBounds();
                enterTransition.setEpicenterCallback(new EpicenterCallback() {

                    @Override
                    public Rect onGetEpicenter(Transition transition) {
                        return epicenter;
                    }
                });
                startEnterTransition(enterTransition);
            }
        });
    }
}","{
    final ViewTreeObserver observer = getViewTreeObserver();
    if (observer != null && transition != null) {
        final Transition enterTransition = transition.clone();
        // Postpone the enter transition after the first layout pass.
        observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                final ViewTreeObserver observer = getViewTreeObserver();
                if (observer != null) {
                    observer.removeOnGlobalLayoutListener(this);
                }
                final Rect epicenter = getTransitionEpicenter();
                enterTransition.setEpicenterCallback(new EpicenterCallback() {

                    @Override
                    public Rect onGetEpicenter(Transition transition) {
                        return epicenter;
                    }
                });
                startEnterTransition(enterTransition);
            }
        });
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])]), AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null && transition !, [])]), AssignmentExpression(=, [VariableReference(final Transition enterTransition, []), Expression(transition.clone(), [])]), Statement(// Postpone the enter transition after the first layout pass., []), MethodCall(observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(), [VariableReference(observer, []), Expression(new OnGlobalLayoutListener(, [])]), Statement(@Override, []), Statement(public void onGlobalLayout() {, []), AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])]), AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null) {, [])]), MethodCall(observer.removeOnGlobalLayoutListener(this), [VariableReference(observer, []), Expression(this, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final Rect epicenter, []), Expression(getRelativeAnchorBounds(), [])]), MethodCall(enterTransition.setEpicenterCallback(new EpicenterCallback(), [VariableReference(enterTransition, []), Expression(new EpicenterCallback(, [])]), Statement(@Override, []), Statement(public Rect onGetEpicenter(Transition transition) {, []), Statement(return epicenter, []), Statement(}, []), Statement(}), []), Statement(startEnterTransition(enterTransition), []), Statement(}, []), Statement(}), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])])    VariableReference(final ViewTreeObserver observer, [])    Expression(getViewTreeObserver(), [])  AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null && transition !, [])])    VariableReference(if (observer !, [])    Expression(null && transition !, [])  AssignmentExpression(=, [VariableReference(final Transition enterTransition, []), Expression(transition.clone(), [])])    VariableReference(final Transition enterTransition, [])    Expression(transition.clone(), [])  Statement(// Postpone the enter transition after the first layout pass., [])  MethodCall(observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(), [VariableReference(observer, []), Expression(new OnGlobalLayoutListener(, [])])    VariableReference(observer, [])    Expression(new OnGlobalLayoutListener(, [])  Statement(@Override, [])  Statement(public void onGlobalLayout() {, [])  AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])])    VariableReference(final ViewTreeObserver observer, [])    Expression(getViewTreeObserver(), [])  AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null) {, [])])    VariableReference(if (observer !, [])    Expression(null) {, [])  MethodCall(observer.removeOnGlobalLayoutListener(this), [VariableReference(observer, []), Expression(this, [])])    VariableReference(observer, [])    Expression(this, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final Rect epicenter, []), Expression(getRelativeAnchorBounds(), [])])    VariableReference(final Rect epicenter, [])    Expression(getRelativeAnchorBounds(), [])  MethodCall(enterTransition.setEpicenterCallback(new EpicenterCallback(), [VariableReference(enterTransition, []), Expression(new EpicenterCallback(, [])])    VariableReference(enterTransition, [])    Expression(new EpicenterCallback(, [])  Statement(@Override, [])  Statement(public Rect onGetEpicenter(Transition transition) {, [])  Statement(return epicenter, [])  Statement(}, [])  Statement(}), [])  Statement(startEnterTransition(enterTransition), [])  Statement(}, [])  Statement(}), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])]), AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null && transition !, [])]), AssignmentExpression(=, [VariableReference(final Transition enterTransition, []), Expression(transition.clone(), [])]), Statement(// Postpone the enter transition after the first layout pass., []), MethodCall(observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(), [VariableReference(observer, []), Expression(new OnGlobalLayoutListener(, [])]), Statement(@Override, []), Statement(public void onGlobalLayout() {, []), AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])]), AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null) {, [])]), MethodCall(observer.removeOnGlobalLayoutListener(this), [VariableReference(observer, []), Expression(this, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final Rect epicenter, []), Expression(getTransitionEpicenter(), [])]), MethodCall(enterTransition.setEpicenterCallback(new EpicenterCallback(), [VariableReference(enterTransition, []), Expression(new EpicenterCallback(, [])]), Statement(@Override, []), Statement(public Rect onGetEpicenter(Transition transition) {, []), Statement(return epicenter, []), Statement(}, []), Statement(}), []), Statement(startEnterTransition(enterTransition), []), Statement(}, []), Statement(}), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])])    VariableReference(final ViewTreeObserver observer, [])    Expression(getViewTreeObserver(), [])  AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null && transition !, [])])    VariableReference(if (observer !, [])    Expression(null && transition !, [])  AssignmentExpression(=, [VariableReference(final Transition enterTransition, []), Expression(transition.clone(), [])])    VariableReference(final Transition enterTransition, [])    Expression(transition.clone(), [])  Statement(// Postpone the enter transition after the first layout pass., [])  MethodCall(observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(), [VariableReference(observer, []), Expression(new OnGlobalLayoutListener(, [])])    VariableReference(observer, [])    Expression(new OnGlobalLayoutListener(, [])  Statement(@Override, [])  Statement(public void onGlobalLayout() {, [])  AssignmentExpression(=, [VariableReference(final ViewTreeObserver observer, []), Expression(getViewTreeObserver(), [])])    VariableReference(final ViewTreeObserver observer, [])    Expression(getViewTreeObserver(), [])  AssignmentExpression(=, [VariableReference(if (observer !, []), Expression(null) {, [])])    VariableReference(if (observer !, [])    Expression(null) {, [])  MethodCall(observer.removeOnGlobalLayoutListener(this), [VariableReference(observer, []), Expression(this, [])])    VariableReference(observer, [])    Expression(this, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final Rect epicenter, []), Expression(getTransitionEpicenter(), [])])    VariableReference(final Rect epicenter, [])    Expression(getTransitionEpicenter(), [])  MethodCall(enterTransition.setEpicenterCallback(new EpicenterCallback(), [VariableReference(enterTransition, []), Expression(new EpicenterCallback(, [])])    VariableReference(enterTransition, [])    Expression(new EpicenterCallback(, [])  Statement(@Override, [])  Statement(public Rect onGetEpicenter(Transition transition) {, [])  Statement(return epicenter, [])  Statement(}, [])  Statement(}), [])  Statement(startEnterTransition(enterTransition), [])  Statement(}, [])  Statement(}), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Requests that an enter transition run after the next layout pass.
 */","/**
 * Requests that an enter transition run after the next layout pass.
 */",0,,,0,,,,1,4,0,3,1,"The method `getRelativeAnchorBounds()` in the return statement is changed to `getTransitionEpicenter()`, which is enclosed under an `if` statement. Therefore, this is a control dependency change.","Since the control flow has changed and it directly affects the returned `Rect` object (epicenter) from the method, it could potentially lead to different transition behaviors. Thus, the CI type is 1."
<android.view.ViewRootImpl.ImeInputStage: int onProcess(QueuedInputEvent)>,23,24,<android.view.ViewRootImpl.ImeInputStage: int onProcess(QueuedInputEvent)>,<android.view.ViewRootImpl.ImeInputStage: int onProcess(QueuedInputEvent)>,0,"{
    if (mLastWasImTarget && !isInLocalFocusMode()) {
        InputMethodManager imm = InputMethodManager.peekInstance();
        if (imm != null) {
            final InputEvent event = q.mEvent;
            if (DEBUG_IMF)
                Log.v(TAG, ""Sending input event to IME: "" + event);
            int result = imm.dispatchInputEvent(event, q, this, mHandler);
            if (result == InputMethodManager.DISPATCH_HANDLED) {
                return FINISH_HANDLED;
            } else if (result == InputMethodManager.DISPATCH_NOT_HANDLED) {
                // The IME could not handle it, so skip along to the next InputStage
                return FORWARD;
            } else {
                // callback will be invoked later
                return DEFER;
            }
        }
    }
    return FORWARD;
}","{
    if (mLastWasImTarget && !isInLocalFocusMode()) {
        InputMethodManager imm = InputMethodManager.peekInstance();
        if (imm != null) {
            final InputEvent event = q.mEvent;
            if (DEBUG_IMF)
                Log.v(mTag, ""Sending input event to IME: "" + event);
            int result = imm.dispatchInputEvent(event, q, this, mHandler);
            if (result == InputMethodManager.DISPATCH_HANDLED) {
                return FINISH_HANDLED;
            } else if (result == InputMethodManager.DISPATCH_NOT_HANDLED) {
                // The IME could not handle it, so skip along to the next InputStage
                return FORWARD;
            } else {
                // callback will be invoked later
                return DEFER;
            }
        }
    }
    return FORWARD;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mLastWasImTarget && !isInLocalFocusMode()) {, []), AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(InputMethodManager.peekInstance(), [])]), AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final InputEvent event, []), Expression(q.mEvent, [])]), Statement(if (DEBUG_IMF), []), MethodCall(Log.v(TAG, ""Sending input event to IME: "" + event), [VariableReference(Log, []), Expression(TAG, []), Expression(""Sending input event to IME: "" + event, [])]), AssignmentExpression(=, [VariableReference(int result, []), Expression(imm.dispatchInputEvent(event, q, this, mHandler), [])]), AssignmentExpression(=, [VariableReference(if (result, []), Expression(, [])]), Statement(return FINISH_HANDLED, []), AssignmentExpression(=, [VariableReference(} else if (result, []), Expression(, [])]), Statement(// The IME could not handle it, so skip along to the next InputStage, []), Statement(return FORWARD, []), Statement(} else {, []), Statement(// callback will be invoked later, []), Statement(return DEFER, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return FORWARD, []), Statement(}, [])])  Statement({, [])  Statement(if (mLastWasImTarget && !isInLocalFocusMode()) {, [])  AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(InputMethodManager.peekInstance(), [])])    VariableReference(InputMethodManager imm, [])    Expression(InputMethodManager.peekInstance(), [])  AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null) {, [])])    VariableReference(if (imm !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final InputEvent event, []), Expression(q.mEvent, [])])    VariableReference(final InputEvent event, [])    Expression(q.mEvent, [])  Statement(if (DEBUG_IMF), [])  MethodCall(Log.v(TAG, ""Sending input event to IME: "" + event), [VariableReference(Log, []), Expression(TAG, []), Expression(""Sending input event to IME: "" + event, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Sending input event to IME: "" + event, [])  AssignmentExpression(=, [VariableReference(int result, []), Expression(imm.dispatchInputEvent(event, q, this, mHandler), [])])    VariableReference(int result, [])    Expression(imm.dispatchInputEvent(event, q, this, mHandler), [])  AssignmentExpression(=, [VariableReference(if (result, []), Expression(, [])])    VariableReference(if (result, [])    Expression(, [])  Statement(return FINISH_HANDLED, [])  AssignmentExpression(=, [VariableReference(} else if (result, []), Expression(, [])])    VariableReference(} else if (result, [])    Expression(, [])  Statement(// The IME could not handle it, so skip along to the next InputStage, [])  Statement(return FORWARD, [])  Statement(} else {, [])  Statement(// callback will be invoked later, [])  Statement(return DEFER, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return FORWARD, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (mLastWasImTarget && !isInLocalFocusMode()) {, []), AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(InputMethodManager.peekInstance(), [])]), AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final InputEvent event, []), Expression(q.mEvent, [])]), Statement(if (DEBUG_IMF), []), MethodCall(Log.v(mTag, ""Sending input event to IME: "" + event), [VariableReference(Log, []), Expression(mTag, []), Expression(""Sending input event to IME: "" + event, [])]), AssignmentExpression(=, [VariableReference(int result, []), Expression(imm.dispatchInputEvent(event, q, this, mHandler), [])]), AssignmentExpression(=, [VariableReference(if (result, []), Expression(, [])]), Statement(return FINISH_HANDLED, []), AssignmentExpression(=, [VariableReference(} else if (result, []), Expression(, [])]), Statement(// The IME could not handle it, so skip along to the next InputStage, []), Statement(return FORWARD, []), Statement(} else {, []), Statement(// callback will be invoked later, []), Statement(return DEFER, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return FORWARD, []), Statement(}, [])])  Statement({, [])  Statement(if (mLastWasImTarget && !isInLocalFocusMode()) {, [])  AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(InputMethodManager.peekInstance(), [])])    VariableReference(InputMethodManager imm, [])    Expression(InputMethodManager.peekInstance(), [])  AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null) {, [])])    VariableReference(if (imm !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final InputEvent event, []), Expression(q.mEvent, [])])    VariableReference(final InputEvent event, [])    Expression(q.mEvent, [])  Statement(if (DEBUG_IMF), [])  MethodCall(Log.v(mTag, ""Sending input event to IME: "" + event), [VariableReference(Log, []), Expression(mTag, []), Expression(""Sending input event to IME: "" + event, [])])    VariableReference(Log, [])    Expression(mTag, [])    Expression(""Sending input event to IME: "" + event, [])  AssignmentExpression(=, [VariableReference(int result, []), Expression(imm.dispatchInputEvent(event, q, this, mHandler), [])])    VariableReference(int result, [])    Expression(imm.dispatchInputEvent(event, q, this, mHandler), [])  AssignmentExpression(=, [VariableReference(if (result, []), Expression(, [])])    VariableReference(if (result, [])    Expression(, [])  Statement(return FINISH_HANDLED, [])  AssignmentExpression(=, [VariableReference(} else if (result, []), Expression(, [])])    VariableReference(} else if (result, [])    Expression(, [])  Statement(// The IME could not handle it, so skip along to the next InputStage, [])  Statement(return FORWARD, [])  Statement(} else {, [])  Statement(// callback will be invoked later, [])  Statement(return DEFER, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return FORWARD, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,4,0,4,0,"The only change between the early and late implementations is the logging tag used in the `Log.v` method call, from `TAG` to `mTag`. This is considered as ""Other statement changed"".","The change in the log message parameter does not affect the return value or exception handling of the method, so there is no compatibility issue."
"<android.view.View: void scheduleDrawable(Drawable,Runnable,long)>",23,24,"<android.view.View: void scheduleDrawable(Drawable,Runnable,long)>","<android.view.View: void scheduleDrawable(Drawable,Runnable,long)>",0,"{
    if (verifyDrawable(who) && what != null) {
        final long delay = when - SystemClock.uptimeMillis();
        if (mAttachInfo != null) {
            mAttachInfo.mViewRootImpl.mChoreographer.postCallbackDelayed(Choreographer.CALLBACK_ANIMATION, what, who, Choreographer.subtractFrameDelay(delay));
        } else {
            ViewRootImpl.getRunQueue().postDelayed(what, delay);
        }
    }
}","{
    if (verifyDrawable(who) && what != null) {
        final long delay = when - SystemClock.uptimeMillis();
        if (mAttachInfo != null) {
            mAttachInfo.mViewRootImpl.mChoreographer.postCallbackDelayed(Choreographer.CALLBACK_ANIMATION, what, who, Choreographer.subtractFrameDelay(delay));
        } else {
            // Postpone the runnable until we know
            // on which thread it needs to run.
            getRunQueue().postDelayed(what, delay);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (verifyDrawable(who) && what !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final long delay, []), Expression(when - SystemClock.uptimeMillis(), [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])]), Statement(} else {, []), MethodCall(ViewRootImpl.getRunQueue().postDelayed(what, delay), [VariableReference(ViewRootImpl, []), Expression().postDelayed(what, []), Expression(delay, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (verifyDrawable(who) && what !, []), Expression(null) {, [])])    VariableReference(if (verifyDrawable(who) && what !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final long delay, []), Expression(when - SystemClock.uptimeMillis(), [])])    VariableReference(final long delay, [])    Expression(when - SystemClock.uptimeMillis(), [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo !, [])    Expression(null) {, [])  Statement(} else {, [])  MethodCall(ViewRootImpl.getRunQueue().postDelayed(what, delay), [VariableReference(ViewRootImpl, []), Expression().postDelayed(what, []), Expression(delay, [])])    VariableReference(ViewRootImpl, [])    Expression().postDelayed(what, [])    Expression(delay, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (verifyDrawable(who) && what !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final long delay, []), Expression(when - SystemClock.uptimeMillis(), [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])]), Statement(} else {, []), Statement(// Postpone the runnable until we know, []), Statement(// on which thread it needs to run., []), MethodCall(getRunQueue().postDelayed(what, delay), [VariableReference(getRunQueue(), []), Expression(what, []), Expression(delay, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (verifyDrawable(who) && what !, []), Expression(null) {, [])])    VariableReference(if (verifyDrawable(who) && what !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final long delay, []), Expression(when - SystemClock.uptimeMillis(), [])])    VariableReference(final long delay, [])    Expression(when - SystemClock.uptimeMillis(), [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo !, [])    Expression(null) {, [])  Statement(} else {, [])  Statement(// Postpone the runnable until we know, [])  Statement(// on which thread it needs to run., [])  MethodCall(getRunQueue().postDelayed(what, delay), [VariableReference(getRunQueue(), []), Expression(what, []), Expression(delay, [])])    VariableReference(getRunQueue(), [])    Expression(what, [])    Expression(delay, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Schedules an action on a drawable to occur at a specified time.
 *
 * @param who the recipient of the action
 * @param what the action to run on the drawable
 * @param when the time at which the action must occur. Uses the
 * {@link SystemClock#uptimeMillis} timebase.
 */","/**
 * Schedules an action on a drawable to occur at a specified time.
 *
 * @param who the recipient of the action
 * @param what the action to run on the drawable
 * @param when the time at which the action must occur. Uses the
 * {@link SystemClock#uptimeMillis} timebase.
 */",0,[@Override],[@Override],0,,,,1,3,0,4,0,"The late version introduces new comments within the else block, specifying why the getRunQueue() method is used. However, this change is purely informational and does not alter the logic or behavior of the method. Therefore, the change type is 4.","Since the logic and behavior of the method have not been altered, there is no potential for a compatibility issue. The CI type is 0."
"<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout: void onRemoteViewsLoaded(RemoteViews,OnClickHandler)>",23,24,"<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout: void onRemoteViewsLoaded(RemoteViews,OnClickHandler)>","<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout: void onRemoteViewsLoaded(RemoteViews,OnClickHandler)>",0,"{
    try {
        // Remove all the children of this layout first
        removeAllViews();
        addView(view.apply(getContext(), this, handler));
    } catch (Exception e) {
        Log.e(TAG, ""Failed to apply RemoteViews."");
    }
}","{
    setOnClickHandler(handler);
    applyRemoteViews(view);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), Statement(// Remove all the children of this layout first, []), Statement(removeAllViews(), []), MethodCall(addView(view.apply(getContext(), this, handler)), [VariableReference(addView(view, []), Expression(getContext(), []), Expression(this, []), Expression(handler), [])]), Statement(} catch (Exception e) {, []), MethodCall(Log.e(TAG, ""Failed to apply RemoteViews.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to apply RemoteViews."", [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  Statement(// Remove all the children of this layout first, [])  Statement(removeAllViews(), [])  MethodCall(addView(view.apply(getContext(), this, handler)), [VariableReference(addView(view, []), Expression(getContext(), []), Expression(this, []), Expression(handler), [])])    VariableReference(addView(view, [])    Expression(getContext(), [])    Expression(this, [])    Expression(handler), [])  Statement(} catch (Exception e) {, [])  MethodCall(Log.e(TAG, ""Failed to apply RemoteViews.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to apply RemoteViews."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed to apply RemoteViews."", [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(setOnClickHandler(handler), []), Statement(applyRemoteViews(view), []), Statement(}, [])])  Statement({, [])  Statement(setOnClickHandler(handler), [])  Statement(applyRemoteViews(view), [])  Statement(}, [])",1,"/**
 * Updates this RemoteViewsFrameLayout depending on the view that was loaded.
 * @param view the RemoteViews that was loaded. If null, the RemoteViews was not loaded
 * successfully.
 */","/**
 * Updates this RemoteViewsFrameLayout depending on the view that was loaded.
 * @param view the RemoteViews that was loaded. If null, the RemoteViews was not loaded
 * successfully.
 */",0,,,0,,,,1,"2,4",2,"1,2,4,5","1,2","- The early version includes a try-catch block to handle potential exceptions, which is not present in the later version. This signifies an exception handling change (type 2). ",
<android.text.style.TtsSpan.DecimalBuilder: DecimalBuilder setIntegerPart(String)>,23,24,<android.text.style.TtsSpan.DecimalBuilder: DecimalBuilder setIntegerPart(String)>,<android.text.style.TtsSpan.DecimalBuilder: DecimalBuilder setIntegerPart(String)>,0,"{
    return setStringArgument(TtsSpan.ARG_INTEGER_PART, integerPart);
}","{
    return setIntegerPart(String.valueOf(integerPart));
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return setIntegerPart(String.valueOf(integerPart)), [VariableReference(return setIntegerPart(String, []), Expression(integerPart), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return setIntegerPart(String.valueOf(integerPart)), [VariableReference(return setIntegerPart(String, []), Expression(integerPart), [])])    VariableReference(return setIntegerPart(String, [])    Expression(integerPart), [])  Statement(}, [])",1,"/**
 * Sets the {@link #ARG_INTEGER_PART} argument.
 * @param integerPart A non-empty string of digits with an optional
 * leading + or -.
 * @return This instance.
 */","/**
 * Convenience method that converts the number to a String and sets it
 * to the value for {@link #ARG_INTEGER_PART}.
 * @param integerPart The integer part of the decimal.
 * @return This instance.
 */",1,,,0,,,,1,1,1,"1,5",1,"In the early implementation, the method returns `setStringArgument(TtsSpan.ARG_INTEGER_PART, integerPart)`, while in the late implementation, it returns `setIntegerPart(String.valueOf(integerPart))`. This involves a change in the dependent method being called and can affect the return value, so the change type is 1,5.","The change in the method being called (`setStringArgument` to `setIntegerPart`) and the conversion of the `integerPart` parameter to a `String` can lead to a different return value, resulting in a Compatibility Issue. Therefore, the CI type is 1."
"<android.accounts.AccountManager: void setAuthToken(Account,String,String)>",23,24,"<android.accounts.AccountManager: void setAuthToken(Account,String,String)>","<android.accounts.AccountManager: void setAuthToken(Account,String,String)>",0,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    try {
        mService.setAuthToken(account, authTokenType, authToken);
    } catch (RemoteException e) {
        // won't ever happen
        throw new RuntimeException(e);
    }
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    try {
        mService.setAuthToken(account, authTokenType, authToken);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""authTokenType is null""), []), Statement(try {, []), MethodCall(mService.setAuthToken(account, authTokenType, authToken), [VariableReference(mService, []), Expression(account, []), Expression(authTokenType, []), Expression(authToken, [])]), Statement(} catch (RemoteException e) {, []), Statement(// won't ever happen, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])])    VariableReference(if (authTokenType, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""authTokenType is null""), [])  Statement(try {, [])  MethodCall(mService.setAuthToken(account, authTokenType, authToken), [VariableReference(mService, []), Expression(account, []), Expression(authTokenType, []), Expression(authToken, [])])    VariableReference(mService, [])    Expression(account, [])    Expression(authTokenType, [])    Expression(authToken, [])  Statement(} catch (RemoteException e) {, [])  Statement(// won't ever happen, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""authTokenType is null""), []), Statement(try {, []), MethodCall(mService.setAuthToken(account, authTokenType, authToken), [VariableReference(mService, []), Expression(account, []), Expression(authTokenType, []), Expression(authToken, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])])    VariableReference(if (authTokenType, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""authTokenType is null""), [])  Statement(try {, [])  MethodCall(mService.setAuthToken(account, authTokenType, authToken), [VariableReference(mService, []), Expression(account, []), Expression(authTokenType, []), Expression(authToken, [])])    VariableReference(mService, [])    Expression(account, [])    Expression(authTokenType, [])    Expression(authToken, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Adds an auth token to the AccountManager cache for an account.
 * If the account does not exist then this call has no effect.
 * Replaces any previous auth token for this account and auth token type.
 * Intended for use by the authenticator, not directly by applications.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
 * is needed for those platforms. See docs for this function in API level 22.
 *
 * @param account The account to set an auth token for
 * @param authTokenType The type of the auth token, see {#getAuthToken}
 * @param authToken The auth token to add to the cache
 */","/**
 * Adds an auth token to the AccountManager cache for an account.
 * If the account does not exist then this call has no effect.
 * Replaces any previous auth token for this account and auth token type.
 * Intended for use by the authenticator, not directly by applications.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
 * is needed for those platforms. See docs for this function in API level 22.
 *
 * @param account The account to set an auth token for
 * @param authTokenType The type of the auth token, see {#getAuthToken}
 * @param authToken The auth token to add to the cache
 */",0,,,0,,,,1,2,2,2,2,"The exception handling statement changed from `throw new RuntimeException(e)` to `throw e.rethrowFromSystemServer()`. Hence, the code change type is 2.","The change in exception handling introduces a new method call `rethrowFromSystemServer()`, which could lead to a different behavior. Hence, the CI type is 2."
<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>,24,25,<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>,<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>,0,"{
    if (mClosed) {
        if (DEBUG)
            Log.v(TAG, mIdString + ""close - reentering"");
        return;
    }
    if (DEBUG)
        Log.v(TAG, mIdString + ""close - first time"");
    mClosed = true;
    /*
         * Flush out any repeating request. Since camera is closed, no new requests
         * can be queued, and eventually the entire request queue will be drained.
         *
         * If the camera device was already closed, short circuit and do nothing; since
         * no more internal device callbacks will fire anyway.
         *
         * Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure the
         * camera. Once that's done, fire #onClosed.
         */
    try {
        mDeviceImpl.stopRepeating();
    } catch (IllegalStateException e) {
        // OK: Camera device may already be closed, nothing else to do
        // TODO: Fire onClosed anytime we get the device onClosed or the ISE?
        // or just suppress the ISE only and rely onClosed.
        // Also skip any of the draining work if this is already closed.
        // Short-circuit; queue callback immediately and return
        mStateCallback.onClosed(this);
        return;
    } catch (CameraAccessException e) {
        // OK: close does not throw checked exceptions.
        Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e);
    // TODO: call onError instead of onClosed if this happens
    }
    // If no sequences are pending, fire #onClosed immediately
    mSequenceDrainer.beginDrain();
}","{
    synchronized (this) {
        if (mClosed) {
            if (DEBUG)
                Log.v(TAG, mIdString + ""close - reentering"");
            return;
        }
        if (DEBUG)
            Log.v(TAG, mIdString + ""close - first time"");
        mClosed = true;
    }
    synchronized (mDeviceImpl.mInterfaceLock) {
        synchronized (this) {
            /*
                 * Flush out any repeating request. Since camera is closed, no new requests
                 * can be queued, and eventually the entire request queue will be drained.
                 *
                 * If the camera device was already closed, short circuit and do nothing; since
                 * no more internal device callbacks will fire anyway.
                 *
                 * Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure
                 * the camera. Once that's done, fire #onClosed.
                 */
            try {
                mDeviceImpl.stopRepeating();
            } catch (IllegalStateException e) {
                // OK: Camera device may already be closed, nothing else to do
                // TODO: Fire onClosed anytime we get the device onClosed or the ISE?
                // or just suppress the ISE only and rely onClosed.
                // Also skip any of the draining work if this is already closed.
                // Short-circuit; queue callback immediately and return
                mStateCallback.onClosed(this);
                return;
            } catch (CameraAccessException e) {
                // OK: close does not throw checked exceptions.
                Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e);
            // TODO: call onError instead of onClosed if this happens
            }
        }
    }
    synchronized (this) {
        // If no sequences are pending, fire #onClosed immediately
        mSequenceDrainer.beginDrain();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mClosed) {, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, mIdString + ""close - reentering""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - reentering"", [])]), Statement(return, []), Statement(}, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, mIdString + ""close - first time""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - first time"", [])]), AssignmentExpression(=, [VariableReference(mClosed, []), Expression(true, [])]), Statement(/*, []), Statement(* Flush out any repeating request. Since camera is closed, no new requests, []), Statement(* can be queued, and eventually the entire request queue will be drained., []), Statement(*, []), Statement(* If the camera device was already closed, short circuit and do nothing, []), Statement(since, []), Statement(* no more internal device callbacks will fire anyway., []), Statement(*, []), Statement(* Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure the, []), Statement(* camera. Once that's done, fire #onClosed., []), Statement(*/, []), Statement(try {, []), MethodCall(mDeviceImpl.stopRepeating(), [VariableReference(mDeviceImpl, []), Expression(, [])]), Statement(} catch (IllegalStateException e) {, []), Statement(// OK: Camera device may already be closed, nothing else to do, []), Statement(// TODO: Fire onClosed anytime we get the device onClosed or the ISE?, []), Statement(// or just suppress the ISE only and rely onClosed., []), Statement(// Also skip any of the draining work if this is already closed., []), Statement(// Short-circuit, []), Statement(queue callback immediately and return, []), MethodCall(mStateCallback.onClosed(this), [VariableReference(mStateCallback, []), Expression(this, [])]), Statement(return, []), Statement(} catch (CameraAccessException e) {, []), Statement(// OK: close does not throw checked exceptions., []), MethodCall(Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""Exception while stopping repeating: "", []), Expression(e, [])]), Statement(// TODO: call onError instead of onClosed if this happens, []), Statement(}, []), Statement(// If no sequences are pending, fire #onClosed immediately, []), MethodCall(mSequenceDrainer.beginDrain(), [VariableReference(mSequenceDrainer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (mClosed) {, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, mIdString + ""close - reentering""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - reentering"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(mIdString + ""close - reentering"", [])  Statement(return, [])  Statement(}, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, mIdString + ""close - first time""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - first time"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(mIdString + ""close - first time"", [])  AssignmentExpression(=, [VariableReference(mClosed, []), Expression(true, [])])    VariableReference(mClosed, [])    Expression(true, [])  Statement(/*, [])  Statement(* Flush out any repeating request. Since camera is closed, no new requests, [])  Statement(* can be queued, and eventually the entire request queue will be drained., [])  Statement(*, [])  Statement(* If the camera device was already closed, short circuit and do nothing, [])  Statement(since, [])  Statement(* no more internal device callbacks will fire anyway., [])  Statement(*, [])  Statement(* Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure the, [])  Statement(* camera. Once that's done, fire #onClosed., [])  Statement(*/, [])  Statement(try {, [])  MethodCall(mDeviceImpl.stopRepeating(), [VariableReference(mDeviceImpl, []), Expression(, [])])    VariableReference(mDeviceImpl, [])    Expression(, [])  Statement(} catch (IllegalStateException e) {, [])  Statement(// OK: Camera device may already be closed, nothing else to do, [])  Statement(// TODO: Fire onClosed anytime we get the device onClosed or the ISE?, [])  Statement(// or just suppress the ISE only and rely onClosed., [])  Statement(// Also skip any of the draining work if this is already closed., [])  Statement(// Short-circuit, [])  Statement(queue callback immediately and return, [])  MethodCall(mStateCallback.onClosed(this), [VariableReference(mStateCallback, []), Expression(this, [])])    VariableReference(mStateCallback, [])    Expression(this, [])  Statement(return, [])  Statement(} catch (CameraAccessException e) {, [])  Statement(// OK: close does not throw checked exceptions., [])  MethodCall(Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""Exception while stopping repeating: "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(mIdString + ""Exception while stopping repeating: "", [])    Expression(e, [])  Statement(// TODO: call onError instead of onClosed if this happens, [])  Statement(}, [])  Statement(// If no sequences are pending, fire #onClosed immediately, [])  MethodCall(mSequenceDrainer.beginDrain(), [VariableReference(mSequenceDrainer, []), Expression(, [])])    VariableReference(mSequenceDrainer, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), Statement(if (mClosed) {, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, mIdString + ""close - reentering""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - reentering"", [])]), Statement(return, []), Statement(}, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, mIdString + ""close - first time""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - first time"", [])]), AssignmentExpression(=, [VariableReference(mClosed, []), Expression(true, [])]), Statement(}, []), Statement(synchronized (this) {, []), Statement(/*, []), Statement(* Flush out any repeating request. Since camera is closed, no new requests, []), Statement(* can be queued, and eventually the entire request queue will be drained., []), Statement(*, []), Statement(* If the camera device was already closed, short circuit and do nothing, []), Statement(since, []), Statement(* no more internal device callbacks will fire anyway., []), Statement(*, []), Statement(* Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure, []), Statement(* the camera. Once that's done, fire #onClosed., []), Statement(*/, []), Statement(try {, []), MethodCall(mDeviceImpl.stopRepeating(), [VariableReference(mDeviceImpl, []), Expression(, [])]), Statement(} catch (IllegalStateException e) {, []), Statement(// OK: Camera device may already be closed, nothing else to do, []), Statement(// TODO: Fire onClosed anytime we get the device onClosed or the ISE?, []), Statement(// or just suppress the ISE only and rely onClosed., []), Statement(// Also skip any of the draining work if this is already closed., []), Statement(// Short-circuit, []), Statement(queue callback immediately and return, []), MethodCall(mStateCallback.onClosed(this), [VariableReference(mStateCallback, []), Expression(this, [])]), Statement(return, []), Statement(} catch (CameraAccessException e) {, []), Statement(// OK: close does not throw checked exceptions., []), MethodCall(Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""Exception while stopping repeating: "", []), Expression(e, [])]), Statement(// TODO: call onError instead of onClosed if this happens, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(synchronized (this) {, []), Statement(// If no sequences are pending, fire #onClosed immediately, []), MethodCall(mSequenceDrainer.beginDrain(), [VariableReference(mSequenceDrainer, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  Statement(if (mClosed) {, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, mIdString + ""close - reentering""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - reentering"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(mIdString + ""close - reentering"", [])  Statement(return, [])  Statement(}, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, mIdString + ""close - first time""), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""close - first time"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(mIdString + ""close - first time"", [])  AssignmentExpression(=, [VariableReference(mClosed, []), Expression(true, [])])    VariableReference(mClosed, [])    Expression(true, [])  Statement(}, [])  Statement(synchronized (this) {, [])  Statement(/*, [])  Statement(* Flush out any repeating request. Since camera is closed, no new requests, [])  Statement(* can be queued, and eventually the entire request queue will be drained., [])  Statement(*, [])  Statement(* If the camera device was already closed, short circuit and do nothing, [])  Statement(since, [])  Statement(* no more internal device callbacks will fire anyway., [])  Statement(*, [])  Statement(* Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure, [])  Statement(* the camera. Once that's done, fire #onClosed., [])  Statement(*/, [])  Statement(try {, [])  MethodCall(mDeviceImpl.stopRepeating(), [VariableReference(mDeviceImpl, []), Expression(, [])])    VariableReference(mDeviceImpl, [])    Expression(, [])  Statement(} catch (IllegalStateException e) {, [])  Statement(// OK: Camera device may already be closed, nothing else to do, [])  Statement(// TODO: Fire onClosed anytime we get the device onClosed or the ISE?, [])  Statement(// or just suppress the ISE only and rely onClosed., [])  Statement(// Also skip any of the draining work if this is already closed., [])  Statement(// Short-circuit, [])  Statement(queue callback immediately and return, [])  MethodCall(mStateCallback.onClosed(this), [VariableReference(mStateCallback, []), Expression(this, [])])    VariableReference(mStateCallback, [])    Expression(this, [])  Statement(return, [])  Statement(} catch (CameraAccessException e) {, [])  Statement(// OK: close does not throw checked exceptions., [])  MethodCall(Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(mIdString + ""Exception while stopping repeating: "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(mIdString + ""Exception while stopping repeating: "", [])    Expression(e, [])  Statement(// TODO: call onError instead of onClosed if this happens, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(synchronized (this) {, [])  Statement(// If no sequences are pending, fire #onClosed immediately, [])  MethodCall(mSequenceDrainer.beginDrain(), [VariableReference(mSequenceDrainer, []), Expression(, [])])    VariableReference(mSequenceDrainer, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"1,3,4",1,3,0,"In the late version, the method implementation added multiple `synchronized` blocks to ensure thread-safety, and some synchronization changes in the control flow. The overall control dependency has been updated to include synchronizations, so the change type is 3.","The addition of synchronized blocks does not change the return value or exception handling behavior. Hence, there is no Compatibility Issue (CI type 0)."
<android.app.usage.NetworkStats: void finalize()>,25,26,<android.app.usage.NetworkStats: void finalize()>,<android.app.usage.NetworkStats: void finalize()>,0,"{
    try {
        if (mCloseGuard != null) {
            mCloseGuard.warnIfOpen();
        }
        close();
    } finally {
        super.finalize();
    }
}","{
    try {
        if (mCloseGuard != null) {
            mCloseGuard.warnIfOpen();
        }
        close();
    } finally {
        super.finalize();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mCloseGuard !, []), Expression(null) {, [])]), MethodCall(mCloseGuard.warnIfOpen(), [VariableReference(mCloseGuard, []), Expression(, [])]), Statement(}, []), Statement(close(), []), Statement(} finally {, []), MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mCloseGuard !, []), Expression(null) {, [])])    VariableReference(if (mCloseGuard !, [])    Expression(null) {, [])  MethodCall(mCloseGuard.warnIfOpen(), [VariableReference(mCloseGuard, []), Expression(, [])])    VariableReference(mCloseGuard, [])    Expression(, [])  Statement(}, [])  Statement(close(), [])  Statement(} finally {, [])  MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mCloseGuard !, []), Expression(null) {, [])]), MethodCall(mCloseGuard.warnIfOpen(), [VariableReference(mCloseGuard, []), Expression(, [])]), Statement(}, []), Statement(close(), []), Statement(} finally {, []), MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mCloseGuard !, []), Expression(null) {, [])])    VariableReference(if (mCloseGuard !, [])    Expression(null) {, [])  MethodCall(mCloseGuard.warnIfOpen(), [VariableReference(mCloseGuard, []), Expression(, [])])    VariableReference(mCloseGuard, [])    Expression(, [])  Statement(}, [])  Statement(close(), [])  Statement(} finally {, [])  MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,,,0,[@Override],[@Override],0,,,,0,0,0,0,0,"There is no change between the early version and the late version. Both implementations are identical, and the annotations remain the same.","Since there is no change in the code, there will be no compatibility issues."
<android.widget.DatePickerCalendarDelegate: void onLocaleChanged(Locale)>,25,26,<android.widget.DatePickerCalendarDelegate: void onLocaleChanged(Locale)>,<android.widget.DatePickerCalendarDelegate: void onLocaleChanged(Locale)>,0,"{
    final TextView headerYear = mHeaderYear;
    if (headerYear == null) {
        // again later after everything has been set up.
        return;
    }
    // Update the date formatter.
    final String datePattern = DateFormat.getBestDateTimePattern(locale, ""EMMMd"");
    mMonthDayFormat = new SimpleDateFormat(datePattern, locale);
    mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE);
    mYearFormat = new SimpleDateFormat(""y"", locale);
    // Clear out the lazily-initialized accessibility event formatter.
    mAccessibilityEventFormat = null;
    // Update the header text.
    onCurrentDateChanged(false);
}","{
    final TextView headerYear = mHeaderYear;
    if (headerYear == null) {
        // again later after everything has been set up.
        return;
    }
    // Update the date formatter.
    final String datePattern = DateFormat.getBestDateTimePattern(locale, ""EMMMd"");
    mMonthDayFormat = new SimpleDateFormat(datePattern, locale);
    mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE);
    mYearFormat = new SimpleDateFormat(""y"", locale);
    // Update the header text.
    onCurrentDateChanged(false);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final TextView headerYear, []), Expression(mHeaderYear, [])]), AssignmentExpression(=, [VariableReference(if (headerYear, []), Expression(, [])]), Statement(// again later after everything has been set up., []), Statement(return, []), Statement(}, []), Statement(// Update the date formatter., []), AssignmentExpression(=, [VariableReference(final String datePattern, []), Expression(DateFormat.getBestDateTimePattern(locale, ""EMMMd""), [])]), AssignmentExpression(=, [VariableReference(mMonthDayFormat, []), Expression(new SimpleDateFormat(datePattern, locale), [])]), MethodCall(mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE), [VariableReference(mMonthDayFormat, []), Expression(DisplayContext.CAPITALIZATION_FOR_STANDALONE, [])]), AssignmentExpression(=, [VariableReference(mYearFormat, []), Expression(new SimpleDateFormat(""y"", locale), [])]), Statement(// Clear out the lazily-initialized accessibility event formatter., []), AssignmentExpression(=, [VariableReference(mAccessibilityEventFormat, []), Expression(null, [])]), Statement(// Update the header text., []), Statement(onCurrentDateChanged(false), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final TextView headerYear, []), Expression(mHeaderYear, [])])    VariableReference(final TextView headerYear, [])    Expression(mHeaderYear, [])  AssignmentExpression(=, [VariableReference(if (headerYear, []), Expression(, [])])    VariableReference(if (headerYear, [])    Expression(, [])  Statement(// again later after everything has been set up., [])  Statement(return, [])  Statement(}, [])  Statement(// Update the date formatter., [])  AssignmentExpression(=, [VariableReference(final String datePattern, []), Expression(DateFormat.getBestDateTimePattern(locale, ""EMMMd""), [])])    VariableReference(final String datePattern, [])    Expression(DateFormat.getBestDateTimePattern(locale, ""EMMMd""), [])  AssignmentExpression(=, [VariableReference(mMonthDayFormat, []), Expression(new SimpleDateFormat(datePattern, locale), [])])    VariableReference(mMonthDayFormat, [])    Expression(new SimpleDateFormat(datePattern, locale), [])  MethodCall(mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE), [VariableReference(mMonthDayFormat, []), Expression(DisplayContext.CAPITALIZATION_FOR_STANDALONE, [])])    VariableReference(mMonthDayFormat, [])    Expression(DisplayContext.CAPITALIZATION_FOR_STANDALONE, [])  AssignmentExpression(=, [VariableReference(mYearFormat, []), Expression(new SimpleDateFormat(""y"", locale), [])])    VariableReference(mYearFormat, [])    Expression(new SimpleDateFormat(""y"", locale), [])  Statement(// Clear out the lazily-initialized accessibility event formatter., [])  AssignmentExpression(=, [VariableReference(mAccessibilityEventFormat, []), Expression(null, [])])    VariableReference(mAccessibilityEventFormat, [])    Expression(null, [])  Statement(// Update the header text., [])  Statement(onCurrentDateChanged(false), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final TextView headerYear, []), Expression(mHeaderYear, [])]), AssignmentExpression(=, [VariableReference(if (headerYear, []), Expression(, [])]), Statement(// again later after everything has been set up., []), Statement(return, []), Statement(}, []), Statement(// Update the date formatter., []), AssignmentExpression(=, [VariableReference(final String datePattern, []), Expression(DateFormat.getBestDateTimePattern(locale, ""EMMMd""), [])]), AssignmentExpression(=, [VariableReference(mMonthDayFormat, []), Expression(new SimpleDateFormat(datePattern, locale), [])]), MethodCall(mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE), [VariableReference(mMonthDayFormat, []), Expression(DisplayContext.CAPITALIZATION_FOR_STANDALONE, [])]), AssignmentExpression(=, [VariableReference(mYearFormat, []), Expression(new SimpleDateFormat(""y"", locale), [])]), Statement(// Update the header text., []), Statement(onCurrentDateChanged(false), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final TextView headerYear, []), Expression(mHeaderYear, [])])    VariableReference(final TextView headerYear, [])    Expression(mHeaderYear, [])  AssignmentExpression(=, [VariableReference(if (headerYear, []), Expression(, [])])    VariableReference(if (headerYear, [])    Expression(, [])  Statement(// again later after everything has been set up., [])  Statement(return, [])  Statement(}, [])  Statement(// Update the date formatter., [])  AssignmentExpression(=, [VariableReference(final String datePattern, []), Expression(DateFormat.getBestDateTimePattern(locale, ""EMMMd""), [])])    VariableReference(final String datePattern, [])    Expression(DateFormat.getBestDateTimePattern(locale, ""EMMMd""), [])  AssignmentExpression(=, [VariableReference(mMonthDayFormat, []), Expression(new SimpleDateFormat(datePattern, locale), [])])    VariableReference(mMonthDayFormat, [])    Expression(new SimpleDateFormat(datePattern, locale), [])  MethodCall(mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE), [VariableReference(mMonthDayFormat, []), Expression(DisplayContext.CAPITALIZATION_FOR_STANDALONE, [])])    VariableReference(mMonthDayFormat, [])    Expression(DisplayContext.CAPITALIZATION_FOR_STANDALONE, [])  AssignmentExpression(=, [VariableReference(mYearFormat, []), Expression(new SimpleDateFormat(""y"", locale), [])])    VariableReference(mYearFormat, [])    Expression(new SimpleDateFormat(""y"", locale), [])  Statement(// Update the header text., [])  Statement(onCurrentDateChanged(false), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,4,0,4,0,"The only observed change between the early and late implementation is the removal of the statement that assigns `null` to `mAccessibilityEventFormat`. This falls under the category of other statement changed. Thus, the change type is 4.","The removal of the assignment of `null` to `mAccessibilityEventFormat` does not affect the return type, values, or exception handling of the method. Therefore, there is no potential compatibility issue."
<android.view.ContextThemeWrapper: Theme getTheme()>,25,26,<android.view.ContextThemeWrapper: Theme getTheme()>,<android.view.ContextThemeWrapper: Theme getTheme()>,0,"{
    if (mTheme != null) {
        return mTheme;
    }
    mThemeResource = Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion);
    initializeTheme();
    return mTheme;
}","{
    if (mTheme != null) {
        return mTheme;
    }
    mThemeResource = Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion);
    initializeTheme();
    return mTheme;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mTheme !, []), Expression(null) {, [])]), Statement(return mTheme, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mThemeResource, []), Expression(Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion), [])]), Statement(initializeTheme(), []), Statement(return mTheme, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mTheme !, []), Expression(null) {, [])])    VariableReference(if (mTheme !, [])    Expression(null) {, [])  Statement(return mTheme, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mThemeResource, []), Expression(Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion), [])])    VariableReference(mThemeResource, [])    Expression(Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion), [])  Statement(initializeTheme(), [])  Statement(return mTheme, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mTheme !, []), Expression(null) {, [])]), Statement(return mTheme, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mThemeResource, []), Expression(Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion), [])]), Statement(initializeTheme(), []), Statement(return mTheme, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mTheme !, []), Expression(null) {, [])])    VariableReference(if (mTheme !, [])    Expression(null) {, [])  Statement(return mTheme, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mThemeResource, []), Expression(Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion), [])])    VariableReference(mThemeResource, [])    Expression(Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion), [])  Statement(initializeTheme(), [])  Statement(return mTheme, [])  Statement(}, [])",0,,,0,[@Override],[@Override],0,,,,0,0,0,0,0,There is no change between the early and the late implementation. Both the method body and the annotations are identical.,"Since there are no changes between the early and the late implementation, there is no potential for compatibility issues."
"<android.net.ConnectivityManager: void requestNetwork(NetworkRequest,PendingIntent)>",26,27,"<android.net.ConnectivityManager: void requestNetwork(NetworkRequest,PendingIntent)>","<android.net.ConnectivityManager: void requestNetwork(NetworkRequest,PendingIntent)>",0,"{
    checkPendingIntent(operation);
    try {
        mService.pendingRequestForNetwork(request.networkCapabilities, operation);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    checkPendingIntentNotNull(operation);
    try {
        mService.pendingRequestForNetwork(request.networkCapabilities, operation);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (ServiceSpecificException e) {
        throw convertServiceException(e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkPendingIntent(operation), []), Statement(try {, []), MethodCall(mService.pendingRequestForNetwork(request.networkCapabilities, operation), [VariableReference(mService, []), Expression(request.networkCapabilities, []), Expression(operation, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(checkPendingIntent(operation), [])  Statement(try {, [])  MethodCall(mService.pendingRequestForNetwork(request.networkCapabilities, operation), [VariableReference(mService, []), Expression(request.networkCapabilities, []), Expression(operation, [])])    VariableReference(mService, [])    Expression(request.networkCapabilities, [])    Expression(operation, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkPendingIntentNotNull(operation), []), Statement(try {, []), MethodCall(mService.pendingRequestForNetwork(request.networkCapabilities, operation), [VariableReference(mService, []), Expression(request.networkCapabilities, []), Expression(operation, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(} catch (ServiceSpecificException e) {, []), Statement(throw convertServiceException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(checkPendingIntentNotNull(operation), [])  Statement(try {, [])  MethodCall(mService.pendingRequestForNetwork(request.networkCapabilities, operation), [VariableReference(mService, []), Expression(request.networkCapabilities, []), Expression(operation, [])])    VariableReference(mService, [])    Expression(request.networkCapabilities, [])    Expression(operation, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(} catch (ServiceSpecificException e) {, [])  Statement(throw convertServiceException(e), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Request a network to satisfy a set of {@link android.net.NetworkCapabilities}.
 *
 * This function behaves identically to the version that takes a NetworkCallback, but instead
 * of {@link NetworkCallback} a {@link PendingIntent} is used.  This means
 * the request may outlive the calling application and get called back when a suitable
 * network is found.
 * <p>
 * The operation is an Intent broadcast that goes to a broadcast receiver that
 * you registered with {@link Context#registerReceiver} or through the
 * &lt;receiver&gt; tag in an AndroidManifest.xml file
 * <p>
 * The operation Intent is delivered with two extras, a {@link Network} typed
 * extra called {@link #EXTRA_NETWORK} and a {@link NetworkRequest}
 * typed extra called {@link #EXTRA_NETWORK_REQUEST} containing
 * the original requests parameters.  It is important to create a new,
 * {@link NetworkCallback} based request before completing the processing of the
 * Intent to reserve the network or it will be released shortly after the Intent
 * is processed.
 * <p>
 * If there is already a request for this Intent registered (with the equality of
 * two Intents defined by {@link Intent#filterEquals}), then it will be removed and
 * replaced by this one, effectively releasing the previous {@link NetworkRequest}.
 * <p>
 * The request may be released normally by calling
 * {@link #releaseNetworkRequest(android.app.PendingIntent)}.
 * <p>It is presently unsupported to request a network with either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}
 * as these {@code NetworkCapabilities} represent states that a particular
 * network may never attain, and whether a network will attain these states
 * is unknown prior to bringing up the network so the framework does not
 * know how to go about satisfing a request with these capabilities.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param request {@link NetworkRequest} describing this request.
 * @param operation Action to perform when the network is available (corresponds
 * to the {@link NetworkCallback#onAvailable} call.  Typically
 * comes from {@link PendingIntent#getBroadcast}. Cannot be null.
 * @throws IllegalArgumentException if {@code request} contains either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}.
 */","/**
 * Request a network to satisfy a set of {@link android.net.NetworkCapabilities}.
 *
 * This function behaves identically to the version that takes a NetworkCallback, but instead
 * of {@link NetworkCallback} a {@link PendingIntent} is used.  This means
 * the request may outlive the calling application and get called back when a suitable
 * network is found.
 * <p>
 * The operation is an Intent broadcast that goes to a broadcast receiver that
 * you registered with {@link Context#registerReceiver} or through the
 * &lt;receiver&gt; tag in an AndroidManifest.xml file
 * <p>
 * The operation Intent is delivered with two extras, a {@link Network} typed
 * extra called {@link #EXTRA_NETWORK} and a {@link NetworkRequest}
 * typed extra called {@link #EXTRA_NETWORK_REQUEST} containing
 * the original requests parameters.  It is important to create a new,
 * {@link NetworkCallback} based request before completing the processing of the
 * Intent to reserve the network or it will be released shortly after the Intent
 * is processed.
 * <p>
 * If there is already a request for this Intent registered (with the equality of
 * two Intents defined by {@link Intent#filterEquals}), then it will be removed and
 * replaced by this one, effectively releasing the previous {@link NetworkRequest}.
 * <p>
 * The request may be released normally by calling
 * {@link #releaseNetworkRequest(android.app.PendingIntent)}.
 * <p>It is presently unsupported to request a network with either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}
 * as these {@code NetworkCapabilities} represent states that a particular
 * network may never attain, and whether a network will attain these states
 * is unknown prior to bringing up the network so the framework does not
 * know how to go about satisfing a request with these capabilities.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param request {@link NetworkRequest} describing this request.
 * @param operation Action to perform when the network is available (corresponds
 * to the {@link NetworkCallback#onAvailable} call.  Typically
 * comes from {@link PendingIntent#getBroadcast}. Cannot be null.
 * @throws IllegalArgumentException if {@code request} contains either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}.
 */",0,,,0,,,,1,2,2,"2,4",2,"In the late version, the method replaced `checkPendingIntent(operation)` with `checkPendingIntentNotNull(operation)`. Additionally, a new `catch` block for `ServiceSpecificException` was introduced with `throw convertServiceException(e)`. Therefore, the change type is 2,4.","The introduction of a new exception handling (`ServiceSpecificException` with `convertServiceException`) can lead to different exception handling behavior, thus the CI type is 2."
"<android.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(Fragment,Bundle,boolean)>",26,27,"<android.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(Fragment,Bundle,boolean)>","<android.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(Fragment,Bundle,boolean)>",0,"{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true);
        }
    }
    if (mLifecycleCallbacks == null) {
        return;
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentActivityCreated(this, f, savedInstanceState);
        }
    }
}","{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true);
        }
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentActivityCreated(this, f, savedInstanceState);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])]), Statement(if (parentManager instanceof FragmentManagerImpl) {, []), MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(savedInstanceState, []), Expression(true, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mLifecycleCallbacks, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])])    VariableReference(if (mParent !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])])    VariableReference(FragmentManager parentManager, [])    Expression(mParent.getFragmentManager(), [])  Statement(if (parentManager instanceof FragmentManagerImpl) {, [])  MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(savedInstanceState, []), Expression(true, [])])    VariableReference(((FragmentManagerImpl) parentManager), [])    Expression(f, [])    Expression(savedInstanceState, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mLifecycleCallbacks, []), Expression(, [])])    VariableReference(if (mLifecycleCallbacks, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])]), Statement(if (parentManager instanceof FragmentManagerImpl) {, []), MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(savedInstanceState, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])])    VariableReference(if (mParent !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])])    VariableReference(FragmentManager parentManager, [])    Expression(mParent.getFragmentManager(), [])  Statement(if (parentManager instanceof FragmentManagerImpl) {, [])  MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(savedInstanceState, []), Expression(true, [])])    VariableReference(((FragmentManagerImpl) parentManager), [])    Expression(f, [])    Expression(savedInstanceState, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,1,"1,3",1,4,0,"The only change in the code is the removal of the `if (mLifecycleCallbacks == null) { return; }` statement. This falls under other statement changes, so the change type is 4.","The removal of the null check on `mLifecycleCallbacks` does not lead to different return values or types, nor does it introduce new exceptions. As it only affects the flow when `mLifecycleCallbacks` is null, it doesn't trigger a compatibility issue in terms of return values or exception handling. Therefore, the CI type is 0."
<android.service.autofill.SaveInfo.Builder: Builder setDescription(CharSequence)>,26,27,<android.service.autofill.SaveInfo.Builder: Builder setDescription(CharSequence)>,<android.service.autofill.SaveInfo.Builder: Builder setDescription(CharSequence)>,0,"{
    throwIfDestroyed();
    mDescription = description;
    return this;
}","{
    throwIfDestroyed();
    Preconditions.checkState(mCustomDescription == null, ""Can call setDescription() or setCustomDescription(), but not both"");
    mDescription = description;
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfDestroyed(), []), AssignmentExpression(=, [VariableReference(mDescription, []), Expression(description, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(throwIfDestroyed(), [])  AssignmentExpression(=, [VariableReference(mDescription, []), Expression(description, [])])    VariableReference(mDescription, [])    Expression(description, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfDestroyed(), []), AssignmentExpression(=, [VariableReference(Preconditions.checkState(mCustomDescription, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mDescription, []), Expression(description, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(throwIfDestroyed(), [])  AssignmentExpression(=, [VariableReference(Preconditions.checkState(mCustomDescription, []), Expression(, [])])    VariableReference(Preconditions.checkState(mCustomDescription, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mDescription, []), Expression(description, [])])    VariableReference(mDescription, [])    Expression(description, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Sets an optional description to be shown in the UI when the user is asked to save.
 *
 * <p>Typically, it describes how the data will be stored by the service, so it can help
 * users to decide whether they can trust the service to save their data.
 *
 * @param description a succint description.
 * @return This Builder.
 */","/**
 * Sets an optional description to be shown in the UI when the user is asked to save.
 *
 * <p>Typically, it describes how the data will be stored by the service, so it can help
 * users to decide whether they can trust the service to save their data.
 *
 * @param description a succint description.
 * @return This Builder.
 *
 * @throws IllegalStateException if this call was made after calling
 * {@link #setCustomDescription(CustomDescription)}.
 */",1,[@NonNull],[@NonNull],0,,,,1,4,0,"2,4",2,"A new exception handling statement (Preconditions.checkState) has been introduced in the late version, and this statement also checks the state, making the change type 2,4.","The new exception handling statement (Preconditions.checkState) can throw an exception, leading to different exception handling behaviors in the API, thus causing a Compatibility Issue. Therefore, the CI type is 2."
<android.view.textclassifier.TextSelection.Builder: TextSelection build()>,26,27,<android.view.textclassifier.TextSelection.Builder: TextSelection build()>,<android.view.textclassifier.TextSelection.Builder: TextSelection build()>,0,"{
    return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource);
}","{
    return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource, mVersionInfo);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource), []), Statement(}, [])])  Statement({, [])  Statement(return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource, mVersionInfo), []), Statement(}, [])])  Statement({, [])  Statement(return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource, mVersionInfo), [])  Statement(}, [])",1,"/**
 * Builds and returns {@link TextSelection} object.
 */","/**
 * Builds and returns {@link TextSelection} object.
 */",0,,,0,,,,"1,2","1,5",1,"1,5",1,"The return statement has changed since a new parameter `mVersionInfo` is added to the `TextSelection` constructor. Also, the method `TextSelection` itself has changed due to the introduction of a new parameter. Hence, the code change type is 1,5.","The addition of the new parameter `mVersionInfo` to the `TextSelection` constructor can lead to constructing a different object, potentially causing different return values. Therefore, the CI type is 1."
"<android.app.Notification.BigTextStyle: void applyBigTextContentView(Builder,RemoteViews,CharSequence)>",26,27,"<android.app.Notification.BigTextStyle: void applyBigTextContentView(Builder,RemoteViews,CharSequence)>","<android.app.Notification.BigTextStyle: void applyBigTextContentView(Builder,RemoteViews,CharSequence)>",0,"{
    contentView.setTextViewText(R.id.big_text, bigTextText);
    builder.setTextViewColorSecondary(contentView, R.id.big_text);
    contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE);
    contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon());
}","{
    contentView.setTextViewText(R.id.big_text, builder.processTextSpans(bigTextText));
    builder.setTextViewColorSecondary(contentView, R.id.big_text);
    contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE);
    contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon());
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(contentView.setTextViewText(R.id.big_text, bigTextText), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(bigTextText, [])]), MethodCall(builder.setTextViewColorSecondary(contentView, R.id.big_text), [VariableReference(builder, []), Expression(contentView, []), Expression(R.id.big_text, [])]), MethodCall(contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE, [])]), MethodCall(contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon()), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(""setHasImage"", []), Expression(builder.mN.hasLargeIcon(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(contentView.setTextViewText(R.id.big_text, bigTextText), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(bigTextText, [])])    VariableReference(contentView, [])    Expression(R.id.big_text, [])    Expression(bigTextText, [])  MethodCall(builder.setTextViewColorSecondary(contentView, R.id.big_text), [VariableReference(builder, []), Expression(contentView, []), Expression(R.id.big_text, [])])    VariableReference(builder, [])    Expression(contentView, [])    Expression(R.id.big_text, [])  MethodCall(contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE, [])])    VariableReference(contentView, [])    Expression(R.id.big_text, [])    Expression(TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE, [])  MethodCall(contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon()), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(""setHasImage"", []), Expression(builder.mN.hasLargeIcon(), [])])    VariableReference(contentView, [])    Expression(R.id.big_text, [])    Expression(""setHasImage"", [])    Expression(builder.mN.hasLargeIcon(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(contentView.setTextViewText(R.id.big_text, builder.processTextSpans(bigTextText)), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(builder.processTextSpans(bigTextText), [])]), MethodCall(builder.setTextViewColorSecondary(contentView, R.id.big_text), [VariableReference(builder, []), Expression(contentView, []), Expression(R.id.big_text, [])]), MethodCall(contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE, [])]), MethodCall(contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon()), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(""setHasImage"", []), Expression(builder.mN.hasLargeIcon(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(contentView.setTextViewText(R.id.big_text, builder.processTextSpans(bigTextText)), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(builder.processTextSpans(bigTextText), [])])    VariableReference(contentView, [])    Expression(R.id.big_text, [])    Expression(builder.processTextSpans(bigTextText), [])  MethodCall(builder.setTextViewColorSecondary(contentView, R.id.big_text), [VariableReference(builder, []), Expression(contentView, []), Expression(R.id.big_text, [])])    VariableReference(builder, [])    Expression(contentView, [])    Expression(R.id.big_text, [])  MethodCall(contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE, [])])    VariableReference(contentView, [])    Expression(R.id.big_text, [])    Expression(TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE, [])  MethodCall(contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon()), [VariableReference(contentView, []), Expression(R.id.big_text, []), Expression(""setHasImage"", []), Expression(builder.mN.hasLargeIcon(), [])])    VariableReference(contentView, [])    Expression(R.id.big_text, [])    Expression(""setHasImage"", [])    Expression(builder.mN.hasLargeIcon(), [])  Statement(}, [])",1,,,0,,,0,,,,"1,2",5,0,"4,5",0,"The method call `contentView.setTextViewText(R.id.big_text, bigTextText)` has been changed to `contentView.setTextViewText(R.id.big_text, builder.processTextSpans(bigTextText))`. This indicates a change in the dependent API and an additional processing of the `bigTextText` through the `processTextSpans` method. Thus, the change type is 4,5.","Although the method call has been updated to include the result of `builder.processTextSpans(bigTextText)` rather than directly using `bigTextText`, this change does not inherently lead to different return values or exceptions. Consequently, there is no identified Compatibility Issue (CI type 0)."
<android.widget.Editor.HandleView: void show()>,26,27,<android.widget.Editor.HandleView: void show()>,<android.widget.Editor.HandleView: void show()>,0,"{
    if (isShowing())
        return;
    getPositionListener().addSubscriber(this, true);
    // Make sure the offset is always considered new, even when focusing at same position
    mPreviousOffset = -1;
    positionAtCursorOffset(getCurrentCursorOffset(), false);
}","{
    if (isShowing())
        return;
    getPositionListener().addSubscriber(this, true);
    // Make sure the offset is always considered new, even when focusing at same position
    mPreviousOffset = -1;
    positionAtCursorOffset(getCurrentCursorOffset(), false, false);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (isShowing()), []), Statement(return, []), MethodCall(getPositionListener().addSubscriber(this, true), [VariableReference(getPositionListener(), []), Expression(this, []), Expression(true, [])]), Statement(// Make sure the offset is always considered new, even when focusing at same position, []), AssignmentExpression(=, [VariableReference(mPreviousOffset, []), Expression(-1, [])]), Statement(positionAtCursorOffset(getCurrentCursorOffset(), false), []), Statement(}, [])])  Statement({, [])  Statement(if (isShowing()), [])  Statement(return, [])  MethodCall(getPositionListener().addSubscriber(this, true), [VariableReference(getPositionListener(), []), Expression(this, []), Expression(true, [])])    VariableReference(getPositionListener(), [])    Expression(this, [])    Expression(true, [])  Statement(// Make sure the offset is always considered new, even when focusing at same position, [])  AssignmentExpression(=, [VariableReference(mPreviousOffset, []), Expression(-1, [])])    VariableReference(mPreviousOffset, [])    Expression(-1, [])  Statement(positionAtCursorOffset(getCurrentCursorOffset(), false), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (isShowing()), []), Statement(return, []), MethodCall(getPositionListener().addSubscriber(this, true), [VariableReference(getPositionListener(), []), Expression(this, []), Expression(true, [])]), Statement(// Make sure the offset is always considered new, even when focusing at same position, []), AssignmentExpression(=, [VariableReference(mPreviousOffset, []), Expression(-1, [])]), Statement(positionAtCursorOffset(getCurrentCursorOffset(), false, false), []), Statement(}, [])])  Statement({, [])  Statement(if (isShowing()), [])  Statement(return, [])  MethodCall(getPositionListener().addSubscriber(this, true), [VariableReference(getPositionListener(), []), Expression(this, []), Expression(true, [])])    VariableReference(getPositionListener(), [])    Expression(this, [])    Expression(true, [])  Statement(// Make sure the offset is always considered new, even when focusing at same position, [])  AssignmentExpression(=, [VariableReference(mPreviousOffset, []), Expression(-1, [])])    VariableReference(mPreviousOffset, [])    Expression(-1, [])  Statement(positionAtCursorOffset(getCurrentCursorOffset(), false, false), [])  Statement(}, [])",1,,,0,,,0,,,,2,5,0,"4,5",0,"An additional parameter `false` is added to the method call `positionAtCursorOffset(getCurrentCursorOffset(), false, false)`. This implies that the dependent API `positionAtCursorOffset` has changed in terms of its parameter list, so the change type is 4,5.","The added parameter does not potentially affect the return values or exception handling of the method `show()`, so the CI type is 0."
<android.os.WorkSource: void clear()>,27,28,<android.os.WorkSource: void clear()>,<android.os.WorkSource: void clear()>,0,"{
    mNum = 0;
}","{
    mNum = 0;
    if (mChains != null) {
        mChains.clear();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mNum, []), Expression(0, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mNum, []), Expression(0, [])])    VariableReference(mNum, [])    Expression(0, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mNum, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(if (mChains !, []), Expression(null) {, [])]), MethodCall(mChains.clear(), [VariableReference(mChains, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mNum, []), Expression(0, [])])    VariableReference(mNum, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(if (mChains !, []), Expression(null) {, [])])    VariableReference(if (mChains !, [])    Expression(null) {, [])  MethodCall(mChains.clear(), [VariableReference(mChains, []), Expression(, [])])    VariableReference(mChains, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Clear this WorkSource to be empty.
 */","/**
 * Clear this WorkSource to be empty.
 */",0,,,0,,,,1,3,0,"3,4",0,"The late version adds a new condition and an additional method call `mChains.clear()` which isn't present in the early version. This causes changes primarily related to control flow and other statements, so the change type is 3,4.","The additional condition and method call do not affect the return value or exception handling, therefore no compatibility issue is introduced here, so the CI type is 0."
<android.app.Notification.Action.Builder: Action build()>,27,28,<android.app.Notification.Action.Builder: Action build()>,<android.app.Notification.Action.Builder: Action build()>,0,"{
    ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
    RemoteInput[] previousDataInputs = (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
    if (previousDataInputs != null) {
        for (RemoteInput input : previousDataInputs) {
            dataOnlyInputs.add(input);
        }
    }
    List<RemoteInput> textInputs = new ArrayList<>();
    if (mRemoteInputs != null) {
        for (RemoteInput input : mRemoteInputs) {
            if (input.isDataOnly()) {
                dataOnlyInputs.add(input);
            } else {
                textInputs.add(input);
            }
        }
    }
    if (!dataOnlyInputs.isEmpty()) {
        RemoteInput[] dataInputsArr = dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
        mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
    }
    RemoteInput[] textInputsArr = textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
    return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies);
}","{
    ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
    RemoteInput[] previousDataInputs = (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
    if (previousDataInputs != null) {
        for (RemoteInput input : previousDataInputs) {
            dataOnlyInputs.add(input);
        }
    }
    List<RemoteInput> textInputs = new ArrayList<>();
    if (mRemoteInputs != null) {
        for (RemoteInput input : mRemoteInputs) {
            if (input.isDataOnly()) {
                dataOnlyInputs.add(input);
            } else {
                textInputs.add(input);
            }
        }
    }
    if (!dataOnlyInputs.isEmpty()) {
        RemoteInput[] dataInputsArr = dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
        mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
    }
    RemoteInput[] textInputsArr = textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
    return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies, mSemanticAction);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(ArrayList<RemoteInput> dataOnlyInputs, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(RemoteInput[] previousDataInputs, []), Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])]), AssignmentExpression(=, [VariableReference(if (previousDataInputs !, []), Expression(null) {, [])]), Statement(for (RemoteInput input : previousDataInputs) {, []), MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<RemoteInput> textInputs, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(if (mRemoteInputs !, []), Expression(null) {, [])]), Statement(for (RemoteInput input : mRemoteInputs) {, []), MethodCall(if (input.isDataOnly()), [VariableReference(if (input, []), Expression(), [])]), MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])]), Statement(} else {, []), MethodCall(textInputs.add(input), [VariableReference(textInputs, []), Expression(input, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(if (!dataOnlyInputs.isEmpty()), [VariableReference(if (!dataOnlyInputs, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(RemoteInput[] dataInputsArr, []), Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])]), MethodCall(mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr), [VariableReference(mExtras, []), Expression(EXTRA_DATA_ONLY_INPUTS, []), Expression(dataInputsArr, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(RemoteInput[] textInputsArr, []), Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])]), Statement(return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(ArrayList<RemoteInput> dataOnlyInputs, []), Expression(new ArrayList<>(), [])])    VariableReference(ArrayList<RemoteInput> dataOnlyInputs, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(RemoteInput[] previousDataInputs, []), Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])])    VariableReference(RemoteInput[] previousDataInputs, [])    Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])  AssignmentExpression(=, [VariableReference(if (previousDataInputs !, []), Expression(null) {, [])])    VariableReference(if (previousDataInputs !, [])    Expression(null) {, [])  Statement(for (RemoteInput input : previousDataInputs) {, [])  MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])])    VariableReference(dataOnlyInputs, [])    Expression(input, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<RemoteInput> textInputs, []), Expression(new ArrayList<>(), [])])    VariableReference(List<RemoteInput> textInputs, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(if (mRemoteInputs !, []), Expression(null) {, [])])    VariableReference(if (mRemoteInputs !, [])    Expression(null) {, [])  Statement(for (RemoteInput input : mRemoteInputs) {, [])  MethodCall(if (input.isDataOnly()), [VariableReference(if (input, []), Expression(), [])])    VariableReference(if (input, [])    Expression(), [])  MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])])    VariableReference(dataOnlyInputs, [])    Expression(input, [])  Statement(} else {, [])  MethodCall(textInputs.add(input), [VariableReference(textInputs, []), Expression(input, [])])    VariableReference(textInputs, [])    Expression(input, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (!dataOnlyInputs.isEmpty()), [VariableReference(if (!dataOnlyInputs, []), Expression(), [])])    VariableReference(if (!dataOnlyInputs, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(RemoteInput[] dataInputsArr, []), Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])])    VariableReference(RemoteInput[] dataInputsArr, [])    Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])  MethodCall(mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr), [VariableReference(mExtras, []), Expression(EXTRA_DATA_ONLY_INPUTS, []), Expression(dataInputsArr, [])])    VariableReference(mExtras, [])    Expression(EXTRA_DATA_ONLY_INPUTS, [])    Expression(dataInputsArr, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RemoteInput[] textInputsArr, []), Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])])    VariableReference(RemoteInput[] textInputsArr, [])    Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])  Statement(return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(ArrayList<RemoteInput> dataOnlyInputs, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(RemoteInput[] previousDataInputs, []), Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])]), AssignmentExpression(=, [VariableReference(if (previousDataInputs !, []), Expression(null) {, [])]), Statement(for (RemoteInput input : previousDataInputs) {, []), MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<RemoteInput> textInputs, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(if (mRemoteInputs !, []), Expression(null) {, [])]), Statement(for (RemoteInput input : mRemoteInputs) {, []), MethodCall(if (input.isDataOnly()), [VariableReference(if (input, []), Expression(), [])]), MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])]), Statement(} else {, []), MethodCall(textInputs.add(input), [VariableReference(textInputs, []), Expression(input, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(if (!dataOnlyInputs.isEmpty()), [VariableReference(if (!dataOnlyInputs, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(RemoteInput[] dataInputsArr, []), Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])]), MethodCall(mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr), [VariableReference(mExtras, []), Expression(EXTRA_DATA_ONLY_INPUTS, []), Expression(dataInputsArr, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(RemoteInput[] textInputsArr, []), Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])]), Statement(return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies, mSemanticAction), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(ArrayList<RemoteInput> dataOnlyInputs, []), Expression(new ArrayList<>(), [])])    VariableReference(ArrayList<RemoteInput> dataOnlyInputs, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(RemoteInput[] previousDataInputs, []), Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])])    VariableReference(RemoteInput[] previousDataInputs, [])    Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])  AssignmentExpression(=, [VariableReference(if (previousDataInputs !, []), Expression(null) {, [])])    VariableReference(if (previousDataInputs !, [])    Expression(null) {, [])  Statement(for (RemoteInput input : previousDataInputs) {, [])  MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])])    VariableReference(dataOnlyInputs, [])    Expression(input, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<RemoteInput> textInputs, []), Expression(new ArrayList<>(), [])])    VariableReference(List<RemoteInput> textInputs, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(if (mRemoteInputs !, []), Expression(null) {, [])])    VariableReference(if (mRemoteInputs !, [])    Expression(null) {, [])  Statement(for (RemoteInput input : mRemoteInputs) {, [])  MethodCall(if (input.isDataOnly()), [VariableReference(if (input, []), Expression(), [])])    VariableReference(if (input, [])    Expression(), [])  MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])])    VariableReference(dataOnlyInputs, [])    Expression(input, [])  Statement(} else {, [])  MethodCall(textInputs.add(input), [VariableReference(textInputs, []), Expression(input, [])])    VariableReference(textInputs, [])    Expression(input, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (!dataOnlyInputs.isEmpty()), [VariableReference(if (!dataOnlyInputs, []), Expression(), [])])    VariableReference(if (!dataOnlyInputs, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(RemoteInput[] dataInputsArr, []), Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])])    VariableReference(RemoteInput[] dataInputsArr, [])    Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])  MethodCall(mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr), [VariableReference(mExtras, []), Expression(EXTRA_DATA_ONLY_INPUTS, []), Expression(dataInputsArr, [])])    VariableReference(mExtras, [])    Expression(EXTRA_DATA_ONLY_INPUTS, [])    Expression(dataInputsArr, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RemoteInput[] textInputsArr, []), Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])])    VariableReference(RemoteInput[] textInputsArr, [])    Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])  Statement(return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies, mSemanticAction), [])  Statement(}, [])",1,"/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */","/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */",0,,,0,,,,2,"1,5",1,"1,4",1,"There is a change in the constructor of the return statement from ""Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies)"" to ""Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies, mSemanticAction)"". A new parameter has been added to the Action constructor call, so the code change type is 1 (Return statement changed), 4 (Other statement changed).","The change in the constructor call might lead to different return values because a new parameter (mSemanticAction) is introduced in the late version's return statement. Therefore, the CI type is 1."
"<android.net.NetworkCapabilities: void writeToParcel(Parcel,int)>",27,28,"<android.net.NetworkCapabilities: void writeToParcel(Parcel,int)>","<android.net.NetworkCapabilities: void writeToParcel(Parcel,int)>",0,"{
    dest.writeLong(mNetworkCapabilities);
    dest.writeLong(mTransportTypes);
    dest.writeInt(mLinkUpBandwidthKbps);
    dest.writeInt(mLinkDownBandwidthKbps);
    dest.writeParcelable((Parcelable) mNetworkSpecifier, flags);
    dest.writeInt(mSignalStrength);
}","{
    dest.writeLong(mNetworkCapabilities);
    dest.writeLong(mUnwantedNetworkCapabilities);
    dest.writeLong(mTransportTypes);
    dest.writeInt(mLinkUpBandwidthKbps);
    dest.writeInt(mLinkDownBandwidthKbps);
    dest.writeParcelable((Parcelable) mNetworkSpecifier, flags);
    dest.writeInt(mSignalStrength);
    dest.writeArraySet(mUids);
    dest.writeString(mSSID);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeLong(mNetworkCapabilities), [VariableReference(dest, []), Expression(mNetworkCapabilities, [])]), MethodCall(dest.writeLong(mTransportTypes), [VariableReference(dest, []), Expression(mTransportTypes, [])]), MethodCall(dest.writeInt(mLinkUpBandwidthKbps), [VariableReference(dest, []), Expression(mLinkUpBandwidthKbps, [])]), MethodCall(dest.writeInt(mLinkDownBandwidthKbps), [VariableReference(dest, []), Expression(mLinkDownBandwidthKbps, [])]), MethodCall(dest.writeParcelable((Parcelable) mNetworkSpecifier, flags), [VariableReference(dest, []), Expression((Parcelable) mNetworkSpecifier, []), Expression(flags, [])]), MethodCall(dest.writeInt(mSignalStrength), [VariableReference(dest, []), Expression(mSignalStrength, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeLong(mNetworkCapabilities), [VariableReference(dest, []), Expression(mNetworkCapabilities, [])])    VariableReference(dest, [])    Expression(mNetworkCapabilities, [])  MethodCall(dest.writeLong(mTransportTypes), [VariableReference(dest, []), Expression(mTransportTypes, [])])    VariableReference(dest, [])    Expression(mTransportTypes, [])  MethodCall(dest.writeInt(mLinkUpBandwidthKbps), [VariableReference(dest, []), Expression(mLinkUpBandwidthKbps, [])])    VariableReference(dest, [])    Expression(mLinkUpBandwidthKbps, [])  MethodCall(dest.writeInt(mLinkDownBandwidthKbps), [VariableReference(dest, []), Expression(mLinkDownBandwidthKbps, [])])    VariableReference(dest, [])    Expression(mLinkDownBandwidthKbps, [])  MethodCall(dest.writeParcelable((Parcelable) mNetworkSpecifier, flags), [VariableReference(dest, []), Expression((Parcelable) mNetworkSpecifier, []), Expression(flags, [])])    VariableReference(dest, [])    Expression((Parcelable) mNetworkSpecifier, [])    Expression(flags, [])  MethodCall(dest.writeInt(mSignalStrength), [VariableReference(dest, []), Expression(mSignalStrength, [])])    VariableReference(dest, [])    Expression(mSignalStrength, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeLong(mNetworkCapabilities), [VariableReference(dest, []), Expression(mNetworkCapabilities, [])]), MethodCall(dest.writeLong(mUnwantedNetworkCapabilities), [VariableReference(dest, []), Expression(mUnwantedNetworkCapabilities, [])]), MethodCall(dest.writeLong(mTransportTypes), [VariableReference(dest, []), Expression(mTransportTypes, [])]), MethodCall(dest.writeInt(mLinkUpBandwidthKbps), [VariableReference(dest, []), Expression(mLinkUpBandwidthKbps, [])]), MethodCall(dest.writeInt(mLinkDownBandwidthKbps), [VariableReference(dest, []), Expression(mLinkDownBandwidthKbps, [])]), MethodCall(dest.writeParcelable((Parcelable) mNetworkSpecifier, flags), [VariableReference(dest, []), Expression((Parcelable) mNetworkSpecifier, []), Expression(flags, [])]), MethodCall(dest.writeInt(mSignalStrength), [VariableReference(dest, []), Expression(mSignalStrength, [])]), MethodCall(dest.writeArraySet(mUids), [VariableReference(dest, []), Expression(mUids, [])]), MethodCall(dest.writeString(mSSID), [VariableReference(dest, []), Expression(mSSID, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeLong(mNetworkCapabilities), [VariableReference(dest, []), Expression(mNetworkCapabilities, [])])    VariableReference(dest, [])    Expression(mNetworkCapabilities, [])  MethodCall(dest.writeLong(mUnwantedNetworkCapabilities), [VariableReference(dest, []), Expression(mUnwantedNetworkCapabilities, [])])    VariableReference(dest, [])    Expression(mUnwantedNetworkCapabilities, [])  MethodCall(dest.writeLong(mTransportTypes), [VariableReference(dest, []), Expression(mTransportTypes, [])])    VariableReference(dest, [])    Expression(mTransportTypes, [])  MethodCall(dest.writeInt(mLinkUpBandwidthKbps), [VariableReference(dest, []), Expression(mLinkUpBandwidthKbps, [])])    VariableReference(dest, [])    Expression(mLinkUpBandwidthKbps, [])  MethodCall(dest.writeInt(mLinkDownBandwidthKbps), [VariableReference(dest, []), Expression(mLinkDownBandwidthKbps, [])])    VariableReference(dest, [])    Expression(mLinkDownBandwidthKbps, [])  MethodCall(dest.writeParcelable((Parcelable) mNetworkSpecifier, flags), [VariableReference(dest, []), Expression((Parcelable) mNetworkSpecifier, []), Expression(flags, [])])    VariableReference(dest, [])    Expression((Parcelable) mNetworkSpecifier, [])    Expression(flags, [])  MethodCall(dest.writeInt(mSignalStrength), [VariableReference(dest, []), Expression(mSignalStrength, [])])    VariableReference(dest, [])    Expression(mSignalStrength, [])  MethodCall(dest.writeArraySet(mUids), [VariableReference(dest, []), Expression(mUids, [])])    VariableReference(dest, [])    Expression(mUids, [])  MethodCall(dest.writeString(mSSID), [VariableReference(dest, []), Expression(mSSID, [])])    VariableReference(dest, [])    Expression(mSSID, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,4,0,"3,4",0,"Several new statements have been added in the late version, specifically: `dest.writeLong(mUnwantedNetworkCapabilities);`, `dest.writeArraySet(mUids);`, and `dest.writeString(mSSID);`. This alters both the control dependency and adds other statements. Hence, the code change types are 3 and 4. ","The additional write operations do not affect the return type or the exceptions thrown by the method. Therefore, no potential compatibility issues are identified, and the CI type is 0."
<android.view.textclassifier.TextClassification: String toString()>,27,28,<android.view.textclassifier.TextClassification: String toString()>,<android.view.textclassifier.TextClassification: String toString()>,0,"{
    return String.format(""TextClassification {"" + ""text=%s, entities=%s, label=%s, intent=%s}"", mText, mEntityConfidence, mLabel, mIntent);
}","{
    return String.format(Locale.US, ""TextClassification {text=%s, entities=%s, actions=%s, id=%s}"", mText, mEntityConfidence, mActions, mId);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return String.format(""TextClassification {"" + ""text, []), Expression(%s, entities, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return String.format(""TextClassification {"" + ""text, []), Expression(%s, entities, [])])    VariableReference(return String.format(""TextClassification {"" + ""text, [])    Expression(%s, entities, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return String.format(Locale.US, ""TextClassification {text, []), Expression(%s, entities, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return String.format(Locale.US, ""TextClassification {text, []), Expression(%s, entities, [])])    VariableReference(return String.format(Locale.US, ""TextClassification {text, [])    Expression(%s, entities, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","1,5",1,"1,5",1,The return statement changed as follows:,"3. Corresponding change in the arguments from mLabel, mIntent to mActions, mId."
"<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>",27,28,"<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>","<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>",0,"{
    assertNotCompacted();
    final int id = checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_OBJECT);
    writeRepeatedObjectImpl(id, value);
}","{
    assertNotCompacted();
    final int id = checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_MESSAGE);
    writeRepeatedObjectImpl(id, value);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(assertNotCompacted(), []), AssignmentExpression(=, [VariableReference(final int id, []), Expression(checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_OBJECT), [])]), Statement(writeRepeatedObjectImpl(id, value), []), Statement(}, [])])  Statement({, [])  Statement(assertNotCompacted(), [])  AssignmentExpression(=, [VariableReference(final int id, []), Expression(checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_OBJECT), [])])    VariableReference(final int id, [])    Expression(checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_OBJECT), [])  Statement(writeRepeatedObjectImpl(id, value), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(assertNotCompacted(), []), AssignmentExpression(=, [VariableReference(final int id, []), Expression(checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_MESSAGE), [])]), Statement(writeRepeatedObjectImpl(id, value), []), Statement(}, [])])  Statement({, [])  Statement(assertNotCompacted(), [])  AssignmentExpression(=, [VariableReference(final int id, []), Expression(checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_MESSAGE), [])])    VariableReference(final int id, [])    Expression(checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_MESSAGE), [])  Statement(writeRepeatedObjectImpl(id, value), [])  Statement(}, [])",1,"/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */","/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */",0,[@Deprecated],[@Deprecated],0,,,,2,5,0,4,0,"The constant value passed to the `checkFieldId` method has changed from `FIELD_TYPE_OBJECT` to `FIELD_TYPE_MESSAGE`. This change does not affect return statements, exception handling statements, control dependencies, or involve any dependent APIs.","The change does not potentially lead to Compatibility Issue since there is no impact on return values or exception handling. Therefore, the CI type is 0."
<android.view.textclassifier.TextClassification: int getEntityCount()>,27,28,<android.view.textclassifier.TextClassification: int getEntityCount()>,<android.view.textclassifier.TextClassification: int getEntityCount()>,0,"{
    return mEntities.size();
}","{
    return mEntityConfidence.getEntities().size();
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return mEntities.size(), [VariableReference(return mEntities, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mEntities.size(), [VariableReference(return mEntities, []), Expression(, [])])    VariableReference(return mEntities, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mEntityConfidence.getEntities().size(), [VariableReference(return mEntityConfidence, []), Expression().size(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mEntityConfidence.getEntities().size(), [VariableReference(return mEntityConfidence, []), Expression().size(, [])])    VariableReference(return mEntityConfidence, [])    Expression().size(, [])  Statement(}, [])",1,"/**
 * Returns the number of entities found in the classified text.
 */","/**
 * Returns the number of entities found in the classified text.
 */",1,[@IntRange(from = 0)],[@IntRange(from = 0)],0,,,,1.2,"1,5",1,"1,5",1,"The return statements have changed from `return mEntities.size();` to `return mEntityConfidence.getEntities().size();`. This indicates a dependency on a different method, so the code change type is 1,5.","Since the object and the method used to determine the return value have changed, the API could potentially return a different value in the late version. Hence, the CI type is 1."
<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>,27,28,<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>,<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>,0,"{
    return mInPictureInPicture;
}","{
    return getBooleanProperty(BOOLEAN_PROPERTY_PICTURE_IN_PICTURE);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mInPictureInPicture, []), Statement(}, [])])  Statement({, [])  Statement(return mInPictureInPicture, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return getBooleanProperty(BOOLEAN_PROPERTY_PICTURE_IN_PICTURE), []), Statement(}, [])])  Statement({, [])  Statement(return getBooleanProperty(BOOLEAN_PROPERTY_PICTURE_IN_PICTURE), [])  Statement(}, [])",1,"/**
 * Check if the window is in picture-in-picture mode.
 *
 * @return {@code true} if the window is in picture-in-picture mode, {@code false} otherwise.
 */","/**
 * Check if the window is in picture-in-picture mode.
 *
 * @return {@code true} if the window is in picture-in-picture mode, {@code false} otherwise.
 */",0,,,0,,,,1,1,1,"1,5",1,"The return statement has been changed from returning `mInPictureInPicture` to returning `getBooleanProperty(BOOLEAN_PROPERTY_PICTURE_IN_PICTURE)`, and this typically indicates a dependent API change. Therefore, the code change type is 1,5.","Since the return statement has been altered to invoke a different method which may return a different value, it can potentially influence the behavior of the API. Hence, the CI type is 1."
<android.companion.CompanionDeviceManager.CallbackProxy: void onSuccess(PendingIntent)>,27,28,<android.companion.CompanionDeviceManager.CallbackProxy: void onSuccess(PendingIntent)>,<android.companion.CompanionDeviceManager.CallbackProxy: void onSuccess(PendingIntent)>,0,"{
    Handler handler = mHandler;
    if (handler == null)
        return;
    handler.post(() -> {
        Callback callback = mCallback;
        if (callback == null)
            return;
        callback.onDeviceFound(launcher.getIntentSender());
    });
}","{
    lockAndPost(Callback::onDeviceFound, launcher.getIntentSender());
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Handler handler, []), Expression(mHandler, [])]), AssignmentExpression(=, [VariableReference(if (handler, []), Expression(, [])]), Statement(return, []), MethodCall(handler.post((), [VariableReference(handler, []), Expression((, [])]), AssignmentExpression(=, [VariableReference(Callback callback, []), Expression(mCallback, [])]), AssignmentExpression(=, [VariableReference(if (callback, []), Expression(, [])]), Statement(return, []), MethodCall(callback.onDeviceFound(launcher.getIntentSender()), [VariableReference(callback, []), Expression(launcher.getIntentSender(), [])]), Statement(}), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Handler handler, []), Expression(mHandler, [])])    VariableReference(Handler handler, [])    Expression(mHandler, [])  AssignmentExpression(=, [VariableReference(if (handler, []), Expression(, [])])    VariableReference(if (handler, [])    Expression(, [])  Statement(return, [])  MethodCall(handler.post((), [VariableReference(handler, []), Expression((, [])])    VariableReference(handler, [])    Expression((, [])  AssignmentExpression(=, [VariableReference(Callback callback, []), Expression(mCallback, [])])    VariableReference(Callback callback, [])    Expression(mCallback, [])  AssignmentExpression(=, [VariableReference(if (callback, []), Expression(, [])])    VariableReference(if (callback, [])    Expression(, [])  Statement(return, [])  MethodCall(callback.onDeviceFound(launcher.getIntentSender()), [VariableReference(callback, []), Expression(launcher.getIntentSender(), [])])    VariableReference(callback, [])    Expression(launcher.getIntentSender(), [])  Statement(}), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(lockAndPost(Callback::onDeviceFound, launcher.getIntentSender()), [VariableReference(lockAndPost(Callback::onDeviceFound, launcher, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(lockAndPost(Callback::onDeviceFound, launcher.getIntentSender()), [VariableReference(lockAndPost(Callback::onDeviceFound, launcher, []), Expression(), [])])    VariableReference(lockAndPost(Callback::onDeviceFound, launcher, [])    Expression(), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"1,3,4",1,"3,5",1,"The implementation changed from using a handler to directly invoking `lockAndPost` with a method reference. This indicates a change in control dependency and dependent API, so the code change type is 3,5.","Due to the change in control flow and the dependency on `lockAndPost`, the behavior of the method might differ, potentially leading to different return values or effects. Hence, the CI type is 1."
"<android.service.notification.ZenModeConfig.ZenRule: void writeToParcel(Parcel,int)>",28,29,"<android.service.notification.ZenModeConfig.ZenRule: void writeToParcel(Parcel,int)>","<android.service.notification.ZenModeConfig.ZenRule: void writeToParcel(Parcel,int)>",0,"{
    dest.writeInt(enabled ? 1 : 0);
    dest.writeInt(snoozing ? 1 : 0);
    if (name != null) {
        dest.writeInt(1);
        dest.writeString(name);
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(zenMode);
    dest.writeParcelable(conditionId, 0);
    dest.writeParcelable(condition, 0);
    dest.writeParcelable(component, 0);
    if (id != null) {
        dest.writeInt(1);
        dest.writeString(id);
    } else {
        dest.writeInt(0);
    }
    dest.writeLong(creationTime);
    if (enabler != null) {
        dest.writeInt(1);
        dest.writeString(enabler);
    } else {
        dest.writeInt(0);
    }
}","{
    dest.writeInt(enabled ? 1 : 0);
    dest.writeInt(snoozing ? 1 : 0);
    if (name != null) {
        dest.writeInt(1);
        dest.writeString(name);
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(zenMode);
    dest.writeParcelable(conditionId, 0);
    dest.writeParcelable(condition, 0);
    dest.writeParcelable(component, 0);
    dest.writeParcelable(configurationActivity, 0);
    if (id != null) {
        dest.writeInt(1);
        dest.writeString(id);
    } else {
        dest.writeInt(0);
    }
    dest.writeLong(creationTime);
    if (enabler != null) {
        dest.writeInt(1);
        dest.writeString(enabler);
    } else {
        dest.writeInt(0);
    }
    dest.writeParcelable(zenPolicy, 0);
    dest.writeInt(modified ? 1 : 0);
    dest.writeString(pkg);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeInt(enabled ? 1 : 0), [VariableReference(dest, []), Expression(enabled ? 1 : 0, [])]), MethodCall(dest.writeInt(snoozing ? 1 : 0), [VariableReference(dest, []), Expression(snoozing ? 1 : 0, [])]), AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeString(name), [VariableReference(dest, []), Expression(name, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeInt(zenMode), [VariableReference(dest, []), Expression(zenMode, [])]), MethodCall(dest.writeParcelable(conditionId, 0), [VariableReference(dest, []), Expression(conditionId, []), Expression(0, [])]), MethodCall(dest.writeParcelable(condition, 0), [VariableReference(dest, []), Expression(condition, []), Expression(0, [])]), MethodCall(dest.writeParcelable(component, 0), [VariableReference(dest, []), Expression(component, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeString(id), [VariableReference(dest, []), Expression(id, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeLong(creationTime), [VariableReference(dest, []), Expression(creationTime, [])]), AssignmentExpression(=, [VariableReference(if (enabler !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeString(enabler), [VariableReference(dest, []), Expression(enabler, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeInt(enabled ? 1 : 0), [VariableReference(dest, []), Expression(enabled ? 1 : 0, [])])    VariableReference(dest, [])    Expression(enabled ? 1 : 0, [])  MethodCall(dest.writeInt(snoozing ? 1 : 0), [VariableReference(dest, []), Expression(snoozing ? 1 : 0, [])])    VariableReference(dest, [])    Expression(snoozing ? 1 : 0, [])  AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null) {, [])])    VariableReference(if (name !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeString(name), [VariableReference(dest, []), Expression(name, [])])    VariableReference(dest, [])    Expression(name, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeInt(zenMode), [VariableReference(dest, []), Expression(zenMode, [])])    VariableReference(dest, [])    Expression(zenMode, [])  MethodCall(dest.writeParcelable(conditionId, 0), [VariableReference(dest, []), Expression(conditionId, []), Expression(0, [])])    VariableReference(dest, [])    Expression(conditionId, [])    Expression(0, [])  MethodCall(dest.writeParcelable(condition, 0), [VariableReference(dest, []), Expression(condition, []), Expression(0, [])])    VariableReference(dest, [])    Expression(condition, [])    Expression(0, [])  MethodCall(dest.writeParcelable(component, 0), [VariableReference(dest, []), Expression(component, []), Expression(0, [])])    VariableReference(dest, [])    Expression(component, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])])    VariableReference(if (id !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeString(id), [VariableReference(dest, []), Expression(id, [])])    VariableReference(dest, [])    Expression(id, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeLong(creationTime), [VariableReference(dest, []), Expression(creationTime, [])])    VariableReference(dest, [])    Expression(creationTime, [])  AssignmentExpression(=, [VariableReference(if (enabler !, []), Expression(null) {, [])])    VariableReference(if (enabler !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeString(enabler), [VariableReference(dest, []), Expression(enabler, [])])    VariableReference(dest, [])    Expression(enabler, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeInt(enabled ? 1 : 0), [VariableReference(dest, []), Expression(enabled ? 1 : 0, [])]), MethodCall(dest.writeInt(snoozing ? 1 : 0), [VariableReference(dest, []), Expression(snoozing ? 1 : 0, [])]), AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeString(name), [VariableReference(dest, []), Expression(name, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeInt(zenMode), [VariableReference(dest, []), Expression(zenMode, [])]), MethodCall(dest.writeParcelable(conditionId, 0), [VariableReference(dest, []), Expression(conditionId, []), Expression(0, [])]), MethodCall(dest.writeParcelable(condition, 0), [VariableReference(dest, []), Expression(condition, []), Expression(0, [])]), MethodCall(dest.writeParcelable(component, 0), [VariableReference(dest, []), Expression(component, []), Expression(0, [])]), MethodCall(dest.writeParcelable(configurationActivity, 0), [VariableReference(dest, []), Expression(configurationActivity, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeString(id), [VariableReference(dest, []), Expression(id, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeLong(creationTime), [VariableReference(dest, []), Expression(creationTime, [])]), AssignmentExpression(=, [VariableReference(if (enabler !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeString(enabler), [VariableReference(dest, []), Expression(enabler, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeParcelable(zenPolicy, 0), [VariableReference(dest, []), Expression(zenPolicy, []), Expression(0, [])]), MethodCall(dest.writeInt(modified ? 1 : 0), [VariableReference(dest, []), Expression(modified ? 1 : 0, [])]), MethodCall(dest.writeString(pkg), [VariableReference(dest, []), Expression(pkg, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeInt(enabled ? 1 : 0), [VariableReference(dest, []), Expression(enabled ? 1 : 0, [])])    VariableReference(dest, [])    Expression(enabled ? 1 : 0, [])  MethodCall(dest.writeInt(snoozing ? 1 : 0), [VariableReference(dest, []), Expression(snoozing ? 1 : 0, [])])    VariableReference(dest, [])    Expression(snoozing ? 1 : 0, [])  AssignmentExpression(=, [VariableReference(if (name !, []), Expression(null) {, [])])    VariableReference(if (name !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeString(name), [VariableReference(dest, []), Expression(name, [])])    VariableReference(dest, [])    Expression(name, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeInt(zenMode), [VariableReference(dest, []), Expression(zenMode, [])])    VariableReference(dest, [])    Expression(zenMode, [])  MethodCall(dest.writeParcelable(conditionId, 0), [VariableReference(dest, []), Expression(conditionId, []), Expression(0, [])])    VariableReference(dest, [])    Expression(conditionId, [])    Expression(0, [])  MethodCall(dest.writeParcelable(condition, 0), [VariableReference(dest, []), Expression(condition, []), Expression(0, [])])    VariableReference(dest, [])    Expression(condition, [])    Expression(0, [])  MethodCall(dest.writeParcelable(component, 0), [VariableReference(dest, []), Expression(component, []), Expression(0, [])])    VariableReference(dest, [])    Expression(component, [])    Expression(0, [])  MethodCall(dest.writeParcelable(configurationActivity, 0), [VariableReference(dest, []), Expression(configurationActivity, []), Expression(0, [])])    VariableReference(dest, [])    Expression(configurationActivity, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])])    VariableReference(if (id !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeString(id), [VariableReference(dest, []), Expression(id, [])])    VariableReference(dest, [])    Expression(id, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeLong(creationTime), [VariableReference(dest, []), Expression(creationTime, [])])    VariableReference(dest, [])    Expression(creationTime, [])  AssignmentExpression(=, [VariableReference(if (enabler !, []), Expression(null) {, [])])    VariableReference(if (enabler !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeString(enabler), [VariableReference(dest, []), Expression(enabler, [])])    VariableReference(dest, [])    Expression(enabler, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeParcelable(zenPolicy, 0), [VariableReference(dest, []), Expression(zenPolicy, []), Expression(0, [])])    VariableReference(dest, [])    Expression(zenPolicy, [])    Expression(0, [])  MethodCall(dest.writeInt(modified ? 1 : 0), [VariableReference(dest, []), Expression(modified ? 1 : 0, [])])    VariableReference(dest, [])    Expression(modified ? 1 : 0, [])  MethodCall(dest.writeString(pkg), [VariableReference(dest, []), Expression(pkg, [])])    VariableReference(dest, [])    Expression(pkg, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,4,0,"3,4",0,"In the late implementation, new statements to write additional fields (`configurationActivity`, `zenPolicy`, `modified`, and `pkg`) to the `Parcel` have been introduced. This indicates changes in the control dependency as well as new statement introductions. Hence, the change types are 3 (Control dependency changed) and 4 (Other statement changed).","The new fields added to the `writeToParcel` method do not suggest a different return type or exception handling behavior but instead enhance the data being written to the `Parcel`. Thus, there are no compatibility issues directly caused by different return values or types, nor by different exception handlings. The methods remain functionally compatible. Consequently, the CI type is 0."
<android.view.View: void setAutofillId(AutofillId)>,28,29,<android.view.View: void setAutofillId(AutofillId)>,<android.view.View: void setAutofillId(AutofillId)>,0,"{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (android.view.autofill.Helper.sVerbose) {
        Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && id.isVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}","{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)) {
        Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && !id.isNonVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, []), MethodCall(Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])]), Statement(}, []), Statement(if (isAttachedToWindow()) {, []), Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && id.isVirtual()) {, [])]), Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])]), Statement(// Ignore reset because it was never explicitly set before., []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])]), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, [])  MethodCall(Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])  Statement(}, [])  Statement(if (isAttachedToWindow()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && id.isVirtual()) {, [])])    VariableReference(if (id !, [])    Expression(null && id.isVirtual()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])])    VariableReference(if (id, [])    Expression(, [])  Statement(// Ignore reset because it was never explicitly set before., [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])])    VariableReference(mAutofillId, [])    Expression(id, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])])    VariableReference(if (id !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])])    VariableReference(mAutofillViewId, [])    Expression(id.getViewId(), [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 |, [])    Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])])    VariableReference(mAutofillViewId, [])    Expression(NO_ID, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 &, [])    Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, []), MethodCall(if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)), [VariableReference(if (Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(Log.VERBOSE), [])]), MethodCall(Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])]), Statement(}, []), Statement(if (isAttachedToWindow()) {, []), Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && !id.isNonVirtual()) {, [])]), Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])]), Statement(// Ignore reset because it was never explicitly set before., []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])]), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, [])  MethodCall(if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)), [VariableReference(if (Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(Log.VERBOSE), [])])    VariableReference(if (Log, [])    Expression(AUTOFILL_LOG_TAG, [])    Expression(Log.VERBOSE), [])  MethodCall(Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])])    VariableReference(Log, [])    Expression(AUTOFILL_LOG_TAG, [])    Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])  Statement(}, [])  Statement(if (isAttachedToWindow()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && !id.isNonVirtual()) {, [])])    VariableReference(if (id !, [])    Expression(null && !id.isNonVirtual()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])])    VariableReference(if (id, [])    Expression(, [])  Statement(// Ignore reset because it was never explicitly set before., [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])])    VariableReference(mAutofillId, [])    Expression(id, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])])    VariableReference(if (id !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])])    VariableReference(mAutofillViewId, [])    Expression(id.getViewId(), [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 |, [])    Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])])    VariableReference(mAutofillViewId, [])    Expression(NO_ID, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 &, [])    Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */","/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */",0,,,0,,,,1,3,2,"2,4",2,"The logging condition has changed, and the exception handling statement has changed from checking `id.isVirtual()` to `!id.isNonVirtual()`, so the code change type is 2,4.","The change in the exception handling condition can lead to different exceptions being thrown, potentially altering the behavior of the method. Thus, the CI type is 2."
<android.companion.WifiDeviceFilter.Builder: WifiDeviceFilter build()>,29,30,<android.companion.WifiDeviceFilter.Builder: WifiDeviceFilter build()>,<android.companion.WifiDeviceFilter.Builder: WifiDeviceFilter build()>,0,"{
    markUsed();
    return new WifiDeviceFilter(mNamePattern);
}","{
    checkNotUsed();
    // Mark builder used
    mBuilderFieldsSet |= 0x8;
    if ((mBuilderFieldsSet & 0x1) == 0) {
        mNamePattern = null;
    }
    if ((mBuilderFieldsSet & 0x2) == 0) {
        mBssid = null;
    }
    if ((mBuilderFieldsSet & 0x4) == 0) {
        mBssidMask = MacAddress.BROADCAST_ADDRESS;
    }
    WifiDeviceFilter o = new WifiDeviceFilter(mNamePattern, mBssid, mBssidMask);
    return o;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(markUsed(), []), Statement(return new WifiDeviceFilter(mNamePattern), []), Statement(}, [])])  Statement({, [])  Statement(markUsed(), [])  Statement(return new WifiDeviceFilter(mNamePattern), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkNotUsed(), []), Statement(// Mark builder used, []), AssignmentExpression(=, [VariableReference(mBuilderFieldsSet |, []), Expression(0x8, [])]), AssignmentExpression(=, [VariableReference(if ((mBuilderFieldsSet & 0x1), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mNamePattern, []), Expression(null, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if ((mBuilderFieldsSet & 0x2), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mBssid, []), Expression(null, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if ((mBuilderFieldsSet & 0x4), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mBssidMask, []), Expression(MacAddress.BROADCAST_ADDRESS, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(WifiDeviceFilter o, []), Expression(new WifiDeviceFilter(mNamePattern, mBssid, mBssidMask), [])]), Statement(return o, []), Statement(}, [])])  Statement({, [])  Statement(checkNotUsed(), [])  Statement(// Mark builder used, [])  AssignmentExpression(=, [VariableReference(mBuilderFieldsSet |, []), Expression(0x8, [])])    VariableReference(mBuilderFieldsSet |, [])    Expression(0x8, [])  AssignmentExpression(=, [VariableReference(if ((mBuilderFieldsSet & 0x1), []), Expression(, [])])    VariableReference(if ((mBuilderFieldsSet & 0x1), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mNamePattern, []), Expression(null, [])])    VariableReference(mNamePattern, [])    Expression(null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if ((mBuilderFieldsSet & 0x2), []), Expression(, [])])    VariableReference(if ((mBuilderFieldsSet & 0x2), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mBssid, []), Expression(null, [])])    VariableReference(mBssid, [])    Expression(null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if ((mBuilderFieldsSet & 0x4), []), Expression(, [])])    VariableReference(if ((mBuilderFieldsSet & 0x4), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mBssidMask, []), Expression(MacAddress.BROADCAST_ADDRESS, [])])    VariableReference(mBssidMask, [])    Expression(MacAddress.BROADCAST_ADDRESS, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(WifiDeviceFilter o, []), Expression(new WifiDeviceFilter(mNamePattern, mBssid, mBssidMask), [])])    VariableReference(WifiDeviceFilter o, [])    Expression(new WifiDeviceFilter(mNamePattern, mBssid, mBssidMask), [])  Statement(return o, [])  Statement(}, [])",1,"/**
 * @inheritDoc
 */","/**
 * Builds the instance. This builder should not be touched after calling this!
 */",1,"[@Override, @NonNull]",[@NonNull],1,,,,"1,2","1,3,4,5",1,"1,3,4",1,"1) The return statement has changed, as it now returns a new instance of `WifiDeviceFilter` with additional parameters. 3) There is a control dependency change due to newly introduced 'if' statements that check certain conditions before initializing variables. 4) Other statements were changed to include additional setup and manipulation before returning the `WifiDeviceFilter` object, such as `checkNotUsed()` and assignments to `mNamePattern`, `mBssid`, and `mBssidMask`.","The control dependency change and other statement changes could lead to the API potentially returning a different instance of `WifiDeviceFilter`, thus leading to a CI of type 1."
<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(Surface)>,29,30,<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(Surface)>,<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(Surface)>,0,"{
    if (surface == null)
        throw new IllegalArgumentException(""Surface is null"");
    synchronized (mInterfaceLock) {
        int streamId = -1;
        for (int i = 0; i < mConfiguredOutputs.size(); i++) {
            if (surface == mConfiguredOutputs.valueAt(i).getSurface()) {
                streamId = mConfiguredOutputs.keyAt(i);
                break;
            }
        }
        if (streamId == -1) {
            throw new IllegalArgumentException(""Surface is not part of this session"");
        }
        mRemoteDevice.tearDown(streamId);
    }
}","{
    if (surface == null)
        throw new IllegalArgumentException(""Surface is null"");
    synchronized (mInterfaceLock) {
        checkIfCameraClosedOrInError();
        int streamId = -1;
        for (int i = 0; i < mConfiguredOutputs.size(); i++) {
            if (surface == mConfiguredOutputs.valueAt(i).getSurface()) {
                streamId = mConfiguredOutputs.keyAt(i);
                break;
            }
        }
        if (streamId == -1) {
            throw new IllegalArgumentException(""Surface is not part of this session"");
        }
        mRemoteDevice.tearDown(streamId);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Surface is null""), []), Statement(synchronized (mInterfaceLock) {, []), AssignmentExpression(=, [VariableReference(int streamId, []), Expression(-1, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), MethodCall(i < mConfiguredOutputs.size(), [VariableReference(i < mConfiguredOutputs, []), Expression(, [])]), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(streamId, []), Expression(mConfiguredOutputs.keyAt(i), [])]), Statement(break, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (streamId, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Surface is not part of this session""), []), Statement(}, []), MethodCall(mRemoteDevice.tearDown(streamId), [VariableReference(mRemoteDevice, []), Expression(streamId, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])])    VariableReference(if (surface, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Surface is null""), [])  Statement(synchronized (mInterfaceLock) {, [])  AssignmentExpression(=, [VariableReference(int streamId, []), Expression(-1, [])])    VariableReference(int streamId, [])    Expression(-1, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  MethodCall(i < mConfiguredOutputs.size(), [VariableReference(i < mConfiguredOutputs, []), Expression(, [])])    VariableReference(i < mConfiguredOutputs, [])    Expression(, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])])    VariableReference(if (surface, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(streamId, []), Expression(mConfiguredOutputs.keyAt(i), [])])    VariableReference(streamId, [])    Expression(mConfiguredOutputs.keyAt(i), [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (streamId, []), Expression(, [])])    VariableReference(if (streamId, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Surface is not part of this session""), [])  Statement(}, [])  MethodCall(mRemoteDevice.tearDown(streamId), [VariableReference(mRemoteDevice, []), Expression(streamId, [])])    VariableReference(mRemoteDevice, [])    Expression(streamId, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Surface is null""), []), Statement(synchronized (mInterfaceLock) {, []), Statement(checkIfCameraClosedOrInError(), []), AssignmentExpression(=, [VariableReference(int streamId, []), Expression(-1, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), MethodCall(i < mConfiguredOutputs.size(), [VariableReference(i < mConfiguredOutputs, []), Expression(, [])]), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(streamId, []), Expression(mConfiguredOutputs.keyAt(i), [])]), Statement(break, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (streamId, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Surface is not part of this session""), []), Statement(}, []), MethodCall(mRemoteDevice.tearDown(streamId), [VariableReference(mRemoteDevice, []), Expression(streamId, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])])    VariableReference(if (surface, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Surface is null""), [])  Statement(synchronized (mInterfaceLock) {, [])  Statement(checkIfCameraClosedOrInError(), [])  AssignmentExpression(=, [VariableReference(int streamId, []), Expression(-1, [])])    VariableReference(int streamId, [])    Expression(-1, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  MethodCall(i < mConfiguredOutputs.size(), [VariableReference(i < mConfiguredOutputs, []), Expression(, [])])    VariableReference(i < mConfiguredOutputs, [])    Expression(, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(if (surface, []), Expression(, [])])    VariableReference(if (surface, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(streamId, []), Expression(mConfiguredOutputs.keyAt(i), [])])    VariableReference(streamId, [])    Expression(mConfiguredOutputs.keyAt(i), [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (streamId, []), Expression(, [])])    VariableReference(if (streamId, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Surface is not part of this session""), [])  Statement(}, [])  MethodCall(mRemoteDevice.tearDown(streamId), [VariableReference(mRemoteDevice, []), Expression(streamId, [])])    VariableReference(mRemoteDevice, [])    Expression(streamId, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,1,4,0,"2,4",2,A new method call `checkIfCameraClosedOrInError()` is added right before the for-loop inside the synchronized block. This qualifies as 2 (exception handling statement changed) and 4 (other statement changed).,"The introduction of `checkIfCameraClosedOrInError()` could potentially throw different exceptions compared to the early version, leading to different behavior. Therefore, the CI type is 2."
<android.view.DisplayCutout: boolean equals(Object)>,29,30,<android.view.DisplayCutout: boolean equals(Object)>,<android.view.DisplayCutout: boolean equals(Object)>,0,"{
    if (o == this) {
        return true;
    }
    if (o instanceof DisplayCutout) {
        DisplayCutout c = (DisplayCutout) o;
        return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds);
    }
    return false;
}","{
    if (o == this) {
        return true;
    }
    if (o instanceof DisplayCutout) {
        DisplayCutout c = (DisplayCutout) o;
        return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets);
    }
    return false;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (o, []), Expression(, [])]), Statement(return true, []), Statement(}, []), Statement(if (o instanceof DisplayCutout) {, []), AssignmentExpression(=, [VariableReference(DisplayCutout c, []), Expression((DisplayCutout) o, [])]), MethodCall(return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds), [VariableReference(return mSafeInsets, []), Expression(c.mSafeInsets) && mBounds.equals(c.mBounds, [])]), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (o, []), Expression(, [])])    VariableReference(if (o, [])    Expression(, [])  Statement(return true, [])  Statement(}, [])  Statement(if (o instanceof DisplayCutout) {, [])  AssignmentExpression(=, [VariableReference(DisplayCutout c, []), Expression((DisplayCutout) o, [])])    VariableReference(DisplayCutout c, [])    Expression((DisplayCutout) o, [])  MethodCall(return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds), [VariableReference(return mSafeInsets, []), Expression(c.mSafeInsets) && mBounds.equals(c.mBounds, [])])    VariableReference(return mSafeInsets, [])    Expression(c.mSafeInsets) && mBounds.equals(c.mBounds, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (o, []), Expression(, [])]), Statement(return true, []), Statement(}, []), Statement(if (o instanceof DisplayCutout) {, []), AssignmentExpression(=, [VariableReference(DisplayCutout c, []), Expression((DisplayCutout) o, [])]), MethodCall(return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets), [VariableReference(return mSafeInsets, []), Expression(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets, [])]), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (o, []), Expression(, [])])    VariableReference(if (o, [])    Expression(, [])  Statement(return true, [])  Statement(}, [])  Statement(if (o instanceof DisplayCutout) {, [])  AssignmentExpression(=, [VariableReference(DisplayCutout c, []), Expression((DisplayCutout) o, [])])    VariableReference(DisplayCutout c, [])    Expression((DisplayCutout) o, [])  MethodCall(return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets), [VariableReference(return mSafeInsets, []), Expression(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets, [])])    VariableReference(return mSafeInsets, [])    Expression(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,1,1,"1,4",1,"The return statement in the `equals` method has changed from `mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds)` to `mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets)`. This addition of a new condition (mWaterfallInsets) modifies the equality check, so the code change type is 1,4.","The added check for `mWaterfallInsets` could lead to different return values depending on whether `mWaterfallInsets` are equal or not in the late version. Therefore, the CI type is 1."
<android.net.TrafficStats: long getUidTxPackets(int)>,29,30,<android.net.TrafficStats: long getUidTxPackets(int)>,<android.net.TrafficStats: long getUidTxPackets(int)>,0,"{
    // This isn't actually enforcing any security; it just returns the
    // unsupported value. The real filtering is done at the kernel level.
    final int callingUid = android.os.Process.myUid();
    if (callingUid == android.os.Process.SYSTEM_UID || callingUid == uid) {
        try {
            return getStatsService().getUidStats(uid, TYPE_TX_PACKETS);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    } else {
        return UNSUPPORTED;
    }
}","{
    try {
        return getStatsService().getUidStats(uid, TYPE_TX_PACKETS);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// This isn't actually enforcing any security, []), Statement(it just returns the, []), Statement(// unsupported value. The real filtering is done at the kernel level., []), AssignmentExpression(=, [VariableReference(final int callingUid, []), Expression(android.os.Process.myUid(), [])]), AssignmentExpression(=, [VariableReference(if (callingUid, []), Expression(, [])]), Statement(try {, []), MethodCall(return getStatsService().getUidStats(uid, TYPE_TX_PACKETS), [VariableReference(return getStatsService(), []), Expression(uid, []), Expression(TYPE_TX_PACKETS, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(} else {, []), Statement(return UNSUPPORTED, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// This isn't actually enforcing any security, [])  Statement(it just returns the, [])  Statement(// unsupported value. The real filtering is done at the kernel level., [])  AssignmentExpression(=, [VariableReference(final int callingUid, []), Expression(android.os.Process.myUid(), [])])    VariableReference(final int callingUid, [])    Expression(android.os.Process.myUid(), [])  AssignmentExpression(=, [VariableReference(if (callingUid, []), Expression(, [])])    VariableReference(if (callingUid, [])    Expression(, [])  Statement(try {, [])  MethodCall(return getStatsService().getUidStats(uid, TYPE_TX_PACKETS), [VariableReference(return getStatsService(), []), Expression(uid, []), Expression(TYPE_TX_PACKETS, [])])    VariableReference(return getStatsService(), [])    Expression(uid, [])    Expression(TYPE_TX_PACKETS, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(} else {, [])  Statement(return UNSUPPORTED, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return getStatsService().getUidStats(uid, TYPE_TX_PACKETS), [VariableReference(return getStatsService(), []), Expression(uid, []), Expression(TYPE_TX_PACKETS, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return getStatsService().getUidStats(uid, TYPE_TX_PACKETS), [VariableReference(return getStatsService(), []), Expression(uid, []), Expression(TYPE_TX_PACKETS, [])])    VariableReference(return getStatsService(), [])    Expression(uid, [])    Expression(TYPE_TX_PACKETS, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Return number of packets transmitted by the given UID since device boot.
 * Counts packets across all network interfaces, and always increases
 * monotonically since device boot. Statistics are measured at the network
 * layer, so they include both TCP and UDP usage.
 * <p>
 * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
 * {@link #UNSUPPORTED} on devices where statistics aren't available.
 * <p>
 * Starting in {@link android.os.Build.VERSION_CODES#N} this will only
 * report traffic statistics for the calling UID. It will return
 * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access
 * historical network statistics belonging to other UIDs, use
 * {@link NetworkStatsManager}.
 *
 * @see android.os.Process#myUid()
 * @see android.content.pm.ApplicationInfo#uid
 */","/**
 * Return number of packets transmitted by the given UID since device boot.
 * Counts packets across all network interfaces, and always increases
 * monotonically since device boot. Statistics are measured at the network
 * layer, so they include both TCP and UDP usage.
 * <p>
 * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
 * {@link #UNSUPPORTED} on devices where statistics aren't available.
 * <p>
 * Starting in {@link android.os.Build.VERSION_CODES#N} this will only
 * report traffic statistics for the calling UID. It will return
 * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access
 * historical network statistics belonging to other UIDs, use
 * {@link NetworkStatsManager}.
 *
 * @see android.os.Process#myUid()
 * @see android.content.pm.ApplicationInfo#uid
 */",0,,,0,,,,"1,2","1,2,3,4","1,2","1,3",1,"The 'if' control dependency check for the calling UID has been removed, thus potentially changing which value is returned. The changes include a new return statement path and control dependency update, so it qualifies as both 1 and 3.","The removal of the condition on the calling UID means the method could now return different values under the same conditions, introducing a Compatibility Issue (CI) type 1."
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: KeyChainProtectionParams build()>,29,30,<android.security.keystore.recovery.KeyChainProtectionParams.Builder: KeyChainProtectionParams build()>,<android.security.keystore.recovery.KeyChainProtectionParams.Builder: KeyChainProtectionParams build()>,0,"{
    if (mInstance.mUserSecretType == null) {
        mInstance.mUserSecretType = TYPE_LOCKSCREEN;
    }
    Preconditions.checkNotNull(mInstance.mLockScreenUiFormat);
    Preconditions.checkNotNull(mInstance.mKeyDerivationParams);
    if (mInstance.mSecret == null) {
        mInstance.mSecret = new byte[] {};
    }
    return mInstance;
}","{
    if (mInstance.mUserSecretType == null) {
        mInstance.mUserSecretType = TYPE_LOCKSCREEN;
    }
    Objects.requireNonNull(mInstance.mLockScreenUiFormat);
    Objects.requireNonNull(mInstance.mKeyDerivationParams);
    if (mInstance.mSecret == null) {
        mInstance.mSecret = new byte[] {};
    }
    return mInstance;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mInstance.mUserSecretType, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mInstance.mUserSecretType, []), Expression(TYPE_LOCKSCREEN, [])]), Statement(}, []), MethodCall(Preconditions.checkNotNull(mInstance.mLockScreenUiFormat), [VariableReference(Preconditions, []), Expression(mInstance.mLockScreenUiFormat, [])]), MethodCall(Preconditions.checkNotNull(mInstance.mKeyDerivationParams), [VariableReference(Preconditions, []), Expression(mInstance.mKeyDerivationParams, [])]), AssignmentExpression(=, [VariableReference(if (mInstance.mSecret, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mInstance.mSecret, []), Expression(new byte[] {}, [])]), Statement(}, []), Statement(return mInstance, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mInstance.mUserSecretType, []), Expression(, [])])    VariableReference(if (mInstance.mUserSecretType, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mInstance.mUserSecretType, []), Expression(TYPE_LOCKSCREEN, [])])    VariableReference(mInstance.mUserSecretType, [])    Expression(TYPE_LOCKSCREEN, [])  Statement(}, [])  MethodCall(Preconditions.checkNotNull(mInstance.mLockScreenUiFormat), [VariableReference(Preconditions, []), Expression(mInstance.mLockScreenUiFormat, [])])    VariableReference(Preconditions, [])    Expression(mInstance.mLockScreenUiFormat, [])  MethodCall(Preconditions.checkNotNull(mInstance.mKeyDerivationParams), [VariableReference(Preconditions, []), Expression(mInstance.mKeyDerivationParams, [])])    VariableReference(Preconditions, [])    Expression(mInstance.mKeyDerivationParams, [])  AssignmentExpression(=, [VariableReference(if (mInstance.mSecret, []), Expression(, [])])    VariableReference(if (mInstance.mSecret, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mInstance.mSecret, []), Expression(new byte[] {}, [])])    VariableReference(mInstance.mSecret, [])    Expression(new byte[] {}, [])  Statement(}, [])  Statement(return mInstance, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mInstance.mUserSecretType, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mInstance.mUserSecretType, []), Expression(TYPE_LOCKSCREEN, [])]), Statement(}, []), MethodCall(Objects.requireNonNull(mInstance.mLockScreenUiFormat), [VariableReference(Objects, []), Expression(mInstance.mLockScreenUiFormat, [])]), MethodCall(Objects.requireNonNull(mInstance.mKeyDerivationParams), [VariableReference(Objects, []), Expression(mInstance.mKeyDerivationParams, [])]), AssignmentExpression(=, [VariableReference(if (mInstance.mSecret, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mInstance.mSecret, []), Expression(new byte[] {}, [])]), Statement(}, []), Statement(return mInstance, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mInstance.mUserSecretType, []), Expression(, [])])    VariableReference(if (mInstance.mUserSecretType, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mInstance.mUserSecretType, []), Expression(TYPE_LOCKSCREEN, [])])    VariableReference(mInstance.mUserSecretType, [])    Expression(TYPE_LOCKSCREEN, [])  Statement(}, [])  MethodCall(Objects.requireNonNull(mInstance.mLockScreenUiFormat), [VariableReference(Objects, []), Expression(mInstance.mLockScreenUiFormat, [])])    VariableReference(Objects, [])    Expression(mInstance.mLockScreenUiFormat, [])  MethodCall(Objects.requireNonNull(mInstance.mKeyDerivationParams), [VariableReference(Objects, []), Expression(mInstance.mKeyDerivationParams, [])])    VariableReference(Objects, [])    Expression(mInstance.mKeyDerivationParams, [])  AssignmentExpression(=, [VariableReference(if (mInstance.mSecret, []), Expression(, [])])    VariableReference(if (mInstance.mSecret, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mInstance.mSecret, []), Expression(new byte[] {}, [])])    VariableReference(mInstance.mSecret, [])    Expression(new byte[] {}, [])  Statement(}, [])  Statement(return mInstance, [])  Statement(}, [])",1,"/**
 * Creates a new {@link KeyChainProtectionParams} instance.
 * The instance will include default values, if {@link #setSecret}
 * or {@link #setUserSecretType} were not called.
 *
 * @return new instance
 * @throws NullPointerException if some required fields were not set.
 */
","/**
 * Creates a new {@link KeyChainProtectionParams} instance.
 * The instance will include default values, if {@link #setSecret}
 * or {@link #setUserSecretType} were not called.
 *
 * @return new instance
 * @throws NullPointerException if some required fields were not set.
 */
",0,[@NonNull],[@NonNull],0,,,,1,5,0,4,0,"The early version uses `Preconditions.checkNotNull` for null checks, while the late version uses `Objects.requireNonNull` for the same purpose. This change does not affect return statements, exception handling, or control flow in a way that impacts the method's return values or exception behavior. So the code change type is 4.","The change from using `Preconditions.checkNotNull` to `Objects.requireNonNull` should not affect the behavior of the API as they serve the same functional purpose. Thus, there is no potential Compatibility Issue, and the CI type is 0."
<android.app.ContextImpl: Context createContextForSplit(String)>,29,30,<android.app.ContextImpl: Context createContextForSplit(String)>,<android.app.ContextImpl: Context createContextForSplit(String)>,0,"{
    if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()) {
        // All Splits are always loaded.
        return this;
    }
    final ClassLoader classLoader = mPackageInfo.getSplitClassLoader(splitName);
    final String[] paths = mPackageInfo.getSplitPaths(splitName);
    final ContextImpl context = new ContextImpl(this, mMainThread, mPackageInfo, splitName, mActivityToken, mUser, mFlags, classLoader, null);
    final int displayId = getDisplayId();
    context.setResources(ResourcesManager.getInstance().getResources(mActivityToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader));
    return context;
}","{
    if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()) {
        // All Splits are always loaded.
        return this;
    }
    final ClassLoader classLoader = mPackageInfo.getSplitClassLoader(splitName);
    final String[] paths = mPackageInfo.getSplitPaths(splitName);
    final ContextImpl context = new ContextImpl(this, mMainThread, mPackageInfo, mAttributionTag, splitName, mToken, mUser, mFlags, classLoader, null);
    final int displayId = getDisplayId();
    context.setResources(ResourcesManager.getInstance().getResources(mToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader, mResources.getLoaders()));
    return context;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()), [VariableReference(if (!mPackageInfo, []), Expression().requestsIsolatedSplitLoading(), [])]), Statement(// All Splits are always loaded., []), Statement(return this, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final ClassLoader classLoader, []), Expression(mPackageInfo.getSplitClassLoader(splitName), [])]), AssignmentExpression(=, [VariableReference(final String[] paths, []), Expression(mPackageInfo.getSplitPaths(splitName), [])]), AssignmentExpression(=, [VariableReference(final ContextImpl context, []), Expression(new ContextImpl(this, mMainThread, mPackageInfo, splitName, mActivityToken, mUser, mFlags, classLoader, null), [])]), AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(getDisplayId(), [])]), MethodCall(context.setResources(ResourcesManager.getInstance().getResources(mActivityToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader)), [VariableReference(context, []), Expression(ResourcesManager.getInstance().getResources(mActivityToken, []), Expression(mPackageInfo.getResDir(), []), Expression(paths, []), Expression(mPackageInfo.getOverlayDirs(), []), Expression(mPackageInfo.getApplicationInfo().sharedLibraryFiles, []), Expression(displayId, []), Expression(null, []), Expression(mPackageInfo.getCompatibilityInfo(), []), Expression(classLoader), [])]), Statement(return context, []), Statement(}, [])])  Statement({, [])  MethodCall(if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()), [VariableReference(if (!mPackageInfo, []), Expression().requestsIsolatedSplitLoading(), [])])    VariableReference(if (!mPackageInfo, [])    Expression().requestsIsolatedSplitLoading(), [])  Statement(// All Splits are always loaded., [])  Statement(return this, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final ClassLoader classLoader, []), Expression(mPackageInfo.getSplitClassLoader(splitName), [])])    VariableReference(final ClassLoader classLoader, [])    Expression(mPackageInfo.getSplitClassLoader(splitName), [])  AssignmentExpression(=, [VariableReference(final String[] paths, []), Expression(mPackageInfo.getSplitPaths(splitName), [])])    VariableReference(final String[] paths, [])    Expression(mPackageInfo.getSplitPaths(splitName), [])  AssignmentExpression(=, [VariableReference(final ContextImpl context, []), Expression(new ContextImpl(this, mMainThread, mPackageInfo, splitName, mActivityToken, mUser, mFlags, classLoader, null), [])])    VariableReference(final ContextImpl context, [])    Expression(new ContextImpl(this, mMainThread, mPackageInfo, splitName, mActivityToken, mUser, mFlags, classLoader, null), [])  AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(getDisplayId(), [])])    VariableReference(final int displayId, [])    Expression(getDisplayId(), [])  MethodCall(context.setResources(ResourcesManager.getInstance().getResources(mActivityToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader)), [VariableReference(context, []), Expression(ResourcesManager.getInstance().getResources(mActivityToken, []), Expression(mPackageInfo.getResDir(), []), Expression(paths, []), Expression(mPackageInfo.getOverlayDirs(), []), Expression(mPackageInfo.getApplicationInfo().sharedLibraryFiles, []), Expression(displayId, []), Expression(null, []), Expression(mPackageInfo.getCompatibilityInfo(), []), Expression(classLoader), [])])    VariableReference(context, [])    Expression(ResourcesManager.getInstance().getResources(mActivityToken, [])    Expression(mPackageInfo.getResDir(), [])    Expression(paths, [])    Expression(mPackageInfo.getOverlayDirs(), [])    Expression(mPackageInfo.getApplicationInfo().sharedLibraryFiles, [])    Expression(displayId, [])    Expression(null, [])    Expression(mPackageInfo.getCompatibilityInfo(), [])    Expression(classLoader), [])  Statement(return context, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()), [VariableReference(if (!mPackageInfo, []), Expression().requestsIsolatedSplitLoading(), [])]), Statement(// All Splits are always loaded., []), Statement(return this, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final ClassLoader classLoader, []), Expression(mPackageInfo.getSplitClassLoader(splitName), [])]), AssignmentExpression(=, [VariableReference(final String[] paths, []), Expression(mPackageInfo.getSplitPaths(splitName), [])]), AssignmentExpression(=, [VariableReference(final ContextImpl context, []), Expression(new ContextImpl(this, mMainThread, mPackageInfo, mAttributionTag, splitName, mToken, mUser, mFlags, classLoader, null), [])]), AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(getDisplayId(), [])]), MethodCall(context.setResources(ResourcesManager.getInstance().getResources(mToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader, mResources.getLoaders())), [VariableReference(context, []), Expression(ResourcesManager.getInstance().getResources(mToken, []), Expression(mPackageInfo.getResDir(), []), Expression(paths, []), Expression(mPackageInfo.getOverlayDirs(), []), Expression(mPackageInfo.getApplicationInfo().sharedLibraryFiles, []), Expression(displayId, []), Expression(null, []), Expression(mPackageInfo.getCompatibilityInfo(), []), Expression(classLoader, []), Expression(mResources.getLoaders()), [])]), Statement(return context, []), Statement(}, [])])  Statement({, [])  MethodCall(if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()), [VariableReference(if (!mPackageInfo, []), Expression().requestsIsolatedSplitLoading(), [])])    VariableReference(if (!mPackageInfo, [])    Expression().requestsIsolatedSplitLoading(), [])  Statement(// All Splits are always loaded., [])  Statement(return this, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final ClassLoader classLoader, []), Expression(mPackageInfo.getSplitClassLoader(splitName), [])])    VariableReference(final ClassLoader classLoader, [])    Expression(mPackageInfo.getSplitClassLoader(splitName), [])  AssignmentExpression(=, [VariableReference(final String[] paths, []), Expression(mPackageInfo.getSplitPaths(splitName), [])])    VariableReference(final String[] paths, [])    Expression(mPackageInfo.getSplitPaths(splitName), [])  AssignmentExpression(=, [VariableReference(final ContextImpl context, []), Expression(new ContextImpl(this, mMainThread, mPackageInfo, mAttributionTag, splitName, mToken, mUser, mFlags, classLoader, null), [])])    VariableReference(final ContextImpl context, [])    Expression(new ContextImpl(this, mMainThread, mPackageInfo, mAttributionTag, splitName, mToken, mUser, mFlags, classLoader, null), [])  AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(getDisplayId(), [])])    VariableReference(final int displayId, [])    Expression(getDisplayId(), [])  MethodCall(context.setResources(ResourcesManager.getInstance().getResources(mToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader, mResources.getLoaders())), [VariableReference(context, []), Expression(ResourcesManager.getInstance().getResources(mToken, []), Expression(mPackageInfo.getResDir(), []), Expression(paths, []), Expression(mPackageInfo.getOverlayDirs(), []), Expression(mPackageInfo.getApplicationInfo().sharedLibraryFiles, []), Expression(displayId, []), Expression(null, []), Expression(mPackageInfo.getCompatibilityInfo(), []), Expression(classLoader, []), Expression(mResources.getLoaders()), [])])    VariableReference(context, [])    Expression(ResourcesManager.getInstance().getResources(mToken, [])    Expression(mPackageInfo.getResDir(), [])    Expression(paths, [])    Expression(mPackageInfo.getOverlayDirs(), [])    Expression(mPackageInfo.getApplicationInfo().sharedLibraryFiles, [])    Expression(displayId, [])    Expression(null, [])    Expression(mPackageInfo.getCompatibilityInfo(), [])    Expression(classLoader, [])    Expression(mResources.getLoaders()), [])  Statement(return context, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2",4,1,"3,4,5",1,Several changes have been made between the early and late versions:,"These changes affect the control flow (condition if) and other statement modifications (initialization and method calls), so the code changes class types include 3, 4, and 5."
"<android.content.ContentResolver: boolean refresh(Uri,Bundle,CancellationSignal)>",29,30,"<android.content.ContentResolver: boolean refresh(Uri,Bundle,CancellationSignal)>","<android.content.ContentResolver: boolean refresh(Uri,Bundle,CancellationSignal)>",0,"{
    Preconditions.checkNotNull(url, ""url"");
    try {
        if (mWrapped != null)
            return mWrapped.refresh(url, args, cancellationSignal);
    } catch (RemoteException e) {
        return false;
    }
    IContentProvider provider = acquireProvider(url);
    if (provider == null) {
        return false;
    }
    try {
        ICancellationSignal remoteCancellationSignal = null;
        if (cancellationSignal != null) {
            cancellationSignal.throwIfCanceled();
            remoteCancellationSignal = provider.createCancellationSignal();
            cancellationSignal.setRemote(remoteCancellationSignal);
        }
        return provider.refresh(mPackageName, url, args, remoteCancellationSignal);
    } catch (RemoteException e) {
        // Manager will kill this process shortly anyway.
        return false;
    } finally {
        releaseProvider(provider);
    }
}","{
    Objects.requireNonNull(url, ""url"");
    try {
        if (mWrapped != null)
            return mWrapped.refresh(url, extras, cancellationSignal);
    } catch (RemoteException e) {
        return false;
    }
    IContentProvider provider = acquireProvider(url);
    if (provider == null) {
        return false;
    }
    try {
        ICancellationSignal remoteCancellationSignal = null;
        if (cancellationSignal != null) {
            cancellationSignal.throwIfCanceled();
            remoteCancellationSignal = provider.createCancellationSignal();
            cancellationSignal.setRemote(remoteCancellationSignal);
        }
        return provider.refresh(mPackageName, mAttributionTag, url, extras, remoteCancellationSignal);
    } catch (RemoteException e) {
        // Manager will kill this process shortly anyway.
        return false;
    } finally {
        releaseProvider(provider);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(url, ""url""), [VariableReference(Preconditions, []), Expression(url, []), Expression(""url"", [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mWrapped !, []), Expression(null), [])]), MethodCall(return mWrapped.refresh(url, args, cancellationSignal), [VariableReference(return mWrapped, []), Expression(url, []), Expression(args, []), Expression(cancellationSignal, [])]), Statement(} catch (RemoteException e) {, []), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(IContentProvider provider, []), Expression(acquireProvider(url), [])]), AssignmentExpression(=, [VariableReference(if (provider, []), Expression(, [])]), Statement(return false, []), Statement(}, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(ICancellationSignal remoteCancellationSignal, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (cancellationSignal !, []), Expression(null) {, [])]), MethodCall(cancellationSignal.throwIfCanceled(), [VariableReference(cancellationSignal, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(remoteCancellationSignal, []), Expression(provider.createCancellationSignal(), [])]), MethodCall(cancellationSignal.setRemote(remoteCancellationSignal), [VariableReference(cancellationSignal, []), Expression(remoteCancellationSignal, [])]), Statement(}, []), MethodCall(return provider.refresh(mPackageName, url, args, remoteCancellationSignal), [VariableReference(return provider, []), Expression(mPackageName, []), Expression(url, []), Expression(args, []), Expression(remoteCancellationSignal, [])]), Statement(} catch (RemoteException e) {, []), Statement(// Manager will kill this process shortly anyway., []), Statement(return false, []), Statement(} finally {, []), Statement(releaseProvider(provider), []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(url, ""url""), [VariableReference(Preconditions, []), Expression(url, []), Expression(""url"", [])])    VariableReference(Preconditions, [])    Expression(url, [])    Expression(""url"", [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mWrapped !, []), Expression(null), [])])    VariableReference(if (mWrapped !, [])    Expression(null), [])  MethodCall(return mWrapped.refresh(url, args, cancellationSignal), [VariableReference(return mWrapped, []), Expression(url, []), Expression(args, []), Expression(cancellationSignal, [])])    VariableReference(return mWrapped, [])    Expression(url, [])    Expression(args, [])    Expression(cancellationSignal, [])  Statement(} catch (RemoteException e) {, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(IContentProvider provider, []), Expression(acquireProvider(url), [])])    VariableReference(IContentProvider provider, [])    Expression(acquireProvider(url), [])  AssignmentExpression(=, [VariableReference(if (provider, []), Expression(, [])])    VariableReference(if (provider, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(ICancellationSignal remoteCancellationSignal, []), Expression(null, [])])    VariableReference(ICancellationSignal remoteCancellationSignal, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (cancellationSignal !, []), Expression(null) {, [])])    VariableReference(if (cancellationSignal !, [])    Expression(null) {, [])  MethodCall(cancellationSignal.throwIfCanceled(), [VariableReference(cancellationSignal, []), Expression(, [])])    VariableReference(cancellationSignal, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(remoteCancellationSignal, []), Expression(provider.createCancellationSignal(), [])])    VariableReference(remoteCancellationSignal, [])    Expression(provider.createCancellationSignal(), [])  MethodCall(cancellationSignal.setRemote(remoteCancellationSignal), [VariableReference(cancellationSignal, []), Expression(remoteCancellationSignal, [])])    VariableReference(cancellationSignal, [])    Expression(remoteCancellationSignal, [])  Statement(}, [])  MethodCall(return provider.refresh(mPackageName, url, args, remoteCancellationSignal), [VariableReference(return provider, []), Expression(mPackageName, []), Expression(url, []), Expression(args, []), Expression(remoteCancellationSignal, [])])    VariableReference(return provider, [])    Expression(mPackageName, [])    Expression(url, [])    Expression(args, [])    Expression(remoteCancellationSignal, [])  Statement(} catch (RemoteException e) {, [])  Statement(// Manager will kill this process shortly anyway., [])  Statement(return false, [])  Statement(} finally {, [])  Statement(releaseProvider(provider), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Objects.requireNonNull(url, ""url""), [VariableReference(Objects, []), Expression(url, []), Expression(""url"", [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mWrapped !, []), Expression(null), [])]), MethodCall(return mWrapped.refresh(url, extras, cancellationSignal), [VariableReference(return mWrapped, []), Expression(url, []), Expression(extras, []), Expression(cancellationSignal, [])]), Statement(} catch (RemoteException e) {, []), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(IContentProvider provider, []), Expression(acquireProvider(url), [])]), AssignmentExpression(=, [VariableReference(if (provider, []), Expression(, [])]), Statement(return false, []), Statement(}, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(ICancellationSignal remoteCancellationSignal, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (cancellationSignal !, []), Expression(null) {, [])]), MethodCall(cancellationSignal.throwIfCanceled(), [VariableReference(cancellationSignal, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(remoteCancellationSignal, []), Expression(provider.createCancellationSignal(), [])]), MethodCall(cancellationSignal.setRemote(remoteCancellationSignal), [VariableReference(cancellationSignal, []), Expression(remoteCancellationSignal, [])]), Statement(}, []), MethodCall(return provider.refresh(mPackageName, mAttributionTag, url, extras, remoteCancellationSignal), [VariableReference(return provider, []), Expression(mPackageName, []), Expression(mAttributionTag, []), Expression(url, []), Expression(extras, []), Expression(remoteCancellationSignal, [])]), Statement(} catch (RemoteException e) {, []), Statement(// Manager will kill this process shortly anyway., []), Statement(return false, []), Statement(} finally {, []), Statement(releaseProvider(provider), []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Objects.requireNonNull(url, ""url""), [VariableReference(Objects, []), Expression(url, []), Expression(""url"", [])])    VariableReference(Objects, [])    Expression(url, [])    Expression(""url"", [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mWrapped !, []), Expression(null), [])])    VariableReference(if (mWrapped !, [])    Expression(null), [])  MethodCall(return mWrapped.refresh(url, extras, cancellationSignal), [VariableReference(return mWrapped, []), Expression(url, []), Expression(extras, []), Expression(cancellationSignal, [])])    VariableReference(return mWrapped, [])    Expression(url, [])    Expression(extras, [])    Expression(cancellationSignal, [])  Statement(} catch (RemoteException e) {, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(IContentProvider provider, []), Expression(acquireProvider(url), [])])    VariableReference(IContentProvider provider, [])    Expression(acquireProvider(url), [])  AssignmentExpression(=, [VariableReference(if (provider, []), Expression(, [])])    VariableReference(if (provider, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(ICancellationSignal remoteCancellationSignal, []), Expression(null, [])])    VariableReference(ICancellationSignal remoteCancellationSignal, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (cancellationSignal !, []), Expression(null) {, [])])    VariableReference(if (cancellationSignal !, [])    Expression(null) {, [])  MethodCall(cancellationSignal.throwIfCanceled(), [VariableReference(cancellationSignal, []), Expression(, [])])    VariableReference(cancellationSignal, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(remoteCancellationSignal, []), Expression(provider.createCancellationSignal(), [])])    VariableReference(remoteCancellationSignal, [])    Expression(provider.createCancellationSignal(), [])  MethodCall(cancellationSignal.setRemote(remoteCancellationSignal), [VariableReference(cancellationSignal, []), Expression(remoteCancellationSignal, [])])    VariableReference(cancellationSignal, [])    Expression(remoteCancellationSignal, [])  Statement(}, [])  MethodCall(return provider.refresh(mPackageName, mAttributionTag, url, extras, remoteCancellationSignal), [VariableReference(return provider, []), Expression(mPackageName, []), Expression(mAttributionTag, []), Expression(url, []), Expression(extras, []), Expression(remoteCancellationSignal, [])])    VariableReference(return provider, [])    Expression(mPackageName, [])    Expression(mAttributionTag, [])    Expression(url, [])    Expression(extras, [])    Expression(remoteCancellationSignal, [])  Statement(} catch (RemoteException e) {, [])  Statement(// Manager will kill this process shortly anyway., [])  Statement(return false, [])  Statement(} finally {, [])  Statement(releaseProvider(provider), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * This allows clients to request an explicit refresh of content identified by {@code uri}.
 * <p>
 * Client code should only invoke this method when there is a strong indication (such as a user
 * initiated pull to refresh gesture) that the content is stale.
 * <p>
 *
 * @param url The Uri identifying the data to refresh.
 * @param args Additional options from the client. The definitions of these are specific to the
 * content provider being called.
 * @param cancellationSignal A signal to cancel the operation in progress, or {@code null} if
 * none. For example, if you called refresh on a particular uri, you should call
 * {@link CancellationSignal#throwIfCanceled()} to check whether the client has
 * canceled the refresh request.
 * @return true if the provider actually tried refreshing.
 */
","/**
 * This allows clients to request an explicit refresh of content identified
 * by {@code uri}.
 * <p>
 * Client code should only invoke this method when there is a strong
 * indication (such as a user initiated pull to refresh gesture) that the
 * content is stale.
 * <p>
 *
 * @param url The Uri identifying the data to refresh.
 * @param extras Additional options from the client. The definitions of
 * these are specific to the content provider being called.
 * @param cancellationSignal A signal to cancel the operation in progress,
 * or {@code null} if none. For example, if you called refresh on
 * a particular uri, you should call
 * {@link CancellationSignal#throwIfCanceled()} to check whether
 * the client has canceled the refresh request.
 * @return true if the provider actually tried refreshing.
 */
",1,[@Override],[@Override],0,,,,"1,2","1,4,5",1,"3,5",1,"There is a control dependency change due to changing the parameter 'args' to 'extras' and the inclusion of 'mAttributionTag' in the call to `provider.refresh`, so the code change type is 3,5.","Inclusion of 'mAttributionTag' and changing 'args' to 'extras' in the call to `provider.refresh` can lead to different return values. Therefore, the CI type is 1."
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>,29,30,<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>,<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>,0,"{
    return mStrict;
}","{
    return (mStrictFlags & STRICT_PARENTHESES) != 0;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mStrict, []), Statement(}, [])])  Statement({, [])  Statement(return mStrict, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return (mStrictFlags & STRICT_PARENTHESES) !, []), Expression(0, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return (mStrictFlags & STRICT_PARENTHESES) !, []), Expression(0, [])])    VariableReference(return (mStrictFlags & STRICT_PARENTHESES) !, [])    Expression(0, [])  Statement(}, [])",1,"/**
 * Get if the query is marked as strict, as last configured by
 * {@link #setStrict(boolean)}.
 */
","/**
 * Get if the query is marked as strict, as last configured by
 * {@link #setStrict(boolean)}.
 */
",0,,,0,,,,1,1,1,1,1,"The return statement has changed from `return mStrict;` to `return (mStrictFlags & STRICT_PARENTHESES) != 0;`, so the code change type is 1.","The change in the return statement will potentially make the API return a different value in the late version, so the CI type is 1."
<android.view.View: View getRootView()>,31,32,<android.view.View: View getRootView()>,<android.view.View: View getRootView()>,0,"{
    if (mAttachInfo != null) {
        final View v = mAttachInfo.mRootView;
        if (v != null) {
            return v;
        }
    }
    View parent = this;
    while (parent.mParent != null && parent.mParent instanceof View) {
        parent = (View) parent.mParent;
    }
    return parent;
}","{
    if (mAttachInfo != null) {
        final View v = mAttachInfo.mRootView;
        if (v != null) {
            return v;
        }
    }
    View parent = this;
    while (parent.mParent instanceof View) {
        parent = (View) parent.mParent;
    }
    return parent;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final View v, []), Expression(mAttachInfo.mRootView, [])]), AssignmentExpression(=, [VariableReference(if (v !, []), Expression(null) {, [])]), Statement(return v, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(View parent, []), Expression(this, [])]), AssignmentExpression(=, [VariableReference(while (parent.mParent !, []), Expression(null && parent.mParent instanceof View) {, [])]), AssignmentExpression(=, [VariableReference(parent, []), Expression((View) parent.mParent, [])]), Statement(}, []), Statement(return parent, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final View v, []), Expression(mAttachInfo.mRootView, [])])    VariableReference(final View v, [])    Expression(mAttachInfo.mRootView, [])  AssignmentExpression(=, [VariableReference(if (v !, []), Expression(null) {, [])])    VariableReference(if (v !, [])    Expression(null) {, [])  Statement(return v, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(View parent, []), Expression(this, [])])    VariableReference(View parent, [])    Expression(this, [])  AssignmentExpression(=, [VariableReference(while (parent.mParent !, []), Expression(null && parent.mParent instanceof View) {, [])])    VariableReference(while (parent.mParent !, [])    Expression(null && parent.mParent instanceof View) {, [])  AssignmentExpression(=, [VariableReference(parent, []), Expression((View) parent.mParent, [])])    VariableReference(parent, [])    Expression((View) parent.mParent, [])  Statement(}, [])  Statement(return parent, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final View v, []), Expression(mAttachInfo.mRootView, [])]), AssignmentExpression(=, [VariableReference(if (v !, []), Expression(null) {, [])]), Statement(return v, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(View parent, []), Expression(this, [])]), AssignmentExpression(=, [VariableReference(parent, []), Expression((View) parent.mParent, [])]), Statement(}, []), Statement(return parent, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final View v, []), Expression(mAttachInfo.mRootView, [])])    VariableReference(final View v, [])    Expression(mAttachInfo.mRootView, [])  AssignmentExpression(=, [VariableReference(if (v !, []), Expression(null) {, [])])    VariableReference(if (v !, [])    Expression(null) {, [])  Statement(return v, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(View parent, []), Expression(this, [])])    VariableReference(View parent, [])    Expression(this, [])  AssignmentExpression(=, [VariableReference(parent, []), Expression((View) parent.mParent, [])])    VariableReference(parent, [])    Expression((View) parent.mParent, [])  Statement(}, [])  Statement(return parent, [])  Statement(}, [])",1,"/**
 * <p>Finds the topmost view in the current view hierarchy.</p>
 *
 * @return the topmost view containing this view
 */
","/**
 * <p>Finds the topmost view in the current view hierarchy.</p>
 *
 * @return the topmost view containing this view
 */
",0,,,0,,,,1,3,1,3,0,"The condition in the `while` loop has changed from `parent.mParent != null && parent.mParent instanceof View` to `parent.mParent instanceof View`. Since this affects a control statement, the code change type is 3.","The change in the control statement would not lead to different return values or exceptions in this context; thus, there is no potential compatibility issue."
<android.window.TaskSnapshot.Builder: TaskSnapshot build()>,31,32,<android.window.TaskSnapshot.Builder: TaskSnapshot build()>,<android.window.TaskSnapshot.Builder: TaskSnapshot build()>,0,"{
    return new TaskSnapshot(mId, mTopActivity, mSnapshot, mColorSpace, mOrientation, mRotation, mTaskSize, mContentInsets, // disk.
    false, /* isLowResolution */
    mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface);
}","{
    return new TaskSnapshot(mId, mTopActivity, mSnapshot, mColorSpace, mOrientation, mRotation, mTaskSize, mContentInsets, mLetterboxInsets, // disk.
    false, /* isLowResolution */
    mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(false, /* isLowResolution */, []), Statement(mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface), []), Statement(}, [])])  Statement({, [])  Statement(false, /* isLowResolution */, [])  Statement(mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(false, /* isLowResolution */, []), Statement(mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface), []), Statement(}, [])])  Statement({, [])  Statement(false, /* isLowResolution */, [])  Statement(mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface), [])  Statement(}, [])",1,,,0,,,0,,,,2,"1,5",1,"1,4",1,"A new parameter `mLetterboxInsets` has been added to the constructor of `TaskSnapshot` in the return statement, so the code change type is 1,4.","The introduction of the additional parameter `mLetterboxInsets` to the constructor of `TaskSnapshot` could potentially cause the method to return a different object or affect the state of the returned object. Thus, the CI type is 1."
<android.companion.CompanionDeviceManager: List<String> getAssociations()>,32,33,<android.companion.CompanionDeviceManager: List<String> getAssociations()>,<android.companion.CompanionDeviceManager: List<String> getAssociations()>,0,"{
    if (!checkFeaturePresent()) {
        return Collections.emptyList();
    }
    try {
        return mService.getAssociations(getCallingPackage(), mContext.getUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return CollectionUtils.mapNotNull(getMyAssociations(), a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString());
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!checkFeaturePresent()) {, []), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, []), Statement(try {, []), MethodCall(return mService.getAssociations(getCallingPackage(), mContext.getUserId()), [VariableReference(return mService, []), Expression(getCallingPackage(), []), Expression(mContext.getUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!checkFeaturePresent()) {, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])  Statement(try {, [])  MethodCall(return mService.getAssociations(getCallingPackage(), mContext.getUserId()), [VariableReference(return mService, []), Expression(getCallingPackage(), []), Expression(mContext.getUserId(), [])])    VariableReference(return mService, [])    Expression(getCallingPackage(), [])    Expression(mContext.getUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return CollectionUtils.mapNotNull(getMyAssociations(), a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString()), [VariableReference(return CollectionUtils, []), Expression(getMyAssociations(), []), Expression(a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return CollectionUtils.mapNotNull(getMyAssociations(), a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString()), [VariableReference(return CollectionUtils, []), Expression(getMyAssociations(), []), Expression(a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString(), [])])    VariableReference(return CollectionUtils, [])    Expression(getMyAssociations(), [])    Expression(a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString(), [])  Statement(}, [])",1,"/**
 * <p>Calling this API requires a uses-feature
 * {@link PackageManager#FEATURE_COMPANION_DEVICE_SETUP} declaration in the manifest</p>
 *
 * @return a list of MAC addresses of devices that have been previously associated with the
 * current app. You can use these with {@link #disassociate}
 */
","/**
 * <p>Calling this API requires a uses-feature
 * {@link PackageManager#FEATURE_COMPANION_DEVICE_SETUP} declaration in the manifest</p>
 *
 * @return a list of MAC addresses of devices that have been previously associated with the
 * current app are managed by CompanionDeviceManager (ie. does not include devices managed by
 * application itself even if they have a MAC address).
 *
 * @deprecated use {@link #getMyAssociations()}
 */
",0,[@NonNull],"[@Deprecated, @UserHandleAware, @NonNull]",1,,,,1,"1,2,3","1,2","1,2,4,5","1,2","The return statement has changed from returning the result of mService.getAssociations() or Collections.emptyList() to returning the result of CollectionUtils.mapNotNull(). Additionally, the exception handling statement (try-catch) is removed. The dependent API, iService.getAssociations(), is changed to CollectionUtils.mapNotNull(). Furthermore, the control dependency involving the checkFeaturePresent() method and the try-catch block are removed. Hence, the change types are 1, 2, 4, and 5.","The changes introduced in the return statement and the removal of the exception handling could lead to different return values and exception handling behavior. Therefore, the CI types are 1 and 2."
android.hardware.camera2.CameraCharacteristics.get,31,32,<android.hardware.camera2.CameraCharacteristics: T get(Key<T>)>,<android.hardware.camera2.CameraCharacteristics: T get(Key<T>)>,0,"{
    return mProperties.get(key);
}","{
    T propertyOverride = overrideProperty(key);
    return (propertyOverride != null) ? propertyOverride : mProperties.get(key);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return mProperties.get(key), [VariableReference(return mProperties, []), Expression(key, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mProperties.get(key), [VariableReference(return mProperties, []), Expression(key, [])])    VariableReference(return mProperties, [])    Expression(key, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(T propertyOverride, []), Expression(overrideProperty(key), [])]), AssignmentExpression(=, [VariableReference(return (propertyOverride !, []), Expression(null) ? propertyOverride : mProperties.get(key), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(T propertyOverride, []), Expression(overrideProperty(key), [])])    VariableReference(T propertyOverride, [])    Expression(overrideProperty(key), [])  AssignmentExpression(=, [VariableReference(return (propertyOverride !, []), Expression(null) ? propertyOverride : mProperties.get(key), [])])    VariableReference(return (propertyOverride !, [])    Expression(null) ? propertyOverride : mProperties.get(key), [])  Statement(}, [])",1,"/**
 * Get a camera characteristics field value.
 *
 * <p>The field definitions can be
 * found in {@link CameraCharacteristics}.</p>
 *
 * <p>Querying the value for the same key more than once will return a value
 * which is equal to the previous queried value.</p>
 *
 * @throws IllegalArgumentException if the key was not valid
 *
 * @param key The characteristics field to read.
 * @return The value of that key, or {@code null} if the field is not set.
 */
","/**
 * Get a camera characteristics field value.
 *
 * <p>The field definitions can be
 * found in {@link CameraCharacteristics}.</p>
 *
 * <p>Querying the value for the same key more than once will return a value
 * which is equal to the previous queried value.</p>
 *
 * @throws IllegalArgumentException if the key was not valid
 *
 * @param key The characteristics field to read.
 * @return The value of that key, or {@code null} if the field is not set.
 */
",0,[@Nullable],[@Nullable],0,,,,1,"1,4",1,"1,4",1,"In the late version, a new variable `propertyOverride` is introduced and initialized using the `overrideProperty(key)` method. The return statement is also modified to return `propertyOverride` if it's not null. If `propertyOverride` is null, it returns `mProperties.get(key)`. Therefore, the change types are 1 (Return statement changed) and 4 (Other statement changed).","The modification in the return statement could potentially lead to different return values. In the early version, it always returns `mProperties.get(key)`, while in the late version, it might return `propertyOverride` if it's not null. Hence, the CI type is 1 (Compatibility Issue caused by potential different return values or types)."
android.accessibilityservice.AccessibilityService.createDisplayContext,31,32,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,0,"{
    final Context context = super.createDisplayContext(display);
    final int displayId = display.getDisplayId();
    setDefaultTokenInternal(context, displayId);
    return context;
}","{
    return new AccessibilityContext(super.createDisplayContext(display), mConnectionId);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Context context, []), Expression(super.createDisplayContext(display), [])]), AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(display.getDisplayId(), [])]), Statement(setDefaultTokenInternal(context, displayId), []), Statement(return context, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Context context, []), Expression(super.createDisplayContext(display), [])])    VariableReference(final Context context, [])    Expression(super.createDisplayContext(display), [])  AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(display.getDisplayId(), [])])    VariableReference(final int displayId, [])    Expression(display.getDisplayId(), [])  Statement(setDefaultTokenInternal(context, displayId), [])  Statement(return context, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return new AccessibilityContext(super.createDisplayContext(display), mConnectionId), [VariableReference(return new AccessibilityContext(super, []), Expression(display), []), Expression(mConnectionId, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return new AccessibilityContext(super.createDisplayContext(display), mConnectionId), [VariableReference(return new AccessibilityContext(super, []), Expression(display), []), Expression(mConnectionId, [])])    VariableReference(return new AccessibilityContext(super, [])    Expression(display), [])    Expression(mConnectionId, [])  Statement(}, [])",1,,,0,[@Override],"[@NonNull, @Override]",1,,,,1,"1,4",1,"1,4",1,"The return statement has changed from returning a `Context` to returning an `AccessibilityContext`, which is a different type. Additionally, the statement `setDefaultTokenInternal(context, displayId)` has been removed. Therefore, the change type is 1,4.","The API now returns a different type (`AccessibilityContext` instead of `Context`), which will potentially cause different behavior in dependent code. Hence, the CI type is 1."
android.app.ActivityThread.ProviderKey.hashCode,31,32,<android.app.ActivityThread.ProviderKey: int hashCode()>,<android.app.ActivityThread.ProviderKey: int hashCode()>,0,"{
    return hashCode(authority, userId);
}","{
    return ((authority != null) ? authority.hashCode() : 0) ^ userId;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return hashCode(authority, userId), []), Statement(}, [])])  Statement({, [])  Statement(return hashCode(authority, userId), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ((authority !, []), Expression(null) ? authority.hashCode() : 0) ^ userId, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ((authority !, []), Expression(null) ? authority.hashCode() : 0) ^ userId, [])])    VariableReference(return ((authority !, [])    Expression(null) ? authority.hashCode() : 0) ^ userId, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"1,5",1,1,1,"The return statement has changed from `return hashCode(authority, userId);` to `return ((authority != null) ? authority.hashCode() : 0) ^ userId;`. This change impacts the method's return value, so the code change type is 1.","The computation of the hash code has changed, which will likely result in different return values for the method. Therefore, the CI type is 1."
android.view.MotionEvent.PointerCoords.clear,31,32,<android.view.MotionEvent.PointerCoords: void clear()>,<android.view.MotionEvent.PointerCoords: void clear()>,0,"{
    mPackedAxisBits = 0;
    x = 0;
    y = 0;
    pressure = 0;
    size = 0;
    touchMajor = 0;
    touchMinor = 0;
    toolMajor = 0;
    toolMinor = 0;
    orientation = 0;
}","{
    mPackedAxisBits = 0;
    x = 0;
    y = 0;
    pressure = 0;
    size = 0;
    touchMajor = 0;
    touchMinor = 0;
    toolMajor = 0;
    toolMinor = 0;
    orientation = 0;
    relativeX = 0;
    relativeY = 0;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mPackedAxisBits, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(x, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(y, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(pressure, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(size, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(touchMajor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(touchMinor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(toolMajor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(toolMinor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(orientation, []), Expression(0, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mPackedAxisBits, []), Expression(0, [])])    VariableReference(mPackedAxisBits, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(x, []), Expression(0, [])])    VariableReference(x, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(y, []), Expression(0, [])])    VariableReference(y, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(pressure, []), Expression(0, [])])    VariableReference(pressure, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(size, []), Expression(0, [])])    VariableReference(size, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(touchMajor, []), Expression(0, [])])    VariableReference(touchMajor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(touchMinor, []), Expression(0, [])])    VariableReference(touchMinor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(toolMajor, []), Expression(0, [])])    VariableReference(toolMajor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(toolMinor, []), Expression(0, [])])    VariableReference(toolMinor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(orientation, []), Expression(0, [])])    VariableReference(orientation, [])    Expression(0, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mPackedAxisBits, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(x, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(y, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(pressure, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(size, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(touchMajor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(touchMinor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(toolMajor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(toolMinor, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(orientation, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(relativeX, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(relativeY, []), Expression(0, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mPackedAxisBits, []), Expression(0, [])])    VariableReference(mPackedAxisBits, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(x, []), Expression(0, [])])    VariableReference(x, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(y, []), Expression(0, [])])    VariableReference(y, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(pressure, []), Expression(0, [])])    VariableReference(pressure, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(size, []), Expression(0, [])])    VariableReference(size, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(touchMajor, []), Expression(0, [])])    VariableReference(touchMajor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(touchMinor, []), Expression(0, [])])    VariableReference(touchMinor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(toolMajor, []), Expression(0, [])])    VariableReference(toolMajor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(toolMinor, []), Expression(0, [])])    VariableReference(toolMinor, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(orientation, []), Expression(0, [])])    VariableReference(orientation, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(relativeX, []), Expression(0, [])])    VariableReference(relativeX, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(relativeY, []), Expression(0, [])])    VariableReference(relativeY, [])    Expression(0, [])  Statement(}, [])",1,"/**
 * Clears the contents of this object.
 * Resets all axes to zero.
 */
","/**
 * Clears the contents of this object.
 * Resets all axes to zero.
 */
",0,,,0,,,,1,4,0,4,0,Two new assignment statements have been introduced in the late version code (`relativeX = 0;` and `relativeY = 0;`). This change falls under 4 (Other statement changed).,"The addition of `relativeX` and `relativeY` being set to `0` does not change the return value or exception handling of the method. Therefore, there is no compatibility issue. The CI type is 0."
<android.widget.TextView: void setInputType(int)>,30,31,,,,"{
    final boolean wasPassword = isPasswordInputType(getInputType());
    final boolean wasVisiblePassword = isVisiblePasswordInputType(getInputType());
    setInputType(type, false);
    final boolean isPassword = isPasswordInputType(type);
    final boolean isVisiblePassword = isVisiblePasswordInputType(type);
    boolean forceUpdate = false;
    if (isPassword) {
        setTransformationMethod(PasswordTransformationMethod.getInstance());
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (isVisiblePassword) {
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (wasPassword || wasVisiblePassword) {
        // not in password mode, clean up typeface and transformation
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        DEFAULT_TYPEFACE, /* typeface index */
        Typeface.NORMAL, -1);
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
    }
    boolean singleLine = !isMultilineInputType(type);
    // were previously in password mode.
    if (mSingleLine != singleLine || forceUpdate) {
        // Change single line mode, but only change the transformation if
        // we are not in password mode.
        applySingleLine(singleLine, !isPassword, true);
    }
    if (!isSuggestionsEnabled()) {
        setTextInternal(removeSuggestionSpans(mText));
    }
    InputMethodManager imm = getInputMethodManager();
    if (imm != null)
        imm.restartInput(this);
}","{
    final boolean wasPassword = isPasswordInputType(getInputType());
    final boolean wasVisiblePassword = isVisiblePasswordInputType(getInputType());
    setInputType(type, false);
    final boolean isPassword = isPasswordInputType(type);
    final boolean isVisiblePassword = isVisiblePasswordInputType(type);
    boolean forceUpdate = false;
    if (isPassword) {
        setTransformationMethod(PasswordTransformationMethod.getInstance());
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (isVisiblePassword) {
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (wasPassword || wasVisiblePassword) {
        // not in password mode, clean up typeface and transformation
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        DEFAULT_TYPEFACE, /* typeface index */
        Typeface.NORMAL, -1);
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
    }
    boolean singleLine = !isMultilineInputType(type);
    // were previously in password mode.
    if (mSingleLine != singleLine || forceUpdate) {
        // Change single line mode, but only change the transformation if
        // we are not in password mode.
        applySingleLine(singleLine, !isPassword, true, true);
    }
    if (!isSuggestionsEnabled()) {
        setTextInternal(removeSuggestionSpans(mText));
    }
    InputMethodManager imm = getInputMethodManager();
    if (imm != null)
        imm.restartInput(this);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final boolean wasPassword, []), Expression(isPasswordInputType(getInputType()), [])]), AssignmentExpression(=, [VariableReference(final boolean wasVisiblePassword, []), Expression(isVisiblePasswordInputType(getInputType()), [])]), Statement(setInputType(type, false), []), AssignmentExpression(=, [VariableReference(final boolean isPassword, []), Expression(isPasswordInputType(type), [])]), AssignmentExpression(=, [VariableReference(final boolean isVisiblePassword, []), Expression(isVisiblePasswordInputType(type), [])]), AssignmentExpression(=, [VariableReference(boolean forceUpdate, []), Expression(false, [])]), Statement(if (isPassword) {, []), MethodCall(setTransformationMethod(PasswordTransformationMethod.getInstance()), [VariableReference(setTransformationMethod(PasswordTransformationMethod, []), Expression(), [])]), Statement(setTypefaceFromAttrs(null, /* fontTypeface */, []), Statement(null, /* fontFamily */, []), Statement(MONOSPACE, Typeface.NORMAL, -1), []), Statement(} else if (isVisiblePassword) {, []), AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])]), Statement(}, []), Statement(setTypefaceFromAttrs(null, /* fontTypeface */, []), Statement(null, /* fontFamily */, []), Statement(MONOSPACE, Typeface.NORMAL, -1), []), Statement(} else if (wasPassword || wasVisiblePassword) {, []), Statement(// not in password mode, clean up typeface and transformation, []), Statement(setTypefaceFromAttrs(null, /* fontTypeface */, []), Statement(null, /* fontFamily */, []), Statement(DEFAULT_TYPEFACE, /* typeface index */, []), Statement(Typeface.NORMAL, -1), []), AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean singleLine, []), Expression(!isMultilineInputType(type), [])]), Statement(// were previously in password mode., []), AssignmentExpression(=, [VariableReference(if (mSingleLine !, []), Expression(singleLine || forceUpdate) {, [])]), Statement(// Change single line mode, but only change the transformation if, []), Statement(// we are not in password mode., []), Statement(applySingleLine(singleLine, !isPassword, true), []), Statement(}, []), Statement(if (!isSuggestionsEnabled()) {, []), Statement(setTextInternal(removeSuggestionSpans(mText)), []), Statement(}, []), AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(getInputMethodManager(), [])]), AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null), [])]), MethodCall(imm.restartInput(this), [VariableReference(imm, []), Expression(this, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final boolean wasPassword, []), Expression(isPasswordInputType(getInputType()), [])])    VariableReference(final boolean wasPassword, [])    Expression(isPasswordInputType(getInputType()), [])  AssignmentExpression(=, [VariableReference(final boolean wasVisiblePassword, []), Expression(isVisiblePasswordInputType(getInputType()), [])])    VariableReference(final boolean wasVisiblePassword, [])    Expression(isVisiblePasswordInputType(getInputType()), [])  Statement(setInputType(type, false), [])  AssignmentExpression(=, [VariableReference(final boolean isPassword, []), Expression(isPasswordInputType(type), [])])    VariableReference(final boolean isPassword, [])    Expression(isPasswordInputType(type), [])  AssignmentExpression(=, [VariableReference(final boolean isVisiblePassword, []), Expression(isVisiblePasswordInputType(type), [])])    VariableReference(final boolean isVisiblePassword, [])    Expression(isVisiblePasswordInputType(type), [])  AssignmentExpression(=, [VariableReference(boolean forceUpdate, []), Expression(false, [])])    VariableReference(boolean forceUpdate, [])    Expression(false, [])  Statement(if (isPassword) {, [])  MethodCall(setTransformationMethod(PasswordTransformationMethod.getInstance()), [VariableReference(setTransformationMethod(PasswordTransformationMethod, []), Expression(), [])])    VariableReference(setTransformationMethod(PasswordTransformationMethod, [])    Expression(), [])  Statement(setTypefaceFromAttrs(null, /* fontTypeface */, [])  Statement(null, /* fontFamily */, [])  Statement(MONOSPACE, Typeface.NORMAL, -1), [])  Statement(} else if (isVisiblePassword) {, [])  AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])])    VariableReference(if (mTransformation, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])])    VariableReference(forceUpdate, [])    Expression(true, [])  Statement(}, [])  Statement(setTypefaceFromAttrs(null, /* fontTypeface */, [])  Statement(null, /* fontFamily */, [])  Statement(MONOSPACE, Typeface.NORMAL, -1), [])  Statement(} else if (wasPassword || wasVisiblePassword) {, [])  Statement(// not in password mode, clean up typeface and transformation, [])  Statement(setTypefaceFromAttrs(null, /* fontTypeface */, [])  Statement(null, /* fontFamily */, [])  Statement(DEFAULT_TYPEFACE, /* typeface index */, [])  Statement(Typeface.NORMAL, -1), [])  AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])])    VariableReference(if (mTransformation, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])])    VariableReference(forceUpdate, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean singleLine, []), Expression(!isMultilineInputType(type), [])])    VariableReference(boolean singleLine, [])    Expression(!isMultilineInputType(type), [])  Statement(// were previously in password mode., [])  AssignmentExpression(=, [VariableReference(if (mSingleLine !, []), Expression(singleLine || forceUpdate) {, [])])    VariableReference(if (mSingleLine !, [])    Expression(singleLine || forceUpdate) {, [])  Statement(// Change single line mode, but only change the transformation if, [])  Statement(// we are not in password mode., [])  Statement(applySingleLine(singleLine, !isPassword, true), [])  Statement(}, [])  Statement(if (!isSuggestionsEnabled()) {, [])  Statement(setTextInternal(removeSuggestionSpans(mText)), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(getInputMethodManager(), [])])    VariableReference(InputMethodManager imm, [])    Expression(getInputMethodManager(), [])  AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null), [])])    VariableReference(if (imm !, [])    Expression(null), [])  MethodCall(imm.restartInput(this), [VariableReference(imm, []), Expression(this, [])])    VariableReference(imm, [])    Expression(this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final boolean wasPassword, []), Expression(isPasswordInputType(getInputType()), [])]), AssignmentExpression(=, [VariableReference(final boolean wasVisiblePassword, []), Expression(isVisiblePasswordInputType(getInputType()), [])]), Statement(setInputType(type, false), []), AssignmentExpression(=, [VariableReference(final boolean isPassword, []), Expression(isPasswordInputType(type), [])]), AssignmentExpression(=, [VariableReference(final boolean isVisiblePassword, []), Expression(isVisiblePasswordInputType(type), [])]), AssignmentExpression(=, [VariableReference(boolean forceUpdate, []), Expression(false, [])]), Statement(if (isPassword) {, []), MethodCall(setTransformationMethod(PasswordTransformationMethod.getInstance()), [VariableReference(setTransformationMethod(PasswordTransformationMethod, []), Expression(), [])]), Statement(setTypefaceFromAttrs(null, /* fontTypeface */, []), Statement(null, /* fontFamily */, []), Statement(MONOSPACE, Typeface.NORMAL, -1), []), Statement(} else if (isVisiblePassword) {, []), AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])]), Statement(}, []), Statement(setTypefaceFromAttrs(null, /* fontTypeface */, []), Statement(null, /* fontFamily */, []), Statement(MONOSPACE, Typeface.NORMAL, -1), []), Statement(} else if (wasPassword || wasVisiblePassword) {, []), Statement(// not in password mode, clean up typeface and transformation, []), Statement(setTypefaceFromAttrs(null, /* fontTypeface */, []), Statement(null, /* fontFamily */, []), Statement(DEFAULT_TYPEFACE, /* typeface index */, []), Statement(Typeface.NORMAL, -1), []), AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean singleLine, []), Expression(!isMultilineInputType(type), [])]), Statement(// were previously in password mode., []), AssignmentExpression(=, [VariableReference(if (mSingleLine !, []), Expression(singleLine || forceUpdate) {, [])]), Statement(// Change single line mode, but only change the transformation if, []), Statement(// we are not in password mode., []), Statement(applySingleLine(singleLine, !isPassword, true, true), []), Statement(}, []), Statement(if (!isSuggestionsEnabled()) {, []), Statement(setTextInternal(removeSuggestionSpans(mText)), []), Statement(}, []), AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(getInputMethodManager(), [])]), AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null), [])]), MethodCall(imm.restartInput(this), [VariableReference(imm, []), Expression(this, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final boolean wasPassword, []), Expression(isPasswordInputType(getInputType()), [])])    VariableReference(final boolean wasPassword, [])    Expression(isPasswordInputType(getInputType()), [])  AssignmentExpression(=, [VariableReference(final boolean wasVisiblePassword, []), Expression(isVisiblePasswordInputType(getInputType()), [])])    VariableReference(final boolean wasVisiblePassword, [])    Expression(isVisiblePasswordInputType(getInputType()), [])  Statement(setInputType(type, false), [])  AssignmentExpression(=, [VariableReference(final boolean isPassword, []), Expression(isPasswordInputType(type), [])])    VariableReference(final boolean isPassword, [])    Expression(isPasswordInputType(type), [])  AssignmentExpression(=, [VariableReference(final boolean isVisiblePassword, []), Expression(isVisiblePasswordInputType(type), [])])    VariableReference(final boolean isVisiblePassword, [])    Expression(isVisiblePasswordInputType(type), [])  AssignmentExpression(=, [VariableReference(boolean forceUpdate, []), Expression(false, [])])    VariableReference(boolean forceUpdate, [])    Expression(false, [])  Statement(if (isPassword) {, [])  MethodCall(setTransformationMethod(PasswordTransformationMethod.getInstance()), [VariableReference(setTransformationMethod(PasswordTransformationMethod, []), Expression(), [])])    VariableReference(setTransformationMethod(PasswordTransformationMethod, [])    Expression(), [])  Statement(setTypefaceFromAttrs(null, /* fontTypeface */, [])  Statement(null, /* fontFamily */, [])  Statement(MONOSPACE, Typeface.NORMAL, -1), [])  Statement(} else if (isVisiblePassword) {, [])  AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])])    VariableReference(if (mTransformation, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])])    VariableReference(forceUpdate, [])    Expression(true, [])  Statement(}, [])  Statement(setTypefaceFromAttrs(null, /* fontTypeface */, [])  Statement(null, /* fontFamily */, [])  Statement(MONOSPACE, Typeface.NORMAL, -1), [])  Statement(} else if (wasPassword || wasVisiblePassword) {, [])  Statement(// not in password mode, clean up typeface and transformation, [])  Statement(setTypefaceFromAttrs(null, /* fontTypeface */, [])  Statement(null, /* fontFamily */, [])  Statement(DEFAULT_TYPEFACE, /* typeface index */, [])  Statement(Typeface.NORMAL, -1), [])  AssignmentExpression(=, [VariableReference(if (mTransformation, []), Expression(, [])])    VariableReference(if (mTransformation, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(forceUpdate, []), Expression(true, [])])    VariableReference(forceUpdate, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean singleLine, []), Expression(!isMultilineInputType(type), [])])    VariableReference(boolean singleLine, [])    Expression(!isMultilineInputType(type), [])  Statement(// were previously in password mode., [])  AssignmentExpression(=, [VariableReference(if (mSingleLine !, []), Expression(singleLine || forceUpdate) {, [])])    VariableReference(if (mSingleLine !, [])    Expression(singleLine || forceUpdate) {, [])  Statement(// Change single line mode, but only change the transformation if, [])  Statement(// we are not in password mode., [])  Statement(applySingleLine(singleLine, !isPassword, true, true), [])  Statement(}, [])  Statement(if (!isSuggestionsEnabled()) {, [])  Statement(setTextInternal(removeSuggestionSpans(mText)), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(InputMethodManager imm, []), Expression(getInputMethodManager(), [])])    VariableReference(InputMethodManager imm, [])    Expression(getInputMethodManager(), [])  AssignmentExpression(=, [VariableReference(if (imm !, []), Expression(null), [])])    VariableReference(if (imm !, [])    Expression(null), [])  MethodCall(imm.restartInput(this), [VariableReference(imm, []), Expression(this, [])])    VariableReference(imm, [])    Expression(this, [])  Statement(}, [])",1,"/**
 * Set the type of the content with a constant as defined for {@link EditorInfo#inputType}. This
 * will take care of changing the key listener, by calling {@link #setKeyListener(KeyListener)},
 * to match the given content type.  If the given content type is {@link EditorInfo#TYPE_NULL}
 * then a soft keyboard will not be displayed for this text view.
 *
 * Note that the maximum number of displayed lines (see {@link #setMaxLines(int)}) will be
 * modified if you change the {@link EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE} flag of the input
 * type.
 *
 * @see #getInputType()
 * @see #setRawInputType(int)
 * @see android.text.InputType
 * @attr ref android.R.styleable#TextView_inputType
 */
","/**
 * Set the type of the content with a constant as defined for {@link EditorInfo#inputType}. This
 * will take care of changing the key listener, by calling {@link #setKeyListener(KeyListener)},
 * to match the given content type.  If the given content type is {@link EditorInfo#TYPE_NULL}
 * then a soft keyboard will not be displayed for this text view.
 *
 * Note that the maximum number of displayed lines (see {@link #setMaxLines(int)}) will be
 * modified if you change the {@link EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE} flag of the input
 * type.
 *
 * @see #getInputType()
 * @see #setRawInputType(int)
 * @see android.text.InputType
 * @attr ref android.R.styleable#TextView_inputType
 */
",0,,,0,,,,2,5,0,3,1,"The only change between the early and late version is the addition of an extra parameter `true` in the `applySingleLine(singleLine, !isPassword, true, true)` method call within the control dependency logic, thus the change falls under the category 3 (Control dependency changed).","The change in the control statement (additional argument in `applySingleLine` method) affects the behavior of the API by potentially altering its internal handling of single-line and password flags. Consequently, it affects what the method returns, causing a potential difference in return value. Therefore, the CI type is 1."
<android.os.UserManager: boolean isUserUnlocked(UserHandle)>,30,31,,,,"{
    return isUserUnlocked(user.getIdentifier());
}","{
    return isUserUnlocked(user.getIdentifier());
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return isUserUnlocked(user.getIdentifier()), [VariableReference(return isUserUnlocked(user, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return isUserUnlocked(user.getIdentifier()), [VariableReference(return isUserUnlocked(user, []), Expression(), [])])    VariableReference(return isUserUnlocked(user, [])    Expression(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return isUserUnlocked(user.getIdentifier()), [VariableReference(return isUserUnlocked(user, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return isUserUnlocked(user.getIdentifier()), [VariableReference(return isUserUnlocked(user, []), Expression(), [])])    VariableReference(return isUserUnlocked(user, [])    Expression(), [])  Statement(}, [])",0,"/**
 * Return whether the given user is running in an ""unlocked"" state.
 * <p>
 * On devices with direct boot, a user is unlocked only after they've
 * entered their credentials (such as a lock pattern or PIN). On devices
 * without direct boot, a user is unlocked as soon as it starts.
 * <p>
 * When a user is locked, only device-protected data storage is available.
 * When a user is unlocked, both device-protected and credential-protected
 * private app data storage is available.
 * <p>Requires {@code android.permission.MANAGE_USERS} or
 * {@code android.permission.INTERACT_ACROSS_USERS}, otherwise specified {@link UserHandle user}
 * must be the calling user or a managed profile associated with it.
 *
 * @param user to retrieve the unlocked state for.
 * @see Intent#ACTION_USER_UNLOCKED
 * @see Context#createDeviceProtectedStorageContext()
 */
","/**
 * Return whether the given user is running in an ""unlocked"" state.
 * <p>
 * On devices with direct boot, a user is unlocked only after they've
 * entered their credentials (such as a lock pattern or PIN). On devices
 * without direct boot, a user is unlocked as soon as it starts.
 * <p>
 * When a user is locked, only device-protected data storage is available.
 * When a user is unlocked, both device-protected and credential-protected
 * private app data storage is available.
 * <p>Requires {@code android.permission.MANAGE_USERS} or
 * {@code android.permission.INTERACT_ACROSS_USERS}, otherwise specified {@link UserHandle user}
 * must be the calling user or a profile associated with it.
 *
 * @param user to retrieve the unlocked state for.
 * @see Intent#ACTION_USER_UNLOCKED
 * @see Context#createDeviceProtectedStorageContext()
 */
",1,"[@RequiresPermission(anyOf = { Manifest.permission.MANAGE_USERS, Manifest.permission.INTERACT_ACROSS_USERS }, conditional = true)]","[@RequiresPermission(anyOf = { Manifest.permission.MANAGE_USERS, Manifest.permission.INTERACT_ACROSS_USERS }, conditional = true)]",0,,,,0,0,0,0,0,There is no change in the method implementation or annotations between the early and late versions.,There are no compatibility issues as there are no changes in code that would affect the behavior of the API.
<android.widget.HorizontalScrollView: boolean onTouchEvent(MotionEvent)>,30,31,,,,"{
    initVelocityTrackerIfNotExists();
    mVelocityTracker.addMovement(ev);
    final int action = ev.getAction();
    switch(action & MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_DOWN:
            {
                if (getChildCount() == 0) {
                    return false;
                }
                if ((mIsBeingDragged = !mScroller.isFinished())) {
                    final ViewParent parent = getParent();
                    if (parent != null) {
                        parent.requestDisallowInterceptTouchEvent(true);
                    }
                }
                /*
                 * If being flinged and user touches, stop the fling. isFinished
                 * will be false if being flinged.
                 */
                if (!mScroller.isFinished()) {
                    mScroller.abortAnimation();
                }
                // Remember where the motion event started
                mLastMotionX = (int) ev.getX();
                mActivePointerId = ev.getPointerId(0);
                break;
            }
        case MotionEvent.ACTION_MOVE:
            final int activePointerIndex = ev.findPointerIndex(mActivePointerId);
            if (activePointerIndex == -1) {
                Log.e(TAG, ""Invalid pointerId="" + mActivePointerId + "" in onTouchEvent"");
                break;
            }
            final int x = (int) ev.getX(activePointerIndex);
            int deltaX = mLastMotionX - x;
            if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
                final ViewParent parent = getParent();
                if (parent != null) {
                    parent.requestDisallowInterceptTouchEvent(true);
                }
                mIsBeingDragged = true;
                if (deltaX > 0) {
                    deltaX -= mTouchSlop;
                } else {
                    deltaX += mTouchSlop;
                }
            }
            if (mIsBeingDragged) {
                // Scroll to follow the motion event
                mLastMotionX = x;
                final int oldX = mScrollX;
                final int oldY = mScrollY;
                final int range = getScrollRange();
                final int overscrollMode = getOverScrollMode();
                final boolean canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS || (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);
                // calls onScrollChanged if applicable.
                if (overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true)) {
                    // Break our velocity if we hit a scroll barrier.
                    mVelocityTracker.clear();
                }
                if (canOverscroll) {
                    final int pulledToX = oldX + deltaX;
                    if (pulledToX < 0) {
                        mEdgeGlowLeft.onPull((float) deltaX / getWidth(), 1.f - ev.getY(activePointerIndex) / getHeight());
                        if (!mEdgeGlowRight.isFinished()) {
                            mEdgeGlowRight.onRelease();
                        }
                    } else if (pulledToX > range) {
                        mEdgeGlowRight.onPull((float) deltaX / getWidth(), ev.getY(activePointerIndex) / getHeight());
                        if (!mEdgeGlowLeft.isFinished()) {
                            mEdgeGlowLeft.onRelease();
                        }
                    }
                    if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())) {
                        postInvalidateOnAnimation();
                    }
                }
            }
            break;
        case MotionEvent.ACTION_UP:
            if (mIsBeingDragged) {
                final VelocityTracker velocityTracker = mVelocityTracker;
                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
                int initialVelocity = (int) velocityTracker.getXVelocity(mActivePointerId);
                if (getChildCount() > 0) {
                    if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
                        fling(-initialVelocity);
                    } else {
                        if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                            postInvalidateOnAnimation();
                        }
                    }
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_CANCEL:
            if (mIsBeingDragged && getChildCount() > 0) {
                if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                    postInvalidateOnAnimation();
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_POINTER_UP:
            onSecondaryPointerUp(ev);
            break;
    }
    return true;
}","{
    initVelocityTrackerIfNotExists();
    mVelocityTracker.addMovement(ev);
    final int action = ev.getAction();
    switch(action & MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_DOWN:
            {
                if (getChildCount() == 0) {
                    return false;
                }
                if (!mScroller.isFinished()) {
                    final ViewParent parent = getParent();
                    if (parent != null) {
                        parent.requestDisallowInterceptTouchEvent(true);
                    }
                }
                /*
                 * If being flinged and user touches, stop the fling. isFinished
                 * will be false if being flinged.
                 */
                if (!mScroller.isFinished()) {
                    mScroller.abortAnimation();
                }
                // Remember where the motion event started
                mLastMotionX = (int) ev.getX();
                mActivePointerId = ev.getPointerId(0);
                break;
            }
        case MotionEvent.ACTION_MOVE:
            final int activePointerIndex = ev.findPointerIndex(mActivePointerId);
            if (activePointerIndex == -1) {
                Log.e(TAG, ""Invalid pointerId="" + mActivePointerId + "" in onTouchEvent"");
                break;
            }
            final int x = (int) ev.getX(activePointerIndex);
            int deltaX = mLastMotionX - x;
            if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
                final ViewParent parent = getParent();
                if (parent != null) {
                    parent.requestDisallowInterceptTouchEvent(true);
                }
                mIsBeingDragged = true;
                if (deltaX > 0) {
                    deltaX -= mTouchSlop;
                } else {
                    deltaX += mTouchSlop;
                }
            }
            if (mIsBeingDragged) {
                // Scroll to follow the motion event
                mLastMotionX = x;
                final int oldX = mScrollX;
                final int range = getScrollRange();
                final int overscrollMode = getOverScrollMode();
                final boolean canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS || (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);
                final float displacement = ev.getY(activePointerIndex) / getHeight();
                if (canOverscroll) {
                    int consumed = 0;
                    if (deltaX < 0 && mEdgeGlowRight.getDistance() != 0f) {
                        consumed = Math.round(getWidth() * mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement));
                    } else if (deltaX > 0 && mEdgeGlowLeft.getDistance() != 0f) {
                        consumed = Math.round(-getWidth() * mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1 - displacement));
                    }
                    deltaX -= consumed;
                }
                // Calling overScrollBy will call onOverScrolled, which
                // calls onScrollChanged if applicable.
                overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true);
                if (canOverscroll && deltaX != 0f) {
                    final int pulledToX = oldX + deltaX;
                    if (pulledToX < 0) {
                        mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1.f - displacement);
                        if (!mEdgeGlowRight.isFinished()) {
                            mEdgeGlowRight.onRelease();
                        }
                    } else if (pulledToX > range) {
                        mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement);
                        if (!mEdgeGlowLeft.isFinished()) {
                            mEdgeGlowLeft.onRelease();
                        }
                    }
                    if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())) {
                        postInvalidateOnAnimation();
                    }
                }
            }
            break;
        case MotionEvent.ACTION_UP:
            if (mIsBeingDragged) {
                final VelocityTracker velocityTracker = mVelocityTracker;
                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
                int initialVelocity = (int) velocityTracker.getXVelocity(mActivePointerId);
                if (getChildCount() > 0) {
                    if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
                        fling(-initialVelocity);
                    } else {
                        if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                            postInvalidateOnAnimation();
                        }
                    }
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_CANCEL:
            if (mIsBeingDragged && getChildCount() > 0) {
                if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                    postInvalidateOnAnimation();
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_POINTER_UP:
            onSecondaryPointerUp(ev);
            break;
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(initVelocityTrackerIfNotExists(), []), MethodCall(mVelocityTracker.addMovement(ev), [VariableReference(mVelocityTracker, []), Expression(ev, [])]), AssignmentExpression(=, [VariableReference(final int action, []), Expression(ev.getAction(), [])]), Statement(case MotionEvent.ACTION_DOWN:, []), Statement({, []), AssignmentExpression(=, [VariableReference(if (getChildCount(), []), Expression(, [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if ((mIsBeingDragged, []), Expression(!mScroller.isFinished())) {, [])]), AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])]), AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])]), MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(/*, []), Statement(* If being flinged and user touches, stop the fling. isFinished, []), Statement(* will be false if being flinged., []), Statement(*/, []), MethodCall(if (!mScroller.isFinished()), [VariableReference(if (!mScroller, []), Expression(), [])]), MethodCall(mScroller.abortAnimation(), [VariableReference(mScroller, []), Expression(, [])]), Statement(}, []), Statement(// Remember where the motion event started, []), AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression((int) ev.getX(), [])]), AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(ev.getPointerId(0), [])]), Statement(break, []), Statement(}, []), Statement(case MotionEvent.ACTION_MOVE:, []), AssignmentExpression(=, [VariableReference(final int activePointerIndex, []), Expression(ev.findPointerIndex(mActivePointerId), [])]), AssignmentExpression(=, [VariableReference(if (activePointerIndex, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Invalid pointerId, []), Expression("" + mActivePointerId + "" in onTouchEvent""), [])]), Statement(break, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int x, []), Expression((int) ev.getX(activePointerIndex), [])]), AssignmentExpression(=, [VariableReference(int deltaX, []), Expression(mLastMotionX - x, [])]), MethodCall(if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop), [VariableReference(if (!mIsBeingDragged && Math, []), Expression(deltaX) > mTouchSlop, [])]), AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])]), AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])]), MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(true, [])]), Statement(if (deltaX > 0) {, []), AssignmentExpression(=, [VariableReference(deltaX -, []), Expression(mTouchSlop, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(deltaX +, []), Expression(mTouchSlop, [])]), Statement(}, []), Statement(}, []), Statement(if (mIsBeingDragged) {, []), Statement(// Scroll to follow the motion event, []), AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression(x, [])]), AssignmentExpression(=, [VariableReference(final int oldX, []), Expression(mScrollX, [])]), AssignmentExpression(=, [VariableReference(final int oldY, []), Expression(mScrollY, [])]), AssignmentExpression(=, [VariableReference(final int range, []), Expression(getScrollRange(), [])]), AssignmentExpression(=, [VariableReference(final int overscrollMode, []), Expression(getOverScrollMode(), [])]), AssignmentExpression(=, [VariableReference(final boolean canOverscroll, []), Expression(overscrollMode, [])]), Statement(// calls onScrollChanged if applicable., []), Statement(if (overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true)) {, []), Statement(// Break our velocity if we hit a scroll barrier., []), MethodCall(mVelocityTracker.clear(), [VariableReference(mVelocityTracker, []), Expression(, [])]), Statement(}, []), Statement(if (canOverscroll) {, []), AssignmentExpression(=, [VariableReference(final int pulledToX, []), Expression(oldX + deltaX, [])]), Statement(if (pulledToX < 0) {, []), MethodCall(mEdgeGlowLeft.onPull((float) deltaX / getWidth(), 1.f - ev.getY(activePointerIndex) / getHeight()), [VariableReference(mEdgeGlowLeft, []), Expression((float) deltaX / getWidth(), []), Expression(1.f - ev.getY(activePointerIndex) / getHeight(), [])]), MethodCall(if (!mEdgeGlowRight.isFinished()), [VariableReference(if (!mEdgeGlowRight, []), Expression(), [])]), MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])]), Statement(}, []), Statement(} else if (pulledToX > range) {, []), MethodCall(mEdgeGlowRight.onPull((float) deltaX / getWidth(), ev.getY(activePointerIndex) / getHeight()), [VariableReference(mEdgeGlowRight, []), Expression((float) deltaX / getWidth(), []), Expression(ev.getY(activePointerIndex) / getHeight(), [])]), MethodCall(if (!mEdgeGlowLeft.isFinished()), [VariableReference(if (!mEdgeGlowLeft, []), Expression(), [])]), MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])]), Statement(}, []), Statement(}, []), MethodCall(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())), [VariableReference(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft, []), Expression() || !mEdgeGlowRight.isFinished()), [])]), Statement(postInvalidateOnAnimation(), []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case MotionEvent.ACTION_UP:, []), Statement(if (mIsBeingDragged) {, []), AssignmentExpression(=, [VariableReference(final VelocityTracker velocityTracker, []), Expression(mVelocityTracker, [])]), MethodCall(velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity), [VariableReference(velocityTracker, []), Expression(1000, []), Expression(mMaximumVelocity, [])]), AssignmentExpression(=, [VariableReference(int initialVelocity, []), Expression((int) velocityTracker.getXVelocity(mActivePointerId), [])]), Statement(if (getChildCount() > 0) {, []), MethodCall(if ((Math.abs(initialVelocity) > mMinimumVelocity)), [VariableReference(if ((Math, []), Expression(initialVelocity) > mMinimumVelocity), [])]), Statement(fling(-initialVelocity), []), Statement(} else {, []), MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])]), Statement(postInvalidateOnAnimation(), []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])]), AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])]), Statement(recycleVelocityTracker(), []), Statement(if (shouldDisplayEdgeEffects()) {, []), MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])]), MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case MotionEvent.ACTION_CANCEL:, []), Statement(if (mIsBeingDragged && getChildCount() > 0) {, []), MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])]), Statement(postInvalidateOnAnimation(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])]), AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])]), Statement(recycleVelocityTracker(), []), Statement(if (shouldDisplayEdgeEffects()) {, []), MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])]), MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case MotionEvent.ACTION_POINTER_UP:, []), Statement(onSecondaryPointerUp(ev), []), Statement(break, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(initVelocityTrackerIfNotExists(), [])  MethodCall(mVelocityTracker.addMovement(ev), [VariableReference(mVelocityTracker, []), Expression(ev, [])])    VariableReference(mVelocityTracker, [])    Expression(ev, [])  AssignmentExpression(=, [VariableReference(final int action, []), Expression(ev.getAction(), [])])    VariableReference(final int action, [])    Expression(ev.getAction(), [])  Statement(case MotionEvent.ACTION_DOWN:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (getChildCount(), []), Expression(, [])])    VariableReference(if (getChildCount(), [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if ((mIsBeingDragged, []), Expression(!mScroller.isFinished())) {, [])])    VariableReference(if ((mIsBeingDragged, [])    Expression(!mScroller.isFinished())) {, [])  AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])])    VariableReference(final ViewParent parent, [])    Expression(getParent(), [])  AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])])    VariableReference(if (parent !, [])    Expression(null) {, [])  MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])])    VariableReference(parent, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(/*, [])  Statement(* If being flinged and user touches, stop the fling. isFinished, [])  Statement(* will be false if being flinged., [])  Statement(*/, [])  MethodCall(if (!mScroller.isFinished()), [VariableReference(if (!mScroller, []), Expression(), [])])    VariableReference(if (!mScroller, [])    Expression(), [])  MethodCall(mScroller.abortAnimation(), [VariableReference(mScroller, []), Expression(, [])])    VariableReference(mScroller, [])    Expression(, [])  Statement(}, [])  Statement(// Remember where the motion event started, [])  AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression((int) ev.getX(), [])])    VariableReference(mLastMotionX, [])    Expression((int) ev.getX(), [])  AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(ev.getPointerId(0), [])])    VariableReference(mActivePointerId, [])    Expression(ev.getPointerId(0), [])  Statement(break, [])  Statement(}, [])  Statement(case MotionEvent.ACTION_MOVE:, [])  AssignmentExpression(=, [VariableReference(final int activePointerIndex, []), Expression(ev.findPointerIndex(mActivePointerId), [])])    VariableReference(final int activePointerIndex, [])    Expression(ev.findPointerIndex(mActivePointerId), [])  AssignmentExpression(=, [VariableReference(if (activePointerIndex, []), Expression(, [])])    VariableReference(if (activePointerIndex, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Invalid pointerId, []), Expression("" + mActivePointerId + "" in onTouchEvent""), [])])    VariableReference(Log.e(TAG, ""Invalid pointerId, [])    Expression("" + mActivePointerId + "" in onTouchEvent""), [])  Statement(break, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int x, []), Expression((int) ev.getX(activePointerIndex), [])])    VariableReference(final int x, [])    Expression((int) ev.getX(activePointerIndex), [])  AssignmentExpression(=, [VariableReference(int deltaX, []), Expression(mLastMotionX - x, [])])    VariableReference(int deltaX, [])    Expression(mLastMotionX - x, [])  MethodCall(if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop), [VariableReference(if (!mIsBeingDragged && Math, []), Expression(deltaX) > mTouchSlop, [])])    VariableReference(if (!mIsBeingDragged && Math, [])    Expression(deltaX) > mTouchSlop, [])  AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])])    VariableReference(final ViewParent parent, [])    Expression(getParent(), [])  AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])])    VariableReference(if (parent !, [])    Expression(null) {, [])  MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])])    VariableReference(parent, [])    Expression(true, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(true, [])])    VariableReference(mIsBeingDragged, [])    Expression(true, [])  Statement(if (deltaX > 0) {, [])  AssignmentExpression(=, [VariableReference(deltaX -, []), Expression(mTouchSlop, [])])    VariableReference(deltaX -, [])    Expression(mTouchSlop, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(deltaX +, []), Expression(mTouchSlop, [])])    VariableReference(deltaX +, [])    Expression(mTouchSlop, [])  Statement(}, [])  Statement(}, [])  Statement(if (mIsBeingDragged) {, [])  Statement(// Scroll to follow the motion event, [])  AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression(x, [])])    VariableReference(mLastMotionX, [])    Expression(x, [])  AssignmentExpression(=, [VariableReference(final int oldX, []), Expression(mScrollX, [])])    VariableReference(final int oldX, [])    Expression(mScrollX, [])  AssignmentExpression(=, [VariableReference(final int oldY, []), Expression(mScrollY, [])])    VariableReference(final int oldY, [])    Expression(mScrollY, [])  AssignmentExpression(=, [VariableReference(final int range, []), Expression(getScrollRange(), [])])    VariableReference(final int range, [])    Expression(getScrollRange(), [])  AssignmentExpression(=, [VariableReference(final int overscrollMode, []), Expression(getOverScrollMode(), [])])    VariableReference(final int overscrollMode, [])    Expression(getOverScrollMode(), [])  AssignmentExpression(=, [VariableReference(final boolean canOverscroll, []), Expression(overscrollMode, [])])    VariableReference(final boolean canOverscroll, [])    Expression(overscrollMode, [])  Statement(// calls onScrollChanged if applicable., [])  Statement(if (overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true)) {, [])  Statement(// Break our velocity if we hit a scroll barrier., [])  MethodCall(mVelocityTracker.clear(), [VariableReference(mVelocityTracker, []), Expression(, [])])    VariableReference(mVelocityTracker, [])    Expression(, [])  Statement(}, [])  Statement(if (canOverscroll) {, [])  AssignmentExpression(=, [VariableReference(final int pulledToX, []), Expression(oldX + deltaX, [])])    VariableReference(final int pulledToX, [])    Expression(oldX + deltaX, [])  Statement(if (pulledToX < 0) {, [])  MethodCall(mEdgeGlowLeft.onPull((float) deltaX / getWidth(), 1.f - ev.getY(activePointerIndex) / getHeight()), [VariableReference(mEdgeGlowLeft, []), Expression((float) deltaX / getWidth(), []), Expression(1.f - ev.getY(activePointerIndex) / getHeight(), [])])    VariableReference(mEdgeGlowLeft, [])    Expression((float) deltaX / getWidth(), [])    Expression(1.f - ev.getY(activePointerIndex) / getHeight(), [])  MethodCall(if (!mEdgeGlowRight.isFinished()), [VariableReference(if (!mEdgeGlowRight, []), Expression(), [])])    VariableReference(if (!mEdgeGlowRight, [])    Expression(), [])  MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])])    VariableReference(mEdgeGlowRight, [])    Expression(, [])  Statement(}, [])  Statement(} else if (pulledToX > range) {, [])  MethodCall(mEdgeGlowRight.onPull((float) deltaX / getWidth(), ev.getY(activePointerIndex) / getHeight()), [VariableReference(mEdgeGlowRight, []), Expression((float) deltaX / getWidth(), []), Expression(ev.getY(activePointerIndex) / getHeight(), [])])    VariableReference(mEdgeGlowRight, [])    Expression((float) deltaX / getWidth(), [])    Expression(ev.getY(activePointerIndex) / getHeight(), [])  MethodCall(if (!mEdgeGlowLeft.isFinished()), [VariableReference(if (!mEdgeGlowLeft, []), Expression(), [])])    VariableReference(if (!mEdgeGlowLeft, [])    Expression(), [])  MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])])    VariableReference(mEdgeGlowLeft, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())), [VariableReference(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft, []), Expression() || !mEdgeGlowRight.isFinished()), [])])    VariableReference(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft, [])    Expression() || !mEdgeGlowRight.isFinished()), [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case MotionEvent.ACTION_UP:, [])  Statement(if (mIsBeingDragged) {, [])  AssignmentExpression(=, [VariableReference(final VelocityTracker velocityTracker, []), Expression(mVelocityTracker, [])])    VariableReference(final VelocityTracker velocityTracker, [])    Expression(mVelocityTracker, [])  MethodCall(velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity), [VariableReference(velocityTracker, []), Expression(1000, []), Expression(mMaximumVelocity, [])])    VariableReference(velocityTracker, [])    Expression(1000, [])    Expression(mMaximumVelocity, [])  AssignmentExpression(=, [VariableReference(int initialVelocity, []), Expression((int) velocityTracker.getXVelocity(mActivePointerId), [])])    VariableReference(int initialVelocity, [])    Expression((int) velocityTracker.getXVelocity(mActivePointerId), [])  Statement(if (getChildCount() > 0) {, [])  MethodCall(if ((Math.abs(initialVelocity) > mMinimumVelocity)), [VariableReference(if ((Math, []), Expression(initialVelocity) > mMinimumVelocity), [])])    VariableReference(if ((Math, [])    Expression(initialVelocity) > mMinimumVelocity), [])  Statement(fling(-initialVelocity), [])  Statement(} else {, [])  MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])])    VariableReference(if (mScroller, [])    Expression(mScrollX, [])    Expression(mScrollY, [])    Expression(0, [])    Expression(getScrollRange(), [])    Expression(0, [])    Expression(0), [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])])    VariableReference(mActivePointerId, [])    Expression(INVALID_POINTER, [])  AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])])    VariableReference(mIsBeingDragged, [])    Expression(false, [])  Statement(recycleVelocityTracker(), [])  Statement(if (shouldDisplayEdgeEffects()) {, [])  MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])])    VariableReference(mEdgeGlowLeft, [])    Expression(, [])  MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])])    VariableReference(mEdgeGlowRight, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case MotionEvent.ACTION_CANCEL:, [])  Statement(if (mIsBeingDragged && getChildCount() > 0) {, [])  MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])])    VariableReference(if (mScroller, [])    Expression(mScrollX, [])    Expression(mScrollY, [])    Expression(0, [])    Expression(getScrollRange(), [])    Expression(0, [])    Expression(0), [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])])    VariableReference(mActivePointerId, [])    Expression(INVALID_POINTER, [])  AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])])    VariableReference(mIsBeingDragged, [])    Expression(false, [])  Statement(recycleVelocityTracker(), [])  Statement(if (shouldDisplayEdgeEffects()) {, [])  MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])])    VariableReference(mEdgeGlowLeft, [])    Expression(, [])  MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])])    VariableReference(mEdgeGlowRight, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case MotionEvent.ACTION_POINTER_UP:, [])  Statement(onSecondaryPointerUp(ev), [])  Statement(break, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(initVelocityTrackerIfNotExists(), []), MethodCall(mVelocityTracker.addMovement(ev), [VariableReference(mVelocityTracker, []), Expression(ev, [])]), AssignmentExpression(=, [VariableReference(final int action, []), Expression(ev.getAction(), [])]), Statement(case MotionEvent.ACTION_DOWN:, []), Statement({, []), AssignmentExpression(=, [VariableReference(if (getChildCount(), []), Expression(, [])]), Statement(return false, []), Statement(}, []), MethodCall(if (!mScroller.isFinished()), [VariableReference(if (!mScroller, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])]), AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])]), MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(/*, []), Statement(* If being flinged and user touches, stop the fling. isFinished, []), Statement(* will be false if being flinged., []), Statement(*/, []), MethodCall(if (!mScroller.isFinished()), [VariableReference(if (!mScroller, []), Expression(), [])]), MethodCall(mScroller.abortAnimation(), [VariableReference(mScroller, []), Expression(, [])]), Statement(}, []), Statement(// Remember where the motion event started, []), AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression((int) ev.getX(), [])]), AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(ev.getPointerId(0), [])]), Statement(break, []), Statement(}, []), Statement(case MotionEvent.ACTION_MOVE:, []), AssignmentExpression(=, [VariableReference(final int activePointerIndex, []), Expression(ev.findPointerIndex(mActivePointerId), [])]), AssignmentExpression(=, [VariableReference(if (activePointerIndex, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Invalid pointerId, []), Expression("" + mActivePointerId + "" in onTouchEvent""), [])]), Statement(break, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int x, []), Expression((int) ev.getX(activePointerIndex), [])]), AssignmentExpression(=, [VariableReference(int deltaX, []), Expression(mLastMotionX - x, [])]), MethodCall(if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop), [VariableReference(if (!mIsBeingDragged && Math, []), Expression(deltaX) > mTouchSlop, [])]), AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])]), AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])]), MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(true, [])]), Statement(if (deltaX > 0) {, []), AssignmentExpression(=, [VariableReference(deltaX -, []), Expression(mTouchSlop, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(deltaX +, []), Expression(mTouchSlop, [])]), Statement(}, []), Statement(}, []), Statement(if (mIsBeingDragged) {, []), Statement(// Scroll to follow the motion event, []), AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression(x, [])]), AssignmentExpression(=, [VariableReference(final int oldX, []), Expression(mScrollX, [])]), AssignmentExpression(=, [VariableReference(final int range, []), Expression(getScrollRange(), [])]), AssignmentExpression(=, [VariableReference(final int overscrollMode, []), Expression(getOverScrollMode(), [])]), AssignmentExpression(=, [VariableReference(final boolean canOverscroll, []), Expression(overscrollMode, [])]), AssignmentExpression(=, [VariableReference(final float displacement, []), Expression(ev.getY(activePointerIndex) / getHeight(), [])]), Statement(if (canOverscroll) {, []), AssignmentExpression(=, [VariableReference(int consumed, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(if (deltaX < 0 && mEdgeGlowRight.getDistance() !, []), Expression(0f) {, [])]), AssignmentExpression(=, [VariableReference(consumed, []), Expression(Math.round(getWidth() * mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement)), [])]), AssignmentExpression(=, [VariableReference(} else if (deltaX > 0 && mEdgeGlowLeft.getDistance() !, []), Expression(0f) {, [])]), AssignmentExpression(=, [VariableReference(consumed, []), Expression(Math.round(-getWidth() * mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1 - displacement)), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(deltaX -, []), Expression(consumed, [])]), Statement(}, []), Statement(// Calling overScrollBy will call onOverScrolled, which, []), Statement(// calls onScrollChanged if applicable., []), Statement(overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true), []), AssignmentExpression(=, [VariableReference(if (canOverscroll && deltaX !, []), Expression(0f) {, [])]), AssignmentExpression(=, [VariableReference(final int pulledToX, []), Expression(oldX + deltaX, [])]), Statement(if (pulledToX < 0) {, []), MethodCall(mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1.f - displacement), [VariableReference(mEdgeGlowLeft, []), Expression((float) -deltaX / getWidth(), []), Expression(1.f - displacement, [])]), MethodCall(if (!mEdgeGlowRight.isFinished()), [VariableReference(if (!mEdgeGlowRight, []), Expression(), [])]), MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])]), Statement(}, []), Statement(} else if (pulledToX > range) {, []), MethodCall(mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement), [VariableReference(mEdgeGlowRight, []), Expression((float) deltaX / getWidth(), []), Expression(displacement, [])]), MethodCall(if (!mEdgeGlowLeft.isFinished()), [VariableReference(if (!mEdgeGlowLeft, []), Expression(), [])]), MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])]), Statement(}, []), Statement(}, []), MethodCall(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())), [VariableReference(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft, []), Expression() || !mEdgeGlowRight.isFinished()), [])]), Statement(postInvalidateOnAnimation(), []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case MotionEvent.ACTION_UP:, []), Statement(if (mIsBeingDragged) {, []), AssignmentExpression(=, [VariableReference(final VelocityTracker velocityTracker, []), Expression(mVelocityTracker, [])]), MethodCall(velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity), [VariableReference(velocityTracker, []), Expression(1000, []), Expression(mMaximumVelocity, [])]), AssignmentExpression(=, [VariableReference(int initialVelocity, []), Expression((int) velocityTracker.getXVelocity(mActivePointerId), [])]), Statement(if (getChildCount() > 0) {, []), MethodCall(if ((Math.abs(initialVelocity) > mMinimumVelocity)), [VariableReference(if ((Math, []), Expression(initialVelocity) > mMinimumVelocity), [])]), Statement(fling(-initialVelocity), []), Statement(} else {, []), MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])]), Statement(postInvalidateOnAnimation(), []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])]), AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])]), Statement(recycleVelocityTracker(), []), Statement(if (shouldDisplayEdgeEffects()) {, []), MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])]), MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case MotionEvent.ACTION_CANCEL:, []), Statement(if (mIsBeingDragged && getChildCount() > 0) {, []), MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])]), Statement(postInvalidateOnAnimation(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])]), AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])]), Statement(recycleVelocityTracker(), []), Statement(if (shouldDisplayEdgeEffects()) {, []), MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])]), MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case MotionEvent.ACTION_POINTER_UP:, []), Statement(onSecondaryPointerUp(ev), []), Statement(break, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(initVelocityTrackerIfNotExists(), [])  MethodCall(mVelocityTracker.addMovement(ev), [VariableReference(mVelocityTracker, []), Expression(ev, [])])    VariableReference(mVelocityTracker, [])    Expression(ev, [])  AssignmentExpression(=, [VariableReference(final int action, []), Expression(ev.getAction(), [])])    VariableReference(final int action, [])    Expression(ev.getAction(), [])  Statement(case MotionEvent.ACTION_DOWN:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (getChildCount(), []), Expression(, [])])    VariableReference(if (getChildCount(), [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  MethodCall(if (!mScroller.isFinished()), [VariableReference(if (!mScroller, []), Expression(), [])])    VariableReference(if (!mScroller, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])])    VariableReference(final ViewParent parent, [])    Expression(getParent(), [])  AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])])    VariableReference(if (parent !, [])    Expression(null) {, [])  MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])])    VariableReference(parent, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(/*, [])  Statement(* If being flinged and user touches, stop the fling. isFinished, [])  Statement(* will be false if being flinged., [])  Statement(*/, [])  MethodCall(if (!mScroller.isFinished()), [VariableReference(if (!mScroller, []), Expression(), [])])    VariableReference(if (!mScroller, [])    Expression(), [])  MethodCall(mScroller.abortAnimation(), [VariableReference(mScroller, []), Expression(, [])])    VariableReference(mScroller, [])    Expression(, [])  Statement(}, [])  Statement(// Remember where the motion event started, [])  AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression((int) ev.getX(), [])])    VariableReference(mLastMotionX, [])    Expression((int) ev.getX(), [])  AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(ev.getPointerId(0), [])])    VariableReference(mActivePointerId, [])    Expression(ev.getPointerId(0), [])  Statement(break, [])  Statement(}, [])  Statement(case MotionEvent.ACTION_MOVE:, [])  AssignmentExpression(=, [VariableReference(final int activePointerIndex, []), Expression(ev.findPointerIndex(mActivePointerId), [])])    VariableReference(final int activePointerIndex, [])    Expression(ev.findPointerIndex(mActivePointerId), [])  AssignmentExpression(=, [VariableReference(if (activePointerIndex, []), Expression(, [])])    VariableReference(if (activePointerIndex, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Invalid pointerId, []), Expression("" + mActivePointerId + "" in onTouchEvent""), [])])    VariableReference(Log.e(TAG, ""Invalid pointerId, [])    Expression("" + mActivePointerId + "" in onTouchEvent""), [])  Statement(break, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int x, []), Expression((int) ev.getX(activePointerIndex), [])])    VariableReference(final int x, [])    Expression((int) ev.getX(activePointerIndex), [])  AssignmentExpression(=, [VariableReference(int deltaX, []), Expression(mLastMotionX - x, [])])    VariableReference(int deltaX, [])    Expression(mLastMotionX - x, [])  MethodCall(if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop), [VariableReference(if (!mIsBeingDragged && Math, []), Expression(deltaX) > mTouchSlop, [])])    VariableReference(if (!mIsBeingDragged && Math, [])    Expression(deltaX) > mTouchSlop, [])  AssignmentExpression(=, [VariableReference(final ViewParent parent, []), Expression(getParent(), [])])    VariableReference(final ViewParent parent, [])    Expression(getParent(), [])  AssignmentExpression(=, [VariableReference(if (parent !, []), Expression(null) {, [])])    VariableReference(if (parent !, [])    Expression(null) {, [])  MethodCall(parent.requestDisallowInterceptTouchEvent(true), [VariableReference(parent, []), Expression(true, [])])    VariableReference(parent, [])    Expression(true, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(true, [])])    VariableReference(mIsBeingDragged, [])    Expression(true, [])  Statement(if (deltaX > 0) {, [])  AssignmentExpression(=, [VariableReference(deltaX -, []), Expression(mTouchSlop, [])])    VariableReference(deltaX -, [])    Expression(mTouchSlop, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(deltaX +, []), Expression(mTouchSlop, [])])    VariableReference(deltaX +, [])    Expression(mTouchSlop, [])  Statement(}, [])  Statement(}, [])  Statement(if (mIsBeingDragged) {, [])  Statement(// Scroll to follow the motion event, [])  AssignmentExpression(=, [VariableReference(mLastMotionX, []), Expression(x, [])])    VariableReference(mLastMotionX, [])    Expression(x, [])  AssignmentExpression(=, [VariableReference(final int oldX, []), Expression(mScrollX, [])])    VariableReference(final int oldX, [])    Expression(mScrollX, [])  AssignmentExpression(=, [VariableReference(final int range, []), Expression(getScrollRange(), [])])    VariableReference(final int range, [])    Expression(getScrollRange(), [])  AssignmentExpression(=, [VariableReference(final int overscrollMode, []), Expression(getOverScrollMode(), [])])    VariableReference(final int overscrollMode, [])    Expression(getOverScrollMode(), [])  AssignmentExpression(=, [VariableReference(final boolean canOverscroll, []), Expression(overscrollMode, [])])    VariableReference(final boolean canOverscroll, [])    Expression(overscrollMode, [])  AssignmentExpression(=, [VariableReference(final float displacement, []), Expression(ev.getY(activePointerIndex) / getHeight(), [])])    VariableReference(final float displacement, [])    Expression(ev.getY(activePointerIndex) / getHeight(), [])  Statement(if (canOverscroll) {, [])  AssignmentExpression(=, [VariableReference(int consumed, []), Expression(0, [])])    VariableReference(int consumed, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(if (deltaX < 0 && mEdgeGlowRight.getDistance() !, []), Expression(0f) {, [])])    VariableReference(if (deltaX < 0 && mEdgeGlowRight.getDistance() !, [])    Expression(0f) {, [])  AssignmentExpression(=, [VariableReference(consumed, []), Expression(Math.round(getWidth() * mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement)), [])])    VariableReference(consumed, [])    Expression(Math.round(getWidth() * mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement)), [])  AssignmentExpression(=, [VariableReference(} else if (deltaX > 0 && mEdgeGlowLeft.getDistance() !, []), Expression(0f) {, [])])    VariableReference(} else if (deltaX > 0 && mEdgeGlowLeft.getDistance() !, [])    Expression(0f) {, [])  AssignmentExpression(=, [VariableReference(consumed, []), Expression(Math.round(-getWidth() * mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1 - displacement)), [])])    VariableReference(consumed, [])    Expression(Math.round(-getWidth() * mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1 - displacement)), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(deltaX -, []), Expression(consumed, [])])    VariableReference(deltaX -, [])    Expression(consumed, [])  Statement(}, [])  Statement(// Calling overScrollBy will call onOverScrolled, which, [])  Statement(// calls onScrollChanged if applicable., [])  Statement(overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true), [])  AssignmentExpression(=, [VariableReference(if (canOverscroll && deltaX !, []), Expression(0f) {, [])])    VariableReference(if (canOverscroll && deltaX !, [])    Expression(0f) {, [])  AssignmentExpression(=, [VariableReference(final int pulledToX, []), Expression(oldX + deltaX, [])])    VariableReference(final int pulledToX, [])    Expression(oldX + deltaX, [])  Statement(if (pulledToX < 0) {, [])  MethodCall(mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1.f - displacement), [VariableReference(mEdgeGlowLeft, []), Expression((float) -deltaX / getWidth(), []), Expression(1.f - displacement, [])])    VariableReference(mEdgeGlowLeft, [])    Expression((float) -deltaX / getWidth(), [])    Expression(1.f - displacement, [])  MethodCall(if (!mEdgeGlowRight.isFinished()), [VariableReference(if (!mEdgeGlowRight, []), Expression(), [])])    VariableReference(if (!mEdgeGlowRight, [])    Expression(), [])  MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])])    VariableReference(mEdgeGlowRight, [])    Expression(, [])  Statement(}, [])  Statement(} else if (pulledToX > range) {, [])  MethodCall(mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement), [VariableReference(mEdgeGlowRight, []), Expression((float) deltaX / getWidth(), []), Expression(displacement, [])])    VariableReference(mEdgeGlowRight, [])    Expression((float) deltaX / getWidth(), [])    Expression(displacement, [])  MethodCall(if (!mEdgeGlowLeft.isFinished()), [VariableReference(if (!mEdgeGlowLeft, []), Expression(), [])])    VariableReference(if (!mEdgeGlowLeft, [])    Expression(), [])  MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])])    VariableReference(mEdgeGlowLeft, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())), [VariableReference(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft, []), Expression() || !mEdgeGlowRight.isFinished()), [])])    VariableReference(if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft, [])    Expression() || !mEdgeGlowRight.isFinished()), [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case MotionEvent.ACTION_UP:, [])  Statement(if (mIsBeingDragged) {, [])  AssignmentExpression(=, [VariableReference(final VelocityTracker velocityTracker, []), Expression(mVelocityTracker, [])])    VariableReference(final VelocityTracker velocityTracker, [])    Expression(mVelocityTracker, [])  MethodCall(velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity), [VariableReference(velocityTracker, []), Expression(1000, []), Expression(mMaximumVelocity, [])])    VariableReference(velocityTracker, [])    Expression(1000, [])    Expression(mMaximumVelocity, [])  AssignmentExpression(=, [VariableReference(int initialVelocity, []), Expression((int) velocityTracker.getXVelocity(mActivePointerId), [])])    VariableReference(int initialVelocity, [])    Expression((int) velocityTracker.getXVelocity(mActivePointerId), [])  Statement(if (getChildCount() > 0) {, [])  MethodCall(if ((Math.abs(initialVelocity) > mMinimumVelocity)), [VariableReference(if ((Math, []), Expression(initialVelocity) > mMinimumVelocity), [])])    VariableReference(if ((Math, [])    Expression(initialVelocity) > mMinimumVelocity), [])  Statement(fling(-initialVelocity), [])  Statement(} else {, [])  MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])])    VariableReference(if (mScroller, [])    Expression(mScrollX, [])    Expression(mScrollY, [])    Expression(0, [])    Expression(getScrollRange(), [])    Expression(0, [])    Expression(0), [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])])    VariableReference(mActivePointerId, [])    Expression(INVALID_POINTER, [])  AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])])    VariableReference(mIsBeingDragged, [])    Expression(false, [])  Statement(recycleVelocityTracker(), [])  Statement(if (shouldDisplayEdgeEffects()) {, [])  MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])])    VariableReference(mEdgeGlowLeft, [])    Expression(, [])  MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])])    VariableReference(mEdgeGlowRight, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case MotionEvent.ACTION_CANCEL:, [])  Statement(if (mIsBeingDragged && getChildCount() > 0) {, [])  MethodCall(if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)), [VariableReference(if (mScroller, []), Expression(mScrollX, []), Expression(mScrollY, []), Expression(0, []), Expression(getScrollRange(), []), Expression(0, []), Expression(0), [])])    VariableReference(if (mScroller, [])    Expression(mScrollX, [])    Expression(mScrollY, [])    Expression(0, [])    Expression(getScrollRange(), [])    Expression(0, [])    Expression(0), [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mActivePointerId, []), Expression(INVALID_POINTER, [])])    VariableReference(mActivePointerId, [])    Expression(INVALID_POINTER, [])  AssignmentExpression(=, [VariableReference(mIsBeingDragged, []), Expression(false, [])])    VariableReference(mIsBeingDragged, [])    Expression(false, [])  Statement(recycleVelocityTracker(), [])  Statement(if (shouldDisplayEdgeEffects()) {, [])  MethodCall(mEdgeGlowLeft.onRelease(), [VariableReference(mEdgeGlowLeft, []), Expression(, [])])    VariableReference(mEdgeGlowLeft, [])    Expression(, [])  MethodCall(mEdgeGlowRight.onRelease(), [VariableReference(mEdgeGlowRight, []), Expression(, [])])    VariableReference(mEdgeGlowRight, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case MotionEvent.ACTION_POINTER_UP:, [])  Statement(onSecondaryPointerUp(ev), [])  Statement(break, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",0,3,1,"The actions and conditions within the `ACTION_DOWN`, `ACTION_MOVE` cases and the logic for handling `EdgeGlow` effects within the `while` loop have changed. Specifically, new calculations and method calls related to `EdgeGlow` handling have been integrated, so the code change type is 3.","Since the control dependency changes within the `onTouchEvent` method potentially alter the scroll and touch event outcomes, they could result in different return values (behavior) when handling touch events. Therefore, the CI type is 1."
<android.view.textclassifier.TextClassificationSession: TextLanguage detectLanguage(Request)>,30,31,,,,"{
    checkDestroyed();
    return mDelegate.detectLanguage(request);
}","{
    return checkDestroyedAndRun(() -> mDelegate.detectLanguage(request));
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkDestroyed(), []), MethodCall(return mDelegate.detectLanguage(request), [VariableReference(return mDelegate, []), Expression(request, [])]), Statement(}, [])])  Statement({, [])  Statement(checkDestroyed(), [])  MethodCall(return mDelegate.detectLanguage(request), [VariableReference(return mDelegate, []), Expression(request, [])])    VariableReference(return mDelegate, [])    Expression(request, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return checkDestroyedAndRun(() -> mDelegate.detectLanguage(request)), [VariableReference(return checkDestroyedAndRun(() -> mDelegate, []), Expression(request), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return checkDestroyedAndRun(() -> mDelegate.detectLanguage(request)), [VariableReference(return checkDestroyedAndRun(() -> mDelegate, []), Expression(request), [])])    VariableReference(return checkDestroyedAndRun(() -> mDelegate, [])    Expression(request), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,2,"1,5",1,5,1,"The method `checkDestroyed` in the early version has been replaced with `checkDestroyedAndRun` in the late version, resulting in a dependent API change. The code change type is 5.","The dependent API change potentially affects the behaviour of the method `detectLanguage`. This could lead to different return values or types, and therefore, the CI type is 1."
<android.inputmethodservice.InputMethodService: void requestShowSelf(int)>,30,31,,,,"{
    mPrivOps.showMySoftInput(flags);
}","{
    ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null);
    mPrivOps.showMySoftInput(flags);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mPrivOps.showMySoftInput(flags), [VariableReference(mPrivOps, []), Expression(flags, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mPrivOps.showMySoftInput(flags), [VariableReference(mPrivOps, []), Expression(flags, [])])    VariableReference(mPrivOps, [])    Expression(flags, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null), [VariableReference(ImeTracing, []), Expression().triggerServiceDump(""InputMethodService#requestShowSelf"", []), Expression(this, []), Expression(null, [])]), MethodCall(mPrivOps.showMySoftInput(flags), [VariableReference(mPrivOps, []), Expression(flags, [])]), Statement(}, [])])  Statement({, [])  MethodCall(ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null), [VariableReference(ImeTracing, []), Expression().triggerServiceDump(""InputMethodService#requestShowSelf"", []), Expression(this, []), Expression(null, [])])    VariableReference(ImeTracing, [])    Expression().triggerServiceDump(""InputMethodService#requestShowSelf"", [])    Expression(this, [])    Expression(null, [])  MethodCall(mPrivOps.showMySoftInput(flags), [VariableReference(mPrivOps, []), Expression(flags, [])])    VariableReference(mPrivOps, [])    Expression(flags, [])  Statement(}, [])",1,"/**
 * Show the input method's soft input area, so the user sees the input method window and can
 * interact with it.
 *
 * @see InputMethodManager#SHOW_IMPLICIT
 * @see InputMethodManager#SHOW_FORCED
 * @param flags Provides additional operating flags.
 */
","/**
 * Show the input method's soft input area, so the user sees the input method window and can
 * interact with it.
 *
 * @see InputMethodManager#SHOW_IMPLICIT
 * @see InputMethodManager#SHOW_FORCED
 * @param flags Provides additional operating flags.
 */
",0,,,0,,,,"1,2",4,0,4,0,"A new method call `ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null)` has been added before the existing method call `mPrivOps.showMySoftInput(flags)`. This change falls under category 4 (Other statement changed).","The addition of the method call `ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null)` does not affect the return value or the exception handling of the method. Therefore, there is no compatibility issue."
<android.app.LoadedApk.ReceiverDispatcher.Args: Runnable getRunnable()>,30,31,,,,"{
    return () -> {
        final BroadcastReceiver receiver = mReceiver;
        final boolean ordered = mOrdered;
        if (ActivityThread.DEBUG_BROADCAST) {
            int seq = mCurIntent.getIntExtra(""seq"", -1);
            Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq="" + seq + "" to "" + mReceiver);
            Slog.i(ActivityThread.TAG, ""  mRegistered="" + mRegistered + "" mOrderedHint="" + ordered);
        }
        final IActivityManager mgr = ActivityManager.getService();
        final Intent intent = mCurIntent;
        if (intent == null) {
            Log.wtf(TAG, ""Null intent being dispatched, mDispatched="" + mDispatched + (mRunCalled ? "", run() has already been called"" : """"));
        }
        mCurIntent = null;
        mDispatched = true;
        mRunCalled = true;
        if (receiver == null || intent == null || mForgotten) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            return;
        }
        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg"");
        try {
            ClassLoader cl = mReceiver.getClass().getClassLoader();
            intent.setExtrasClassLoader(cl);
            intent.prepareToEnterProcess();
            setExtrasClassLoader(cl);
            receiver.setPendingResult(this);
            receiver.onReceive(mContext, intent);
        } catch (Exception e) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            if (mInstrumentation == null || !mInstrumentation.onException(mReceiver, e)) {
                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
                throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e);
            }
        }
        if (receiver.getPendingResult() != null) {
            finish();
        }
        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
    };
}","{
    return () -> {
        final BroadcastReceiver receiver = mReceiver;
        final boolean ordered = mOrdered;
        if (ActivityThread.DEBUG_BROADCAST) {
            int seq = mCurIntent.getIntExtra(""seq"", -1);
            Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq="" + seq + "" to "" + mReceiver);
            Slog.i(ActivityThread.TAG, ""  mRegistered="" + mRegistered + "" mOrderedHint="" + ordered);
        }
        final IActivityManager mgr = ActivityManager.getService();
        final Intent intent = mCurIntent;
        if (intent == null) {
            Log.wtf(TAG, ""Null intent being dispatched, mDispatched="" + mDispatched + (mRunCalled ? "", run() has already been called"" : """"));
        }
        mCurIntent = null;
        mDispatched = true;
        mRunCalled = true;
        if (receiver == null || intent == null || mForgotten) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            return;
        }
        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg"");
        try {
            ClassLoader cl = mReceiver.getClass().getClassLoader();
            intent.setExtrasClassLoader(cl);
            // TODO: determine at registration time if caller is
            // protecting themselves with signature permission
            intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent), mContext.getAttributionSource());
            setExtrasClassLoader(cl);
            receiver.setPendingResult(this);
            receiver.onReceive(mContext, intent);
        } catch (Exception e) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            if (mInstrumentation == null || !mInstrumentation.onException(mReceiver, e)) {
                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
                throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e);
            }
        }
        if (receiver.getPendingResult() != null) {
            finish();
        }
        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
    };
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return () -> {, []), AssignmentExpression(=, [VariableReference(final BroadcastReceiver receiver, []), Expression(mReceiver, [])]), AssignmentExpression(=, [VariableReference(final boolean ordered, []), Expression(mOrdered, [])]), AssignmentExpression(=, [VariableReference(int seq, []), Expression(mCurIntent.getIntExtra(""seq"", -1), [])]), AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq, []), Expression("" + seq + "" to "" + mReceiver), [])]), AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""  mRegistered, []), Expression("" + mRegistered + "" mOrderedHint, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final IActivityManager mgr, []), Expression(ActivityManager.getService(), [])]), AssignmentExpression(=, [VariableReference(final Intent intent, []), Expression(mCurIntent, [])]), AssignmentExpression(=, [VariableReference(if (intent, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(Log.wtf(TAG, ""Null intent being dispatched, mDispatched, []), Expression("" + mDispatched + (mRunCalled ? "", run() has already been called"" : """")), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mCurIntent, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mDispatched, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mRunCalled, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(if (receiver, []), Expression(, [])]), Statement(if (mRegistered && ordered) {, []), MethodCall(Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing null broadcast to "" + mReceiver, [])]), Statement(sendFinished(mgr), []), Statement(}, []), Statement(return, []), Statement(}, []), MethodCall(Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg""), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, []), Expression(""broadcastReceiveReg"", [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(ClassLoader cl, []), Expression(mReceiver.getClass().getClassLoader(), [])]), MethodCall(intent.setExtrasClassLoader(cl), [VariableReference(intent, []), Expression(cl, [])]), MethodCall(intent.prepareToEnterProcess(), [VariableReference(intent, []), Expression(, [])]), Statement(setExtrasClassLoader(cl), []), MethodCall(receiver.setPendingResult(this), [VariableReference(receiver, []), Expression(this, [])]), MethodCall(receiver.onReceive(mContext, intent), [VariableReference(receiver, []), Expression(mContext, []), Expression(intent, [])]), Statement(} catch (Exception e) {, []), Statement(if (mRegistered && ordered) {, []), MethodCall(Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing failed broadcast to "" + mReceiver, [])]), Statement(sendFinished(mgr), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mInstrumentation, []), Expression(, [])]), MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])]), Statement(throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e), []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (receiver.getPendingResult() !, []), Expression(null) {, [])]), Statement(finish(), []), Statement(}, []), MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(return () -> {, [])  AssignmentExpression(=, [VariableReference(final BroadcastReceiver receiver, []), Expression(mReceiver, [])])    VariableReference(final BroadcastReceiver receiver, [])    Expression(mReceiver, [])  AssignmentExpression(=, [VariableReference(final boolean ordered, []), Expression(mOrdered, [])])    VariableReference(final boolean ordered, [])    Expression(mOrdered, [])  AssignmentExpression(=, [VariableReference(int seq, []), Expression(mCurIntent.getIntExtra(""seq"", -1), [])])    VariableReference(int seq, [])    Expression(mCurIntent.getIntExtra(""seq"", -1), [])  AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq, []), Expression("" + seq + "" to "" + mReceiver), [])])    VariableReference(Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq, [])    Expression("" + seq + "" to "" + mReceiver), [])  AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""  mRegistered, []), Expression("" + mRegistered + "" mOrderedHint, [])])    VariableReference(Slog.i(ActivityThread.TAG, ""  mRegistered, [])    Expression("" + mRegistered + "" mOrderedHint, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final IActivityManager mgr, []), Expression(ActivityManager.getService(), [])])    VariableReference(final IActivityManager mgr, [])    Expression(ActivityManager.getService(), [])  AssignmentExpression(=, [VariableReference(final Intent intent, []), Expression(mCurIntent, [])])    VariableReference(final Intent intent, [])    Expression(mCurIntent, [])  AssignmentExpression(=, [VariableReference(if (intent, []), Expression(, [])])    VariableReference(if (intent, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(Log.wtf(TAG, ""Null intent being dispatched, mDispatched, []), Expression("" + mDispatched + (mRunCalled ? "", run() has already been called"" : """")), [])])    VariableReference(Log.wtf(TAG, ""Null intent being dispatched, mDispatched, [])    Expression("" + mDispatched + (mRunCalled ? "", run() has already been called"" : """")), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mCurIntent, []), Expression(null, [])])    VariableReference(mCurIntent, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mDispatched, []), Expression(true, [])])    VariableReference(mDispatched, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mRunCalled, []), Expression(true, [])])    VariableReference(mRunCalled, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(if (receiver, []), Expression(, [])])    VariableReference(if (receiver, [])    Expression(, [])  Statement(if (mRegistered && ordered) {, [])  MethodCall(Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing null broadcast to "" + mReceiver, [])])    VariableReference(Slog, [])    Expression(ActivityThread.TAG, [])    Expression(""Finishing null broadcast to "" + mReceiver, [])  Statement(sendFinished(mgr), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  MethodCall(Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg""), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, []), Expression(""broadcastReceiveReg"", [])])    VariableReference(Trace, [])    Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])    Expression(""broadcastReceiveReg"", [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(ClassLoader cl, []), Expression(mReceiver.getClass().getClassLoader(), [])])    VariableReference(ClassLoader cl, [])    Expression(mReceiver.getClass().getClassLoader(), [])  MethodCall(intent.setExtrasClassLoader(cl), [VariableReference(intent, []), Expression(cl, [])])    VariableReference(intent, [])    Expression(cl, [])  MethodCall(intent.prepareToEnterProcess(), [VariableReference(intent, []), Expression(, [])])    VariableReference(intent, [])    Expression(, [])  Statement(setExtrasClassLoader(cl), [])  MethodCall(receiver.setPendingResult(this), [VariableReference(receiver, []), Expression(this, [])])    VariableReference(receiver, [])    Expression(this, [])  MethodCall(receiver.onReceive(mContext, intent), [VariableReference(receiver, []), Expression(mContext, []), Expression(intent, [])])    VariableReference(receiver, [])    Expression(mContext, [])    Expression(intent, [])  Statement(} catch (Exception e) {, [])  Statement(if (mRegistered && ordered) {, [])  MethodCall(Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing failed broadcast to "" + mReceiver, [])])    VariableReference(Slog, [])    Expression(ActivityThread.TAG, [])    Expression(""Finishing failed broadcast to "" + mReceiver, [])  Statement(sendFinished(mgr), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mInstrumentation, []), Expression(, [])])    VariableReference(if (mInstrumentation, [])    Expression(, [])  MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])])    VariableReference(Trace, [])    Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])  Statement(throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (receiver.getPendingResult() !, []), Expression(null) {, [])])    VariableReference(if (receiver.getPendingResult() !, [])    Expression(null) {, [])  Statement(finish(), [])  Statement(}, [])  MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])])    VariableReference(Trace, [])    Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return () -> {, []), AssignmentExpression(=, [VariableReference(final BroadcastReceiver receiver, []), Expression(mReceiver, [])]), AssignmentExpression(=, [VariableReference(final boolean ordered, []), Expression(mOrdered, [])]), AssignmentExpression(=, [VariableReference(int seq, []), Expression(mCurIntent.getIntExtra(""seq"", -1), [])]), AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq, []), Expression("" + seq + "" to "" + mReceiver), [])]), AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""  mRegistered, []), Expression("" + mRegistered + "" mOrderedHint, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final IActivityManager mgr, []), Expression(ActivityManager.getService(), [])]), AssignmentExpression(=, [VariableReference(final Intent intent, []), Expression(mCurIntent, [])]), AssignmentExpression(=, [VariableReference(if (intent, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(Log.wtf(TAG, ""Null intent being dispatched, mDispatched, []), Expression("" + mDispatched + (mRunCalled ? "", run() has already been called"" : """")), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mCurIntent, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mDispatched, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mRunCalled, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(if (receiver, []), Expression(, [])]), Statement(if (mRegistered && ordered) {, []), MethodCall(Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing null broadcast to "" + mReceiver, [])]), Statement(sendFinished(mgr), []), Statement(}, []), Statement(return, []), Statement(}, []), MethodCall(Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg""), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, []), Expression(""broadcastReceiveReg"", [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(ClassLoader cl, []), Expression(mReceiver.getClass().getClassLoader(), [])]), MethodCall(intent.setExtrasClassLoader(cl), [VariableReference(intent, []), Expression(cl, [])]), Statement(// TODO: determine at registration time if caller is, []), Statement(// protecting themselves with signature permission, []), MethodCall(intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent), mContext.getAttributionSource()), [VariableReference(intent, []), Expression(ActivityThread.isProtectedBroadcast(intent), []), Expression(mContext.getAttributionSource(), [])]), Statement(setExtrasClassLoader(cl), []), MethodCall(receiver.setPendingResult(this), [VariableReference(receiver, []), Expression(this, [])]), MethodCall(receiver.onReceive(mContext, intent), [VariableReference(receiver, []), Expression(mContext, []), Expression(intent, [])]), Statement(} catch (Exception e) {, []), Statement(if (mRegistered && ordered) {, []), MethodCall(Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing failed broadcast to "" + mReceiver, [])]), Statement(sendFinished(mgr), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mInstrumentation, []), Expression(, [])]), MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])]), Statement(throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e), []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (receiver.getPendingResult() !, []), Expression(null) {, [])]), Statement(finish(), []), Statement(}, []), MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(return () -> {, [])  AssignmentExpression(=, [VariableReference(final BroadcastReceiver receiver, []), Expression(mReceiver, [])])    VariableReference(final BroadcastReceiver receiver, [])    Expression(mReceiver, [])  AssignmentExpression(=, [VariableReference(final boolean ordered, []), Expression(mOrdered, [])])    VariableReference(final boolean ordered, [])    Expression(mOrdered, [])  AssignmentExpression(=, [VariableReference(int seq, []), Expression(mCurIntent.getIntExtra(""seq"", -1), [])])    VariableReference(int seq, [])    Expression(mCurIntent.getIntExtra(""seq"", -1), [])  AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq, []), Expression("" + seq + "" to "" + mReceiver), [])])    VariableReference(Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq, [])    Expression("" + seq + "" to "" + mReceiver), [])  AssignmentExpression(=, [VariableReference(Slog.i(ActivityThread.TAG, ""  mRegistered, []), Expression("" + mRegistered + "" mOrderedHint, [])])    VariableReference(Slog.i(ActivityThread.TAG, ""  mRegistered, [])    Expression("" + mRegistered + "" mOrderedHint, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final IActivityManager mgr, []), Expression(ActivityManager.getService(), [])])    VariableReference(final IActivityManager mgr, [])    Expression(ActivityManager.getService(), [])  AssignmentExpression(=, [VariableReference(final Intent intent, []), Expression(mCurIntent, [])])    VariableReference(final Intent intent, [])    Expression(mCurIntent, [])  AssignmentExpression(=, [VariableReference(if (intent, []), Expression(, [])])    VariableReference(if (intent, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(Log.wtf(TAG, ""Null intent being dispatched, mDispatched, []), Expression("" + mDispatched + (mRunCalled ? "", run() has already been called"" : """")), [])])    VariableReference(Log.wtf(TAG, ""Null intent being dispatched, mDispatched, [])    Expression("" + mDispatched + (mRunCalled ? "", run() has already been called"" : """")), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mCurIntent, []), Expression(null, [])])    VariableReference(mCurIntent, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mDispatched, []), Expression(true, [])])    VariableReference(mDispatched, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mRunCalled, []), Expression(true, [])])    VariableReference(mRunCalled, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(if (receiver, []), Expression(, [])])    VariableReference(if (receiver, [])    Expression(, [])  Statement(if (mRegistered && ordered) {, [])  MethodCall(Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing null broadcast to "" + mReceiver, [])])    VariableReference(Slog, [])    Expression(ActivityThread.TAG, [])    Expression(""Finishing null broadcast to "" + mReceiver, [])  Statement(sendFinished(mgr), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  MethodCall(Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg""), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, []), Expression(""broadcastReceiveReg"", [])])    VariableReference(Trace, [])    Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])    Expression(""broadcastReceiveReg"", [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(ClassLoader cl, []), Expression(mReceiver.getClass().getClassLoader(), [])])    VariableReference(ClassLoader cl, [])    Expression(mReceiver.getClass().getClassLoader(), [])  MethodCall(intent.setExtrasClassLoader(cl), [VariableReference(intent, []), Expression(cl, [])])    VariableReference(intent, [])    Expression(cl, [])  Statement(// TODO: determine at registration time if caller is, [])  Statement(// protecting themselves with signature permission, [])  MethodCall(intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent), mContext.getAttributionSource()), [VariableReference(intent, []), Expression(ActivityThread.isProtectedBroadcast(intent), []), Expression(mContext.getAttributionSource(), [])])    VariableReference(intent, [])    Expression(ActivityThread.isProtectedBroadcast(intent), [])    Expression(mContext.getAttributionSource(), [])  Statement(setExtrasClassLoader(cl), [])  MethodCall(receiver.setPendingResult(this), [VariableReference(receiver, []), Expression(this, [])])    VariableReference(receiver, [])    Expression(this, [])  MethodCall(receiver.onReceive(mContext, intent), [VariableReference(receiver, []), Expression(mContext, []), Expression(intent, [])])    VariableReference(receiver, [])    Expression(mContext, [])    Expression(intent, [])  Statement(} catch (Exception e) {, [])  Statement(if (mRegistered && ordered) {, [])  MethodCall(Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver), [VariableReference(Slog, []), Expression(ActivityThread.TAG, []), Expression(""Finishing failed broadcast to "" + mReceiver, [])])    VariableReference(Slog, [])    Expression(ActivityThread.TAG, [])    Expression(""Finishing failed broadcast to "" + mReceiver, [])  Statement(sendFinished(mgr), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mInstrumentation, []), Expression(, [])])    VariableReference(if (mInstrumentation, [])    Expression(, [])  MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])])    VariableReference(Trace, [])    Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])  Statement(throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (receiver.getPendingResult() !, []), Expression(null) {, [])])    VariableReference(if (receiver.getPendingResult() !, [])    Expression(null) {, [])  Statement(finish(), [])  Statement(}, [])  MethodCall(Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER), [VariableReference(Trace, []), Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])])    VariableReference(Trace, [])    Expression(Trace.TRACE_TAG_ACTIVITY_MANAGER, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,2,5,0,"3,4",0,"The late version introduces a call to `intent.prepareToEnterProcess()` method with additional parameters, specifically `ActivityThread.isProtectedBroadcast(intent)` and `mContext.getAttributionSource()`, and two TODO comments. This affects the behaviour under the control dependency.","Although the control dependency statement has changed, the expected return value remains the same (a Runnable instance). The gathered changing internals in the `Runnable` does not indicate any difference in return values or exceptions directly, so no CI is detected in this scenario. Therefore, the CI type is 0."
<android.app.admin.DevicePolicyManager: DevicePolicyManager getParentProfileInstance(ComponentName)>,30,31,,,,"{
    throwIfParentInstance(""getParentProfileInstance"");
    try {
        if (!mService.isManagedProfile(admin)) {
            throw new SecurityException(""The current user does not have a parent profile."");
        }
        return new DevicePolicyManager(mContext, mService, true);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""getParentProfileInstance"");
    try {
        if (!mService.isManagedProfile(admin)) {
            throw new SecurityException(""The current user does not have a parent profile."");
        }
        return new DevicePolicyManager(mContext, mService, true);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getParentProfileInstance""), []), Statement(try {, []), MethodCall(if (!mService.isManagedProfile(admin)), [VariableReference(if (!mService, []), Expression(admin), [])]), Statement(}, []), Statement(return new DevicePolicyManager(mContext, mService, true), []), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getParentProfileInstance""), [])  Statement(try {, [])  MethodCall(if (!mService.isManagedProfile(admin)), [VariableReference(if (!mService, []), Expression(admin), [])])    VariableReference(if (!mService, [])    Expression(admin), [])  Statement(}, [])  Statement(return new DevicePolicyManager(mContext, mService, true), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getParentProfileInstance""), []), Statement(try {, []), MethodCall(if (!mService.isManagedProfile(admin)), [VariableReference(if (!mService, []), Expression(admin), [])]), Statement(}, []), Statement(return new DevicePolicyManager(mContext, mService, true), []), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getParentProfileInstance""), [])  Statement(try {, [])  MethodCall(if (!mService.isManagedProfile(admin)), [VariableReference(if (!mService, []), Expression(admin), [])])    VariableReference(if (!mService, [])    Expression(admin), [])  Statement(}, [])  Statement(return new DevicePolicyManager(mContext, mService, true), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Called by the profile owner of a managed profile to obtain a {@link DevicePolicyManager}
 * whose calls act on the parent profile.
 *
 * <p>The following methods are supported for the parent instance, all other methods will
 * throw a SecurityException when called on the parent instance:
 * <ul>
 * <li>{@link #getPasswordQuality}</li>
 * <li>{@link #setPasswordQuality}</li>
 * <li>{@link #getPasswordMinimumLength}</li>
 * <li>{@link #setPasswordMinimumLength}</li>
 * <li>{@link #getPasswordMinimumUpperCase}</li>
 * <li>{@link #setPasswordMinimumUpperCase}</li>
 * <li>{@link #getPasswordMinimumLowerCase}</li>
 * <li>{@link #setPasswordMinimumLowerCase}</li>
 * <li>{@link #getPasswordMinimumLetters}</li>
 * <li>{@link #setPasswordMinimumLetters}</li>
 * <li>{@link #getPasswordMinimumNumeric}</li>
 * <li>{@link #setPasswordMinimumNumeric}</li>
 * <li>{@link #getPasswordMinimumSymbols}</li>
 * <li>{@link #setPasswordMinimumSymbols}</li>
 * <li>{@link #getPasswordMinimumNonLetter}</li>
 * <li>{@link #setPasswordMinimumNonLetter}</li>
 * <li>{@link #getPasswordHistoryLength}</li>
 * <li>{@link #setPasswordHistoryLength}</li>
 * <li>{@link #getPasswordExpirationTimeout}</li>
 * <li>{@link #setPasswordExpirationTimeout}</li>
 * <li>{@link #getPasswordExpiration}</li>
 * <li>{@link #getPasswordMaximumLength}</li>
 * <li>{@link #isActivePasswordSufficient}</li>
 * <li>{@link #getCurrentFailedPasswordAttempts}</li>
 * <li>{@link #getMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #setMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #getMaximumTimeToLock}</li>
 * <li>{@link #setMaximumTimeToLock}</li>
 * <li>{@link #lockNow}</li>
 * <li>{@link #getKeyguardDisabledFeatures}</li>
 * <li>{@link #setKeyguardDisabledFeatures}</li>
 * <li>{@link #getTrustAgentConfiguration}</li>
 * <li>{@link #setTrustAgentConfiguration}</li>
 * <li>{@link #getRequiredStrongAuthTimeout}</li>
 * <li>{@link #setRequiredStrongAuthTimeout}</li>
 * <li>{@link #getAccountTypesWithManagementDisabled}</li>
 * </ul>
 * <p>
 * The following methods are supported for the parent instance but can only be called by the
 * profile owner of a managed profile that was created during the device provisioning flow:
 * <ul>
 * <li>{@link #getPasswordComplexity}</li>
 * <li>{@link #setCameraDisabled}</li>
 * <li>{@link #getCameraDisabled}</li>
 * <li>{@link #setAccountManagementDisabled(ComponentName, String, boolean)}</li>
 * </ul>
 *
 * <p>The following methods can be called by the profile owner of a managed profile
 * on an organization-owned device:
 * <ul>
 * <li>{@link #wipeData}</li>
 * </ul>
 *
 * @return a new instance of {@link DevicePolicyManager} that acts on the parent profile.
 * @throws SecurityException if {@code admin} is not a profile owner.
 */
","/**
 * Called by the profile owner of a managed profile to obtain a {@link DevicePolicyManager}
 * whose calls act on the parent profile.
 *
 * <p>The following methods are supported for the parent instance, all other methods will
 * throw a SecurityException when called on the parent instance:
 * <ul>
 * <li>{@link #getPasswordQuality}</li>
 * <li>{@link #setPasswordQuality}</li>
 * <li>{@link #getPasswordMinimumLength}</li>
 * <li>{@link #setPasswordMinimumLength}</li>
 * <li>{@link #getPasswordMinimumUpperCase}</li>
 * <li>{@link #setPasswordMinimumUpperCase}</li>
 * <li>{@link #getPasswordMinimumLowerCase}</li>
 * <li>{@link #setPasswordMinimumLowerCase}</li>
 * <li>{@link #getPasswordMinimumLetters}</li>
 * <li>{@link #setPasswordMinimumLetters}</li>
 * <li>{@link #getPasswordMinimumNumeric}</li>
 * <li>{@link #setPasswordMinimumNumeric}</li>
 * <li>{@link #getPasswordMinimumSymbols}</li>
 * <li>{@link #setPasswordMinimumSymbols}</li>
 * <li>{@link #getPasswordMinimumNonLetter}</li>
 * <li>{@link #setPasswordMinimumNonLetter}</li>
 * <li>{@link #getPasswordHistoryLength}</li>
 * <li>{@link #setPasswordHistoryLength}</li>
 * <li>{@link #getPasswordExpirationTimeout}</li>
 * <li>{@link #setPasswordExpirationTimeout}</li>
 * <li>{@link #getPasswordExpiration}</li>
 * <li>{@link #getPasswordMaximumLength}</li>
 * <li>{@link #isActivePasswordSufficient}</li>
 * <li>{@link #getCurrentFailedPasswordAttempts}</li>
 * <li>{@link #getMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #setMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #getMaximumTimeToLock}</li>
 * <li>{@link #setMaximumTimeToLock}</li>
 * <li>{@link #lockNow}</li>
 * <li>{@link #getKeyguardDisabledFeatures}</li>
 * <li>{@link #setKeyguardDisabledFeatures}</li>
 * <li>{@link #getTrustAgentConfiguration}</li>
 * <li>{@link #setTrustAgentConfiguration}</li>
 * <li>{@link #getRequiredStrongAuthTimeout}</li>
 * <li>{@link #setRequiredStrongAuthTimeout}</li>
 * <li>{@link #getAccountTypesWithManagementDisabled}</li>
 * <li>{@link #setRequiredPasswordComplexity(int)} </li>
 * <li>{@link #getRequiredPasswordComplexity()}</li>
 * </ul>
 * <p>
 * The following methods are supported for the parent instance but can only be called by the
 * profile owner of a managed profile that was created during the device provisioning flow:
 * <ul>
 * <li>{@link #getPasswordComplexity}</li>
 * <li>{@link #setCameraDisabled}</li>
 * <li>{@link #getCameraDisabled}</li>
 * <li>{@link #setAccountManagementDisabled(ComponentName, String, boolean)}</li>
 * <li>{@link #setPermittedInputMethods}</li>
 * <li>{@link #getPermittedInputMethods}</li>
 * </ul>
 *
 * <p>The following methods can be called by the profile owner of a managed profile
 * on an organization-owned device:
 * <ul>
 * <li>{@link #wipeData}</li>
 * </ul>
 *
 * @return a new instance of {@link DevicePolicyManager} that acts on the parent profile.
 * @throws SecurityException if {@code admin} is not a profile owner.
 */
",1,[@NonNull],[@NonNull],0,,,,0,0,0,0,0,There is no change in the code implementation between the early and late versions.,"Since there are no changes in the code implementation, there are no compatibility issues."
"<android.app.backup.BackupAgent.BackupServiceBinder: void doFullBackup(ParcelFileDescriptor,long,int,IBackupManager,int)>",30,31,,,,"{
    // Ensure that we're running with the app's normal permission level
    long ident = Binder.clearCallingIdentity();
    if (DEBUG)
        Log.v(TAG, ""doFullBackup() invoked"");
    // Ensure that any SharedPreferences writes have landed *before*
    // we potentially try to back up the underlying files directly.
    waitForSharedPrefs();
    try {
        BackupAgent.this.onFullBackup(new FullBackupDataOutput(data, quotaBytes, transportFlags));
    } catch (IOException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw new RuntimeException(ex);
    } catch (RuntimeException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw ex;
    } finally {
        // ... and then again after, as in the doBackup() case
        waitForSharedPrefs();
        // forthcoming from this agent.
        try {
            FileOutputStream out = new FileOutputStream(data.getFileDescriptor());
            byte[] buf = new byte[4];
            out.write(buf);
        } catch (IOException e) {
            Log.e(TAG, ""Unable to finalize backup stream!"");
        }
        Binder.restoreCallingIdentity(ident);
        try {
            callbackBinder.opCompleteForUser(getBackupUserId(), token, 0);
        } catch (RemoteException e) {
        // we'll time out anyway, so we're safe
        }
        if (Binder.getCallingPid() != Process.myPid()) {
            IoUtils.closeQuietly(data);
        }
    }
}","{
    if (DEBUG)
        Log.v(TAG, ""doFullBackup() invoked"");
    // Ensure that any SharedPreferences writes have landed *before*
    // we potentially try to back up the underlying files directly.
    waitForSharedPrefs();
    // Ensure that we're running with the app's normal permission level
    final long ident = Binder.clearCallingIdentity();
    try {
        BackupAgent.this.onFullBackup(new FullBackupDataOutput(data, quotaBytes, transportFlags));
    } catch (IOException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw new RuntimeException(ex);
    } catch (RuntimeException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw ex;
    } finally {
        // ... and then again after, as in the doBackup() case
        waitForSharedPrefs();
        // forthcoming from this agent.
        try {
            FileOutputStream out = new FileOutputStream(data.getFileDescriptor());
            byte[] buf = new byte[4];
            out.write(buf);
        } catch (IOException e) {
            Log.e(TAG, ""Unable to finalize backup stream!"");
        }
        Binder.restoreCallingIdentity(ident);
        try {
            callbackBinder.opCompleteForUser(getBackupUserId(), token, 0);
        } catch (RemoteException e) {
        // we'll time out anyway, so we're safe
        }
        if (Binder.getCallingPid() != Process.myPid()) {
            IoUtils.closeQuietly(data);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// Ensure that we're running with the app's normal permission level, []), AssignmentExpression(=, [VariableReference(long ident, []), Expression(Binder.clearCallingIdentity(), [])]), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""doFullBackup() invoked""), [VariableReference(Log, []), Expression(TAG, []), Expression(""doFullBackup() invoked"", [])]), Statement(// Ensure that any SharedPreferences writes have landed *before*, []), Statement(// we potentially try to back up the underlying files directly., []), Statement(waitForSharedPrefs(), []), Statement(try {, []), Statement(} catch (IOException ex) {, []), MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])]), Statement(throw new RuntimeException(ex), []), Statement(} catch (RuntimeException ex) {, []), MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])]), Statement(throw ex, []), Statement(} finally {, []), Statement(waitForSharedPrefs(), []), Statement(// forthcoming from this agent., []), Statement(try {, []), AssignmentExpression(=, [VariableReference(FileOutputStream out, []), Expression(new FileOutputStream(data.getFileDescriptor()), [])]), AssignmentExpression(=, [VariableReference(byte[] buf, []), Expression(new byte[4], [])]), MethodCall(out.write(buf), [VariableReference(out, []), Expression(buf, [])]), Statement(} catch (IOException e) {, []), MethodCall(Log.e(TAG, ""Unable to finalize backup stream!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unable to finalize backup stream!"", [])]), Statement(}, []), MethodCall(Binder.restoreCallingIdentity(ident), [VariableReference(Binder, []), Expression(ident, [])]), Statement(try {, []), MethodCall(callbackBinder.opCompleteForUser(getBackupUserId(), token, 0), [VariableReference(callbackBinder, []), Expression(getBackupUserId(), []), Expression(token, []), Expression(0, [])]), Statement(} catch (RemoteException e) {, []), Statement(// we'll time out anyway, so we're safe, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (Binder.getCallingPid() !, []), Expression(Process.myPid()) {, [])]), MethodCall(IoUtils.closeQuietly(data), [VariableReference(IoUtils, []), Expression(data, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// Ensure that we're running with the app's normal permission level, [])  AssignmentExpression(=, [VariableReference(long ident, []), Expression(Binder.clearCallingIdentity(), [])])    VariableReference(long ident, [])    Expression(Binder.clearCallingIdentity(), [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""doFullBackup() invoked""), [VariableReference(Log, []), Expression(TAG, []), Expression(""doFullBackup() invoked"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""doFullBackup() invoked"", [])  Statement(// Ensure that any SharedPreferences writes have landed *before*, [])  Statement(// we potentially try to back up the underlying files directly., [])  Statement(waitForSharedPrefs(), [])  Statement(try {, [])  Statement(} catch (IOException ex) {, [])  MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", [])    Expression(ex, [])  Statement(throw new RuntimeException(ex), [])  Statement(} catch (RuntimeException ex) {, [])  MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", [])    Expression(ex, [])  Statement(throw ex, [])  Statement(} finally {, [])  Statement(waitForSharedPrefs(), [])  Statement(// forthcoming from this agent., [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(FileOutputStream out, []), Expression(new FileOutputStream(data.getFileDescriptor()), [])])    VariableReference(FileOutputStream out, [])    Expression(new FileOutputStream(data.getFileDescriptor()), [])  AssignmentExpression(=, [VariableReference(byte[] buf, []), Expression(new byte[4], [])])    VariableReference(byte[] buf, [])    Expression(new byte[4], [])  MethodCall(out.write(buf), [VariableReference(out, []), Expression(buf, [])])    VariableReference(out, [])    Expression(buf, [])  Statement(} catch (IOException e) {, [])  MethodCall(Log.e(TAG, ""Unable to finalize backup stream!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unable to finalize backup stream!"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unable to finalize backup stream!"", [])  Statement(}, [])  MethodCall(Binder.restoreCallingIdentity(ident), [VariableReference(Binder, []), Expression(ident, [])])    VariableReference(Binder, [])    Expression(ident, [])  Statement(try {, [])  MethodCall(callbackBinder.opCompleteForUser(getBackupUserId(), token, 0), [VariableReference(callbackBinder, []), Expression(getBackupUserId(), []), Expression(token, []), Expression(0, [])])    VariableReference(callbackBinder, [])    Expression(getBackupUserId(), [])    Expression(token, [])    Expression(0, [])  Statement(} catch (RemoteException e) {, [])  Statement(// we'll time out anyway, so we're safe, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (Binder.getCallingPid() !, []), Expression(Process.myPid()) {, [])])    VariableReference(if (Binder.getCallingPid() !, [])    Expression(Process.myPid()) {, [])  MethodCall(IoUtils.closeQuietly(data), [VariableReference(IoUtils, []), Expression(data, [])])    VariableReference(IoUtils, [])    Expression(data, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""doFullBackup() invoked""), [VariableReference(Log, []), Expression(TAG, []), Expression(""doFullBackup() invoked"", [])]), Statement(// Ensure that any SharedPreferences writes have landed *before*, []), Statement(// we potentially try to back up the underlying files directly., []), Statement(waitForSharedPrefs(), []), Statement(// Ensure that we're running with the app's normal permission level, []), AssignmentExpression(=, [VariableReference(final long ident, []), Expression(Binder.clearCallingIdentity(), [])]), Statement(try {, []), Statement(} catch (IOException ex) {, []), MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])]), Statement(throw new RuntimeException(ex), []), Statement(} catch (RuntimeException ex) {, []), MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])]), Statement(throw ex, []), Statement(} finally {, []), Statement(waitForSharedPrefs(), []), Statement(// forthcoming from this agent., []), Statement(try {, []), AssignmentExpression(=, [VariableReference(FileOutputStream out, []), Expression(new FileOutputStream(data.getFileDescriptor()), [])]), AssignmentExpression(=, [VariableReference(byte[] buf, []), Expression(new byte[4], [])]), MethodCall(out.write(buf), [VariableReference(out, []), Expression(buf, [])]), Statement(} catch (IOException e) {, []), MethodCall(Log.e(TAG, ""Unable to finalize backup stream!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unable to finalize backup stream!"", [])]), Statement(}, []), MethodCall(Binder.restoreCallingIdentity(ident), [VariableReference(Binder, []), Expression(ident, [])]), Statement(try {, []), MethodCall(callbackBinder.opCompleteForUser(getBackupUserId(), token, 0), [VariableReference(callbackBinder, []), Expression(getBackupUserId(), []), Expression(token, []), Expression(0, [])]), Statement(} catch (RemoteException e) {, []), Statement(// we'll time out anyway, so we're safe, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (Binder.getCallingPid() !, []), Expression(Process.myPid()) {, [])]), MethodCall(IoUtils.closeQuietly(data), [VariableReference(IoUtils, []), Expression(data, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""doFullBackup() invoked""), [VariableReference(Log, []), Expression(TAG, []), Expression(""doFullBackup() invoked"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""doFullBackup() invoked"", [])  Statement(// Ensure that any SharedPreferences writes have landed *before*, [])  Statement(// we potentially try to back up the underlying files directly., [])  Statement(waitForSharedPrefs(), [])  Statement(// Ensure that we're running with the app's normal permission level, [])  AssignmentExpression(=, [VariableReference(final long ident, []), Expression(Binder.clearCallingIdentity(), [])])    VariableReference(final long ident, [])    Expression(Binder.clearCallingIdentity(), [])  Statement(try {, [])  Statement(} catch (IOException ex) {, [])  MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", [])    Expression(ex, [])  Statement(throw new RuntimeException(ex), [])  Statement(} catch (RuntimeException ex) {, [])  MethodCall(Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex), [VariableReference(Log, []), Expression(TAG, []), Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", []), Expression(ex, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", [])    Expression(ex, [])  Statement(throw ex, [])  Statement(} finally {, [])  Statement(waitForSharedPrefs(), [])  Statement(// forthcoming from this agent., [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(FileOutputStream out, []), Expression(new FileOutputStream(data.getFileDescriptor()), [])])    VariableReference(FileOutputStream out, [])    Expression(new FileOutputStream(data.getFileDescriptor()), [])  AssignmentExpression(=, [VariableReference(byte[] buf, []), Expression(new byte[4], [])])    VariableReference(byte[] buf, [])    Expression(new byte[4], [])  MethodCall(out.write(buf), [VariableReference(out, []), Expression(buf, [])])    VariableReference(out, [])    Expression(buf, [])  Statement(} catch (IOException e) {, [])  MethodCall(Log.e(TAG, ""Unable to finalize backup stream!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unable to finalize backup stream!"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unable to finalize backup stream!"", [])  Statement(}, [])  MethodCall(Binder.restoreCallingIdentity(ident), [VariableReference(Binder, []), Expression(ident, [])])    VariableReference(Binder, [])    Expression(ident, [])  Statement(try {, [])  MethodCall(callbackBinder.opCompleteForUser(getBackupUserId(), token, 0), [VariableReference(callbackBinder, []), Expression(getBackupUserId(), []), Expression(token, []), Expression(0, [])])    VariableReference(callbackBinder, [])    Expression(getBackupUserId(), [])    Expression(token, [])    Expression(0, [])  Statement(} catch (RemoteException e) {, [])  Statement(// we'll time out anyway, so we're safe, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (Binder.getCallingPid() !, []), Expression(Process.myPid()) {, [])])    VariableReference(if (Binder.getCallingPid() !, [])    Expression(Process.myPid()) {, [])  MethodCall(IoUtils.closeQuietly(data), [VariableReference(IoUtils, []), Expression(data, [])])    VariableReference(IoUtils, [])    Expression(data, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"3,4",0,3,1,"The position of the statement `final long ident = Binder.clearCallingIdentity()` has been changed within the method body, moving after the call to `waitForSharedPrefs()`. The overall code logic and structure of exception handling remain consistent except for this change in control flow. Therefore, the code change type is 3.","This shift in control flow can potentially alter the behavior of the method, specifically leading to different states when invoking `BackupAgent.this.onFullBackup`. This warrants a potential compatibility issue regarding different return values, placing the CI type as 1."
"<android.text.method.NumberKeyListener: boolean addAmPmChars(Collection<Character>,Locale)>",30,31,,,,"{
    if (locale == null) {
        return false;
    }
    final String[] amPm = LocaleData.get(locale).amPm;
    for (int i = 0; i < amPm.length; i++) {
        for (int j = 0; j < amPm[i].length(); j++) {
            final char ch = amPm[i].charAt(j);
            if (Character.isBmpCodePoint(ch)) {
                collection.add(Character.valueOf(ch));
            } else {
                // We don't support non-BMP characters.
                return false;
            }
        }
    }
    return true;
}","{
    if (locale == null) {
        return false;
    }
    final String[] amPm = DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings();
    for (int i = 0; i < amPm.length; i++) {
        for (int j = 0; j < amPm[i].length(); j++) {
            final char ch = amPm[i].charAt(j);
            if (Character.isBmpCodePoint(ch)) {
                collection.add(Character.valueOf(ch));
            } else {
                // We don't support non-BMP characters.
                return false;
            }
        }
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (locale, []), Expression(, [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final String[] amPm, []), Expression(LocaleData.get(locale).amPm, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < amPm.length, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(for (int j, []), Expression(0, [])]), MethodCall(j < amPm[i].length(), [VariableReference(j < amPm[i], []), Expression(, [])]), Statement(j++) {, []), AssignmentExpression(=, [VariableReference(final char ch, []), Expression(amPm[i].charAt(j), [])]), MethodCall(if (Character.isBmpCodePoint(ch)), [VariableReference(if (Character, []), Expression(ch), [])]), MethodCall(collection.add(Character.valueOf(ch)), [VariableReference(collection, []), Expression(Character.valueOf(ch), [])]), Statement(} else {, []), Statement(// We don't support non-BMP characters., []), Statement(return false, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (locale, []), Expression(, [])])    VariableReference(if (locale, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final String[] amPm, []), Expression(LocaleData.get(locale).amPm, [])])    VariableReference(final String[] amPm, [])    Expression(LocaleData.get(locale).amPm, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < amPm.length, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(for (int j, []), Expression(0, [])])    VariableReference(for (int j, [])    Expression(0, [])  MethodCall(j < amPm[i].length(), [VariableReference(j < amPm[i], []), Expression(, [])])    VariableReference(j < amPm[i], [])    Expression(, [])  Statement(j++) {, [])  AssignmentExpression(=, [VariableReference(final char ch, []), Expression(amPm[i].charAt(j), [])])    VariableReference(final char ch, [])    Expression(amPm[i].charAt(j), [])  MethodCall(if (Character.isBmpCodePoint(ch)), [VariableReference(if (Character, []), Expression(ch), [])])    VariableReference(if (Character, [])    Expression(ch), [])  MethodCall(collection.add(Character.valueOf(ch)), [VariableReference(collection, []), Expression(Character.valueOf(ch), [])])    VariableReference(collection, [])    Expression(Character.valueOf(ch), [])  Statement(} else {, [])  Statement(// We don't support non-BMP characters., [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (locale, []), Expression(, [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final String[] amPm, []), Expression(DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < amPm.length, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(for (int j, []), Expression(0, [])]), MethodCall(j < amPm[i].length(), [VariableReference(j < amPm[i], []), Expression(, [])]), Statement(j++) {, []), AssignmentExpression(=, [VariableReference(final char ch, []), Expression(amPm[i].charAt(j), [])]), MethodCall(if (Character.isBmpCodePoint(ch)), [VariableReference(if (Character, []), Expression(ch), [])]), MethodCall(collection.add(Character.valueOf(ch)), [VariableReference(collection, []), Expression(Character.valueOf(ch), [])]), Statement(} else {, []), Statement(// We don't support non-BMP characters., []), Statement(return false, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (locale, []), Expression(, [])])    VariableReference(if (locale, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final String[] amPm, []), Expression(DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings(), [])])    VariableReference(final String[] amPm, [])    Expression(DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < amPm.length, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(for (int j, []), Expression(0, [])])    VariableReference(for (int j, [])    Expression(0, [])  MethodCall(j < amPm[i].length(), [VariableReference(j < amPm[i], []), Expression(, [])])    VariableReference(j < amPm[i], [])    Expression(, [])  Statement(j++) {, [])  AssignmentExpression(=, [VariableReference(final char ch, []), Expression(amPm[i].charAt(j), [])])    VariableReference(final char ch, [])    Expression(amPm[i].charAt(j), [])  MethodCall(if (Character.isBmpCodePoint(ch)), [VariableReference(if (Character, []), Expression(ch), [])])    VariableReference(if (Character, [])    Expression(ch), [])  MethodCall(collection.add(Character.valueOf(ch)), [VariableReference(collection, []), Expression(Character.valueOf(ch), [])])    VariableReference(collection, [])    Expression(Character.valueOf(ch), [])  Statement(} else {, [])  Statement(// We don't support non-BMP characters., [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,"/* package */
","/* package */
",0,,,0,,,,2,"4,5",0,5,0,"The method in the late version relies on DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings() instead of LocaleData.get(locale).amPm. Thus, the change type is 5.","Although there is a change in the dependent API, this does not necessarily lead to different return values or exception handling in this implementation. Therefore, the CI type is 0."
<android.app.UiAutomation: void clearWindowAnimationFrameStats()>,30,31,,,,"{
    synchronized (mLock) {
        throwIfNotConnectedLocked();
    }
    try {
        if (DEBUG) {
            Log.i(LOG_TAG, ""Clearing window animation frame stats"");
        }
        // Calling out without a lock held.
        mUiAutomationConnection.clearWindowAnimationFrameStats();
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re);
    }
}","{
    try {
        if (DEBUG) {
            Log.i(LOG_TAG, ""Clearing window animation frame stats"");
        }
        // Calling out without a lock held.
        mUiAutomationConnection.clearWindowAnimationFrameStats();
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mLock) {, []), Statement(throwIfNotConnectedLocked(), []), Statement(}, []), Statement(try {, []), Statement(if (DEBUG) {, []), MethodCall(Log.i(LOG_TAG, ""Clearing window animation frame stats""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Clearing window animation frame stats"", [])]), Statement(}, []), Statement(// Calling out without a lock held., []), MethodCall(mUiAutomationConnection.clearWindowAnimationFrameStats(), [VariableReference(mUiAutomationConnection, []), Expression(, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error clearing window animation frame stats!"", []), Expression(re, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mLock) {, [])  Statement(throwIfNotConnectedLocked(), [])  Statement(}, [])  Statement(try {, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.i(LOG_TAG, ""Clearing window animation frame stats""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Clearing window animation frame stats"", [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Clearing window animation frame stats"", [])  Statement(}, [])  Statement(// Calling out without a lock held., [])  MethodCall(mUiAutomationConnection.clearWindowAnimationFrameStats(), [VariableReference(mUiAutomationConnection, []), Expression(, [])])    VariableReference(mUiAutomationConnection, [])    Expression(, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error clearing window animation frame stats!"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Error clearing window animation frame stats!"", [])    Expression(re, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), Statement(if (DEBUG) {, []), MethodCall(Log.i(LOG_TAG, ""Clearing window animation frame stats""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Clearing window animation frame stats"", [])]), Statement(}, []), Statement(// Calling out without a lock held., []), MethodCall(mUiAutomationConnection.clearWindowAnimationFrameStats(), [VariableReference(mUiAutomationConnection, []), Expression(, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error clearing window animation frame stats!"", []), Expression(re, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.i(LOG_TAG, ""Clearing window animation frame stats""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Clearing window animation frame stats"", [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Clearing window animation frame stats"", [])  Statement(}, [])  Statement(// Calling out without a lock held., [])  MethodCall(mUiAutomationConnection.clearWindowAnimationFrameStats(), [VariableReference(mUiAutomationConnection, []), Expression(, [])])    VariableReference(mUiAutomationConnection, [])    Expression(, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error clearing window animation frame stats!"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Error clearing window animation frame stats!"", [])    Expression(re, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Clears the window animation rendering statistics. These statistics contain
 * information about the most recently rendered window animation frames, i.e.
 * for window transition animations.
 *
 * @see android.view.WindowAnimationFrameStats
 * @see #getWindowAnimationFrameStats()
 * @see android.R.styleable#WindowAnimation
 */
","/**
 * Clears the window animation rendering statistics. These statistics contain
 * information about the most recently rendered window animation frames, i.e.
 * for window transition animations.
 *
 * @see android.view.WindowAnimationFrameStats
 * @see #getWindowAnimationFrameStats()
 * @see android.R.styleable#WindowAnimation
 */
",0,,,0,,,,"1,2",4,2,4,0,"The synchronized block around throwIfNotConnectedLocked() has been removed in the late version. Since there are no changes in return statements, exception handling, control dependencies, or dependent APIs, the change type is 4.","The removal of the synchronized block does not necessarily lead to different return values or exception handling behaviors in this context. Therefore, no Compatibility Issue arises."
"<android.view.ViewGroup: boolean requestFocus(int,Rect)>",30,31,,,,"{
    if (DBG) {
        System.out.println(this + "" ViewGroup.requestFocus direction="" + direction);
    }
    int descendantFocusability = getDescendantFocusability();
    boolean result;
    switch(descendantFocusability) {
        case FOCUS_BLOCK_DESCENDANTS:
            result = super.requestFocus(direction, previouslyFocusedRect);
            break;
        case FOCUS_BEFORE_DESCENDANTS:
            {
                final boolean took = super.requestFocus(direction, previouslyFocusedRect);
                result = took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);
                break;
            }
        case FOCUS_AFTER_DESCENDANTS:
            {
                final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);
                result = took ? took : super.requestFocus(direction, previouslyFocusedRect);
                break;
            }
        default:
            throw new IllegalStateException(""descendant focusability must be one of FOCUS_BEFORE_DESCENDANTS,"" + "" FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS but is "" + descendantFocusability);
    }
    if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS) == 0)) {
        mPrivateFlags |= PFLAG_WANTS_FOCUS;
    }
    return result;
}","{
    if (DBG) {
        System.out.println(this + "" ViewGroup.requestFocus direction="" + direction);
    }
    int descendantFocusability = getDescendantFocusability();
    boolean result;
    switch(descendantFocusability) {
        case FOCUS_BLOCK_DESCENDANTS:
            result = super.requestFocus(direction, previouslyFocusedRect);
            break;
        case FOCUS_BEFORE_DESCENDANTS:
            {
                final boolean took = super.requestFocus(direction, previouslyFocusedRect);
                result = took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);
                break;
            }
        case FOCUS_AFTER_DESCENDANTS:
            {
                final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);
                result = took ? took : super.requestFocus(direction, previouslyFocusedRect);
                break;
            }
        default:
            throw new IllegalStateException(""descendant focusability must be "" + ""one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS "" + ""but is "" + descendantFocusability);
    }
    if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS) == 0)) {
        mPrivateFlags |= PFLAG_WANTS_FOCUS;
    }
    return result;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DBG) {, []), AssignmentExpression(=, [VariableReference(System.out.println(this + "" ViewGroup.requestFocus direction, []), Expression("" + direction), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(int descendantFocusability, []), Expression(getDescendantFocusability(), [])]), Statement(boolean result, []), Statement(switch(descendantFocusability) {, []), Statement(case FOCUS_BLOCK_DESCENDANTS:, []), AssignmentExpression(=, [VariableReference(result, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])]), Statement(break, []), Statement(case FOCUS_BEFORE_DESCENDANTS:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect), [])]), Statement(break, []), Statement(}, []), Statement(case FOCUS_AFTER_DESCENDANTS:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(onRequestFocusInDescendants(direction, previouslyFocusedRect), [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : super.requestFocus(direction, previouslyFocusedRect), [])]), Statement(break, []), Statement(}, []), Statement(default:, []), Statement(throw new IllegalStateException(""descendant focusability must be one of FOCUS_BEFORE_DESCENDANTS,"" + "" FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS but is "" + descendantFocusability), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_WANTS_FOCUS, [])]), Statement(}, []), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(if (DBG) {, [])  AssignmentExpression(=, [VariableReference(System.out.println(this + "" ViewGroup.requestFocus direction, []), Expression("" + direction), [])])    VariableReference(System.out.println(this + "" ViewGroup.requestFocus direction, [])    Expression("" + direction), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int descendantFocusability, []), Expression(getDescendantFocusability(), [])])    VariableReference(int descendantFocusability, [])    Expression(getDescendantFocusability(), [])  Statement(boolean result, [])  Statement(switch(descendantFocusability) {, [])  Statement(case FOCUS_BLOCK_DESCENDANTS:, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])])    VariableReference(result, [])    Expression(super.requestFocus(direction, previouslyFocusedRect), [])  Statement(break, [])  Statement(case FOCUS_BEFORE_DESCENDANTS:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])])    VariableReference(final boolean took, [])    Expression(super.requestFocus(direction, previouslyFocusedRect), [])  AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect), [])])    VariableReference(result, [])    Expression(took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect), [])  Statement(break, [])  Statement(}, [])  Statement(case FOCUS_AFTER_DESCENDANTS:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(onRequestFocusInDescendants(direction, previouslyFocusedRect), [])])    VariableReference(final boolean took, [])    Expression(onRequestFocusInDescendants(direction, previouslyFocusedRect), [])  AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : super.requestFocus(direction, previouslyFocusedRect), [])])    VariableReference(result, [])    Expression(took ? took : super.requestFocus(direction, previouslyFocusedRect), [])  Statement(break, [])  Statement(}, [])  Statement(default:, [])  Statement(throw new IllegalStateException(""descendant focusability must be one of FOCUS_BEFORE_DESCENDANTS,"" + "" FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS but is "" + descendantFocusability), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS), []), Expression(, [])])    VariableReference(if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_WANTS_FOCUS, [])])    VariableReference(mPrivateFlags |, [])    Expression(PFLAG_WANTS_FOCUS, [])  Statement(}, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DBG) {, []), AssignmentExpression(=, [VariableReference(System.out.println(this + "" ViewGroup.requestFocus direction, []), Expression("" + direction), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(int descendantFocusability, []), Expression(getDescendantFocusability(), [])]), Statement(boolean result, []), Statement(switch(descendantFocusability) {, []), Statement(case FOCUS_BLOCK_DESCENDANTS:, []), AssignmentExpression(=, [VariableReference(result, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])]), Statement(break, []), Statement(case FOCUS_BEFORE_DESCENDANTS:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect), [])]), Statement(break, []), Statement(}, []), Statement(case FOCUS_AFTER_DESCENDANTS:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(onRequestFocusInDescendants(direction, previouslyFocusedRect), [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : super.requestFocus(direction, previouslyFocusedRect), [])]), Statement(break, []), Statement(}, []), Statement(default:, []), Statement(throw new IllegalStateException(""descendant focusability must be "" + ""one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS "" + ""but is "" + descendantFocusability), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_WANTS_FOCUS, [])]), Statement(}, []), Statement(return result, []), Statement(}, [])])  Statement({, [])  Statement(if (DBG) {, [])  AssignmentExpression(=, [VariableReference(System.out.println(this + "" ViewGroup.requestFocus direction, []), Expression("" + direction), [])])    VariableReference(System.out.println(this + "" ViewGroup.requestFocus direction, [])    Expression("" + direction), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int descendantFocusability, []), Expression(getDescendantFocusability(), [])])    VariableReference(int descendantFocusability, [])    Expression(getDescendantFocusability(), [])  Statement(boolean result, [])  Statement(switch(descendantFocusability) {, [])  Statement(case FOCUS_BLOCK_DESCENDANTS:, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])])    VariableReference(result, [])    Expression(super.requestFocus(direction, previouslyFocusedRect), [])  Statement(break, [])  Statement(case FOCUS_BEFORE_DESCENDANTS:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(super.requestFocus(direction, previouslyFocusedRect), [])])    VariableReference(final boolean took, [])    Expression(super.requestFocus(direction, previouslyFocusedRect), [])  AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect), [])])    VariableReference(result, [])    Expression(took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect), [])  Statement(break, [])  Statement(}, [])  Statement(case FOCUS_AFTER_DESCENDANTS:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final boolean took, []), Expression(onRequestFocusInDescendants(direction, previouslyFocusedRect), [])])    VariableReference(final boolean took, [])    Expression(onRequestFocusInDescendants(direction, previouslyFocusedRect), [])  AssignmentExpression(=, [VariableReference(result, []), Expression(took ? took : super.requestFocus(direction, previouslyFocusedRect), [])])    VariableReference(result, [])    Expression(took ? took : super.requestFocus(direction, previouslyFocusedRect), [])  Statement(break, [])  Statement(}, [])  Statement(default:, [])  Statement(throw new IllegalStateException(""descendant focusability must be "" + ""one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS "" + ""but is "" + descendantFocusability), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS), []), Expression(, [])])    VariableReference(if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_WANTS_FOCUS, [])])    VariableReference(mPrivateFlags |, [])    Expression(PFLAG_WANTS_FOCUS, [])  Statement(}, [])  Statement(return result, [])  Statement(}, [])",1,"/**
 * {@inheritDoc}
 *
 * Looks for a view to give focus to respecting the setting specified by
 * {@link #getDescendantFocusability()}.
 *
 * Uses {@link #onRequestFocusInDescendants(int, android.graphics.Rect)} to
 * find focus within the children of this group when appropriate.
 *
 * @see #FOCUS_BEFORE_DESCENDANTS
 * @see #FOCUS_AFTER_DESCENDANTS
 * @see #FOCUS_BLOCK_DESCENDANTS
 * @see #onRequestFocusInDescendants(int, android.graphics.Rect)
 */
","/**
 * {@inheritDoc}
 *
 * Looks for a view to give focus to respecting the setting specified by
 * {@link #getDescendantFocusability()}.
 *
 * Uses {@link #onRequestFocusInDescendants(int, android.graphics.Rect)} to
 * find focus within the children of this group when appropriate.
 *
 * @see #FOCUS_BEFORE_DESCENDANTS
 * @see #FOCUS_AFTER_DESCENDANTS
 * @see #FOCUS_BLOCK_DESCENDANTS
 * @see #onRequestFocusInDescendants(int, android.graphics.Rect)
 */
",0,[@Override],[@Override],0,,,,1,2,2,"3,4",0,"The only change is in the error message of the `IllegalStateException`, which has been slightly rephrased. As there is no significant functional change, the code change type is 3 (control dependency changed) and 4 (other statement changed).","The slight rephrasing of the error message does not impact the functional behavior or the return value of the method. Therefore, no potential Compatibility Issue arises, and the CI type is 0."
<android.os.Parcel: void setDataSize(int)>,30,31,,,,"{
    updateNativeSize(nativeSetDataSize(mNativePtr, size));
}","{
    nativeSetDataSize(mNativePtr, size);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(updateNativeSize(nativeSetDataSize(mNativePtr, size)), []), Statement(}, [])])  Statement({, [])  Statement(updateNativeSize(nativeSetDataSize(mNativePtr, size)), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(nativeSetDataSize(mNativePtr, size), []), Statement(}, [])])  Statement({, [])  Statement(nativeSetDataSize(mNativePtr, size), [])  Statement(}, [])",1,"/**
 * Change the amount of data in the parcel.  Can be either smaller or
 * larger than the current size.  If larger than the current capacity,
 * more memory will be allocated.
 *
 * @param size The new number of bytes in the Parcel.
 */
","/**
 * Change the amount of data in the parcel.  Can be either smaller or
 * larger than the current size.  If larger than the current capacity,
 * more memory will be allocated.
 *
 * @param size The new number of bytes in the Parcel.
 */
",0,,,0,,,,2,5,0,4,0,"The call to updateNativeSize(nativeSetDataSize(mNativePtr, size)) in the early version has been removed in the late version, so the change type is 4.","The removal of the updateNativeSize call does not change the return value or exception handling directly; it is more of an internal update operation. Therefore, it doesn't lead to a Compatibility Issue. So, the CI type is 0."
"<android.view.inputmethod.InlineSuggestionsRequest: void writeToParcel(Parcel,int)>",30,31,,,,"{
    // You can override field parcelling by defining methods like:
    // void parcelFieldName(Parcel dest, int flags) { ... }
    byte flg = 0;
    if (mHostInputToken != null)
        flg |= 0x20;
    dest.writeByte(flg);
    dest.writeInt(mMaxSuggestionCount);
    dest.writeParcelableList(mInlinePresentationSpecs, flags);
    dest.writeString(mHostPackageName);
    dest.writeTypedObject(mSupportedLocales, flags);
    dest.writeBundle(mExtras);
    parcelHostInputToken(dest, flags);
    dest.writeInt(mHostDisplayId);
}","{
    // You can override field parcelling by defining methods like:
    // void parcelFieldName(Parcel dest, int flags) { ... }
    int flg = 0;
    if (mHostInputToken != null)
        flg |= 0x20;
    if (mInlineTooltipPresentationSpec != null)
        flg |= 0x80;
    dest.writeInt(flg);
    dest.writeInt(mMaxSuggestionCount);
    dest.writeParcelableList(mInlinePresentationSpecs, flags);
    dest.writeString(mHostPackageName);
    dest.writeTypedObject(mSupportedLocales, flags);
    dest.writeBundle(mExtras);
    parcelHostInputToken(dest, flags);
    dest.writeInt(mHostDisplayId);
    if (mInlineTooltipPresentationSpec != null)
        dest.writeTypedObject(mInlineTooltipPresentationSpec, flags);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// You can override field parcelling by defining methods like:, []), AssignmentExpression(=, [VariableReference(byte flg, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(if (mHostInputToken !, []), Expression(null), [])]), AssignmentExpression(=, [VariableReference(flg |, []), Expression(0x20, [])]), MethodCall(dest.writeByte(flg), [VariableReference(dest, []), Expression(flg, [])]), MethodCall(dest.writeInt(mMaxSuggestionCount), [VariableReference(dest, []), Expression(mMaxSuggestionCount, [])]), MethodCall(dest.writeParcelableList(mInlinePresentationSpecs, flags), [VariableReference(dest, []), Expression(mInlinePresentationSpecs, []), Expression(flags, [])]), MethodCall(dest.writeString(mHostPackageName), [VariableReference(dest, []), Expression(mHostPackageName, [])]), MethodCall(dest.writeTypedObject(mSupportedLocales, flags), [VariableReference(dest, []), Expression(mSupportedLocales, []), Expression(flags, [])]), MethodCall(dest.writeBundle(mExtras), [VariableReference(dest, []), Expression(mExtras, [])]), Statement(parcelHostInputToken(dest, flags), []), MethodCall(dest.writeInt(mHostDisplayId), [VariableReference(dest, []), Expression(mHostDisplayId, [])]), Statement(}, [])])  Statement({, [])  Statement(// You can override field parcelling by defining methods like:, [])  AssignmentExpression(=, [VariableReference(byte flg, []), Expression(0, [])])    VariableReference(byte flg, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(if (mHostInputToken !, []), Expression(null), [])])    VariableReference(if (mHostInputToken !, [])    Expression(null), [])  AssignmentExpression(=, [VariableReference(flg |, []), Expression(0x20, [])])    VariableReference(flg |, [])    Expression(0x20, [])  MethodCall(dest.writeByte(flg), [VariableReference(dest, []), Expression(flg, [])])    VariableReference(dest, [])    Expression(flg, [])  MethodCall(dest.writeInt(mMaxSuggestionCount), [VariableReference(dest, []), Expression(mMaxSuggestionCount, [])])    VariableReference(dest, [])    Expression(mMaxSuggestionCount, [])  MethodCall(dest.writeParcelableList(mInlinePresentationSpecs, flags), [VariableReference(dest, []), Expression(mInlinePresentationSpecs, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mInlinePresentationSpecs, [])    Expression(flags, [])  MethodCall(dest.writeString(mHostPackageName), [VariableReference(dest, []), Expression(mHostPackageName, [])])    VariableReference(dest, [])    Expression(mHostPackageName, [])  MethodCall(dest.writeTypedObject(mSupportedLocales, flags), [VariableReference(dest, []), Expression(mSupportedLocales, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mSupportedLocales, [])    Expression(flags, [])  MethodCall(dest.writeBundle(mExtras), [VariableReference(dest, []), Expression(mExtras, [])])    VariableReference(dest, [])    Expression(mExtras, [])  Statement(parcelHostInputToken(dest, flags), [])  MethodCall(dest.writeInt(mHostDisplayId), [VariableReference(dest, []), Expression(mHostDisplayId, [])])    VariableReference(dest, [])    Expression(mHostDisplayId, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// You can override field parcelling by defining methods like:, []), AssignmentExpression(=, [VariableReference(int flg, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(if (mHostInputToken !, []), Expression(null), [])]), AssignmentExpression(=, [VariableReference(flg |, []), Expression(0x20, [])]), AssignmentExpression(=, [VariableReference(if (mInlineTooltipPresentationSpec !, []), Expression(null), [])]), AssignmentExpression(=, [VariableReference(flg |, []), Expression(0x80, [])]), MethodCall(dest.writeInt(flg), [VariableReference(dest, []), Expression(flg, [])]), MethodCall(dest.writeInt(mMaxSuggestionCount), [VariableReference(dest, []), Expression(mMaxSuggestionCount, [])]), MethodCall(dest.writeParcelableList(mInlinePresentationSpecs, flags), [VariableReference(dest, []), Expression(mInlinePresentationSpecs, []), Expression(flags, [])]), MethodCall(dest.writeString(mHostPackageName), [VariableReference(dest, []), Expression(mHostPackageName, [])]), MethodCall(dest.writeTypedObject(mSupportedLocales, flags), [VariableReference(dest, []), Expression(mSupportedLocales, []), Expression(flags, [])]), MethodCall(dest.writeBundle(mExtras), [VariableReference(dest, []), Expression(mExtras, [])]), Statement(parcelHostInputToken(dest, flags), []), MethodCall(dest.writeInt(mHostDisplayId), [VariableReference(dest, []), Expression(mHostDisplayId, [])]), AssignmentExpression(=, [VariableReference(if (mInlineTooltipPresentationSpec !, []), Expression(null), [])]), MethodCall(dest.writeTypedObject(mInlineTooltipPresentationSpec, flags), [VariableReference(dest, []), Expression(mInlineTooltipPresentationSpec, []), Expression(flags, [])]), Statement(}, [])])  Statement({, [])  Statement(// You can override field parcelling by defining methods like:, [])  AssignmentExpression(=, [VariableReference(int flg, []), Expression(0, [])])    VariableReference(int flg, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(if (mHostInputToken !, []), Expression(null), [])])    VariableReference(if (mHostInputToken !, [])    Expression(null), [])  AssignmentExpression(=, [VariableReference(flg |, []), Expression(0x20, [])])    VariableReference(flg |, [])    Expression(0x20, [])  AssignmentExpression(=, [VariableReference(if (mInlineTooltipPresentationSpec !, []), Expression(null), [])])    VariableReference(if (mInlineTooltipPresentationSpec !, [])    Expression(null), [])  AssignmentExpression(=, [VariableReference(flg |, []), Expression(0x80, [])])    VariableReference(flg |, [])    Expression(0x80, [])  MethodCall(dest.writeInt(flg), [VariableReference(dest, []), Expression(flg, [])])    VariableReference(dest, [])    Expression(flg, [])  MethodCall(dest.writeInt(mMaxSuggestionCount), [VariableReference(dest, []), Expression(mMaxSuggestionCount, [])])    VariableReference(dest, [])    Expression(mMaxSuggestionCount, [])  MethodCall(dest.writeParcelableList(mInlinePresentationSpecs, flags), [VariableReference(dest, []), Expression(mInlinePresentationSpecs, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mInlinePresentationSpecs, [])    Expression(flags, [])  MethodCall(dest.writeString(mHostPackageName), [VariableReference(dest, []), Expression(mHostPackageName, [])])    VariableReference(dest, [])    Expression(mHostPackageName, [])  MethodCall(dest.writeTypedObject(mSupportedLocales, flags), [VariableReference(dest, []), Expression(mSupportedLocales, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mSupportedLocales, [])    Expression(flags, [])  MethodCall(dest.writeBundle(mExtras), [VariableReference(dest, []), Expression(mExtras, [])])    VariableReference(dest, [])    Expression(mExtras, [])  Statement(parcelHostInputToken(dest, flags), [])  MethodCall(dest.writeInt(mHostDisplayId), [VariableReference(dest, []), Expression(mHostDisplayId, [])])    VariableReference(dest, [])    Expression(mHostDisplayId, [])  AssignmentExpression(=, [VariableReference(if (mInlineTooltipPresentationSpec !, []), Expression(null), [])])    VariableReference(if (mInlineTooltipPresentationSpec !, [])    Expression(null), [])  MethodCall(dest.writeTypedObject(mInlineTooltipPresentationSpec, flags), [VariableReference(dest, []), Expression(mInlineTooltipPresentationSpec, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mInlineTooltipPresentationSpec, [])    Expression(flags, [])  Statement(}, [])",1,,,0,"[@Override, @DataClass.Generated.Member]","[@Override, @DataClass.Generated.Member]",0,,,,"1,2","3,4,5",0,"3,4",0,"Several statements are changed: the data type of 'flg' has changed from `byte` to `int`, additional condition checks and write operations are added for 'mInlineTooltipPresentationSpec', and 'dest.writeByte' is replaced by 'dest.writeInt'. These fall under the categories of control dependency change and other statement changed.","Although multiple statements are changed, these changes do not affect the method's return value or the way exceptions are handled. Hence, no potential compatibility issues arise."
<android.service.voice.VoiceInteractionSession: void onHandleAssist(AssistState)>,31,32,,,,"{
    if (state.getAssistData() == null && state.getAssistStructure() == null && state.getAssistContent() == null) {
        return;
    } else if (state.getIndex() == 0) {
        onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent());
    } else {
        onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount());
    }
}","{
    if (state.getAssistData() == null && state.getAssistStructure() == null && state.getAssistContent() == null) {
        return;
    } else if (state.getIndex() == 0) {
        onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent());
    } else {
        onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount());
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (state.getAssistData(), []), Expression(, [])]), Statement(return, []), AssignmentExpression(=, [VariableReference(} else if (state.getIndex(), []), Expression(, [])]), MethodCall(onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent()), [VariableReference(onHandleAssist(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), [])]), Statement(} else {, []), MethodCall(onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount()), [VariableReference(onHandleAssistSecondary(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), []), Expression(state.getIndex(), []), Expression(state.getCount(), [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (state.getAssistData(), []), Expression(, [])])    VariableReference(if (state.getAssistData(), [])    Expression(, [])  Statement(return, [])  AssignmentExpression(=, [VariableReference(} else if (state.getIndex(), []), Expression(, [])])    VariableReference(} else if (state.getIndex(), [])    Expression(, [])  MethodCall(onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent()), [VariableReference(onHandleAssist(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), [])])    VariableReference(onHandleAssist(state, [])    Expression(), [])    Expression(state.getAssistStructure(), [])    Expression(state.getAssistContent(), [])  Statement(} else {, [])  MethodCall(onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount()), [VariableReference(onHandleAssistSecondary(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), []), Expression(state.getIndex(), []), Expression(state.getCount(), [])])    VariableReference(onHandleAssistSecondary(state, [])    Expression(), [])    Expression(state.getAssistStructure(), [])    Expression(state.getAssistContent(), [])    Expression(state.getIndex(), [])    Expression(state.getCount(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (state.getAssistData(), []), Expression(, [])]), Statement(return, []), AssignmentExpression(=, [VariableReference(} else if (state.getIndex(), []), Expression(, [])]), MethodCall(onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent()), [VariableReference(onHandleAssist(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), [])]), Statement(} else {, []), MethodCall(onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount()), [VariableReference(onHandleAssistSecondary(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), []), Expression(state.getIndex(), []), Expression(state.getCount(), [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (state.getAssistData(), []), Expression(, [])])    VariableReference(if (state.getAssistData(), [])    Expression(, [])  Statement(return, [])  AssignmentExpression(=, [VariableReference(} else if (state.getIndex(), []), Expression(, [])])    VariableReference(} else if (state.getIndex(), [])    Expression(, [])  MethodCall(onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent()), [VariableReference(onHandleAssist(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), [])])    VariableReference(onHandleAssist(state, [])    Expression(), [])    Expression(state.getAssistStructure(), [])    Expression(state.getAssistContent(), [])  Statement(} else {, [])  MethodCall(onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount()), [VariableReference(onHandleAssistSecondary(state, []), Expression(), []), Expression(state.getAssistStructure(), []), Expression(state.getAssistContent(), []), Expression(state.getIndex(), []), Expression(state.getCount(), [])])    VariableReference(onHandleAssistSecondary(state, [])    Expression(), [])    Expression(state.getAssistStructure(), [])    Expression(state.getAssistContent(), [])    Expression(state.getIndex(), [])    Expression(state.getCount(), [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Called to receive data from the application that the user was currently viewing when
 * an assist session is started. If the original show request did not specify
 * {@link #SHOW_WITH_ASSIST}, {@link AssistState} parameter will only provide
 * {@link ActivityId}.
 *
 * <p>This method is called for all activities along with an index and count that indicates
 * which activity the data is for. {@code index} will be between 0 and {@code count}-1 and
 * this method is called once for each activity in no particular order. The {@code count}
 * indicates how many activities to expect assist data for, including the top focused one.
 * The focused activity can be determined by calling {@link AssistState#isFocused()}.
 *
 * <p>To be responsive to assist requests, process assist data as soon as it is received,
 * without waiting for all queued activities to return assist data.
 *
 * @param state The state object capturing the state of an activity.
 */
","/**
 * Called to receive data from the application that the user was currently viewing when
 * an assist session is started. If the original show request did not specify
 * {@link #SHOW_WITH_ASSIST}, {@link AssistState} parameter will only provide
 * {@link ActivityId}. If there was a failure to write the assist data to
 * {@link AssistStructure}, the {@link AssistState#getAssistStructure()} will return null.
 *
 * <p>This method is called for all activities along with an index and count that indicates
 * which activity the data is for. {@code index} will be between 0 and {@code count}-1 and
 * this method is called once for each activity in no particular order. The {@code count}
 * indicates how many activities to expect assist data for, including the top focused one.
 * The focused activity can be determined by calling {@link AssistState#isFocused()}.
 *
 * <p>To be responsive to assist requests, process assist data as soon as it is received,
 * without waiting for all queued activities to return assist data.
 *
 * @param state The state object capturing the state of an activity.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the code between the early and the late versions. Both implementations are identical.,"Since there is no code change, there are no potential Compatibility Issues between the two versions."
<android.view.contentcapture.ContentCaptureManager: ComponentName getServiceComponentName()>,31,32,,,,"{
    if (!isContentCaptureEnabled() && !mOptions.lite)
        return null;
    final SyncResultReceiver resultReceiver = new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS);
    try {
        mService.getServiceComponentName(resultReceiver);
        return resultReceiver.getParcelableResult();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (SyncResultReceiver.TimeoutException e) {
        throw new RuntimeException(""Fail to get service componentName."");
    }
}","{
    if (!isContentCaptureEnabled() && !mOptions.lite)
        return null;
    final SyncResultReceiver resultReceiver = new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS);
    try {
        mService.getServiceComponentName(resultReceiver);
        return resultReceiver.getParcelableResult();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (SyncResultReceiver.TimeoutException e) {
        throw new RuntimeException(""Fail to get service componentName."");
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return null, []), AssignmentExpression(=, [VariableReference(final SyncResultReceiver resultReceiver, []), Expression(new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS), [])]), Statement(try {, []), MethodCall(mService.getServiceComponentName(resultReceiver), [VariableReference(mService, []), Expression(resultReceiver, [])]), MethodCall(return resultReceiver.getParcelableResult(), [VariableReference(return resultReceiver, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(return null, [])  AssignmentExpression(=, [VariableReference(final SyncResultReceiver resultReceiver, []), Expression(new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS), [])])    VariableReference(final SyncResultReceiver resultReceiver, [])    Expression(new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS), [])  Statement(try {, [])  MethodCall(mService.getServiceComponentName(resultReceiver), [VariableReference(mService, []), Expression(resultReceiver, [])])    VariableReference(mService, [])    Expression(resultReceiver, [])  MethodCall(return resultReceiver.getParcelableResult(), [VariableReference(return resultReceiver, []), Expression(, [])])    VariableReference(return resultReceiver, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return null, []), AssignmentExpression(=, [VariableReference(final SyncResultReceiver resultReceiver, []), Expression(new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS), [])]), Statement(try {, []), MethodCall(mService.getServiceComponentName(resultReceiver), [VariableReference(mService, []), Expression(resultReceiver, [])]), MethodCall(return resultReceiver.getParcelableResult(), [VariableReference(return resultReceiver, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(return null, [])  AssignmentExpression(=, [VariableReference(final SyncResultReceiver resultReceiver, []), Expression(new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS), [])])    VariableReference(final SyncResultReceiver resultReceiver, [])    Expression(new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS), [])  Statement(try {, [])  MethodCall(mService.getServiceComponentName(resultReceiver), [VariableReference(mService, []), Expression(resultReceiver, [])])    VariableReference(mService, [])    Expression(resultReceiver, [])  MethodCall(return resultReceiver.getParcelableResult(), [VariableReference(return resultReceiver, []), Expression(, [])])    VariableReference(return resultReceiver, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Returns the component name of the system service that is consuming the captured events for
 * the current user.
 */
","/**
 * Returns the component name of the system service that is consuming the captured events for
 * the current user.
 *
 * @throws RuntimeException if getting the component name is timed out.
 */
",1,[@Nullable],[@Nullable],0,,,,0,0,0,0,0,There is no change between the early version and the late version of the method implementation.,"Since there is no change in the implementation, there is no potential for compatibility issues."
<android.view.translation.TranslationResponseValue: CharSequence getTransliteration()>,31,32,,,,"{
    return mTransliteration;
}","{
    return mTransliteration;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mTransliteration, []), Statement(}, [])])  Statement({, [])  Statement(return mTransliteration, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mTransliteration, []), Statement(}, [])])  Statement({, [])  Statement(return mTransliteration, [])  Statement(}, [])",0,"/**
 * The transliteration result of the translated text.
 * TODO: Describe the result structure.
 */
","/**
 * The transliteration result of the translated text.
 *
 * <p>This returns a CharSequence representation of the transliteration of the translated text.
 */
",1,"[@DataClass.Generated.Member, @Nullable]","[@DataClass.Generated.Member, @Nullable]",0,,,,0,0,0,0,0,There is no change in the implementation or annotations between the two versions.,"Since there is no change in the implementation or annotations, there are no potential compatibility issues."
<android.view.contentcapture.ContentCaptureContext: void dump(PrintWriter)>,31,32,,,,"{
    if (mComponentName != null) {
        pw.print(""activity="");
        pw.print(mComponentName.flattenToShortString());
    }
    if (mId != null) {
        pw.print("", id="");
        mId.dump(pw);
    }
    pw.print("", activityId="");
    pw.print(mActivityId);
    pw.print("", displayId="");
    pw.print(mDisplayId);
    if (mParentSessionId != NO_SESSION_ID) {
        pw.print("", parentId="");
        pw.print(mParentSessionId);
    }
    if (mFlags > 0) {
        pw.print("", flags="");
        pw.print(mFlags);
    }
    if (mExtras != null) {
        // NOTE: cannot dump because it could contain PII
        pw.print("", hasExtras"");
    }
}","{
    if (mComponentName != null) {
        pw.print(""activity="");
        pw.print(mComponentName.flattenToShortString());
    }
    if (mId != null) {
        pw.print("", id="");
        mId.dump(pw);
    }
    pw.print("", activityId="");
    pw.print(mActivityId);
    pw.print("", displayId="");
    pw.print(mDisplayId);
    pw.print("", windowToken="");
    pw.print(mWindowToken);
    if (mParentSessionId != NO_SESSION_ID) {
        pw.print("", parentId="");
        pw.print(mParentSessionId);
    }
    if (mFlags > 0) {
        pw.print("", flags="");
        pw.print(mFlags);
    }
    if (mExtras != null) {
        // NOTE: cannot dump because it could contain PII
        pw.print("", hasExtras"");
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mComponentName !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(pw.print(""activity, []), Expression(""), [])]), MethodCall(pw.print(mComponentName.flattenToShortString()), [VariableReference(pw, []), Expression(mComponentName.flattenToShortString(), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mId !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(pw.print("", id, []), Expression(""), [])]), MethodCall(mId.dump(pw), [VariableReference(mId, []), Expression(pw, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(pw.print("", activityId, []), Expression(""), [])]), MethodCall(pw.print(mActivityId), [VariableReference(pw, []), Expression(mActivityId, [])]), AssignmentExpression(=, [VariableReference(pw.print("", displayId, []), Expression(""), [])]), MethodCall(pw.print(mDisplayId), [VariableReference(pw, []), Expression(mDisplayId, [])]), AssignmentExpression(=, [VariableReference(if (mParentSessionId !, []), Expression(NO_SESSION_ID) {, [])]), AssignmentExpression(=, [VariableReference(pw.print("", parentId, []), Expression(""), [])]), MethodCall(pw.print(mParentSessionId), [VariableReference(pw, []), Expression(mParentSessionId, [])]), Statement(}, []), Statement(if (mFlags > 0) {, []), AssignmentExpression(=, [VariableReference(pw.print("", flags, []), Expression(""), [])]), MethodCall(pw.print(mFlags), [VariableReference(pw, []), Expression(mFlags, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mExtras !, []), Expression(null) {, [])]), Statement(// NOTE: cannot dump because it could contain PII, []), MethodCall(pw.print("", hasExtras""), [VariableReference(pw, []), Expression("", []), Expression(hasExtras"", [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mComponentName !, []), Expression(null) {, [])])    VariableReference(if (mComponentName !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(pw.print(""activity, []), Expression(""), [])])    VariableReference(pw.print(""activity, [])    Expression(""), [])  MethodCall(pw.print(mComponentName.flattenToShortString()), [VariableReference(pw, []), Expression(mComponentName.flattenToShortString(), [])])    VariableReference(pw, [])    Expression(mComponentName.flattenToShortString(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mId !, []), Expression(null) {, [])])    VariableReference(if (mId !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(pw.print("", id, []), Expression(""), [])])    VariableReference(pw.print("", id, [])    Expression(""), [])  MethodCall(mId.dump(pw), [VariableReference(mId, []), Expression(pw, [])])    VariableReference(mId, [])    Expression(pw, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(pw.print("", activityId, []), Expression(""), [])])    VariableReference(pw.print("", activityId, [])    Expression(""), [])  MethodCall(pw.print(mActivityId), [VariableReference(pw, []), Expression(mActivityId, [])])    VariableReference(pw, [])    Expression(mActivityId, [])  AssignmentExpression(=, [VariableReference(pw.print("", displayId, []), Expression(""), [])])    VariableReference(pw.print("", displayId, [])    Expression(""), [])  MethodCall(pw.print(mDisplayId), [VariableReference(pw, []), Expression(mDisplayId, [])])    VariableReference(pw, [])    Expression(mDisplayId, [])  AssignmentExpression(=, [VariableReference(if (mParentSessionId !, []), Expression(NO_SESSION_ID) {, [])])    VariableReference(if (mParentSessionId !, [])    Expression(NO_SESSION_ID) {, [])  AssignmentExpression(=, [VariableReference(pw.print("", parentId, []), Expression(""), [])])    VariableReference(pw.print("", parentId, [])    Expression(""), [])  MethodCall(pw.print(mParentSessionId), [VariableReference(pw, []), Expression(mParentSessionId, [])])    VariableReference(pw, [])    Expression(mParentSessionId, [])  Statement(}, [])  Statement(if (mFlags > 0) {, [])  AssignmentExpression(=, [VariableReference(pw.print("", flags, []), Expression(""), [])])    VariableReference(pw.print("", flags, [])    Expression(""), [])  MethodCall(pw.print(mFlags), [VariableReference(pw, []), Expression(mFlags, [])])    VariableReference(pw, [])    Expression(mFlags, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mExtras !, []), Expression(null) {, [])])    VariableReference(if (mExtras !, [])    Expression(null) {, [])  Statement(// NOTE: cannot dump because it could contain PII, [])  MethodCall(pw.print("", hasExtras""), [VariableReference(pw, []), Expression("", []), Expression(hasExtras"", [])])    VariableReference(pw, [])    Expression("", [])    Expression(hasExtras"", [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mComponentName !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(pw.print(""activity, []), Expression(""), [])]), MethodCall(pw.print(mComponentName.flattenToShortString()), [VariableReference(pw, []), Expression(mComponentName.flattenToShortString(), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mId !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(pw.print("", id, []), Expression(""), [])]), MethodCall(mId.dump(pw), [VariableReference(mId, []), Expression(pw, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(pw.print("", activityId, []), Expression(""), [])]), MethodCall(pw.print(mActivityId), [VariableReference(pw, []), Expression(mActivityId, [])]), AssignmentExpression(=, [VariableReference(pw.print("", displayId, []), Expression(""), [])]), MethodCall(pw.print(mDisplayId), [VariableReference(pw, []), Expression(mDisplayId, [])]), AssignmentExpression(=, [VariableReference(pw.print("", windowToken, []), Expression(""), [])]), MethodCall(pw.print(mWindowToken), [VariableReference(pw, []), Expression(mWindowToken, [])]), AssignmentExpression(=, [VariableReference(if (mParentSessionId !, []), Expression(NO_SESSION_ID) {, [])]), AssignmentExpression(=, [VariableReference(pw.print("", parentId, []), Expression(""), [])]), MethodCall(pw.print(mParentSessionId), [VariableReference(pw, []), Expression(mParentSessionId, [])]), Statement(}, []), Statement(if (mFlags > 0) {, []), AssignmentExpression(=, [VariableReference(pw.print("", flags, []), Expression(""), [])]), MethodCall(pw.print(mFlags), [VariableReference(pw, []), Expression(mFlags, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mExtras !, []), Expression(null) {, [])]), Statement(// NOTE: cannot dump because it could contain PII, []), MethodCall(pw.print("", hasExtras""), [VariableReference(pw, []), Expression("", []), Expression(hasExtras"", [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mComponentName !, []), Expression(null) {, [])])    VariableReference(if (mComponentName !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(pw.print(""activity, []), Expression(""), [])])    VariableReference(pw.print(""activity, [])    Expression(""), [])  MethodCall(pw.print(mComponentName.flattenToShortString()), [VariableReference(pw, []), Expression(mComponentName.flattenToShortString(), [])])    VariableReference(pw, [])    Expression(mComponentName.flattenToShortString(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mId !, []), Expression(null) {, [])])    VariableReference(if (mId !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(pw.print("", id, []), Expression(""), [])])    VariableReference(pw.print("", id, [])    Expression(""), [])  MethodCall(mId.dump(pw), [VariableReference(mId, []), Expression(pw, [])])    VariableReference(mId, [])    Expression(pw, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(pw.print("", activityId, []), Expression(""), [])])    VariableReference(pw.print("", activityId, [])    Expression(""), [])  MethodCall(pw.print(mActivityId), [VariableReference(pw, []), Expression(mActivityId, [])])    VariableReference(pw, [])    Expression(mActivityId, [])  AssignmentExpression(=, [VariableReference(pw.print("", displayId, []), Expression(""), [])])    VariableReference(pw.print("", displayId, [])    Expression(""), [])  MethodCall(pw.print(mDisplayId), [VariableReference(pw, []), Expression(mDisplayId, [])])    VariableReference(pw, [])    Expression(mDisplayId, [])  AssignmentExpression(=, [VariableReference(pw.print("", windowToken, []), Expression(""), [])])    VariableReference(pw.print("", windowToken, [])    Expression(""), [])  MethodCall(pw.print(mWindowToken), [VariableReference(pw, []), Expression(mWindowToken, [])])    VariableReference(pw, [])    Expression(mWindowToken, [])  AssignmentExpression(=, [VariableReference(if (mParentSessionId !, []), Expression(NO_SESSION_ID) {, [])])    VariableReference(if (mParentSessionId !, [])    Expression(NO_SESSION_ID) {, [])  AssignmentExpression(=, [VariableReference(pw.print("", parentId, []), Expression(""), [])])    VariableReference(pw.print("", parentId, [])    Expression(""), [])  MethodCall(pw.print(mParentSessionId), [VariableReference(pw, []), Expression(mParentSessionId, [])])    VariableReference(pw, [])    Expression(mParentSessionId, [])  Statement(}, [])  Statement(if (mFlags > 0) {, [])  AssignmentExpression(=, [VariableReference(pw.print("", flags, []), Expression(""), [])])    VariableReference(pw.print("", flags, [])    Expression(""), [])  MethodCall(pw.print(mFlags), [VariableReference(pw, []), Expression(mFlags, [])])    VariableReference(pw, [])    Expression(mFlags, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mExtras !, []), Expression(null) {, [])])    VariableReference(if (mExtras !, [])    Expression(null) {, [])  Statement(// NOTE: cannot dump because it could contain PII, [])  MethodCall(pw.print("", hasExtras""), [VariableReference(pw, []), Expression("", []), Expression(hasExtras"", [])])    VariableReference(pw, [])    Expression("", [])    Expression(hasExtras"", [])  Statement(}, [])  Statement(}, [])",1,"// TODO(b/111276913): dump to proto as well
","// TODO(b/111276913): dump to proto as well
",0,,,0,,,,"1,2","4,5",0,4,0,A new statement `pw.print(mWindowToken);` has been introduced in the late version. This change falls under the category of "other statement changed".,"The introduction of `pw.print(mWindowToken);` does not potentially cause the API to return a different variable (value or type) or throw exceptions differently. Hence, the change is not considered to be causing any compatibility issue."
<android.appwidget.AppWidgetHostView.ViewApplyListener: void onViewApplied(View)>,31,32,,,,"{
    AppWidgetHostView.this.mLayoutId = mLayoutId;
    mViewMode = VIEW_MODE_CONTENT;
    applyContent(v, mIsReapply, null);
    mLastInflatedRemoteViewsId = mViews.computeUniqueId(mLastInflatedRemoteViews);
    restoreInstanceState();
    mLastExecutionSignal = null;
}","{
    mViewMode = VIEW_MODE_CONTENT;
    applyContent(v, mIsReapply, null);
    mLastInflatedRemoteViewsId = mViews.computeUniqueId(mLastInflatedRemoteViews);
    restoreInstanceState();
    mLastExecutionSignal = null;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(AppWidgetHostView.this.mLayoutId, []), Expression(mLayoutId, [])]), AssignmentExpression(=, [VariableReference(mViewMode, []), Expression(VIEW_MODE_CONTENT, [])]), Statement(applyContent(v, mIsReapply, null), []), AssignmentExpression(=, [VariableReference(mLastInflatedRemoteViewsId, []), Expression(mViews.computeUniqueId(mLastInflatedRemoteViews), [])]), Statement(restoreInstanceState(), []), AssignmentExpression(=, [VariableReference(mLastExecutionSignal, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(AppWidgetHostView.this.mLayoutId, []), Expression(mLayoutId, [])])    VariableReference(AppWidgetHostView.this.mLayoutId, [])    Expression(mLayoutId, [])  AssignmentExpression(=, [VariableReference(mViewMode, []), Expression(VIEW_MODE_CONTENT, [])])    VariableReference(mViewMode, [])    Expression(VIEW_MODE_CONTENT, [])  Statement(applyContent(v, mIsReapply, null), [])  AssignmentExpression(=, [VariableReference(mLastInflatedRemoteViewsId, []), Expression(mViews.computeUniqueId(mLastInflatedRemoteViews), [])])    VariableReference(mLastInflatedRemoteViewsId, [])    Expression(mViews.computeUniqueId(mLastInflatedRemoteViews), [])  Statement(restoreInstanceState(), [])  AssignmentExpression(=, [VariableReference(mLastExecutionSignal, []), Expression(null, [])])    VariableReference(mLastExecutionSignal, [])    Expression(null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mViewMode, []), Expression(VIEW_MODE_CONTENT, [])]), Statement(applyContent(v, mIsReapply, null), []), AssignmentExpression(=, [VariableReference(mLastInflatedRemoteViewsId, []), Expression(mViews.computeUniqueId(mLastInflatedRemoteViews), [])]), Statement(restoreInstanceState(), []), AssignmentExpression(=, [VariableReference(mLastExecutionSignal, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mViewMode, []), Expression(VIEW_MODE_CONTENT, [])])    VariableReference(mViewMode, [])    Expression(VIEW_MODE_CONTENT, [])  Statement(applyContent(v, mIsReapply, null), [])  AssignmentExpression(=, [VariableReference(mLastInflatedRemoteViewsId, []), Expression(mViews.computeUniqueId(mLastInflatedRemoteViews), [])])    VariableReference(mLastInflatedRemoteViewsId, [])    Expression(mViews.computeUniqueId(mLastInflatedRemoteViews), [])  Statement(restoreInstanceState(), [])  AssignmentExpression(=, [VariableReference(mLastExecutionSignal, []), Expression(null, [])])    VariableReference(mLastExecutionSignal, [])    Expression(null, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2",4,0,4,0,"The statement `AppWidgetHostView.this.mLayoutId = mLayoutId;` was removed in the late version. This change does not modify the return value or the exception handling behaviour, but it is categorized as an ""Other statement changed"" type.","Since the change does not affect the return value or the exception handling behaviour of the method, there is no compatibility issue."
"<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(ComponentName,int)>",31,32,,,,"{
    if (mService != null) {
        try {
            mService.setPasswordMinimumLowerCase(admin, length, mParentInstance);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}","{
    if (mService != null) {
        try {
            mService.setPasswordMinimumLowerCase(admin, length, mParentInstance);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(mService.setPasswordMinimumLowerCase(admin, length, mParentInstance), [VariableReference(mService, []), Expression(admin, []), Expression(length, []), Expression(mParentInstance, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(mService.setPasswordMinimumLowerCase(admin, length, mParentInstance), [VariableReference(mService, []), Expression(admin, []), Expression(length, []), Expression(mParentInstance, [])])    VariableReference(mService, [])    Expression(admin, [])    Expression(length, [])    Expression(mParentInstance, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(mService.setPasswordMinimumLowerCase(admin, length, mParentInstance), [VariableReference(mService, []), Expression(admin, []), Expression(length, []), Expression(mParentInstance, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(mService.setPasswordMinimumLowerCase(admin, length, mParentInstance), [VariableReference(mService, []), Expression(admin, []), Expression(length, []), Expression(mParentInstance, [])])    VariableReference(mService, [])    Expression(admin, [])    Expression(length, [])    Expression(mParentInstance, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Called by an application that is administering the device to set the minimum number of lower
 * case letters required in the password. After setting this, the user will not be able to enter
 * a new password that is not at least as restrictive as what has been set. Note that the
 * current password will remain until the user has set a new one, so the change does not take
 * place immediately. To prompt the user for a new password, use
 * {@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
 * setting this value. This constraint is only imposed if the administrator has also requested
 * {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. If an app targeting
 * SDK level {@link android.os.Build.VERSION_CODES#R} and above enforces this constraint without
 * settings password quality to {@link #PASSWORD_QUALITY_COMPLEX} first, this method will throw
 * {@link IllegalStateException}. The default value is 0.
 * <p>
 * On devices not supporting {@link PackageManager#FEATURE_SECURE_LOCK_SCREEN} feature, the
 * password is always treated as empty.
 * <p>
 * The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
 * not, a security exception will be thrown.
 * <p>
 *
 * Apps targeting {@link android.os.Build.VERSION_CODES#R} and below can call this method on the
 * {@link DevicePolicyManager} instance returned by
 * {@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
 * profile.
 *
 * @deprecated see {@link #setPasswordQuality(ComponentName, int)} for details.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param length The new desired minimum number of lower case letters required in the password.
 * A value of 0 means there is no restriction.
 * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
 * does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}
 * @throws IllegalStateException if the calling app is targeting SDK level
 * {@link android.os.Build.VERSION_CODES#R} and above and didn't set a sufficient password
 * quality requirement prior to calling this method.
 */
","/**
 * Called by an application that is administering the device to set the minimum number of lower
 * case letters required in the password. After setting this, the user will not be able to enter
 * a new password that is not at least as restrictive as what has been set. Note that the
 * current password will remain until the user has set a new one, so the change does not take
 * place immediately. To prompt the user for a new password, use
 * {@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
 * setting this value. This constraint is only imposed if the administrator has also requested
 * {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. If an app targeting
 * SDK level {@link android.os.Build.VERSION_CODES#R} and above enforces this constraint without
 * settings password quality to {@link #PASSWORD_QUALITY_COMPLEX} first, this method will throw
 * {@link IllegalStateException}. The default value is 0.
 * <p>
 * On devices not supporting {@link PackageManager#FEATURE_SECURE_LOCK_SCREEN} feature, the
 * password is always treated as empty.
 * <p>
 * The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
 * not, a security exception will be thrown.
 * <p>
 * Apps targeting {@link android.os.Build.VERSION_CODES#R} and below can call this method on the
 * {@link DevicePolicyManager} instance returned by
 * {@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
 * profile.
 *
 * <p><string>Note:</strong> this method is ignored on
 * {PackageManager#FEATURE_AUTOMOTIVE automotive builds}.
 *
 * @deprecated see {@link #setPasswordQuality(ComponentName, int)} for details.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param length The new desired minimum number of lower case letters required in the password.
 * A value of 0 means there is no restriction.
 * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
 * does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}
 * @throws IllegalStateException if the calling app is targeting SDK level
 * {@link android.os.Build.VERSION_CODES#R} and above and didn't set a sufficient password
 * quality requirement prior to calling this method.
 */
",1,[@Deprecated],[@Deprecated],0,,,,0,0,0,0,0,There are no changes in the code between the early version and the late version.,"As there are no code changes, there are no compatibility issues."
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(Message)>,31,32,,,,"{
    InputMethod inputMethod = mInputMethod.get();
    // Need a valid reference to the inputMethod for everything except a dump.
    if (inputMethod == null && msg.what != DO_DUMP) {
        Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what);
        return;
    }
    switch(msg.what) {
        case DO_DUMP:
            {
                AbstractInputMethodService target = mTarget.get();
                if (target == null) {
                    return;
                }
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3);
                } catch (RuntimeException e) {
                    ((PrintWriter) args.arg2).println(""Exception: "" + e);
                }
                synchronized (args.arg4) {
                    ((CountDownLatch) args.arg4).countDown();
                }
                args.recycle();
                return;
            }
        case DO_INITIALIZE_INTERNAL:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    inputMethod.initializeInternal((IBinder) args.arg1, msg.arg1, (IInputMethodPrivilegedOperations) args.arg2, (int) args.arg3);
                } finally {
                    args.recycle();
                }
                return;
            }
        case DO_SET_INPUT_CONTEXT:
            {
                inputMethod.bindInput((InputBinding) msg.obj);
                return;
            }
        case DO_UNSET_INPUT_CONTEXT:
            inputMethod.unbindInput();
            return;
        case DO_START_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                final IBinder startInputToken = (IBinder) args.arg1;
                final IInputContext inputContext = (IInputContext) args.arg2;
                final EditorInfo info = (EditorInfo) args.arg3;
                final CancellationGroup cancellationGroup = (CancellationGroup) args.arg4;
                SomeArgs moreArgs = (SomeArgs) args.arg5;
                final InputConnection ic = inputContext != null ? new InputConnectionWrapper(mTarget, inputContext, moreArgs.argi3, cancellationGroup) : null;
                info.makeCompatible(mTargetSdkVersion);
                inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1 == 1, /* restarting */
                startInputToken);
                args.recycle();
                moreArgs.recycle();
                return;
            }
        case DO_CREATE_SESSION:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2));
                args.recycle();
                return;
            }
        case DO_SET_SESSION_ENABLED:
            inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 != 0);
            return;
        case DO_REVOKE_SESSION:
            inputMethod.revokeSession((InputMethodSession) msg.obj);
            return;
        case DO_SHOW_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_HIDE_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_CHANGE_INPUTMETHOD_SUBTYPE:
            inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj);
            return;
        case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:
            final SomeArgs args = (SomeArgs) msg.obj;
            inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2);
            args.recycle();
            return;
    }
    Log.w(TAG, ""Unhandled message code: "" + msg.what);
}","{
    InputMethod inputMethod = mInputMethod.get();
    // Need a valid reference to the inputMethod for everything except a dump.
    if (inputMethod == null && msg.what != DO_DUMP) {
        Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what);
        return;
    }
    switch(msg.what) {
        case DO_DUMP:
            {
                AbstractInputMethodService target = mTarget.get();
                if (target == null) {
                    return;
                }
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3);
                } catch (RuntimeException e) {
                    ((PrintWriter) args.arg2).println(""Exception: "" + e);
                }
                synchronized (args.arg4) {
                    ((CountDownLatch) args.arg4).countDown();
                }
                args.recycle();
                return;
            }
        case DO_INITIALIZE_INTERNAL:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    inputMethod.initializeInternal((IBinder) args.arg1, (IInputMethodPrivilegedOperations) args.arg2, msg.arg1);
                } finally {
                    args.recycle();
                }
                return;
            }
        case DO_SET_INPUT_CONTEXT:
            {
                inputMethod.bindInput((InputBinding) msg.obj);
                return;
            }
        case DO_UNSET_INPUT_CONTEXT:
            inputMethod.unbindInput();
            return;
        case DO_START_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                final IBinder startInputToken = (IBinder) args.arg1;
                final IInputContext inputContext = (IInputContext) args.arg2;
                final EditorInfo info = (EditorInfo) args.arg3;
                final CancellationGroup cancellationGroup = (CancellationGroup) args.arg4;
                SomeArgs moreArgs = (SomeArgs) args.arg5;
                final InputConnection ic = inputContext != null ? new InputConnectionWrapper(mTarget, inputContext, moreArgs.argi3, cancellationGroup) : null;
                info.makeCompatible(mTargetSdkVersion);
                inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1 == 1, /* restarting */
                startInputToken);
                args.recycle();
                moreArgs.recycle();
                return;
            }
        case DO_CREATE_SESSION:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2));
                args.recycle();
                return;
            }
        case DO_SET_SESSION_ENABLED:
            inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 != 0);
            return;
        case DO_REVOKE_SESSION:
            inputMethod.revokeSession((InputMethodSession) msg.obj);
            return;
        case DO_SHOW_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_HIDE_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_CHANGE_INPUTMETHOD_SUBTYPE:
            inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj);
            return;
        case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:
            final SomeArgs args = (SomeArgs) msg.obj;
            inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2);
            args.recycle();
            return;
    }
    Log.w(TAG, ""Unhandled message code: "" + msg.what);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(InputMethod inputMethod, []), Expression(mInputMethod.get(), [])]), Statement(// Need a valid reference to the inputMethod for everything except a dump., []), AssignmentExpression(=, [VariableReference(if (inputMethod, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Input method reference was null, []), Expression(ignoring message: "" + msg.what, [])]), Statement(return, []), Statement(}, []), Statement(case DO_DUMP:, []), Statement({, []), AssignmentExpression(=, [VariableReference(AbstractInputMethodService target, []), Expression(mTarget.get(), [])]), AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), Statement(try {, []), MethodCall(target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3), [VariableReference(target, []), Expression((FileDescriptor) args.arg1, []), Expression((PrintWriter) args.arg2, []), Expression((String[]) args.arg3, [])]), Statement(} catch (RuntimeException e) {, []), Statement(}, []), Statement(}, []), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_INITIALIZE_INTERNAL:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), Statement(try {, []), MethodCall(inputMethod.initializeInternal((IBinder) args.arg1, msg.arg1, (IInputMethodPrivilegedOperations) args.arg2, (int) args.arg3), [VariableReference(inputMethod, []), Expression((IBinder) args.arg1, []), Expression(msg.arg1, []), Expression((IInputMethodPrivilegedOperations) args.arg2, []), Expression((int) args.arg3, [])]), Statement(} finally {, []), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(}, []), Statement(return, []), Statement(}, []), Statement(case DO_SET_INPUT_CONTEXT:, []), Statement({, []), MethodCall(inputMethod.bindInput((InputBinding) msg.obj), [VariableReference(inputMethod, []), Expression((InputBinding) msg.obj, [])]), Statement(return, []), Statement(}, []), Statement(case DO_UNSET_INPUT_CONTEXT:, []), MethodCall(inputMethod.unbindInput(), [VariableReference(inputMethod, []), Expression(, [])]), Statement(return, []), Statement(case DO_START_INPUT:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(final IBinder startInputToken, []), Expression((IBinder) args.arg1, [])]), AssignmentExpression(=, [VariableReference(final IInputContext inputContext, []), Expression((IInputContext) args.arg2, [])]), AssignmentExpression(=, [VariableReference(final EditorInfo info, []), Expression((EditorInfo) args.arg3, [])]), AssignmentExpression(=, [VariableReference(final CancellationGroup cancellationGroup, []), Expression((CancellationGroup) args.arg4, [])]), AssignmentExpression(=, [VariableReference(SomeArgs moreArgs, []), Expression((SomeArgs) args.arg5, [])]), AssignmentExpression(=, [VariableReference(final InputConnection ic, []), Expression(inputContext !, [])]), MethodCall(info.makeCompatible(mTargetSdkVersion), [VariableReference(info, []), Expression(mTargetSdkVersion, [])]), AssignmentExpression(=, [VariableReference(inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1, []), Expression(, [])]), Statement(startInputToken), []), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), MethodCall(moreArgs.recycle(), [VariableReference(moreArgs, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_CREATE_SESSION:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2)), [VariableReference(inputMethod, []), Expression(new InputMethodSessionCallbackWrapper(mContext, []), Expression((InputChannel) args.arg1, []), Expression((IInputSessionCallback) args.arg2), [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_SET_SESSION_ENABLED:, []), AssignmentExpression(=, [VariableReference(inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 !, []), Expression(0), [])]), Statement(return, []), Statement(case DO_REVOKE_SESSION:, []), MethodCall(inputMethod.revokeSession((InputMethodSession) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSession) msg.obj, [])]), Statement(return, []), Statement(case DO_SHOW_SOFT_INPUT:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_HIDE_SOFT_INPUT:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_CHANGE_INPUTMETHOD_SUBTYPE:, []), MethodCall(inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSubtype) msg.obj, [])]), Statement(return, []), Statement(case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2), [VariableReference(inputMethod, []), Expression((InlineSuggestionsRequestInfo) args.arg1, []), Expression((IInlineSuggestionsRequestCallback) args.arg2, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), MethodCall(Log.w(TAG, ""Unhandled message code: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unhandled message code: "" + msg.what, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(InputMethod inputMethod, []), Expression(mInputMethod.get(), [])])    VariableReference(InputMethod inputMethod, [])    Expression(mInputMethod.get(), [])  Statement(// Need a valid reference to the inputMethod for everything except a dump., [])  AssignmentExpression(=, [VariableReference(if (inputMethod, []), Expression(, [])])    VariableReference(if (inputMethod, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Input method reference was null, []), Expression(ignoring message: "" + msg.what, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Input method reference was null, [])    Expression(ignoring message: "" + msg.what, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_DUMP:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(AbstractInputMethodService target, []), Expression(mTarget.get(), [])])    VariableReference(AbstractInputMethodService target, [])    Expression(mTarget.get(), [])  AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])])    VariableReference(if (target, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  Statement(try {, [])  MethodCall(target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3), [VariableReference(target, []), Expression((FileDescriptor) args.arg1, []), Expression((PrintWriter) args.arg2, []), Expression((String[]) args.arg3, [])])    VariableReference(target, [])    Expression((FileDescriptor) args.arg1, [])    Expression((PrintWriter) args.arg2, [])    Expression((String[]) args.arg3, [])  Statement(} catch (RuntimeException e) {, [])  Statement(}, [])  Statement(}, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_INITIALIZE_INTERNAL:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  Statement(try {, [])  MethodCall(inputMethod.initializeInternal((IBinder) args.arg1, msg.arg1, (IInputMethodPrivilegedOperations) args.arg2, (int) args.arg3), [VariableReference(inputMethod, []), Expression((IBinder) args.arg1, []), Expression(msg.arg1, []), Expression((IInputMethodPrivilegedOperations) args.arg2, []), Expression((int) args.arg3, [])])    VariableReference(inputMethod, [])    Expression((IBinder) args.arg1, [])    Expression(msg.arg1, [])    Expression((IInputMethodPrivilegedOperations) args.arg2, [])    Expression((int) args.arg3, [])  Statement(} finally {, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_SET_INPUT_CONTEXT:, [])  Statement({, [])  MethodCall(inputMethod.bindInput((InputBinding) msg.obj), [VariableReference(inputMethod, []), Expression((InputBinding) msg.obj, [])])    VariableReference(inputMethod, [])    Expression((InputBinding) msg.obj, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_UNSET_INPUT_CONTEXT:, [])  MethodCall(inputMethod.unbindInput(), [VariableReference(inputMethod, []), Expression(, [])])    VariableReference(inputMethod, [])    Expression(, [])  Statement(return, [])  Statement(case DO_START_INPUT:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(final IBinder startInputToken, []), Expression((IBinder) args.arg1, [])])    VariableReference(final IBinder startInputToken, [])    Expression((IBinder) args.arg1, [])  AssignmentExpression(=, [VariableReference(final IInputContext inputContext, []), Expression((IInputContext) args.arg2, [])])    VariableReference(final IInputContext inputContext, [])    Expression((IInputContext) args.arg2, [])  AssignmentExpression(=, [VariableReference(final EditorInfo info, []), Expression((EditorInfo) args.arg3, [])])    VariableReference(final EditorInfo info, [])    Expression((EditorInfo) args.arg3, [])  AssignmentExpression(=, [VariableReference(final CancellationGroup cancellationGroup, []), Expression((CancellationGroup) args.arg4, [])])    VariableReference(final CancellationGroup cancellationGroup, [])    Expression((CancellationGroup) args.arg4, [])  AssignmentExpression(=, [VariableReference(SomeArgs moreArgs, []), Expression((SomeArgs) args.arg5, [])])    VariableReference(SomeArgs moreArgs, [])    Expression((SomeArgs) args.arg5, [])  AssignmentExpression(=, [VariableReference(final InputConnection ic, []), Expression(inputContext !, [])])    VariableReference(final InputConnection ic, [])    Expression(inputContext !, [])  MethodCall(info.makeCompatible(mTargetSdkVersion), [VariableReference(info, []), Expression(mTargetSdkVersion, [])])    VariableReference(info, [])    Expression(mTargetSdkVersion, [])  AssignmentExpression(=, [VariableReference(inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1, []), Expression(, [])])    VariableReference(inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1, [])    Expression(, [])  Statement(startInputToken), [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  MethodCall(moreArgs.recycle(), [VariableReference(moreArgs, []), Expression(, [])])    VariableReference(moreArgs, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_CREATE_SESSION:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2)), [VariableReference(inputMethod, []), Expression(new InputMethodSessionCallbackWrapper(mContext, []), Expression((InputChannel) args.arg1, []), Expression((IInputSessionCallback) args.arg2), [])])    VariableReference(inputMethod, [])    Expression(new InputMethodSessionCallbackWrapper(mContext, [])    Expression((InputChannel) args.arg1, [])    Expression((IInputSessionCallback) args.arg2), [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_SET_SESSION_ENABLED:, [])  AssignmentExpression(=, [VariableReference(inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 !, []), Expression(0), [])])    VariableReference(inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 !, [])    Expression(0), [])  Statement(return, [])  Statement(case DO_REVOKE_SESSION:, [])  MethodCall(inputMethod.revokeSession((InputMethodSession) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSession) msg.obj, [])])    VariableReference(inputMethod, [])    Expression((InputMethodSession) msg.obj, [])  Statement(return, [])  Statement(case DO_SHOW_SOFT_INPUT:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])])    VariableReference(inputMethod, [])    Expression(msg.arg1, [])    Expression((ResultReceiver) args.arg2, [])    Expression((IBinder) args.arg1, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_HIDE_SOFT_INPUT:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])])    VariableReference(inputMethod, [])    Expression(msg.arg1, [])    Expression((ResultReceiver) args.arg2, [])    Expression((IBinder) args.arg1, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_CHANGE_INPUTMETHOD_SUBTYPE:, [])  MethodCall(inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSubtype) msg.obj, [])])    VariableReference(inputMethod, [])    Expression((InputMethodSubtype) msg.obj, [])  Statement(return, [])  Statement(case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2), [VariableReference(inputMethod, []), Expression((InlineSuggestionsRequestInfo) args.arg1, []), Expression((IInlineSuggestionsRequestCallback) args.arg2, [])])    VariableReference(inputMethod, [])    Expression((InlineSuggestionsRequestInfo) args.arg1, [])    Expression((IInlineSuggestionsRequestCallback) args.arg2, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  MethodCall(Log.w(TAG, ""Unhandled message code: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unhandled message code: "" + msg.what, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unhandled message code: "" + msg.what, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(InputMethod inputMethod, []), Expression(mInputMethod.get(), [])]), Statement(// Need a valid reference to the inputMethod for everything except a dump., []), AssignmentExpression(=, [VariableReference(if (inputMethod, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Input method reference was null, []), Expression(ignoring message: "" + msg.what, [])]), Statement(return, []), Statement(}, []), Statement(case DO_DUMP:, []), Statement({, []), AssignmentExpression(=, [VariableReference(AbstractInputMethodService target, []), Expression(mTarget.get(), [])]), AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), Statement(try {, []), MethodCall(target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3), [VariableReference(target, []), Expression((FileDescriptor) args.arg1, []), Expression((PrintWriter) args.arg2, []), Expression((String[]) args.arg3, [])]), Statement(} catch (RuntimeException e) {, []), Statement(}, []), Statement(}, []), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_INITIALIZE_INTERNAL:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), Statement(try {, []), MethodCall(inputMethod.initializeInternal((IBinder) args.arg1, (IInputMethodPrivilegedOperations) args.arg2, msg.arg1), [VariableReference(inputMethod, []), Expression((IBinder) args.arg1, []), Expression((IInputMethodPrivilegedOperations) args.arg2, []), Expression(msg.arg1, [])]), Statement(} finally {, []), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(}, []), Statement(return, []), Statement(}, []), Statement(case DO_SET_INPUT_CONTEXT:, []), Statement({, []), MethodCall(inputMethod.bindInput((InputBinding) msg.obj), [VariableReference(inputMethod, []), Expression((InputBinding) msg.obj, [])]), Statement(return, []), Statement(}, []), Statement(case DO_UNSET_INPUT_CONTEXT:, []), MethodCall(inputMethod.unbindInput(), [VariableReference(inputMethod, []), Expression(, [])]), Statement(return, []), Statement(case DO_START_INPUT:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(final IBinder startInputToken, []), Expression((IBinder) args.arg1, [])]), AssignmentExpression(=, [VariableReference(final IInputContext inputContext, []), Expression((IInputContext) args.arg2, [])]), AssignmentExpression(=, [VariableReference(final EditorInfo info, []), Expression((EditorInfo) args.arg3, [])]), AssignmentExpression(=, [VariableReference(final CancellationGroup cancellationGroup, []), Expression((CancellationGroup) args.arg4, [])]), AssignmentExpression(=, [VariableReference(SomeArgs moreArgs, []), Expression((SomeArgs) args.arg5, [])]), AssignmentExpression(=, [VariableReference(final InputConnection ic, []), Expression(inputContext !, [])]), MethodCall(info.makeCompatible(mTargetSdkVersion), [VariableReference(info, []), Expression(mTargetSdkVersion, [])]), AssignmentExpression(=, [VariableReference(inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1, []), Expression(, [])]), Statement(startInputToken), []), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), MethodCall(moreArgs.recycle(), [VariableReference(moreArgs, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_CREATE_SESSION:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2)), [VariableReference(inputMethod, []), Expression(new InputMethodSessionCallbackWrapper(mContext, []), Expression((InputChannel) args.arg1, []), Expression((IInputSessionCallback) args.arg2), [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_SET_SESSION_ENABLED:, []), AssignmentExpression(=, [VariableReference(inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 !, []), Expression(0), [])]), Statement(return, []), Statement(case DO_REVOKE_SESSION:, []), MethodCall(inputMethod.revokeSession((InputMethodSession) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSession) msg.obj, [])]), Statement(return, []), Statement(case DO_SHOW_SOFT_INPUT:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_HIDE_SOFT_INPUT:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(case DO_CHANGE_INPUTMETHOD_SUBTYPE:, []), MethodCall(inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSubtype) msg.obj, [])]), Statement(return, []), Statement(case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:, []), AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), MethodCall(inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2), [VariableReference(inputMethod, []), Expression((InlineSuggestionsRequestInfo) args.arg1, []), Expression((IInlineSuggestionsRequestCallback) args.arg2, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(return, []), Statement(}, []), MethodCall(Log.w(TAG, ""Unhandled message code: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unhandled message code: "" + msg.what, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(InputMethod inputMethod, []), Expression(mInputMethod.get(), [])])    VariableReference(InputMethod inputMethod, [])    Expression(mInputMethod.get(), [])  Statement(// Need a valid reference to the inputMethod for everything except a dump., [])  AssignmentExpression(=, [VariableReference(if (inputMethod, []), Expression(, [])])    VariableReference(if (inputMethod, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Input method reference was null, []), Expression(ignoring message: "" + msg.what, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Input method reference was null, [])    Expression(ignoring message: "" + msg.what, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_DUMP:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(AbstractInputMethodService target, []), Expression(mTarget.get(), [])])    VariableReference(AbstractInputMethodService target, [])    Expression(mTarget.get(), [])  AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])])    VariableReference(if (target, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  Statement(try {, [])  MethodCall(target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3), [VariableReference(target, []), Expression((FileDescriptor) args.arg1, []), Expression((PrintWriter) args.arg2, []), Expression((String[]) args.arg3, [])])    VariableReference(target, [])    Expression((FileDescriptor) args.arg1, [])    Expression((PrintWriter) args.arg2, [])    Expression((String[]) args.arg3, [])  Statement(} catch (RuntimeException e) {, [])  Statement(}, [])  Statement(}, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_INITIALIZE_INTERNAL:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  Statement(try {, [])  MethodCall(inputMethod.initializeInternal((IBinder) args.arg1, (IInputMethodPrivilegedOperations) args.arg2, msg.arg1), [VariableReference(inputMethod, []), Expression((IBinder) args.arg1, []), Expression((IInputMethodPrivilegedOperations) args.arg2, []), Expression(msg.arg1, [])])    VariableReference(inputMethod, [])    Expression((IBinder) args.arg1, [])    Expression((IInputMethodPrivilegedOperations) args.arg2, [])    Expression(msg.arg1, [])  Statement(} finally {, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_SET_INPUT_CONTEXT:, [])  Statement({, [])  MethodCall(inputMethod.bindInput((InputBinding) msg.obj), [VariableReference(inputMethod, []), Expression((InputBinding) msg.obj, [])])    VariableReference(inputMethod, [])    Expression((InputBinding) msg.obj, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_UNSET_INPUT_CONTEXT:, [])  MethodCall(inputMethod.unbindInput(), [VariableReference(inputMethod, []), Expression(, [])])    VariableReference(inputMethod, [])    Expression(, [])  Statement(return, [])  Statement(case DO_START_INPUT:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(final IBinder startInputToken, []), Expression((IBinder) args.arg1, [])])    VariableReference(final IBinder startInputToken, [])    Expression((IBinder) args.arg1, [])  AssignmentExpression(=, [VariableReference(final IInputContext inputContext, []), Expression((IInputContext) args.arg2, [])])    VariableReference(final IInputContext inputContext, [])    Expression((IInputContext) args.arg2, [])  AssignmentExpression(=, [VariableReference(final EditorInfo info, []), Expression((EditorInfo) args.arg3, [])])    VariableReference(final EditorInfo info, [])    Expression((EditorInfo) args.arg3, [])  AssignmentExpression(=, [VariableReference(final CancellationGroup cancellationGroup, []), Expression((CancellationGroup) args.arg4, [])])    VariableReference(final CancellationGroup cancellationGroup, [])    Expression((CancellationGroup) args.arg4, [])  AssignmentExpression(=, [VariableReference(SomeArgs moreArgs, []), Expression((SomeArgs) args.arg5, [])])    VariableReference(SomeArgs moreArgs, [])    Expression((SomeArgs) args.arg5, [])  AssignmentExpression(=, [VariableReference(final InputConnection ic, []), Expression(inputContext !, [])])    VariableReference(final InputConnection ic, [])    Expression(inputContext !, [])  MethodCall(info.makeCompatible(mTargetSdkVersion), [VariableReference(info, []), Expression(mTargetSdkVersion, [])])    VariableReference(info, [])    Expression(mTargetSdkVersion, [])  AssignmentExpression(=, [VariableReference(inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1, []), Expression(, [])])    VariableReference(inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1, [])    Expression(, [])  Statement(startInputToken), [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  MethodCall(moreArgs.recycle(), [VariableReference(moreArgs, []), Expression(, [])])    VariableReference(moreArgs, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_CREATE_SESSION:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2)), [VariableReference(inputMethod, []), Expression(new InputMethodSessionCallbackWrapper(mContext, []), Expression((InputChannel) args.arg1, []), Expression((IInputSessionCallback) args.arg2), [])])    VariableReference(inputMethod, [])    Expression(new InputMethodSessionCallbackWrapper(mContext, [])    Expression((InputChannel) args.arg1, [])    Expression((IInputSessionCallback) args.arg2), [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_SET_SESSION_ENABLED:, [])  AssignmentExpression(=, [VariableReference(inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 !, []), Expression(0), [])])    VariableReference(inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 !, [])    Expression(0), [])  Statement(return, [])  Statement(case DO_REVOKE_SESSION:, [])  MethodCall(inputMethod.revokeSession((InputMethodSession) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSession) msg.obj, [])])    VariableReference(inputMethod, [])    Expression((InputMethodSession) msg.obj, [])  Statement(return, [])  Statement(case DO_SHOW_SOFT_INPUT:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])])    VariableReference(inputMethod, [])    Expression(msg.arg1, [])    Expression((ResultReceiver) args.arg2, [])    Expression((IBinder) args.arg1, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_HIDE_SOFT_INPUT:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1), [VariableReference(inputMethod, []), Expression(msg.arg1, []), Expression((ResultReceiver) args.arg2, []), Expression((IBinder) args.arg1, [])])    VariableReference(inputMethod, [])    Expression(msg.arg1, [])    Expression((ResultReceiver) args.arg2, [])    Expression((IBinder) args.arg1, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(case DO_CHANGE_INPUTMETHOD_SUBTYPE:, [])  MethodCall(inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj), [VariableReference(inputMethod, []), Expression((InputMethodSubtype) msg.obj, [])])    VariableReference(inputMethod, [])    Expression((InputMethodSubtype) msg.obj, [])  Statement(return, [])  Statement(case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:, [])  AssignmentExpression(=, [VariableReference(final SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(final SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  MethodCall(inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2), [VariableReference(inputMethod, []), Expression((InlineSuggestionsRequestInfo) args.arg1, []), Expression((IInlineSuggestionsRequestCallback) args.arg2, [])])    VariableReference(inputMethod, [])    Expression((InlineSuggestionsRequestInfo) args.arg1, [])    Expression((IInlineSuggestionsRequestCallback) args.arg2, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  MethodCall(Log.w(TAG, ""Unhandled message code: "" + msg.what), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unhandled message code: "" + msg.what, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unhandled message code: "" + msg.what, [])  Statement(}, [])",1,,,0,"[@MainThread, @Override]","[@MainThread, @Override]",0,,,,2,5,0,"1,3",1,"The method `initializeInternal`  under `DO_INITIALIZE_INTERNAL` case has different argument order between two versions, so the code change type is 1,3.","The change in argument order of the method `initializeInternal`  potentially leads to different return results, causing a CI type of 1."
<android.text.style.StyleSpan: void updateMeasureState(TextPaint)>,31,32,,,,"{
    apply(paint, mStyle);
}","{
    apply(paint, mStyle, mFontWeightAdjustment);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(apply(paint, mStyle), []), Statement(}, [])])  Statement({, [])  Statement(apply(paint, mStyle), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(apply(paint, mStyle, mFontWeightAdjustment), []), Statement(}, [])])  Statement({, [])  Statement(apply(paint, mStyle, mFontWeightAdjustment), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,2,5,0,"4,5",0,"The method call to `apply` now includes an additional parameter, `mFontWeightAdjustment`, so the change type is 4,5.",There are no compatibility issues because the change to the method call does not affect the return value or exception handling of the `updateMeasureState` method itself.
"<android.app.DisabledWallpaperManager: int setBitmap(Bitmap,Rect,boolean,int)>",31,32,,,,"{
    return unsupported();
}","{
    unsupported();
    return 0;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return unsupported(), []), Statement(}, [])])  Statement({, [])  Statement(return unsupported(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(unsupported(), []), Statement(return 0, []), Statement(}, [])])  Statement({, [])  Statement(unsupported(), [])  Statement(return 0, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"1,4",1,"1,2","1,2","The early version contains only a return statement with `unsupported()`, whereas the late version includes a call to `unsupported()` but returns a constant value of 0. Hence, it represents both a return statement change and an exception handling change (as `unsupported()` might handle exceptions internally differently compared to simply returning 0). Therefore, the code change type is 1,2.","The return statement change from `unsupported()` to `0` potentially causes the API to return different values. Furthermore, depending on the implementation of the `unsupported()` method, the API could behave differently regarding exception handling. Therefore, it can lead to compatibility issues caused by both different return values and different exception handling. Hence, the CI type is 1,2."
"<android.view.View: boolean startDragAndDrop(ClipData,DragShadowBuilder,Object,int)>",31,32,,,,"{
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data="" + data + "" flags="" + flags);
    }
    if (mAttachInfo == null) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view."");
        return false;
    }
    if (!mAttachInfo.mViewRootImpl.mSurface.isValid()) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface."");
        return false;
    }
    if (data != null) {
        data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) != 0);
    }
    Point shadowSize = new Point();
    Point shadowTouchPoint = new Point();
    shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint);
    if ((shadowSize.x < 0) || (shadowSize.y < 0) || (shadowTouchPoint.x < 0) || (shadowTouchPoint.y < 0)) {
        throw new IllegalStateException(""Drag shadow dimensions must not be negative"");
    }
    // does not accept zero size surface.
    if (shadowSize.x == 0 || shadowSize.y == 0) {
        if (!sAcceptZeroSizeDragShadow) {
            throw new IllegalStateException(""Drag shadow dimensions must be positive"");
        }
        shadowSize.x = 1;
        shadowSize.y = 1;
    }
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""drag shadow: width="" + shadowSize.x + "" height="" + shadowSize.y + "" shadowX="" + shadowTouchPoint.x + "" shadowY="" + shadowTouchPoint.y);
    }
    final ViewRootImpl root = mAttachInfo.mViewRootImpl;
    final SurfaceSession session = new SurfaceSession();
    final SurfaceControl surfaceControl = new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build();
    final Surface surface = new Surface();
    surface.copyFrom(surfaceControl);
    IBinder token = null;
    try {
        final Canvas canvas = isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null);
        try {
            canvas.drawColor(0, PorterDuff.Mode.CLEAR);
            shadowBuilder.onDrawShadow(canvas);
        } finally {
            surface.unlockCanvasAndPost(canvas);
        }
        // repurpose 'shadowSize' for the last touch point
        root.getLastTouchPoint(shadowSize);
        token = mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), shadowSize.x, shadowSize.y, shadowTouchPoint.x, shadowTouchPoint.y, data);
        if (ViewDebug.DEBUG_DRAG) {
            Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token);
        }
        if (token != null) {
            if (mAttachInfo.mDragSurface != null) {
                mAttachInfo.mDragSurface.release();
            }
            mAttachInfo.mDragSurface = surface;
            mAttachInfo.mDragToken = token;
            // Cache the local state object for delivery with DragEvents
            root.setLocalDragState(myLocalState);
        }
        return token != null;
    } catch (Exception e) {
        Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e);
        return false;
    } finally {
        if (token == null) {
            surface.destroy();
        }
        session.kill();
    }
}","{
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data="" + data + "" flags="" + flags);
    }
    if (mAttachInfo == null) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view."");
        return false;
    }
    if (!mAttachInfo.mViewRootImpl.mSurface.isValid()) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface."");
        return false;
    }
    if (data != null) {
        data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) != 0);
    }
    Rect bounds = new Rect();
    getBoundsOnScreen(bounds, true);
    Point lastTouchPoint = new Point();
    mAttachInfo.mViewRootImpl.getLastTouchPoint(lastTouchPoint);
    final ViewRootImpl root = mAttachInfo.mViewRootImpl;
    // Skip surface logic since shadows and animation are not required during the a11y drag
    final boolean a11yEnabled = AccessibilityManager.getInstance(mContext).isEnabled();
    if (a11yEnabled && (flags & View.DRAG_FLAG_ACCESSIBILITY_ACTION) != 0) {
        try {
            IBinder token = mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, null, mAttachInfo.mViewRootImpl.getLastTouchSource(), 0f, 0f, 0f, 0f, data);
            if (ViewDebug.DEBUG_DRAG) {
                Log.d(VIEW_LOG_TAG, ""startDragAndDrop via a11y action returned "" + token);
            }
            if (token != null) {
                root.setLocalDragState(myLocalState);
                mAttachInfo.mDragToken = token;
                mAttachInfo.mViewRootImpl.setDragStartedViewForAccessibility(this);
                setAccessibilityDragStarted(true);
            }
            return token != null;
        } catch (Exception e) {
            Log.e(VIEW_LOG_TAG, ""Unable to initiate a11y drag"", e);
            return false;
        }
    }
    Point shadowSize = new Point();
    Point shadowTouchPoint = new Point();
    shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint);
    if ((shadowSize.x < 0) || (shadowSize.y < 0) || (shadowTouchPoint.x < 0) || (shadowTouchPoint.y < 0)) {
        throw new IllegalStateException(""Drag shadow dimensions must not be negative"");
    }
    // does not accept zero size surface.
    if (shadowSize.x == 0 || shadowSize.y == 0) {
        if (!sAcceptZeroSizeDragShadow) {
            throw new IllegalStateException(""Drag shadow dimensions must be positive"");
        }
        shadowSize.x = 1;
        shadowSize.y = 1;
    }
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""drag shadow: width="" + shadowSize.x + "" height="" + shadowSize.y + "" shadowX="" + shadowTouchPoint.x + "" shadowY="" + shadowTouchPoint.y);
    }
    final SurfaceSession session = new SurfaceSession();
    final SurfaceControl surfaceControl = new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build();
    final Surface surface = new Surface();
    surface.copyFrom(surfaceControl);
    IBinder token = null;
    try {
        final Canvas canvas = isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null);
        try {
            canvas.drawColor(0, PorterDuff.Mode.CLEAR);
            shadowBuilder.onDrawShadow(canvas);
        } finally {
            surface.unlockCanvasAndPost(canvas);
        }
        token = mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), lastTouchPoint.x, lastTouchPoint.y, shadowTouchPoint.x, shadowTouchPoint.y, data);
        if (ViewDebug.DEBUG_DRAG) {
            Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token);
        }
        if (token != null) {
            if (mAttachInfo.mDragSurface != null) {
                mAttachInfo.mDragSurface.release();
            }
            mAttachInfo.mDragSurface = surface;
            mAttachInfo.mDragToken = token;
            // Cache the local state object for delivery with DragEvents
            root.setLocalDragState(myLocalState);
            if (a11yEnabled) {
                // Set for AccessibilityEvents
                mAttachInfo.mViewRootImpl.setDragStartedViewForAccessibility(this);
            }
        }
        return token != null;
    } catch (Exception e) {
        Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e);
        return false;
    } finally {
        if (token == null) {
            surface.destroy();
        }
        session.kill();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data, []), Expression("" + data + "" flags, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called on a detached view."", [])]), Statement(return false, []), Statement(}, []), MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called with an invalid surface."", [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (data !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) !, []), Expression(0), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(Point shadowSize, []), Expression(new Point(), [])]), AssignmentExpression(=, [VariableReference(Point shadowTouchPoint, []), Expression(new Point(), [])]), MethodCall(shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint), [VariableReference(shadowBuilder, []), Expression(shadowSize, []), Expression(shadowTouchPoint, [])]), Statement(throw new IllegalStateException(""Drag shadow dimensions must not be negative""), []), Statement(}, []), Statement(// does not accept zero size surface., []), AssignmentExpression(=, [VariableReference(if (shadowSize.x, []), Expression(, [])]), Statement(if (!sAcceptZeroSizeDragShadow) {, []), Statement(throw new IllegalStateException(""Drag shadow dimensions must be positive""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(shadowSize.x, []), Expression(1, [])]), AssignmentExpression(=, [VariableReference(shadowSize.y, []), Expression(1, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""drag shadow: width, []), Expression("" + shadowSize.x + "" height, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final ViewRootImpl root, []), Expression(mAttachInfo.mViewRootImpl, [])]), AssignmentExpression(=, [VariableReference(final SurfaceSession session, []), Expression(new SurfaceSession(), [])]), AssignmentExpression(=, [VariableReference(final SurfaceControl surfaceControl, []), Expression(new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build(), [])]), AssignmentExpression(=, [VariableReference(final Surface surface, []), Expression(new Surface(), [])]), MethodCall(surface.copyFrom(surfaceControl), [VariableReference(surface, []), Expression(surfaceControl, [])]), AssignmentExpression(=, [VariableReference(IBinder token, []), Expression(null, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(final Canvas canvas, []), Expression(isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null), [])]), Statement(try {, []), MethodCall(canvas.drawColor(0, PorterDuff.Mode.CLEAR), [VariableReference(canvas, []), Expression(0, []), Expression(PorterDuff.Mode.CLEAR, [])]), MethodCall(shadowBuilder.onDrawShadow(canvas), [VariableReference(shadowBuilder, []), Expression(canvas, [])]), Statement(} finally {, []), MethodCall(surface.unlockCanvasAndPost(canvas), [VariableReference(surface, []), Expression(canvas, [])]), Statement(}, []), Statement(// repurpose 'shadowSize' for the last touch point, []), MethodCall(root.getLastTouchPoint(shadowSize), [VariableReference(root, []), Expression(shadowSize, [])]), AssignmentExpression(=, [VariableReference(token, []), Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), shadowSize.x, shadowSize.y, shadowTouchPoint.x, shadowTouchPoint.y, data), [])]), MethodCall(Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""performDrag returned "" + token, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (token !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo.mDragSurface !, []), Expression(null) {, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mAttachInfo.mDragSurface, []), Expression(surface, [])]), AssignmentExpression(=, [VariableReference(mAttachInfo.mDragToken, []), Expression(token, [])]), Statement(// Cache the local state object for delivery with DragEvents, []), MethodCall(root.setLocalDragState(myLocalState), [VariableReference(root, []), Expression(myLocalState, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(return token !, []), Expression(null, [])]), Statement(} catch (Exception e) {, []), MethodCall(Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""Unable to initiate drag"", []), Expression(e, [])]), Statement(return false, []), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(if (token, []), Expression(, [])]), MethodCall(surface.destroy(), [VariableReference(surface, []), Expression(, [])]), Statement(}, []), MethodCall(session.kill(), [VariableReference(session, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data, []), Expression("" + data + "" flags, [])])    VariableReference(Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data, [])    Expression("" + data + "" flags, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called on a detached view."", [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""startDragAndDrop called on a detached view."", [])  Statement(return false, [])  Statement(}, [])  MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called with an invalid surface."", [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""startDragAndDrop called with an invalid surface."", [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (data !, []), Expression(null) {, [])])    VariableReference(if (data !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) !, []), Expression(0), [])])    VariableReference(data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) !, [])    Expression(0), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Point shadowSize, []), Expression(new Point(), [])])    VariableReference(Point shadowSize, [])    Expression(new Point(), [])  AssignmentExpression(=, [VariableReference(Point shadowTouchPoint, []), Expression(new Point(), [])])    VariableReference(Point shadowTouchPoint, [])    Expression(new Point(), [])  MethodCall(shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint), [VariableReference(shadowBuilder, []), Expression(shadowSize, []), Expression(shadowTouchPoint, [])])    VariableReference(shadowBuilder, [])    Expression(shadowSize, [])    Expression(shadowTouchPoint, [])  Statement(throw new IllegalStateException(""Drag shadow dimensions must not be negative""), [])  Statement(}, [])  Statement(// does not accept zero size surface., [])  AssignmentExpression(=, [VariableReference(if (shadowSize.x, []), Expression(, [])])    VariableReference(if (shadowSize.x, [])    Expression(, [])  Statement(if (!sAcceptZeroSizeDragShadow) {, [])  Statement(throw new IllegalStateException(""Drag shadow dimensions must be positive""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(shadowSize.x, []), Expression(1, [])])    VariableReference(shadowSize.x, [])    Expression(1, [])  AssignmentExpression(=, [VariableReference(shadowSize.y, []), Expression(1, [])])    VariableReference(shadowSize.y, [])    Expression(1, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""drag shadow: width, []), Expression("" + shadowSize.x + "" height, [])])    VariableReference(Log.d(VIEW_LOG_TAG, ""drag shadow: width, [])    Expression("" + shadowSize.x + "" height, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final ViewRootImpl root, []), Expression(mAttachInfo.mViewRootImpl, [])])    VariableReference(final ViewRootImpl root, [])    Expression(mAttachInfo.mViewRootImpl, [])  AssignmentExpression(=, [VariableReference(final SurfaceSession session, []), Expression(new SurfaceSession(), [])])    VariableReference(final SurfaceSession session, [])    Expression(new SurfaceSession(), [])  AssignmentExpression(=, [VariableReference(final SurfaceControl surfaceControl, []), Expression(new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build(), [])])    VariableReference(final SurfaceControl surfaceControl, [])    Expression(new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build(), [])  AssignmentExpression(=, [VariableReference(final Surface surface, []), Expression(new Surface(), [])])    VariableReference(final Surface surface, [])    Expression(new Surface(), [])  MethodCall(surface.copyFrom(surfaceControl), [VariableReference(surface, []), Expression(surfaceControl, [])])    VariableReference(surface, [])    Expression(surfaceControl, [])  AssignmentExpression(=, [VariableReference(IBinder token, []), Expression(null, [])])    VariableReference(IBinder token, [])    Expression(null, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(final Canvas canvas, []), Expression(isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null), [])])    VariableReference(final Canvas canvas, [])    Expression(isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null), [])  Statement(try {, [])  MethodCall(canvas.drawColor(0, PorterDuff.Mode.CLEAR), [VariableReference(canvas, []), Expression(0, []), Expression(PorterDuff.Mode.CLEAR, [])])    VariableReference(canvas, [])    Expression(0, [])    Expression(PorterDuff.Mode.CLEAR, [])  MethodCall(shadowBuilder.onDrawShadow(canvas), [VariableReference(shadowBuilder, []), Expression(canvas, [])])    VariableReference(shadowBuilder, [])    Expression(canvas, [])  Statement(} finally {, [])  MethodCall(surface.unlockCanvasAndPost(canvas), [VariableReference(surface, []), Expression(canvas, [])])    VariableReference(surface, [])    Expression(canvas, [])  Statement(}, [])  Statement(// repurpose 'shadowSize' for the last touch point, [])  MethodCall(root.getLastTouchPoint(shadowSize), [VariableReference(root, []), Expression(shadowSize, [])])    VariableReference(root, [])    Expression(shadowSize, [])  AssignmentExpression(=, [VariableReference(token, []), Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), shadowSize.x, shadowSize.y, shadowTouchPoint.x, shadowTouchPoint.y, data), [])])    VariableReference(token, [])    Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), shadowSize.x, shadowSize.y, shadowTouchPoint.x, shadowTouchPoint.y, data), [])  MethodCall(Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""performDrag returned "" + token, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""performDrag returned "" + token, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (token !, []), Expression(null) {, [])])    VariableReference(if (token !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo.mDragSurface !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo.mDragSurface !, [])    Expression(null) {, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mAttachInfo.mDragSurface, []), Expression(surface, [])])    VariableReference(mAttachInfo.mDragSurface, [])    Expression(surface, [])  AssignmentExpression(=, [VariableReference(mAttachInfo.mDragToken, []), Expression(token, [])])    VariableReference(mAttachInfo.mDragToken, [])    Expression(token, [])  Statement(// Cache the local state object for delivery with DragEvents, [])  MethodCall(root.setLocalDragState(myLocalState), [VariableReference(root, []), Expression(myLocalState, [])])    VariableReference(root, [])    Expression(myLocalState, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(return token !, []), Expression(null, [])])    VariableReference(return token !, [])    Expression(null, [])  Statement(} catch (Exception e) {, [])  MethodCall(Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""Unable to initiate drag"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""Unable to initiate drag"", [])    Expression(e, [])  Statement(return false, [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(if (token, []), Expression(, [])])    VariableReference(if (token, [])    Expression(, [])  MethodCall(surface.destroy(), [VariableReference(surface, []), Expression(, [])])    VariableReference(surface, [])    Expression(, [])  Statement(}, [])  MethodCall(session.kill(), [VariableReference(session, []), Expression(, [])])    VariableReference(session, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data, []), Expression("" + data + "" flags, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called on a detached view."", [])]), Statement(return false, []), Statement(}, []), MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called with an invalid surface."", [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (data !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) !, []), Expression(0), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(Rect bounds, []), Expression(new Rect(), [])]), Statement(getBoundsOnScreen(bounds, true), []), AssignmentExpression(=, [VariableReference(Point lastTouchPoint, []), Expression(new Point(), [])]), AssignmentExpression(=, [VariableReference(final ViewRootImpl root, []), Expression(mAttachInfo.mViewRootImpl, [])]), Statement(// Skip surface logic since shadows and animation are not required during the a11y drag, []), AssignmentExpression(=, [VariableReference(final boolean a11yEnabled, []), Expression(AccessibilityManager.getInstance(mContext).isEnabled(), [])]), AssignmentExpression(=, [VariableReference(if (a11yEnabled && (flags & View.DRAG_FLAG_ACCESSIBILITY_ACTION) !, []), Expression(0) {, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(IBinder token, []), Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, null, mAttachInfo.mViewRootImpl.getLastTouchSource(), 0f, 0f, 0f, 0f, data), [])]), MethodCall(Log.d(VIEW_LOG_TAG, ""startDragAndDrop via a11y action returned "" + token), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop via a11y action returned "" + token, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (token !, []), Expression(null) {, [])]), MethodCall(root.setLocalDragState(myLocalState), [VariableReference(root, []), Expression(myLocalState, [])]), AssignmentExpression(=, [VariableReference(mAttachInfo.mDragToken, []), Expression(token, [])]), Statement(setAccessibilityDragStarted(true), []), Statement(}, []), AssignmentExpression(=, [VariableReference(return token !, []), Expression(null, [])]), Statement(} catch (Exception e) {, []), MethodCall(Log.e(VIEW_LOG_TAG, ""Unable to initiate a11y drag"", e), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""Unable to initiate a11y drag"", []), Expression(e, [])]), Statement(return false, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Point shadowSize, []), Expression(new Point(), [])]), AssignmentExpression(=, [VariableReference(Point shadowTouchPoint, []), Expression(new Point(), [])]), MethodCall(shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint), [VariableReference(shadowBuilder, []), Expression(shadowSize, []), Expression(shadowTouchPoint, [])]), Statement(throw new IllegalStateException(""Drag shadow dimensions must not be negative""), []), Statement(}, []), Statement(// does not accept zero size surface., []), AssignmentExpression(=, [VariableReference(if (shadowSize.x, []), Expression(, [])]), Statement(if (!sAcceptZeroSizeDragShadow) {, []), Statement(throw new IllegalStateException(""Drag shadow dimensions must be positive""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(shadowSize.x, []), Expression(1, [])]), AssignmentExpression(=, [VariableReference(shadowSize.y, []), Expression(1, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""drag shadow: width, []), Expression("" + shadowSize.x + "" height, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final SurfaceSession session, []), Expression(new SurfaceSession(), [])]), AssignmentExpression(=, [VariableReference(final SurfaceControl surfaceControl, []), Expression(new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build(), [])]), AssignmentExpression(=, [VariableReference(final Surface surface, []), Expression(new Surface(), [])]), MethodCall(surface.copyFrom(surfaceControl), [VariableReference(surface, []), Expression(surfaceControl, [])]), AssignmentExpression(=, [VariableReference(IBinder token, []), Expression(null, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(final Canvas canvas, []), Expression(isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null), [])]), Statement(try {, []), MethodCall(canvas.drawColor(0, PorterDuff.Mode.CLEAR), [VariableReference(canvas, []), Expression(0, []), Expression(PorterDuff.Mode.CLEAR, [])]), MethodCall(shadowBuilder.onDrawShadow(canvas), [VariableReference(shadowBuilder, []), Expression(canvas, [])]), Statement(} finally {, []), MethodCall(surface.unlockCanvasAndPost(canvas), [VariableReference(surface, []), Expression(canvas, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(token, []), Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), lastTouchPoint.x, lastTouchPoint.y, shadowTouchPoint.x, shadowTouchPoint.y, data), [])]), MethodCall(Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""performDrag returned "" + token, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (token !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo.mDragSurface !, []), Expression(null) {, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mAttachInfo.mDragSurface, []), Expression(surface, [])]), AssignmentExpression(=, [VariableReference(mAttachInfo.mDragToken, []), Expression(token, [])]), Statement(// Cache the local state object for delivery with DragEvents, []), MethodCall(root.setLocalDragState(myLocalState), [VariableReference(root, []), Expression(myLocalState, [])]), Statement(if (a11yEnabled) {, []), Statement(// Set for AccessibilityEvents, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(return token !, []), Expression(null, [])]), Statement(} catch (Exception e) {, []), MethodCall(Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""Unable to initiate drag"", []), Expression(e, [])]), Statement(return false, []), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(if (token, []), Expression(, [])]), MethodCall(surface.destroy(), [VariableReference(surface, []), Expression(, [])]), Statement(}, []), MethodCall(session.kill(), [VariableReference(session, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data, []), Expression("" + data + "" flags, [])])    VariableReference(Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data, [])    Expression("" + data + "" flags, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called on a detached view."", [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""startDragAndDrop called on a detached view."", [])  Statement(return false, [])  Statement(}, [])  MethodCall(Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface.""), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop called with an invalid surface."", [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""startDragAndDrop called with an invalid surface."", [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (data !, []), Expression(null) {, [])])    VariableReference(if (data !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) !, []), Expression(0), [])])    VariableReference(data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) !, [])    Expression(0), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Rect bounds, []), Expression(new Rect(), [])])    VariableReference(Rect bounds, [])    Expression(new Rect(), [])  Statement(getBoundsOnScreen(bounds, true), [])  AssignmentExpression(=, [VariableReference(Point lastTouchPoint, []), Expression(new Point(), [])])    VariableReference(Point lastTouchPoint, [])    Expression(new Point(), [])  AssignmentExpression(=, [VariableReference(final ViewRootImpl root, []), Expression(mAttachInfo.mViewRootImpl, [])])    VariableReference(final ViewRootImpl root, [])    Expression(mAttachInfo.mViewRootImpl, [])  Statement(// Skip surface logic since shadows and animation are not required during the a11y drag, [])  AssignmentExpression(=, [VariableReference(final boolean a11yEnabled, []), Expression(AccessibilityManager.getInstance(mContext).isEnabled(), [])])    VariableReference(final boolean a11yEnabled, [])    Expression(AccessibilityManager.getInstance(mContext).isEnabled(), [])  AssignmentExpression(=, [VariableReference(if (a11yEnabled && (flags & View.DRAG_FLAG_ACCESSIBILITY_ACTION) !, []), Expression(0) {, [])])    VariableReference(if (a11yEnabled && (flags & View.DRAG_FLAG_ACCESSIBILITY_ACTION) !, [])    Expression(0) {, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(IBinder token, []), Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, null, mAttachInfo.mViewRootImpl.getLastTouchSource(), 0f, 0f, 0f, 0f, data), [])])    VariableReference(IBinder token, [])    Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, null, mAttachInfo.mViewRootImpl.getLastTouchSource(), 0f, 0f, 0f, 0f, data), [])  MethodCall(Log.d(VIEW_LOG_TAG, ""startDragAndDrop via a11y action returned "" + token), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""startDragAndDrop via a11y action returned "" + token, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""startDragAndDrop via a11y action returned "" + token, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (token !, []), Expression(null) {, [])])    VariableReference(if (token !, [])    Expression(null) {, [])  MethodCall(root.setLocalDragState(myLocalState), [VariableReference(root, []), Expression(myLocalState, [])])    VariableReference(root, [])    Expression(myLocalState, [])  AssignmentExpression(=, [VariableReference(mAttachInfo.mDragToken, []), Expression(token, [])])    VariableReference(mAttachInfo.mDragToken, [])    Expression(token, [])  Statement(setAccessibilityDragStarted(true), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(return token !, []), Expression(null, [])])    VariableReference(return token !, [])    Expression(null, [])  Statement(} catch (Exception e) {, [])  MethodCall(Log.e(VIEW_LOG_TAG, ""Unable to initiate a11y drag"", e), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""Unable to initiate a11y drag"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""Unable to initiate a11y drag"", [])    Expression(e, [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Point shadowSize, []), Expression(new Point(), [])])    VariableReference(Point shadowSize, [])    Expression(new Point(), [])  AssignmentExpression(=, [VariableReference(Point shadowTouchPoint, []), Expression(new Point(), [])])    VariableReference(Point shadowTouchPoint, [])    Expression(new Point(), [])  MethodCall(shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint), [VariableReference(shadowBuilder, []), Expression(shadowSize, []), Expression(shadowTouchPoint, [])])    VariableReference(shadowBuilder, [])    Expression(shadowSize, [])    Expression(shadowTouchPoint, [])  Statement(throw new IllegalStateException(""Drag shadow dimensions must not be negative""), [])  Statement(}, [])  Statement(// does not accept zero size surface., [])  AssignmentExpression(=, [VariableReference(if (shadowSize.x, []), Expression(, [])])    VariableReference(if (shadowSize.x, [])    Expression(, [])  Statement(if (!sAcceptZeroSizeDragShadow) {, [])  Statement(throw new IllegalStateException(""Drag shadow dimensions must be positive""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(shadowSize.x, []), Expression(1, [])])    VariableReference(shadowSize.x, [])    Expression(1, [])  AssignmentExpression(=, [VariableReference(shadowSize.y, []), Expression(1, [])])    VariableReference(shadowSize.y, [])    Expression(1, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Log.d(VIEW_LOG_TAG, ""drag shadow: width, []), Expression("" + shadowSize.x + "" height, [])])    VariableReference(Log.d(VIEW_LOG_TAG, ""drag shadow: width, [])    Expression("" + shadowSize.x + "" height, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final SurfaceSession session, []), Expression(new SurfaceSession(), [])])    VariableReference(final SurfaceSession session, [])    Expression(new SurfaceSession(), [])  AssignmentExpression(=, [VariableReference(final SurfaceControl surfaceControl, []), Expression(new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build(), [])])    VariableReference(final SurfaceControl surfaceControl, [])    Expression(new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build(), [])  AssignmentExpression(=, [VariableReference(final Surface surface, []), Expression(new Surface(), [])])    VariableReference(final Surface surface, [])    Expression(new Surface(), [])  MethodCall(surface.copyFrom(surfaceControl), [VariableReference(surface, []), Expression(surfaceControl, [])])    VariableReference(surface, [])    Expression(surfaceControl, [])  AssignmentExpression(=, [VariableReference(IBinder token, []), Expression(null, [])])    VariableReference(IBinder token, [])    Expression(null, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(final Canvas canvas, []), Expression(isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null), [])])    VariableReference(final Canvas canvas, [])    Expression(isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null), [])  Statement(try {, [])  MethodCall(canvas.drawColor(0, PorterDuff.Mode.CLEAR), [VariableReference(canvas, []), Expression(0, []), Expression(PorterDuff.Mode.CLEAR, [])])    VariableReference(canvas, [])    Expression(0, [])    Expression(PorterDuff.Mode.CLEAR, [])  MethodCall(shadowBuilder.onDrawShadow(canvas), [VariableReference(shadowBuilder, []), Expression(canvas, [])])    VariableReference(shadowBuilder, [])    Expression(canvas, [])  Statement(} finally {, [])  MethodCall(surface.unlockCanvasAndPost(canvas), [VariableReference(surface, []), Expression(canvas, [])])    VariableReference(surface, [])    Expression(canvas, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(token, []), Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), lastTouchPoint.x, lastTouchPoint.y, shadowTouchPoint.x, shadowTouchPoint.y, data), [])])    VariableReference(token, [])    Expression(mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), lastTouchPoint.x, lastTouchPoint.y, shadowTouchPoint.x, shadowTouchPoint.y, data), [])  MethodCall(Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""performDrag returned "" + token, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""performDrag returned "" + token, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (token !, []), Expression(null) {, [])])    VariableReference(if (token !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo.mDragSurface !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo.mDragSurface !, [])    Expression(null) {, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mAttachInfo.mDragSurface, []), Expression(surface, [])])    VariableReference(mAttachInfo.mDragSurface, [])    Expression(surface, [])  AssignmentExpression(=, [VariableReference(mAttachInfo.mDragToken, []), Expression(token, [])])    VariableReference(mAttachInfo.mDragToken, [])    Expression(token, [])  Statement(// Cache the local state object for delivery with DragEvents, [])  MethodCall(root.setLocalDragState(myLocalState), [VariableReference(root, []), Expression(myLocalState, [])])    VariableReference(root, [])    Expression(myLocalState, [])  Statement(if (a11yEnabled) {, [])  Statement(// Set for AccessibilityEvents, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(return token !, []), Expression(null, [])])    VariableReference(return token !, [])    Expression(null, [])  Statement(} catch (Exception e) {, [])  MethodCall(Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""Unable to initiate drag"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""Unable to initiate drag"", [])    Expression(e, [])  Statement(return false, [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(if (token, []), Expression(, [])])    VariableReference(if (token, [])    Expression(, [])  MethodCall(surface.destroy(), [VariableReference(surface, []), Expression(, [])])    VariableReference(surface, [])    Expression(, [])  Statement(}, [])  MethodCall(session.kill(), [VariableReference(session, []), Expression(, [])])    VariableReference(session, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Starts a drag and drop operation. When your application calls this method, it passes a
 * {@link android.view.View.DragShadowBuilder} object to the system. The
 * system calls this object's {@link DragShadowBuilder#onProvideShadowMetrics(Point, Point)}
 * to get metrics for the drag shadow, and then calls the object's
 * {@link DragShadowBuilder#onDrawShadow(Canvas)} to draw the drag shadow itself.
 * <p>
 * Once the system has the drag shadow, it begins the drag and drop operation by sending
 * drag events to all the View objects in your application that are currently visible. It does
 * this either by calling the View object's drag listener (an implementation of
 * {@link android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag()} or by calling the
 * View object's {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} method.
 * Both are passed a {@link android.view.DragEvent} object that has a
 * {@link android.view.DragEvent#getAction()} value of
 * {@link android.view.DragEvent#ACTION_DRAG_STARTED}.
 * </p>
 * <p>
 * Your application can invoke {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object,
 * int) startDragAndDrop()} on any attached View object. The View object does not need to be
 * the one used in {@link android.view.View.DragShadowBuilder}, nor does it need to be related
 * to the View the user selected for dragging.
 * </p>
 * @param data A {@link android.content.ClipData} object pointing to the data to be
 * transferred by the drag and drop operation.
 * @param shadowBuilder A {@link android.view.View.DragShadowBuilder} object for building the
 * drag shadow.
 * @param myLocalState An {@link java.lang.Object} containing local data about the drag and
 * drop operation. When dispatching drag events to views in the same activity this object
 * will be available through {@link android.view.DragEvent#getLocalState()}. Views in other
 * activities will not have access to this data ({@link android.view.DragEvent#getLocalState()}
 * will return null).
 * <p>
 * myLocalState is a lightweight mechanism for the sending information from the dragged View
 * to the target Views. For example, it can contain flags that differentiate between a
 * a copy operation and a move operation.
 * </p>
 * @param flags Flags that control the drag and drop operation. This can be set to 0 for no
 * flags, or any combination of the following:
 * <ul>
 * <li>{@link #DRAG_FLAG_GLOBAL}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_READ}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_WRITE}</li>
 * <li>{@link #DRAG_FLAG_OPAQUE}</li>
 * </ul>
 * @return {@code true} if the method completes successfully, or
 * {@code false} if it fails anywhere. Returning {@code false} means the system was unable to
 * do a drag because of another ongoing operation or some other reasons.
 */
","/**
 * Starts a drag and drop operation. When your application calls this method, it passes a
 * {@link android.view.View.DragShadowBuilder} object to the system. The
 * system calls this object's {@link DragShadowBuilder#onProvideShadowMetrics(Point, Point)}
 * to get metrics for the drag shadow, and then calls the object's
 * {@link DragShadowBuilder#onDrawShadow(Canvas)} to draw the drag shadow itself.
 * <p>
 * Once the system has the drag shadow, it begins the drag and drop operation by sending
 * drag events to all the View objects in your application that are currently visible. It does
 * this either by calling the View object's drag listener (an implementation of
 * {@link android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag()} or by calling the
 * View object's {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} method.
 * Both are passed a {@link android.view.DragEvent} object that has a
 * {@link android.view.DragEvent#getAction()} value of
 * {@link android.view.DragEvent#ACTION_DRAG_STARTED}.
 * </p>
 * <p>
 * Your application can invoke {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object,
 * int) startDragAndDrop()} on any attached View object. The View object does not need to be
 * the one used in {@link android.view.View.DragShadowBuilder}, nor does it need to be related
 * to the View the user selected for dragging.
 * </p>
 * @param data A {@link android.content.ClipData} object pointing to the data to be
 * transferred by the drag and drop operation.
 * @param shadowBuilder A {@link android.view.View.DragShadowBuilder} object for building the
 * drag shadow.
 * @param myLocalState An {@link java.lang.Object} containing local data about the drag and
 * drop operation. When dispatching drag events to views in the same activity this object
 * will be available through {@link android.view.DragEvent#getLocalState()}. Views in other
 * activities will not have access to this data ({@link android.view.DragEvent#getLocalState()}
 * will return null).
 * <p>
 * myLocalState is a lightweight mechanism for the sending information from the dragged View
 * to the target Views. For example, it can contain flags that differentiate between a
 * a copy operation and a move operation.
 * </p>
 * @param flags Flags that control the drag and drop operation. This can be set to 0 for no
 * flags, or any combination of the following:
 * <ul>
 * <li>{@link #DRAG_FLAG_GLOBAL}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_READ}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_WRITE}</li>
 * <li>{@link #DRAG_FLAG_OPAQUE}</li>
 * <li>{@link #DRAG_FLAG_ACCESSIBILITY_ACTION}</li>
 * </ul>
 * @return {@code true} if the method completes successfully, or
 * {@code false} if it fails anywhere. Returning {@code false} means the system was unable to
 * do a drag because of another ongoing operation or some other reasons.
 */
",1,,,0,,,,"1,2","1,2,3,4,5","1,2","2,3","1,2","1. The control dependency and conditions have changed in `startDragAndDrop` method, which include checking for accessibility and setting appropriate parameters and behaviors. Additionally, the handling and throwing of exceptions have changed.",#CI_description
"<android.content.Context: int[] checkUriPermissions(List<Uri>,int,int,int)>",31,32,,,,"{
    throw new RuntimeException(""Not implemented. Must override in a subclass."");
}","{
    throw new RuntimeException(""Not implemented. Must override in a subclass."");
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * Determine whether a particular process and user ID has been granted
 * permission to access a list of URIs.  This only checks for permissions
 * that have been explicitly granted -- if the given process/uid has
 * more general access to the URI's content provider then this check will
 * always fail.
 *
 * @param uris The list of URIs that is being checked.
 * @param pid The process ID being checked against.  Must be &gt; 0.
 * @param uid The user ID being checked against.  A uid of 0 is the root
 * user, which will pass every permission check.
 * @param modeFlags The access modes to check for the list of uris
 *
 * @return Array of permission grants corresponding to each entry in the list of uris.
 * {@link PackageManager#PERMISSION_GRANTED} if the given pid/uid is allowed to access that uri,
 * or {@link PackageManager#PERMISSION_DENIED} if it is not.
 *
 * @see #checkCallingUriPermission
 */
","/**
 * Determine whether a particular process and user ID has been granted
 * permission to access a list of URIs.  This only checks for permissions
 * that have been explicitly granted -- if the given process/uid has
 * more general access to the URI's content provider then this check will
 * always fail.
 *
 * <strong>Note:</strong> On SDK Version {@link android.os.Build.VERSION_CODES#S},
 * calling this method from a secondary-user's context will incorrectly return
 * {@link PackageManager#PERMISSION_DENIED} for all {code uris}.
 *
 * @param uris The list of URIs that is being checked.
 * @param pid The process ID being checked against.  Must be &gt; 0.
 * @param uid The user ID being checked against.  A uid of 0 is the root
 * user, which will pass every permission check.
 * @param modeFlags The access modes to check for the list of uris
 *
 * @return Array of permission grants corresponding to each entry in the list of uris.
 * {@link PackageManager#PERMISSION_GRANTED} if the given pid/uid is allowed to access that uri,
 * or {@link PackageManager#PERMISSION_DENIED} if it is not.
 *
 * @see #checkCallingUriPermission
 */
",1,"[@NonNull, @PackageManager.PermissionResult]","[@NonNull, @PackageManager.PermissionResult]",0,,,,0,0,0,0,0,"There are no changes in both the implementation and the annotations. Therefore, the code change type is 0.","Since there are no changes between the early and late implementations, no potential compatibility issues could arise, leading to CI type 0."
<android.content.res.TypedArray: ColorStateList getColorStateList(int)>,32,33,,,,"{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    final TypedValue value = mValue;
    if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {
        if (value.type == TypedValue.TYPE_ATTRIBUTE) {
            throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value);
        }
        return mResources.loadColorStateList(value, value.resourceId, mTheme);
    }
    return null;
}","{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    final TypedValue value = mValue;
    if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {
        if (value.type == TypedValue.TYPE_ATTRIBUTE) {
            throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value + "", theme="" + mTheme);
        }
        return mResources.loadColorStateList(value, value.resourceId, mTheme);
    }
    return null;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mRecycled) {, []), Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(final TypedValue value, []), Expression(mValue, [])]), Statement(if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {, []), AssignmentExpression(=, [VariableReference(if (value.type, []), Expression(, [])]), Statement(throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value), []), Statement(}, []), MethodCall(return mResources.loadColorStateList(value, value.resourceId, mTheme), [VariableReference(return mResources, []), Expression(value, []), Expression(value.resourceId, []), Expression(mTheme, [])]), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  Statement(if (mRecycled) {, [])  Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final TypedValue value, []), Expression(mValue, [])])    VariableReference(final TypedValue value, [])    Expression(mValue, [])  Statement(if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {, [])  AssignmentExpression(=, [VariableReference(if (value.type, []), Expression(, [])])    VariableReference(if (value.type, [])    Expression(, [])  Statement(throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value), [])  Statement(}, [])  MethodCall(return mResources.loadColorStateList(value, value.resourceId, mTheme), [VariableReference(return mResources, []), Expression(value, []), Expression(value.resourceId, []), Expression(mTheme, [])])    VariableReference(return mResources, [])    Expression(value, [])    Expression(value.resourceId, [])    Expression(mTheme, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (mRecycled) {, []), Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(final TypedValue value, []), Expression(mValue, [])]), Statement(if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {, []), AssignmentExpression(=, [VariableReference(if (value.type, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value + "", theme, []), Expression("" + mTheme), [])]), Statement(}, []), MethodCall(return mResources.loadColorStateList(value, value.resourceId, mTheme), [VariableReference(return mResources, []), Expression(value, []), Expression(value.resourceId, []), Expression(mTheme, [])]), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  Statement(if (mRecycled) {, [])  Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final TypedValue value, []), Expression(mValue, [])])    VariableReference(final TypedValue value, [])    Expression(mValue, [])  Statement(if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {, [])  AssignmentExpression(=, [VariableReference(if (value.type, []), Expression(, [])])    VariableReference(if (value.type, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value + "", theme, []), Expression("" + mTheme), [])])    VariableReference(throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value + "", theme, [])    Expression("" + mTheme), [])  Statement(}, [])  MethodCall(return mResources.loadColorStateList(value, value.resourceId, mTheme), [VariableReference(return mResources, []), Expression(value, []), Expression(value.resourceId, []), Expression(mTheme, [])])    VariableReference(return mResources, [])    Expression(value, [])    Expression(value.resourceId, [])    Expression(mTheme, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])",1,"/**
 * Retrieve the ColorStateList for the attribute at <var>index</var>.
 * The value may be either a single solid color or a reference to
 * a color or complex {@link android.content.res.ColorStateList}
 * description.
 * <p>
 * This method will return {@code null} if the attribute is not defined or
 * is not an integer color or color state list.
 *
 * @param index Index of attribute to retrieve.
 *
 * @return ColorStateList for the attribute, or {@code null} if not
 * defined.
 * @throws RuntimeException if the attribute if the TypedArray has already
 * been recycled.
 * @throws UnsupportedOperationException if the attribute is defined but is
 * not an integer color or color state list.
 */
","/**
 * Retrieve the ColorStateList for the attribute at <var>index</var>.
 * The value may be either a single solid color or a reference to
 * a color or complex {@link android.content.res.ColorStateList}
 * description.
 * <p>
 * This method will return {@code null} if the attribute is not defined or
 * is not an integer color or color state list.
 *
 * @param index Index of attribute to retrieve.
 *
 * @return ColorStateList for the attribute, or {@code null} if not
 * defined.
 * @throws RuntimeException if the attribute if the TypedArray has already
 * been recycled.
 * @throws UnsupportedOperationException if the attribute is defined but is
 * not an integer color or color state list.
 */
",0,[@Nullable],[@Nullable],0,,,,2,5,0,"2,4",2,"An exception message within UnsupportedOperationException has changed to include `, theme=` + `mTheme`, which modifies the description of the exception. Besides, this change does not include statement about the control dependency, thus the change type is 2,4.","The change in the exception message could cause different exception outputs (other than stack trace) between the two versions, so the CI type is 2."
<android.app.admin.DevicePolicyManager: int logoutUser(ComponentName)>,32,33,,,,"{
    throwIfParentInstance(""logoutUser"");
    try {
        return mService.logoutUser(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""logoutUser"");
    try {
        return mService.logoutUser(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""logoutUser""), []), Statement(try {, []), MethodCall(return mService.logoutUser(admin), [VariableReference(return mService, []), Expression(admin, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""logoutUser""), [])  Statement(try {, [])  MethodCall(return mService.logoutUser(admin), [VariableReference(return mService, []), Expression(admin, [])])    VariableReference(return mService, [])    Expression(admin, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])])    VariableReference(throw re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""logoutUser""), []), Statement(try {, []), MethodCall(return mService.logoutUser(admin), [VariableReference(return mService, []), Expression(admin, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""logoutUser""), [])  Statement(try {, [])  MethodCall(return mService.logoutUser(admin), [VariableReference(return mService, []), Expression(admin, [])])    VariableReference(return mService, [])    Expression(admin, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])])    VariableReference(throw re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Called by a profile owner of secondary user that is affiliated with the device to stop the
 * calling user and switch back to primary user.
 *
 * <p>Notice that on devices running with
 * {@link UserManager#isHeadlessSystemUserMode() headless system user mode}, there is no primary
 * user, so it switches back to the user that was in the foreground before the first call to
 * {@link #switchUser(ComponentName, UserHandle)} (or fails with
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN} if that method was not called prior to this
 * call).
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return one of the following result codes:
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN},
 * {@link UserManager#USER_OPERATION_SUCCESS},
 * {@link UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE},
 * {@link UserManager#USER_OPERATION_ERROR_CURRENT_USER}
 * @throws SecurityException if {@code admin} is not a profile owner affiliated with the device.
 * @see #getSecondaryUsers(ComponentName)
 */
","/**
 * Called by a profile owner of secondary user that is affiliated with the device to stop the
 * calling user and switch back to primary user (when the user was
 * {@link #switchUser(ComponentName, UserHandle)} switched to) or stop the user (when it was
 * {@link #startUserInBackground(ComponentName, UserHandle) started in background}.
 *
 * <p>Notice that on devices running with
 * {@link UserManager#isHeadlessSystemUserMode() headless system user mode}, there is no primary
 * user, so it switches back to the user that was in the foreground before the first call to
 * {@link #switchUser(ComponentName, UserHandle)} (or fails with
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN} if that method was not called prior to this
 * call).
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return one of the following result codes:
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN},
 * {@link UserManager#USER_OPERATION_SUCCESS},
 * {@link UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE},
 * {@link UserManager#USER_OPERATION_ERROR_CURRENT_USER}
 * @throws SecurityException if {@code admin} is not a profile owner affiliated with the device.
 * @see #getSecondaryUsers(ComponentName)
 */
",1,[@UserOperationResult],[@UserOperationResult],0,,,,0,0,0,0,0,There is no change between the early and late implementations. ,"Since there are no changes, there are no potential compatibility issues."
"<android.view.contentcapture.DataRemovalRequest.Builder: Builder addLocusId(LocusId,int)>",32,33,,,,"{
    throwIfDestroyed();
    Preconditions.checkState(!mForEverything, ""Already is for everything"");
    Preconditions.checkNotNull(locusId);
    if (mLocusIds == null) {
        mLocusIds = new ArrayList<>();
        mFlags = new IntArray();
    }
    mLocusIds.add(locusId);
    mFlags.add(flags);
    return this;
}","{
    throwIfDestroyed();
    Preconditions.checkState(!mForEverything, ""Already is for everything"");
    Objects.requireNonNull(locusId);
    if (mLocusIds == null) {
        mLocusIds = new ArrayList<>();
        mFlags = new IntArray();
    }
    mLocusIds.add(locusId);
    mFlags.add(flags);
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfDestroyed(), []), MethodCall(Preconditions.checkState(!mForEverything, ""Already is for everything""), [VariableReference(Preconditions, []), Expression(!mForEverything, []), Expression(""Already is for everything"", [])]), MethodCall(Preconditions.checkNotNull(locusId), [VariableReference(Preconditions, []), Expression(locusId, [])]), AssignmentExpression(=, [VariableReference(if (mLocusIds, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mLocusIds, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(mFlags, []), Expression(new IntArray(), [])]), Statement(}, []), MethodCall(mLocusIds.add(locusId), [VariableReference(mLocusIds, []), Expression(locusId, [])]), MethodCall(mFlags.add(flags), [VariableReference(mFlags, []), Expression(flags, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(throwIfDestroyed(), [])  MethodCall(Preconditions.checkState(!mForEverything, ""Already is for everything""), [VariableReference(Preconditions, []), Expression(!mForEverything, []), Expression(""Already is for everything"", [])])    VariableReference(Preconditions, [])    Expression(!mForEverything, [])    Expression(""Already is for everything"", [])  MethodCall(Preconditions.checkNotNull(locusId), [VariableReference(Preconditions, []), Expression(locusId, [])])    VariableReference(Preconditions, [])    Expression(locusId, [])  AssignmentExpression(=, [VariableReference(if (mLocusIds, []), Expression(, [])])    VariableReference(if (mLocusIds, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mLocusIds, []), Expression(new ArrayList<>(), [])])    VariableReference(mLocusIds, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(mFlags, []), Expression(new IntArray(), [])])    VariableReference(mFlags, [])    Expression(new IntArray(), [])  Statement(}, [])  MethodCall(mLocusIds.add(locusId), [VariableReference(mLocusIds, []), Expression(locusId, [])])    VariableReference(mLocusIds, [])    Expression(locusId, [])  MethodCall(mFlags.add(flags), [VariableReference(mFlags, []), Expression(flags, [])])    VariableReference(mFlags, [])    Expression(flags, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfDestroyed(), []), MethodCall(Preconditions.checkState(!mForEverything, ""Already is for everything""), [VariableReference(Preconditions, []), Expression(!mForEverything, []), Expression(""Already is for everything"", [])]), MethodCall(Objects.requireNonNull(locusId), [VariableReference(Objects, []), Expression(locusId, [])]), AssignmentExpression(=, [VariableReference(if (mLocusIds, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mLocusIds, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(mFlags, []), Expression(new IntArray(), [])]), Statement(}, []), MethodCall(mLocusIds.add(locusId), [VariableReference(mLocusIds, []), Expression(locusId, [])]), MethodCall(mFlags.add(flags), [VariableReference(mFlags, []), Expression(flags, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(throwIfDestroyed(), [])  MethodCall(Preconditions.checkState(!mForEverything, ""Already is for everything""), [VariableReference(Preconditions, []), Expression(!mForEverything, []), Expression(""Already is for everything"", [])])    VariableReference(Preconditions, [])    Expression(!mForEverything, [])    Expression(""Already is for everything"", [])  MethodCall(Objects.requireNonNull(locusId), [VariableReference(Objects, []), Expression(locusId, [])])    VariableReference(Objects, [])    Expression(locusId, [])  AssignmentExpression(=, [VariableReference(if (mLocusIds, []), Expression(, [])])    VariableReference(if (mLocusIds, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mLocusIds, []), Expression(new ArrayList<>(), [])])    VariableReference(mLocusIds, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(mFlags, []), Expression(new IntArray(), [])])    VariableReference(mFlags, [])    Expression(new IntArray(), [])  Statement(}, [])  MethodCall(mLocusIds.add(locusId), [VariableReference(mLocusIds, []), Expression(locusId, [])])    VariableReference(mLocusIds, [])    Expression(locusId, [])  MethodCall(mFlags.add(flags), [VariableReference(mFlags, []), Expression(flags, [])])    VariableReference(mFlags, [])    Expression(flags, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Request service to remove data associated with a given {@link LocusId}.
 *
 * @param locusId the {@link LocusId} being requested to be removed.
 * @param flags either {@link DataRemovalRequest#FLAG_IS_PREFIX} or {@code 0}
 *
 * @return this builder
 */
","/**
 * Request service to remove data associated with a given {@link LocusId}.
 *
 * @param locusId the {@link LocusId} being requested to be removed.
 * @param flags either {@link DataRemovalRequest#FLAG_IS_PREFIX} or {@code 0}
 *
 * @return this builder
 */
",0,[@NonNull],[@NonNull],0,,,,2,5,0,4,0,"The change is from using `Preconditions.checkNotNull(locusId)` to `Objects.requireNonNull(locusId)` for non-null checks. This is the only modification, so the code change type is 4.","This change does not alter the behavior in terms of return values or exception handling, so the CI type is 0."
"<android.text.BoringLayout: BoringLayout replaceOrMake(CharSequence,TextPaint,int,Alignment,float,float,Metrics,boolean,TruncateAt,int)>",32,33,,,,"{
    boolean trust;
    if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {
        replaceWith(source, paint, outerWidth, align, spacingMult, spacingAdd);
        mEllipsizedWidth = outerWidth;
        mEllipsizedStart = 0;
        mEllipsizedCount = 0;
        trust = true;
    } else {
        replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth, ellipsize, true, this), paint, outerWidth, align, spacingMult, spacingAdd);
        mEllipsizedWidth = ellipsizedWidth;
        trust = false;
    }
    init(getText(), paint, align, metrics, includePad, trust);
    return this;
}","{
    return replaceOrMake(source, paint, outerWidth, align, metrics, includePad, ellipsize, ellipsizedWidth, false);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(boolean trust, []), AssignmentExpression(=, [VariableReference(if (ellipsize, []), Expression(, [])]), Statement(replaceWith(source, paint, outerWidth, align, spacingMult, spacingAdd), []), AssignmentExpression(=, [VariableReference(mEllipsizedWidth, []), Expression(outerWidth, [])]), AssignmentExpression(=, [VariableReference(mEllipsizedStart, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(mEllipsizedCount, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(trust, []), Expression(true, [])]), Statement(} else {, []), MethodCall(replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth, ellipsize, true, this), paint, outerWidth, align, spacingMult, spacingAdd), [VariableReference(replaceWith(TextUtils, []), Expression(source, []), Expression(paint, []), Expression(ellipsizedWidth, []), Expression(ellipsize, []), Expression(true, []), Expression(this), []), Expression(paint, []), Expression(outerWidth, []), Expression(align, []), Expression(spacingMult, []), Expression(spacingAdd, [])]), AssignmentExpression(=, [VariableReference(mEllipsizedWidth, []), Expression(ellipsizedWidth, [])]), AssignmentExpression(=, [VariableReference(trust, []), Expression(false, [])]), Statement(}, []), Statement(init(getText(), paint, align, metrics, includePad, trust), []), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(boolean trust, [])  AssignmentExpression(=, [VariableReference(if (ellipsize, []), Expression(, [])])    VariableReference(if (ellipsize, [])    Expression(, [])  Statement(replaceWith(source, paint, outerWidth, align, spacingMult, spacingAdd), [])  AssignmentExpression(=, [VariableReference(mEllipsizedWidth, []), Expression(outerWidth, [])])    VariableReference(mEllipsizedWidth, [])    Expression(outerWidth, [])  AssignmentExpression(=, [VariableReference(mEllipsizedStart, []), Expression(0, [])])    VariableReference(mEllipsizedStart, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(mEllipsizedCount, []), Expression(0, [])])    VariableReference(mEllipsizedCount, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(trust, []), Expression(true, [])])    VariableReference(trust, [])    Expression(true, [])  Statement(} else {, [])  MethodCall(replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth, ellipsize, true, this), paint, outerWidth, align, spacingMult, spacingAdd), [VariableReference(replaceWith(TextUtils, []), Expression(source, []), Expression(paint, []), Expression(ellipsizedWidth, []), Expression(ellipsize, []), Expression(true, []), Expression(this), []), Expression(paint, []), Expression(outerWidth, []), Expression(align, []), Expression(spacingMult, []), Expression(spacingAdd, [])])    VariableReference(replaceWith(TextUtils, [])    Expression(source, [])    Expression(paint, [])    Expression(ellipsizedWidth, [])    Expression(ellipsize, [])    Expression(true, [])    Expression(this), [])    Expression(paint, [])    Expression(outerWidth, [])    Expression(align, [])    Expression(spacingMult, [])    Expression(spacingAdd, [])  AssignmentExpression(=, [VariableReference(mEllipsizedWidth, []), Expression(ellipsizedWidth, [])])    VariableReference(mEllipsizedWidth, [])    Expression(ellipsizedWidth, [])  AssignmentExpression(=, [VariableReference(trust, []), Expression(false, [])])    VariableReference(trust, [])    Expression(false, [])  Statement(}, [])  Statement(init(getText(), paint, align, metrics, includePad, trust), [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return replaceOrMake(source, paint, outerWidth, align, metrics, includePad, ellipsize, ellipsizedWidth, false), []), Statement(}, [])])  Statement({, [])  Statement(return replaceOrMake(source, paint, outerWidth, align, metrics, includePad, ellipsize, ellipsizedWidth, false), [])  Statement(}, [])",1,"/**
 * Returns a BoringLayout for the specified text, potentially reusing
 * this one if it is already suitable.  The caller must make sure that
 * no one is still using this Layout.
 *
 * @param source the text to render
 * @param paint the default paint for the layout
 * @param outerWidth the wrapping width for the text
 * @param align whether to left, right, or center the text
 * @param spacingMult this value is no longer used by BoringLayout
 * @param spacingAdd this value is no longer used by BoringLayout
 * @param metrics {@code #Metrics} instance that contains information about FontMetrics and
 * line width
 * @param includePad set whether to include extra space beyond font ascent and descent which is
 * needed to avoid clipping in some scripts
 * @param ellipsize whether to ellipsize the text if width of the text is longer than the
 * requested width
 * @param ellipsizedWidth the width to which this Layout is ellipsizing. If {@code ellipsize} is
 * {@code null}, or is {@link TextUtils.TruncateAt#MARQUEE} this value is
 * not used, {@code outerwidth} is used instead
 */
","/**
 * Returns a BoringLayout for the specified text, potentially reusing
 * this one if it is already suitable.  The caller must make sure that
 * no one is still using this Layout.
 *
 * @param source the text to render
 * @param paint the default paint for the layout
 * @param outerWidth the wrapping width for the text
 * @param align whether to left, right, or center the text
 * @param spacingMult this value is no longer used by BoringLayout
 * @param spacingAdd this value is no longer used by BoringLayout
 * @param metrics {@code #Metrics} instance that contains information about FontMetrics and
 * line width
 * @param includePad set whether to include extra space beyond font ascent and descent which is
 * needed to avoid clipping in some scripts
 * @param ellipsize whether to ellipsize the text if width of the text is longer than the
 * requested width
 * @param ellipsizedWidth the width to which this Layout is ellipsizing. If {@code ellipsize} is
 * {@code null}, or is {@link TextUtils.TruncateAt#MARQUEE} this value is
 * not used, {@code outerWidth} is used instead
 */
",1,,,0,,,,"1,2","1,3,4,5",1,"1,3,5",1,"The early implementation contains conditionals and has many steps to process parameters and return a result. The late implementation simplifies this by directly calling the replaceOrMake method and returning its result. Therefore, the change types are 1 (Return statement changed), 3 (Control dependency changed), and 5 (Dependent API changed).","The simplification and removal of conditionals result in different return behaviors because the method now relies directly on another method (replaceOrMake). This can cause the API to return different values in some cases. Therefore, the Compatibility Issue type is 1 (Potentially different return values)."
<android.service.dreams.DreamService: boolean isFullscreen()>,32,33,,,,"{
    return mFullscreen;
}","{
    return mFullscreen;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mFullscreen, []), Statement(}, [])])  Statement({, [])  Statement(return mFullscreen, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mFullscreen, []), Statement(}, [])])  Statement({, [])  Statement(return mFullscreen, [])  Statement(}, [])",0,"/**
 * Returns whether or not this dream is in fullscreen mode. Defaults to false.
 *
 * @see #setFullscreen(boolean)
 */
","/**
 * Returns whether this dream is in fullscreen mode. Defaults to false.
 *
 * @see #setFullscreen(boolean)
 */
",1,,,0,,,,0,0,0,0,0,There are no changes between the early and late implementation of the method.,"Since there are no changes, there are no potential compatibility issues."
<android.os.Binder: void joinThreadPool()>,32,33,,,,"{
    BinderInternal.joinThreadPool();
}","{
    BinderInternal.joinThreadPool();
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(BinderInternal.joinThreadPool(), [VariableReference(BinderInternal, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(BinderInternal.joinThreadPool(), [VariableReference(BinderInternal, []), Expression(, [])])    VariableReference(BinderInternal, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(BinderInternal.joinThreadPool(), [VariableReference(BinderInternal, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(BinderInternal.joinThreadPool(), [VariableReference(BinderInternal, []), Expression(, [])])    VariableReference(BinderInternal, [])    Expression(, [])  Statement(}, [])",0,"/**
 * Add the calling thread to the IPC thread pool.  This function does
 * not return until the current process is exiting.
 */
","/**
 * Add the calling thread to the IPC thread pool. This function does
 * not return until the current process is exiting.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation code between the early version and the late version.,"Since there is no code change between the early version and late version, there is no potential for a Compatibility Issue."
<android.view.ViewRootImpl.NativePreImeInputStage: int onProcess(QueuedInputEvent)>,32,33,,,,"{
    if (mInputQueue != null && q.mEvent instanceof KeyEvent) {
        mInputQueue.sendInputEvent(q.mEvent, q, true, this);
        return DEFER;
    }
    return FORWARD;
}","{
    if (q.mEvent instanceof KeyEvent) {
        final KeyEvent event = (KeyEvent) q.mEvent;
        // view tree or IME, and invoke the appropriate {@link OnBackInvokedCallback}.
        if (isBack(event) && mContext != null && WindowOnBackInvokedDispatcher.isOnBackInvokedCallbackEnabled(mContext)) {
            OnBackInvokedCallback topCallback = getOnBackInvokedDispatcher().getTopCallback();
            if (event.getAction() == KeyEvent.ACTION_UP) {
                if (topCallback != null) {
                    topCallback.onBackInvoked();
                    return FINISH_HANDLED;
                }
            } else {
                // Drop other actions such as {@link KeyEvent.ACTION_DOWN}.
                return FINISH_NOT_HANDLED;
            }
        }
    }
    if (mInputQueue != null && q.mEvent instanceof KeyEvent) {
        mInputQueue.sendInputEvent(q.mEvent, q, true, this);
        return DEFER;
    }
    return FORWARD;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mInputQueue !, []), Expression(null && q.mEvent instanceof KeyEvent) {, [])]), MethodCall(mInputQueue.sendInputEvent(q.mEvent, q, true, this), [VariableReference(mInputQueue, []), Expression(q.mEvent, []), Expression(q, []), Expression(true, []), Expression(this, [])]), Statement(return DEFER, []), Statement(}, []), Statement(return FORWARD, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mInputQueue !, []), Expression(null && q.mEvent instanceof KeyEvent) {, [])])    VariableReference(if (mInputQueue !, [])    Expression(null && q.mEvent instanceof KeyEvent) {, [])  MethodCall(mInputQueue.sendInputEvent(q.mEvent, q, true, this), [VariableReference(mInputQueue, []), Expression(q.mEvent, []), Expression(q, []), Expression(true, []), Expression(this, [])])    VariableReference(mInputQueue, [])    Expression(q.mEvent, [])    Expression(q, [])    Expression(true, [])    Expression(this, [])  Statement(return DEFER, [])  Statement(}, [])  Statement(return FORWARD, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final KeyEvent event, []), Expression((KeyEvent) q.mEvent, [])]), Statement(// view tree or IME, and invoke the appropriate {@link OnBackInvokedCallback}., []), AssignmentExpression(=, [VariableReference(if (isBack(event) && mContext !, []), Expression(null && WindowOnBackInvokedDispatcher.isOnBackInvokedCallbackEnabled(mContext)) {, [])]), AssignmentExpression(=, [VariableReference(OnBackInvokedCallback topCallback, []), Expression(getOnBackInvokedDispatcher().getTopCallback(), [])]), AssignmentExpression(=, [VariableReference(if (event.getAction(), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (topCallback !, []), Expression(null) {, [])]), MethodCall(topCallback.onBackInvoked(), [VariableReference(topCallback, []), Expression(, [])]), Statement(return FINISH_HANDLED, []), Statement(}, []), Statement(} else {, []), Statement(// Drop other actions such as {@link KeyEvent.ACTION_DOWN}., []), Statement(return FINISH_NOT_HANDLED, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mInputQueue !, []), Expression(null && q.mEvent instanceof KeyEvent) {, [])]), MethodCall(mInputQueue.sendInputEvent(q.mEvent, q, true, this), [VariableReference(mInputQueue, []), Expression(q.mEvent, []), Expression(q, []), Expression(true, []), Expression(this, [])]), Statement(return DEFER, []), Statement(}, []), Statement(return FORWARD, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final KeyEvent event, []), Expression((KeyEvent) q.mEvent, [])])    VariableReference(final KeyEvent event, [])    Expression((KeyEvent) q.mEvent, [])  Statement(// view tree or IME, and invoke the appropriate {@link OnBackInvokedCallback}., [])  AssignmentExpression(=, [VariableReference(if (isBack(event) && mContext !, []), Expression(null && WindowOnBackInvokedDispatcher.isOnBackInvokedCallbackEnabled(mContext)) {, [])])    VariableReference(if (isBack(event) && mContext !, [])    Expression(null && WindowOnBackInvokedDispatcher.isOnBackInvokedCallbackEnabled(mContext)) {, [])  AssignmentExpression(=, [VariableReference(OnBackInvokedCallback topCallback, []), Expression(getOnBackInvokedDispatcher().getTopCallback(), [])])    VariableReference(OnBackInvokedCallback topCallback, [])    Expression(getOnBackInvokedDispatcher().getTopCallback(), [])  AssignmentExpression(=, [VariableReference(if (event.getAction(), []), Expression(, [])])    VariableReference(if (event.getAction(), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (topCallback !, []), Expression(null) {, [])])    VariableReference(if (topCallback !, [])    Expression(null) {, [])  MethodCall(topCallback.onBackInvoked(), [VariableReference(topCallback, []), Expression(, [])])    VariableReference(topCallback, [])    Expression(, [])  Statement(return FINISH_HANDLED, [])  Statement(}, [])  Statement(} else {, [])  Statement(// Drop other actions such as {@link KeyEvent.ACTION_DOWN}., [])  Statement(return FINISH_NOT_HANDLED, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mInputQueue !, []), Expression(null && q.mEvent instanceof KeyEvent) {, [])])    VariableReference(if (mInputQueue !, [])    Expression(null && q.mEvent instanceof KeyEvent) {, [])  MethodCall(mInputQueue.sendInputEvent(q.mEvent, q, true, this), [VariableReference(mInputQueue, []), Expression(q.mEvent, []), Expression(q, []), Expression(true, []), Expression(this, [])])    VariableReference(mInputQueue, [])    Expression(q.mEvent, [])    Expression(q, [])    Expression(true, [])    Expression(this, [])  Statement(return DEFER, [])  Statement(}, [])  Statement(return FORWARD, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","1,3,4,5",1,"1,3,4",1,"In the late version, new control dependency changes and additional statements are introduced. The 'if' condition now includes checks for invoking `onBackInvokedCallback`, and additional return statement options of `FINISH_HANDLED` and `FINISH_NOT_HANDLED` have been introduced. This changes the control flow and behavior of the method, so the code change type is 1,3,4.","The changes in control flow and the return values (introducing `FINISH_HANDLED` and `FINISH_NOT_HANDLED`) can make the method potentially return different values based on different input conditions, such as `KeyEvent.ACTION_UP`. Therefore, it can lead to a compatibility issue, and the CI type is 1."
"<android.view.translation.UiTranslationManager: void registerUiTranslationStateCallback(Executor,UiTranslationStateCallback)>",32,33,,,,"{
    Objects.requireNonNull(executor);
    Objects.requireNonNull(callback);
    synchronized (mCallbacks) {
        if (mCallbacks.containsKey(callback)) {
            Log.w(TAG, ""registerUiTranslationStateCallback: callback already registered;"" + "" ignoring."");
            return;
        }
        final IRemoteCallback remoteCallback = new UiTranslationStateRemoteCallback(executor, callback);
        try {
            mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        mCallbacks.put(callback, remoteCallback);
    }
}","{
    Objects.requireNonNull(executor);
    Objects.requireNonNull(callback);
    synchronized (mCallbacks) {
        if (mCallbacks.containsKey(callback)) {
            Log.w(TAG, ""registerUiTranslationStateCallback: callback already registered;"" + "" ignoring."");
            return;
        }
        final IRemoteCallback remoteCallback = new UiTranslationStateRemoteCallback(executor, callback);
        try {
            mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        mCallbacks.put(callback, remoteCallback);
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Objects.requireNonNull(executor), [VariableReference(Objects, []), Expression(executor, [])]), MethodCall(Objects.requireNonNull(callback), [VariableReference(Objects, []), Expression(callback, [])]), Statement(synchronized (mCallbacks) {, []), MethodCall(if (mCallbacks.containsKey(callback)), [VariableReference(if (mCallbacks, []), Expression(callback), [])]), Statement("" + "" ignoring.""), []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final IRemoteCallback remoteCallback, []), Expression(new UiTranslationStateRemoteCallback(executor, callback), [])]), Statement(try {, []), MethodCall(mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId()), [VariableReference(mService, []), Expression(remoteCallback, []), Expression(mContext.getUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), MethodCall(mCallbacks.put(callback, remoteCallback), [VariableReference(mCallbacks, []), Expression(callback, []), Expression(remoteCallback, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Objects.requireNonNull(executor), [VariableReference(Objects, []), Expression(executor, [])])    VariableReference(Objects, [])    Expression(executor, [])  MethodCall(Objects.requireNonNull(callback), [VariableReference(Objects, []), Expression(callback, [])])    VariableReference(Objects, [])    Expression(callback, [])  Statement(synchronized (mCallbacks) {, [])  MethodCall(if (mCallbacks.containsKey(callback)), [VariableReference(if (mCallbacks, []), Expression(callback), [])])    VariableReference(if (mCallbacks, [])    Expression(callback), [])  Statement("" + "" ignoring.""), [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final IRemoteCallback remoteCallback, []), Expression(new UiTranslationStateRemoteCallback(executor, callback), [])])    VariableReference(final IRemoteCallback remoteCallback, [])    Expression(new UiTranslationStateRemoteCallback(executor, callback), [])  Statement(try {, [])  MethodCall(mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId()), [VariableReference(mService, []), Expression(remoteCallback, []), Expression(mContext.getUserId(), [])])    VariableReference(mService, [])    Expression(remoteCallback, [])    Expression(mContext.getUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  MethodCall(mCallbacks.put(callback, remoteCallback), [VariableReference(mCallbacks, []), Expression(callback, []), Expression(remoteCallback, [])])    VariableReference(mCallbacks, [])    Expression(callback, [])    Expression(remoteCallback, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Objects.requireNonNull(executor), [VariableReference(Objects, []), Expression(executor, [])]), MethodCall(Objects.requireNonNull(callback), [VariableReference(Objects, []), Expression(callback, [])]), Statement(synchronized (mCallbacks) {, []), MethodCall(if (mCallbacks.containsKey(callback)), [VariableReference(if (mCallbacks, []), Expression(callback), [])]), Statement("" + "" ignoring.""), []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final IRemoteCallback remoteCallback, []), Expression(new UiTranslationStateRemoteCallback(executor, callback), [])]), Statement(try {, []), MethodCall(mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId()), [VariableReference(mService, []), Expression(remoteCallback, []), Expression(mContext.getUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), MethodCall(mCallbacks.put(callback, remoteCallback), [VariableReference(mCallbacks, []), Expression(callback, []), Expression(remoteCallback, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Objects.requireNonNull(executor), [VariableReference(Objects, []), Expression(executor, [])])    VariableReference(Objects, [])    Expression(executor, [])  MethodCall(Objects.requireNonNull(callback), [VariableReference(Objects, []), Expression(callback, [])])    VariableReference(Objects, [])    Expression(callback, [])  Statement(synchronized (mCallbacks) {, [])  MethodCall(if (mCallbacks.containsKey(callback)), [VariableReference(if (mCallbacks, []), Expression(callback), [])])    VariableReference(if (mCallbacks, [])    Expression(callback), [])  Statement("" + "" ignoring.""), [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final IRemoteCallback remoteCallback, []), Expression(new UiTranslationStateRemoteCallback(executor, callback), [])])    VariableReference(final IRemoteCallback remoteCallback, [])    Expression(new UiTranslationStateRemoteCallback(executor, callback), [])  Statement(try {, [])  MethodCall(mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId()), [VariableReference(mService, []), Expression(remoteCallback, []), Expression(mContext.getUserId(), [])])    VariableReference(mService, [])    Expression(remoteCallback, [])    Expression(mContext.getUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  MethodCall(mCallbacks.put(callback, remoteCallback), [VariableReference(mCallbacks, []), Expression(callback, []), Expression(remoteCallback, [])])    VariableReference(mCallbacks, [])    Expression(callback, [])    Expression(remoteCallback, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Register for notifications of UI Translation state changes on the foreground activity. This
 * is available to the owning application itself and also the current input method.
 * <p>
 * The application whose UI is being translated can use this to customize the UI Translation
 * behavior in ways that aren't made easy by methods like
 * {@link View#onCreateViewTranslationRequest(int[], Consumer)}.
 *
 * <p>
 * Input methods can use this to offer complementary features to UI Translation; for example,
 * enabling outgoing message translation when the system is translating incoming messages in a
 * communication app.
 *
 * @param callback the callback to register for receiving the state change
 * notifications
 */
","/**
 * Register for notifications of UI Translation state changes on the foreground Activity. This
 * is available to the owning application itself and also the current input method.
 * <p>
 * The application whose UI is being translated can use this to customize the UI Translation
 * behavior in ways that aren't made easy by methods like
 * {@link View#onCreateViewTranslationRequest(int[], Consumer)}.
 * <p>
 * Input methods can use this to offer complementary features to UI Translation; for example,
 * enabling outgoing message translation when the system is translating incoming messages in a
 * communication app.
 * <p>
 * Starting from {@link android.os.Build.VERSION_CODES#TIRAMISU}, if Activities are already
 * being translated when a callback is registered, methods on the callback will be invoked for
 * each translated activity, depending on the state of translation:
 * <ul>
 * <li>If translation is <em>not</em> paused,
 * {@link UiTranslationStateCallback#onStarted} will be invoked.</li>
 * <li>If translation <em>is</em> paused, {@link UiTranslationStateCallback#onStarted}
 * will first be invoked, followed by {@link UiTranslationStateCallback#onPaused}.</li>
 * </ul>
 *
 * @param callback the callback to register for receiving the state change
 * notifications
 */
",1,,,0,,,,0,0,0,0,0,There is no change detected between the early and late implementations.,"Since there is no change, there are no potential Compatibility Issues."
<android.view.ViewRootImpl.ViewRootHandler: String getMessageName(Message)>,32,33,,,,"{
    switch(message.what) {
        case MSG_INVALIDATE:
            return ""MSG_INVALIDATE"";
        case MSG_INVALIDATE_RECT:
            return ""MSG_INVALIDATE_RECT"";
        case MSG_DIE:
            return ""MSG_DIE"";
        case MSG_RESIZED:
            return ""MSG_RESIZED"";
        case MSG_RESIZED_REPORT:
            return ""MSG_RESIZED_REPORT"";
        case MSG_WINDOW_FOCUS_CHANGED:
            return ""MSG_WINDOW_FOCUS_CHANGED"";
        case MSG_DISPATCH_INPUT_EVENT:
            return ""MSG_DISPATCH_INPUT_EVENT"";
        case MSG_DISPATCH_APP_VISIBILITY:
            return ""MSG_DISPATCH_APP_VISIBILITY"";
        case MSG_DISPATCH_GET_NEW_SURFACE:
            return ""MSG_DISPATCH_GET_NEW_SURFACE"";
        case MSG_DISPATCH_KEY_FROM_IME:
            return ""MSG_DISPATCH_KEY_FROM_IME"";
        case MSG_DISPATCH_KEY_FROM_AUTOFILL:
            return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"";
        case MSG_CHECK_FOCUS:
            return ""MSG_CHECK_FOCUS"";
        case MSG_CLOSE_SYSTEM_DIALOGS:
            return ""MSG_CLOSE_SYSTEM_DIALOGS"";
        case MSG_DISPATCH_DRAG_EVENT:
            return ""MSG_DISPATCH_DRAG_EVENT"";
        case MSG_DISPATCH_DRAG_LOCATION_EVENT:
            return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"";
        case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:
            return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"";
        case MSG_UPDATE_CONFIGURATION:
            return ""MSG_UPDATE_CONFIGURATION"";
        case MSG_PROCESS_INPUT_EVENTS:
            return ""MSG_PROCESS_INPUT_EVENTS"";
        case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:
            return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"";
        case MSG_WINDOW_MOVED:
            return ""MSG_WINDOW_MOVED"";
        case MSG_SYNTHESIZE_INPUT_EVENT:
            return ""MSG_SYNTHESIZE_INPUT_EVENT"";
        case MSG_DISPATCH_WINDOW_SHOWN:
            return ""MSG_DISPATCH_WINDOW_SHOWN"";
        case MSG_UPDATE_POINTER_ICON:
            return ""MSG_UPDATE_POINTER_ICON"";
        case MSG_POINTER_CAPTURE_CHANGED:
            return ""MSG_POINTER_CAPTURE_CHANGED"";
        case MSG_DRAW_FINISHED:
            return ""MSG_DRAW_FINISHED"";
        case MSG_INSETS_CHANGED:
            return ""MSG_INSETS_CHANGED"";
        case MSG_INSETS_CONTROL_CHANGED:
            return ""MSG_INSETS_CONTROL_CHANGED"";
        case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:
            return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"";
        case MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED:
            return ""MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED"";
        case MSG_SHOW_INSETS:
            return ""MSG_SHOW_INSETS"";
        case MSG_HIDE_INSETS:
            return ""MSG_HIDE_INSETS"";
    }
    return super.getMessageName(message);
}","{
    switch(message.what) {
        case MSG_INVALIDATE:
            return ""MSG_INVALIDATE"";
        case MSG_INVALIDATE_RECT:
            return ""MSG_INVALIDATE_RECT"";
        case MSG_DIE:
            return ""MSG_DIE"";
        case MSG_RESIZED:
            return ""MSG_RESIZED"";
        case MSG_RESIZED_REPORT:
            return ""MSG_RESIZED_REPORT"";
        case MSG_WINDOW_FOCUS_CHANGED:
            return ""MSG_WINDOW_FOCUS_CHANGED"";
        case MSG_DISPATCH_INPUT_EVENT:
            return ""MSG_DISPATCH_INPUT_EVENT"";
        case MSG_DISPATCH_APP_VISIBILITY:
            return ""MSG_DISPATCH_APP_VISIBILITY"";
        case MSG_DISPATCH_GET_NEW_SURFACE:
            return ""MSG_DISPATCH_GET_NEW_SURFACE"";
        case MSG_DISPATCH_KEY_FROM_IME:
            return ""MSG_DISPATCH_KEY_FROM_IME"";
        case MSG_DISPATCH_KEY_FROM_AUTOFILL:
            return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"";
        case MSG_CHECK_FOCUS:
            return ""MSG_CHECK_FOCUS"";
        case MSG_CLOSE_SYSTEM_DIALOGS:
            return ""MSG_CLOSE_SYSTEM_DIALOGS"";
        case MSG_DISPATCH_DRAG_EVENT:
            return ""MSG_DISPATCH_DRAG_EVENT"";
        case MSG_DISPATCH_DRAG_LOCATION_EVENT:
            return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"";
        case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:
            return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"";
        case MSG_UPDATE_CONFIGURATION:
            return ""MSG_UPDATE_CONFIGURATION"";
        case MSG_PROCESS_INPUT_EVENTS:
            return ""MSG_PROCESS_INPUT_EVENTS"";
        case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:
            return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"";
        case MSG_WINDOW_MOVED:
            return ""MSG_WINDOW_MOVED"";
        case MSG_SYNTHESIZE_INPUT_EVENT:
            return ""MSG_SYNTHESIZE_INPUT_EVENT"";
        case MSG_DISPATCH_WINDOW_SHOWN:
            return ""MSG_DISPATCH_WINDOW_SHOWN"";
        case MSG_UPDATE_POINTER_ICON:
            return ""MSG_UPDATE_POINTER_ICON"";
        case MSG_POINTER_CAPTURE_CHANGED:
            return ""MSG_POINTER_CAPTURE_CHANGED"";
        case MSG_INSETS_CONTROL_CHANGED:
            return ""MSG_INSETS_CONTROL_CHANGED"";
        case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:
            return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"";
        case MSG_SHOW_INSETS:
            return ""MSG_SHOW_INSETS"";
        case MSG_HIDE_INSETS:
            return ""MSG_HIDE_INSETS"";
        case MSG_WINDOW_TOUCH_MODE_CHANGED:
            return ""MSG_WINDOW_TOUCH_MODE_CHANGED"";
        case MSG_KEEP_CLEAR_RECTS_CHANGED:
            return ""MSG_KEEP_CLEAR_RECTS_CHANGED"";
    }
    return super.getMessageName(message);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(case MSG_INVALIDATE:, []), Statement(return ""MSG_INVALIDATE"", []), Statement(case MSG_INVALIDATE_RECT:, []), Statement(return ""MSG_INVALIDATE_RECT"", []), Statement(case MSG_DIE:, []), Statement(return ""MSG_DIE"", []), Statement(case MSG_RESIZED:, []), Statement(return ""MSG_RESIZED"", []), Statement(case MSG_RESIZED_REPORT:, []), Statement(return ""MSG_RESIZED_REPORT"", []), Statement(case MSG_WINDOW_FOCUS_CHANGED:, []), Statement(return ""MSG_WINDOW_FOCUS_CHANGED"", []), Statement(case MSG_DISPATCH_INPUT_EVENT:, []), Statement(return ""MSG_DISPATCH_INPUT_EVENT"", []), Statement(case MSG_DISPATCH_APP_VISIBILITY:, []), Statement(return ""MSG_DISPATCH_APP_VISIBILITY"", []), Statement(case MSG_DISPATCH_GET_NEW_SURFACE:, []), Statement(return ""MSG_DISPATCH_GET_NEW_SURFACE"", []), Statement(case MSG_DISPATCH_KEY_FROM_IME:, []), Statement(return ""MSG_DISPATCH_KEY_FROM_IME"", []), Statement(case MSG_DISPATCH_KEY_FROM_AUTOFILL:, []), Statement(return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"", []), Statement(case MSG_CHECK_FOCUS:, []), Statement(return ""MSG_CHECK_FOCUS"", []), Statement(case MSG_CLOSE_SYSTEM_DIALOGS:, []), Statement(return ""MSG_CLOSE_SYSTEM_DIALOGS"", []), Statement(case MSG_DISPATCH_DRAG_EVENT:, []), Statement(return ""MSG_DISPATCH_DRAG_EVENT"", []), Statement(case MSG_DISPATCH_DRAG_LOCATION_EVENT:, []), Statement(return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"", []), Statement(case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:, []), Statement(return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"", []), Statement(case MSG_UPDATE_CONFIGURATION:, []), Statement(return ""MSG_UPDATE_CONFIGURATION"", []), Statement(case MSG_PROCESS_INPUT_EVENTS:, []), Statement(return ""MSG_PROCESS_INPUT_EVENTS"", []), Statement(case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:, []), Statement(return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"", []), Statement(case MSG_WINDOW_MOVED:, []), Statement(return ""MSG_WINDOW_MOVED"", []), Statement(case MSG_SYNTHESIZE_INPUT_EVENT:, []), Statement(return ""MSG_SYNTHESIZE_INPUT_EVENT"", []), Statement(case MSG_DISPATCH_WINDOW_SHOWN:, []), Statement(return ""MSG_DISPATCH_WINDOW_SHOWN"", []), Statement(case MSG_UPDATE_POINTER_ICON:, []), Statement(return ""MSG_UPDATE_POINTER_ICON"", []), Statement(case MSG_POINTER_CAPTURE_CHANGED:, []), Statement(return ""MSG_POINTER_CAPTURE_CHANGED"", []), Statement(case MSG_DRAW_FINISHED:, []), Statement(return ""MSG_DRAW_FINISHED"", []), Statement(case MSG_INSETS_CHANGED:, []), Statement(return ""MSG_INSETS_CHANGED"", []), Statement(case MSG_INSETS_CONTROL_CHANGED:, []), Statement(return ""MSG_INSETS_CONTROL_CHANGED"", []), Statement(case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:, []), Statement(return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"", []), Statement(case MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED:, []), Statement(return ""MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED"", []), Statement(case MSG_SHOW_INSETS:, []), Statement(return ""MSG_SHOW_INSETS"", []), Statement(case MSG_HIDE_INSETS:, []), Statement(return ""MSG_HIDE_INSETS"", []), Statement(}, []), MethodCall(return super.getMessageName(message), [VariableReference(return super, []), Expression(message, [])]), Statement(}, [])])  Statement({, [])  Statement(case MSG_INVALIDATE:, [])  Statement(return ""MSG_INVALIDATE"", [])  Statement(case MSG_INVALIDATE_RECT:, [])  Statement(return ""MSG_INVALIDATE_RECT"", [])  Statement(case MSG_DIE:, [])  Statement(return ""MSG_DIE"", [])  Statement(case MSG_RESIZED:, [])  Statement(return ""MSG_RESIZED"", [])  Statement(case MSG_RESIZED_REPORT:, [])  Statement(return ""MSG_RESIZED_REPORT"", [])  Statement(case MSG_WINDOW_FOCUS_CHANGED:, [])  Statement(return ""MSG_WINDOW_FOCUS_CHANGED"", [])  Statement(case MSG_DISPATCH_INPUT_EVENT:, [])  Statement(return ""MSG_DISPATCH_INPUT_EVENT"", [])  Statement(case MSG_DISPATCH_APP_VISIBILITY:, [])  Statement(return ""MSG_DISPATCH_APP_VISIBILITY"", [])  Statement(case MSG_DISPATCH_GET_NEW_SURFACE:, [])  Statement(return ""MSG_DISPATCH_GET_NEW_SURFACE"", [])  Statement(case MSG_DISPATCH_KEY_FROM_IME:, [])  Statement(return ""MSG_DISPATCH_KEY_FROM_IME"", [])  Statement(case MSG_DISPATCH_KEY_FROM_AUTOFILL:, [])  Statement(return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"", [])  Statement(case MSG_CHECK_FOCUS:, [])  Statement(return ""MSG_CHECK_FOCUS"", [])  Statement(case MSG_CLOSE_SYSTEM_DIALOGS:, [])  Statement(return ""MSG_CLOSE_SYSTEM_DIALOGS"", [])  Statement(case MSG_DISPATCH_DRAG_EVENT:, [])  Statement(return ""MSG_DISPATCH_DRAG_EVENT"", [])  Statement(case MSG_DISPATCH_DRAG_LOCATION_EVENT:, [])  Statement(return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"", [])  Statement(case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:, [])  Statement(return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"", [])  Statement(case MSG_UPDATE_CONFIGURATION:, [])  Statement(return ""MSG_UPDATE_CONFIGURATION"", [])  Statement(case MSG_PROCESS_INPUT_EVENTS:, [])  Statement(return ""MSG_PROCESS_INPUT_EVENTS"", [])  Statement(case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:, [])  Statement(return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"", [])  Statement(case MSG_WINDOW_MOVED:, [])  Statement(return ""MSG_WINDOW_MOVED"", [])  Statement(case MSG_SYNTHESIZE_INPUT_EVENT:, [])  Statement(return ""MSG_SYNTHESIZE_INPUT_EVENT"", [])  Statement(case MSG_DISPATCH_WINDOW_SHOWN:, [])  Statement(return ""MSG_DISPATCH_WINDOW_SHOWN"", [])  Statement(case MSG_UPDATE_POINTER_ICON:, [])  Statement(return ""MSG_UPDATE_POINTER_ICON"", [])  Statement(case MSG_POINTER_CAPTURE_CHANGED:, [])  Statement(return ""MSG_POINTER_CAPTURE_CHANGED"", [])  Statement(case MSG_DRAW_FINISHED:, [])  Statement(return ""MSG_DRAW_FINISHED"", [])  Statement(case MSG_INSETS_CHANGED:, [])  Statement(return ""MSG_INSETS_CHANGED"", [])  Statement(case MSG_INSETS_CONTROL_CHANGED:, [])  Statement(return ""MSG_INSETS_CONTROL_CHANGED"", [])  Statement(case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:, [])  Statement(return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"", [])  Statement(case MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED:, [])  Statement(return ""MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED"", [])  Statement(case MSG_SHOW_INSETS:, [])  Statement(return ""MSG_SHOW_INSETS"", [])  Statement(case MSG_HIDE_INSETS:, [])  Statement(return ""MSG_HIDE_INSETS"", [])  Statement(}, [])  MethodCall(return super.getMessageName(message), [VariableReference(return super, []), Expression(message, [])])    VariableReference(return super, [])    Expression(message, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(case MSG_INVALIDATE:, []), Statement(return ""MSG_INVALIDATE"", []), Statement(case MSG_INVALIDATE_RECT:, []), Statement(return ""MSG_INVALIDATE_RECT"", []), Statement(case MSG_DIE:, []), Statement(return ""MSG_DIE"", []), Statement(case MSG_RESIZED:, []), Statement(return ""MSG_RESIZED"", []), Statement(case MSG_RESIZED_REPORT:, []), Statement(return ""MSG_RESIZED_REPORT"", []), Statement(case MSG_WINDOW_FOCUS_CHANGED:, []), Statement(return ""MSG_WINDOW_FOCUS_CHANGED"", []), Statement(case MSG_DISPATCH_INPUT_EVENT:, []), Statement(return ""MSG_DISPATCH_INPUT_EVENT"", []), Statement(case MSG_DISPATCH_APP_VISIBILITY:, []), Statement(return ""MSG_DISPATCH_APP_VISIBILITY"", []), Statement(case MSG_DISPATCH_GET_NEW_SURFACE:, []), Statement(return ""MSG_DISPATCH_GET_NEW_SURFACE"", []), Statement(case MSG_DISPATCH_KEY_FROM_IME:, []), Statement(return ""MSG_DISPATCH_KEY_FROM_IME"", []), Statement(case MSG_DISPATCH_KEY_FROM_AUTOFILL:, []), Statement(return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"", []), Statement(case MSG_CHECK_FOCUS:, []), Statement(return ""MSG_CHECK_FOCUS"", []), Statement(case MSG_CLOSE_SYSTEM_DIALOGS:, []), Statement(return ""MSG_CLOSE_SYSTEM_DIALOGS"", []), Statement(case MSG_DISPATCH_DRAG_EVENT:, []), Statement(return ""MSG_DISPATCH_DRAG_EVENT"", []), Statement(case MSG_DISPATCH_DRAG_LOCATION_EVENT:, []), Statement(return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"", []), Statement(case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:, []), Statement(return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"", []), Statement(case MSG_UPDATE_CONFIGURATION:, []), Statement(return ""MSG_UPDATE_CONFIGURATION"", []), Statement(case MSG_PROCESS_INPUT_EVENTS:, []), Statement(return ""MSG_PROCESS_INPUT_EVENTS"", []), Statement(case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:, []), Statement(return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"", []), Statement(case MSG_WINDOW_MOVED:, []), Statement(return ""MSG_WINDOW_MOVED"", []), Statement(case MSG_SYNTHESIZE_INPUT_EVENT:, []), Statement(return ""MSG_SYNTHESIZE_INPUT_EVENT"", []), Statement(case MSG_DISPATCH_WINDOW_SHOWN:, []), Statement(return ""MSG_DISPATCH_WINDOW_SHOWN"", []), Statement(case MSG_UPDATE_POINTER_ICON:, []), Statement(return ""MSG_UPDATE_POINTER_ICON"", []), Statement(case MSG_POINTER_CAPTURE_CHANGED:, []), Statement(return ""MSG_POINTER_CAPTURE_CHANGED"", []), Statement(case MSG_INSETS_CONTROL_CHANGED:, []), Statement(return ""MSG_INSETS_CONTROL_CHANGED"", []), Statement(case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:, []), Statement(return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"", []), Statement(case MSG_SHOW_INSETS:, []), Statement(return ""MSG_SHOW_INSETS"", []), Statement(case MSG_HIDE_INSETS:, []), Statement(return ""MSG_HIDE_INSETS"", []), Statement(case MSG_WINDOW_TOUCH_MODE_CHANGED:, []), Statement(return ""MSG_WINDOW_TOUCH_MODE_CHANGED"", []), Statement(case MSG_KEEP_CLEAR_RECTS_CHANGED:, []), Statement(return ""MSG_KEEP_CLEAR_RECTS_CHANGED"", []), Statement(}, []), MethodCall(return super.getMessageName(message), [VariableReference(return super, []), Expression(message, [])]), Statement(}, [])])  Statement({, [])  Statement(case MSG_INVALIDATE:, [])  Statement(return ""MSG_INVALIDATE"", [])  Statement(case MSG_INVALIDATE_RECT:, [])  Statement(return ""MSG_INVALIDATE_RECT"", [])  Statement(case MSG_DIE:, [])  Statement(return ""MSG_DIE"", [])  Statement(case MSG_RESIZED:, [])  Statement(return ""MSG_RESIZED"", [])  Statement(case MSG_RESIZED_REPORT:, [])  Statement(return ""MSG_RESIZED_REPORT"", [])  Statement(case MSG_WINDOW_FOCUS_CHANGED:, [])  Statement(return ""MSG_WINDOW_FOCUS_CHANGED"", [])  Statement(case MSG_DISPATCH_INPUT_EVENT:, [])  Statement(return ""MSG_DISPATCH_INPUT_EVENT"", [])  Statement(case MSG_DISPATCH_APP_VISIBILITY:, [])  Statement(return ""MSG_DISPATCH_APP_VISIBILITY"", [])  Statement(case MSG_DISPATCH_GET_NEW_SURFACE:, [])  Statement(return ""MSG_DISPATCH_GET_NEW_SURFACE"", [])  Statement(case MSG_DISPATCH_KEY_FROM_IME:, [])  Statement(return ""MSG_DISPATCH_KEY_FROM_IME"", [])  Statement(case MSG_DISPATCH_KEY_FROM_AUTOFILL:, [])  Statement(return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"", [])  Statement(case MSG_CHECK_FOCUS:, [])  Statement(return ""MSG_CHECK_FOCUS"", [])  Statement(case MSG_CLOSE_SYSTEM_DIALOGS:, [])  Statement(return ""MSG_CLOSE_SYSTEM_DIALOGS"", [])  Statement(case MSG_DISPATCH_DRAG_EVENT:, [])  Statement(return ""MSG_DISPATCH_DRAG_EVENT"", [])  Statement(case MSG_DISPATCH_DRAG_LOCATION_EVENT:, [])  Statement(return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"", [])  Statement(case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:, [])  Statement(return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"", [])  Statement(case MSG_UPDATE_CONFIGURATION:, [])  Statement(return ""MSG_UPDATE_CONFIGURATION"", [])  Statement(case MSG_PROCESS_INPUT_EVENTS:, [])  Statement(return ""MSG_PROCESS_INPUT_EVENTS"", [])  Statement(case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:, [])  Statement(return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"", [])  Statement(case MSG_WINDOW_MOVED:, [])  Statement(return ""MSG_WINDOW_MOVED"", [])  Statement(case MSG_SYNTHESIZE_INPUT_EVENT:, [])  Statement(return ""MSG_SYNTHESIZE_INPUT_EVENT"", [])  Statement(case MSG_DISPATCH_WINDOW_SHOWN:, [])  Statement(return ""MSG_DISPATCH_WINDOW_SHOWN"", [])  Statement(case MSG_UPDATE_POINTER_ICON:, [])  Statement(return ""MSG_UPDATE_POINTER_ICON"", [])  Statement(case MSG_POINTER_CAPTURE_CHANGED:, [])  Statement(return ""MSG_POINTER_CAPTURE_CHANGED"", [])  Statement(case MSG_INSETS_CONTROL_CHANGED:, [])  Statement(return ""MSG_INSETS_CONTROL_CHANGED"", [])  Statement(case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:, [])  Statement(return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"", [])  Statement(case MSG_SHOW_INSETS:, [])  Statement(return ""MSG_SHOW_INSETS"", [])  Statement(case MSG_HIDE_INSETS:, [])  Statement(return ""MSG_HIDE_INSETS"", [])  Statement(case MSG_WINDOW_TOUCH_MODE_CHANGED:, [])  Statement(return ""MSG_WINDOW_TOUCH_MODE_CHANGED"", [])  Statement(case MSG_KEEP_CLEAR_RECTS_CHANGED:, [])  Statement(return ""MSG_KEEP_CLEAR_RECTS_CHANGED"", [])  Statement(}, [])  MethodCall(return super.getMessageName(message), [VariableReference(return super, []), Expression(message, [])])    VariableReference(return super, [])    Expression(message, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"1,3",1,"1,3",1,"The `switch` statement was updated to include two new cases: `MSG_WINDOW_TOUCH_MODE_CHANGED` and `MSG_KEEP_CLEAR_RECTS_CHANGED`. These new cases return respective string values of `""MSG_WINDOW_TOUCH_MODE_CHANGED""` and `""MSG_KEEP_CLEAR_RECTS_CHANGED""`, leading to changes in the method's control flow and potentially its return values. Thus, the code change falls under type 1 and 3.","Due to the inclusion of new cases in the `switch` statement, the method can potentially return new string values in the late version when these new cases are encountered. This indicates that the return values might differ between early and late versions, leading to a CI of type 1."
<android.view.autofill.AutofillManager.TrackedViews: void onVisibleForAutofillChangedLocked()>,32,33,,,,"{
    // The visibility of the views might have changed while the client was not be visible,
    // hence update the visibility state for all views.
    AutofillClient client = getClient();
    ArraySet<AutofillId> updatedVisibleTrackedIds = null;
    ArraySet<AutofillId> updatedInvisibleTrackedIds = null;
    if (client != null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv= "" + mInvisibleTrackedIds + "" vis="" + mVisibleTrackedIds);
        }
        if (mInvisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedInvisibleIds = new ArrayList<>(mInvisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds));
            final int numInvisibleTrackedIds = orderedInvisibleIds.size();
            for (int i = 0; i < numInvisibleTrackedIds; i++) {
                final AutofillId id = orderedInvisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible"");
                    }
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                }
            }
        }
        if (mVisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedVisibleIds = new ArrayList<>(mVisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds));
            final int numVisibleTrackedIds = orderedVisibleIds.size();
            for (int i = 0; i < numVisibleTrackedIds; i++) {
                final AutofillId id = orderedVisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible"");
                    }
                }
            }
        }
        mInvisibleTrackedIds = updatedInvisibleTrackedIds;
        mVisibleTrackedIds = updatedVisibleTrackedIds;
    }
    if (mVisibleTrackedIds == null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids"");
        }
        finishSessionLocked();
    }
}","{
    // The visibility of the views might have changed while the client was not be visible,
    // hence update the visibility state for all views.
    AutofillClient client = getClient();
    ArraySet<AutofillId> updatedVisibleTrackedIds = null;
    ArraySet<AutofillId> updatedInvisibleTrackedIds = null;
    if (client != null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv= "" + mInvisibleTrackedIds + "" vis="" + mVisibleTrackedIds);
        }
        if (mInvisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedInvisibleIds = new ArrayList<>(mInvisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds));
            final int numInvisibleTrackedIds = orderedInvisibleIds.size();
            for (int i = 0; i < numInvisibleTrackedIds; i++) {
                final AutofillId id = orderedInvisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible"");
                    }
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                }
            }
        }
        if (mVisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedVisibleIds = new ArrayList<>(mVisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds));
            final int numVisibleTrackedIds = orderedVisibleIds.size();
            for (int i = 0; i < numVisibleTrackedIds; i++) {
                final AutofillId id = orderedVisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible"");
                    }
                }
            }
        }
        mInvisibleTrackedIds = updatedInvisibleTrackedIds;
        mVisibleTrackedIds = updatedVisibleTrackedIds;
    }
    if (mVisibleTrackedIds == null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids"");
        }
        finishSessionLocked(/* commitReason= */
        COMMIT_REASON_VIEW_CHANGED);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// The visibility of the views might have changed while the client was not be visible,, []), Statement(// hence update the visibility state for all views., []), AssignmentExpression(=, [VariableReference(AutofillClient client, []), Expression(getClient(), [])]), AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedVisibleTrackedIds, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedInvisibleTrackedIds, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), Statement(if (sVerbose) {, []), AssignmentExpression(=, [VariableReference(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv, []), Expression("" + mInvisibleTrackedIds + "" vis, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mInvisibleTrackedIds !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedInvisibleIds, []), Expression(new ArrayList<>(mInvisibleTrackedIds), [])]), AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds)), [])]), AssignmentExpression(=, [VariableReference(final int numInvisibleTrackedIds, []), Expression(orderedInvisibleIds.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numInvisibleTrackedIds, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedInvisibleIds.get(i), [])]), Statement(if (isVisible[i]) {, []), AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])]), Statement(if (sDebug) {, []), MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became visible"", [])]), Statement(}, []), Statement(} else {, []), AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])]), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedVisibleIds, []), Expression(new ArrayList<>(mVisibleTrackedIds), [])]), AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds)), [])]), AssignmentExpression(=, [VariableReference(final int numVisibleTrackedIds, []), Expression(orderedVisibleIds.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numVisibleTrackedIds, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedVisibleIds.get(i), [])]), Statement(if (isVisible[i]) {, []), AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])]), Statement(if (sDebug) {, []), MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became invisible"", [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mInvisibleTrackedIds, []), Expression(updatedInvisibleTrackedIds, [])]), AssignmentExpression(=, [VariableReference(mVisibleTrackedIds, []), Expression(updatedVisibleTrackedIds, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds, []), Expression(, [])]), Statement(if (sVerbose) {, []), MethodCall(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofillChangedLocked(): no more visible ids"", [])]), Statement(}, []), Statement(finishSessionLocked(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// The visibility of the views might have changed while the client was not be visible,, [])  Statement(// hence update the visibility state for all views., [])  AssignmentExpression(=, [VariableReference(AutofillClient client, []), Expression(getClient(), [])])    VariableReference(AutofillClient client, [])    Expression(getClient(), [])  AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedVisibleTrackedIds, []), Expression(null, [])])    VariableReference(ArraySet<AutofillId> updatedVisibleTrackedIds, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedInvisibleTrackedIds, []), Expression(null, [])])    VariableReference(ArraySet<AutofillId> updatedInvisibleTrackedIds, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  Statement(if (sVerbose) {, [])  AssignmentExpression(=, [VariableReference(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv, []), Expression("" + mInvisibleTrackedIds + "" vis, [])])    VariableReference(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv, [])    Expression("" + mInvisibleTrackedIds + "" vis, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mInvisibleTrackedIds !, []), Expression(null) {, [])])    VariableReference(if (mInvisibleTrackedIds !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedInvisibleIds, []), Expression(new ArrayList<>(mInvisibleTrackedIds), [])])    VariableReference(final ArrayList<AutofillId> orderedInvisibleIds, [])    Expression(new ArrayList<>(mInvisibleTrackedIds), [])  AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds)), [])])    VariableReference(final boolean[] isVisible, [])    Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds)), [])  AssignmentExpression(=, [VariableReference(final int numInvisibleTrackedIds, []), Expression(orderedInvisibleIds.size(), [])])    VariableReference(final int numInvisibleTrackedIds, [])    Expression(orderedInvisibleIds.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numInvisibleTrackedIds, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedInvisibleIds.get(i), [])])    VariableReference(final AutofillId id, [])    Expression(orderedInvisibleIds.get(i), [])  Statement(if (isVisible[i]) {, [])  AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])])    VariableReference(updatedVisibleTrackedIds, [])    Expression(addToSet(updatedVisibleTrackedIds, id), [])  Statement(if (sDebug) {, [])  MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became visible"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onVisibleForAutofill() "" + id + "" became visible"", [])  Statement(}, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])])    VariableReference(updatedInvisibleTrackedIds, [])    Expression(addToSet(updatedInvisibleTrackedIds, id), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds !, []), Expression(null) {, [])])    VariableReference(if (mVisibleTrackedIds !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedVisibleIds, []), Expression(new ArrayList<>(mVisibleTrackedIds), [])])    VariableReference(final ArrayList<AutofillId> orderedVisibleIds, [])    Expression(new ArrayList<>(mVisibleTrackedIds), [])  AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds)), [])])    VariableReference(final boolean[] isVisible, [])    Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds)), [])  AssignmentExpression(=, [VariableReference(final int numVisibleTrackedIds, []), Expression(orderedVisibleIds.size(), [])])    VariableReference(final int numVisibleTrackedIds, [])    Expression(orderedVisibleIds.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numVisibleTrackedIds, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedVisibleIds.get(i), [])])    VariableReference(final AutofillId id, [])    Expression(orderedVisibleIds.get(i), [])  Statement(if (isVisible[i]) {, [])  AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])])    VariableReference(updatedVisibleTrackedIds, [])    Expression(addToSet(updatedVisibleTrackedIds, id), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])])    VariableReference(updatedInvisibleTrackedIds, [])    Expression(addToSet(updatedInvisibleTrackedIds, id), [])  Statement(if (sDebug) {, [])  MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became invisible"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onVisibleForAutofill() "" + id + "" became invisible"", [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mInvisibleTrackedIds, []), Expression(updatedInvisibleTrackedIds, [])])    VariableReference(mInvisibleTrackedIds, [])    Expression(updatedInvisibleTrackedIds, [])  AssignmentExpression(=, [VariableReference(mVisibleTrackedIds, []), Expression(updatedVisibleTrackedIds, [])])    VariableReference(mVisibleTrackedIds, [])    Expression(updatedVisibleTrackedIds, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds, []), Expression(, [])])    VariableReference(if (mVisibleTrackedIds, [])    Expression(, [])  Statement(if (sVerbose) {, [])  MethodCall(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofillChangedLocked(): no more visible ids"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onVisibleForAutofillChangedLocked(): no more visible ids"", [])  Statement(}, [])  Statement(finishSessionLocked(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// The visibility of the views might have changed while the client was not be visible,, []), Statement(// hence update the visibility state for all views., []), AssignmentExpression(=, [VariableReference(AutofillClient client, []), Expression(getClient(), [])]), AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedVisibleTrackedIds, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedInvisibleTrackedIds, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), Statement(if (sVerbose) {, []), AssignmentExpression(=, [VariableReference(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv, []), Expression("" + mInvisibleTrackedIds + "" vis, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mInvisibleTrackedIds !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedInvisibleIds, []), Expression(new ArrayList<>(mInvisibleTrackedIds), [])]), AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds)), [])]), AssignmentExpression(=, [VariableReference(final int numInvisibleTrackedIds, []), Expression(orderedInvisibleIds.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numInvisibleTrackedIds, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedInvisibleIds.get(i), [])]), Statement(if (isVisible[i]) {, []), AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])]), Statement(if (sDebug) {, []), MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became visible"", [])]), Statement(}, []), Statement(} else {, []), AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])]), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedVisibleIds, []), Expression(new ArrayList<>(mVisibleTrackedIds), [])]), AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds)), [])]), AssignmentExpression(=, [VariableReference(final int numVisibleTrackedIds, []), Expression(orderedVisibleIds.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numVisibleTrackedIds, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedVisibleIds.get(i), [])]), Statement(if (isVisible[i]) {, []), AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])]), Statement(if (sDebug) {, []), MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became invisible"", [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mInvisibleTrackedIds, []), Expression(updatedInvisibleTrackedIds, [])]), AssignmentExpression(=, [VariableReference(mVisibleTrackedIds, []), Expression(updatedVisibleTrackedIds, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds, []), Expression(, [])]), Statement(if (sVerbose) {, []), MethodCall(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofillChangedLocked(): no more visible ids"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(finishSessionLocked(/* commitReason, []), Expression(*/, [])]), Statement(COMMIT_REASON_VIEW_CHANGED), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// The visibility of the views might have changed while the client was not be visible,, [])  Statement(// hence update the visibility state for all views., [])  AssignmentExpression(=, [VariableReference(AutofillClient client, []), Expression(getClient(), [])])    VariableReference(AutofillClient client, [])    Expression(getClient(), [])  AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedVisibleTrackedIds, []), Expression(null, [])])    VariableReference(ArraySet<AutofillId> updatedVisibleTrackedIds, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(ArraySet<AutofillId> updatedInvisibleTrackedIds, []), Expression(null, [])])    VariableReference(ArraySet<AutofillId> updatedInvisibleTrackedIds, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  Statement(if (sVerbose) {, [])  AssignmentExpression(=, [VariableReference(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv, []), Expression("" + mInvisibleTrackedIds + "" vis, [])])    VariableReference(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv, [])    Expression("" + mInvisibleTrackedIds + "" vis, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mInvisibleTrackedIds !, []), Expression(null) {, [])])    VariableReference(if (mInvisibleTrackedIds !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedInvisibleIds, []), Expression(new ArrayList<>(mInvisibleTrackedIds), [])])    VariableReference(final ArrayList<AutofillId> orderedInvisibleIds, [])    Expression(new ArrayList<>(mInvisibleTrackedIds), [])  AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds)), [])])    VariableReference(final boolean[] isVisible, [])    Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds)), [])  AssignmentExpression(=, [VariableReference(final int numInvisibleTrackedIds, []), Expression(orderedInvisibleIds.size(), [])])    VariableReference(final int numInvisibleTrackedIds, [])    Expression(orderedInvisibleIds.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numInvisibleTrackedIds, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedInvisibleIds.get(i), [])])    VariableReference(final AutofillId id, [])    Expression(orderedInvisibleIds.get(i), [])  Statement(if (isVisible[i]) {, [])  AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])])    VariableReference(updatedVisibleTrackedIds, [])    Expression(addToSet(updatedVisibleTrackedIds, id), [])  Statement(if (sDebug) {, [])  MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became visible"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onVisibleForAutofill() "" + id + "" became visible"", [])  Statement(}, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])])    VariableReference(updatedInvisibleTrackedIds, [])    Expression(addToSet(updatedInvisibleTrackedIds, id), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds !, []), Expression(null) {, [])])    VariableReference(if (mVisibleTrackedIds !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final ArrayList<AutofillId> orderedVisibleIds, []), Expression(new ArrayList<>(mVisibleTrackedIds), [])])    VariableReference(final ArrayList<AutofillId> orderedVisibleIds, [])    Expression(new ArrayList<>(mVisibleTrackedIds), [])  AssignmentExpression(=, [VariableReference(final boolean[] isVisible, []), Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds)), [])])    VariableReference(final boolean[] isVisible, [])    Expression(client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds)), [])  AssignmentExpression(=, [VariableReference(final int numVisibleTrackedIds, []), Expression(orderedVisibleIds.size(), [])])    VariableReference(final int numVisibleTrackedIds, [])    Expression(orderedVisibleIds.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numVisibleTrackedIds, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(final AutofillId id, []), Expression(orderedVisibleIds.get(i), [])])    VariableReference(final AutofillId id, [])    Expression(orderedVisibleIds.get(i), [])  Statement(if (isVisible[i]) {, [])  AssignmentExpression(=, [VariableReference(updatedVisibleTrackedIds, []), Expression(addToSet(updatedVisibleTrackedIds, id), [])])    VariableReference(updatedVisibleTrackedIds, [])    Expression(addToSet(updatedVisibleTrackedIds, id), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(updatedInvisibleTrackedIds, []), Expression(addToSet(updatedInvisibleTrackedIds, id), [])])    VariableReference(updatedInvisibleTrackedIds, [])    Expression(addToSet(updatedInvisibleTrackedIds, id), [])  Statement(if (sDebug) {, [])  MethodCall(Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofill() "" + id + "" became invisible"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onVisibleForAutofill() "" + id + "" became invisible"", [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mInvisibleTrackedIds, []), Expression(updatedInvisibleTrackedIds, [])])    VariableReference(mInvisibleTrackedIds, [])    Expression(updatedInvisibleTrackedIds, [])  AssignmentExpression(=, [VariableReference(mVisibleTrackedIds, []), Expression(updatedVisibleTrackedIds, [])])    VariableReference(mVisibleTrackedIds, [])    Expression(updatedVisibleTrackedIds, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mVisibleTrackedIds, []), Expression(, [])])    VariableReference(if (mVisibleTrackedIds, [])    Expression(, [])  Statement(if (sVerbose) {, [])  MethodCall(Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids""), [VariableReference(Log, []), Expression(TAG, []), Expression(""onVisibleForAutofillChangedLocked(): no more visible ids"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""onVisibleForAutofillChangedLocked(): no more visible ids"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(finishSessionLocked(/* commitReason, []), Expression(*/, [])])    VariableReference(finishSessionLocked(/* commitReason, [])    Expression(*/, [])  Statement(COMMIT_REASON_VIEW_CHANGED), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Called once the client becomes visible.
 *
 * @see AutofillClient#autofillClientIsVisibleForAutofill()
 */
","/**
 * Called once the client becomes visible.
 *
 * @see AutofillClient#autofillClientIsVisibleForAutofill()
 */
",0,[@GuardedBy("mLock")],[@GuardedBy("mLock")],0,,,,2,5,0,"3,4",0,"A parameter `commitReason` with a value `COMMIT_REASON_VIEW_CHANGED` has been added to the `finishSessionLocked()` method call, which modifies the behavior but falls under control and other statement changes, so the code change classification is 3,4.","Adding a parameter to `finishSessionLocked()` does not alter the return type or the exception handling of the method, thus no compatibility issue arises. Therefore, the CI type is 0."
"<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>",32,33,,,,"{
    // exceptions for compatibility purposes
    if (repeat < -1 || repeat >= pattern.length) {
        Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length="" + pattern.length + "", index="" + repeat + "")"");
        throw new ArrayIndexOutOfBoundsException();
    }
    try {
        vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes);
    } catch (IllegalArgumentException iae) {
        Log.e(TAG, ""Failed to create VibrationEffect"", iae);
    }
}","{
    // exceptions for compatibility purposes
    if (repeat < -1 || repeat >= pattern.length) {
        Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length="" + pattern.length + "", index="" + repeat + "")"");
        throw new ArrayIndexOutOfBoundsException();
    }
    try {
        vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes);
    } catch (IllegalArgumentException iae) {
        Log.e(TAG, ""Failed to create VibrationEffect"", iae);
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(// exceptions for compatibility purposes, []), AssignmentExpression(=, [VariableReference(if (repeat < -1 || repeat >, []), Expression(pattern.length) {, [])]), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, []), Expression("" + pattern.length + "", index, [])]), Statement(throw new ArrayIndexOutOfBoundsException(), []), Statement(}, []), Statement(try {, []), MethodCall(vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes), [VariableReference(vibrate(VibrationEffect, []), Expression(pattern, []), Expression(repeat), []), Expression(attributes, [])]), Statement(} catch (IllegalArgumentException iae) {, []), MethodCall(Log.e(TAG, ""Failed to create VibrationEffect"", iae), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to create VibrationEffect"", []), Expression(iae, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// exceptions for compatibility purposes, [])  AssignmentExpression(=, [VariableReference(if (repeat < -1 || repeat >, []), Expression(pattern.length) {, [])])    VariableReference(if (repeat < -1 || repeat >, [])    Expression(pattern.length) {, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, []), Expression("" + pattern.length + "", index, [])])    VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, [])    Expression("" + pattern.length + "", index, [])  Statement(throw new ArrayIndexOutOfBoundsException(), [])  Statement(}, [])  Statement(try {, [])  MethodCall(vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes), [VariableReference(vibrate(VibrationEffect, []), Expression(pattern, []), Expression(repeat), []), Expression(attributes, [])])    VariableReference(vibrate(VibrationEffect, [])    Expression(pattern, [])    Expression(repeat), [])    Expression(attributes, [])  Statement(} catch (IllegalArgumentException iae) {, [])  MethodCall(Log.e(TAG, ""Failed to create VibrationEffect"", iae), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to create VibrationEffect"", []), Expression(iae, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed to create VibrationEffect"", [])    Expression(iae, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// exceptions for compatibility purposes, []), AssignmentExpression(=, [VariableReference(if (repeat < -1 || repeat >, []), Expression(pattern.length) {, [])]), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, []), Expression("" + pattern.length + "", index, [])]), Statement(throw new ArrayIndexOutOfBoundsException(), []), Statement(}, []), Statement(try {, []), MethodCall(vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes), [VariableReference(vibrate(VibrationEffect, []), Expression(pattern, []), Expression(repeat), []), Expression(attributes, [])]), Statement(} catch (IllegalArgumentException iae) {, []), MethodCall(Log.e(TAG, ""Failed to create VibrationEffect"", iae), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to create VibrationEffect"", []), Expression(iae, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// exceptions for compatibility purposes, [])  AssignmentExpression(=, [VariableReference(if (repeat < -1 || repeat >, []), Expression(pattern.length) {, [])])    VariableReference(if (repeat < -1 || repeat >, [])    Expression(pattern.length) {, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, []), Expression("" + pattern.length + "", index, [])])    VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, [])    Expression("" + pattern.length + "", index, [])  Statement(throw new ArrayIndexOutOfBoundsException(), [])  Statement(}, [])  Statement(try {, [])  MethodCall(vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes), [VariableReference(vibrate(VibrationEffect, []), Expression(pattern, []), Expression(repeat), []), Expression(attributes, [])])    VariableReference(vibrate(VibrationEffect, [])    Expression(pattern, [])    Expression(repeat), [])    Expression(attributes, [])  Statement(} catch (IllegalArgumentException iae) {, [])  MethodCall(Log.e(TAG, ""Failed to create VibrationEffect"", iae), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to create VibrationEffect"", []), Expression(iae, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed to create VibrationEffect"", [])    Expression(iae, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern    an array of longs of times for which to turn the vibrator on or off.
 * @param repeat     the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
","/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * <p>The app should be in the foreground for the vibration to happen. Background apps should
 * specify a ringtone, notification or alarm usage in order to vibrate.</p>
 *
 * @param pattern    an array of longs of times for which to turn the vibrator on or off.
 * @param repeat     the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 * @deprecated Use {@link #vibrate(VibrationEffect, VibrationAttributes)} instead.
 */
",1,"[@Deprecated, @RequiresPermission(android.Manifest.permission.VIBRATE)]","[@Deprecated, @RequiresPermission(android.Manifest.permission.VIBRATE)]",0,,,,0,0,0,0,0,There are no changes in the method implementation between the early and late versions. The code and annotations remain identical.,"Since there are no changes in the method implementation, there is no potential for compatibility issues."
<android.companion.AssociationRequest.Builder: Builder setSingleDevice(boolean)>,32,33,,,,"{
    checkNotUsed();
    this.mSingleDevice = singleDevice;
    return this;
}","{
    checkNotUsed();
    this.mSingleDevice = singleDevice;
    return this;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(checkNotUsed(), []), AssignmentExpression(=, [VariableReference(this.mSingleDevice, []), Expression(singleDevice, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(checkNotUsed(), [])  AssignmentExpression(=, [VariableReference(this.mSingleDevice, []), Expression(singleDevice, [])])    VariableReference(this.mSingleDevice, [])    Expression(singleDevice, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkNotUsed(), []), AssignmentExpression(=, [VariableReference(this.mSingleDevice, []), Expression(singleDevice, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(checkNotUsed(), [])  AssignmentExpression(=, [VariableReference(this.mSingleDevice, []), Expression(singleDevice, [])])    VariableReference(this.mSingleDevice, [])    Expression(singleDevice, [])  Statement(return this, [])  Statement(}, [])",0,"/**
 * Whether only a single device should match the provided filter.
 *
 * When scanning for a single device with a specifc {@link BluetoothDeviceFilter} mac
 * address, bonded devices are also searched among. This allows to obtain the necessary app
 * privileges even if the device is already paired.
 *
 * @param singleDevice if true, scanning for a device will stop as soon as at least one
 * fitting device is found
 */
","/**
 * Whether only a single device should match the provided filter.
 *
 * When scanning for a single device with a specific {@link BluetoothDeviceFilter} mac
 * address, bonded devices are also searched among. This allows to obtain the necessary app
 * privileges even if the device is already paired.
 *
 * @param singleDevice if true, scanning for a device will stop as soon as at least one
 * fitting device is found
 */
",1,[@NonNull],[@NonNull],0,,,,0,0,0,0,0,There are no changes in the method implementation between the two versions. Both the code and annotations are identical.,"Since there are no changes in the code, there is no potential for any Compatibility Issues."
<android.app.Activity: void onLowMemory()>,32,33,,,,"{
    if (DEBUG_LIFECYCLE)
        Slog.v(TAG, ""onLowMemory "" + this);
    mCalled = true;
    mFragments.dispatchLowMemory();
}","{
    if (DEBUG_LIFECYCLE)
        Slog.v(TAG, ""onLowMemory "" + this);
    mCalled = true;
    mFragments.dispatchLowMemory();
    if (mCallbacksController != null) {
        mCallbacksController.dispatchLowMemory();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG_LIFECYCLE), []), MethodCall(Slog.v(TAG, ""onLowMemory "" + this), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onLowMemory "" + this, [])]), AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])]), MethodCall(mFragments.dispatchLowMemory(), [VariableReference(mFragments, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG_LIFECYCLE), [])  MethodCall(Slog.v(TAG, ""onLowMemory "" + this), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onLowMemory "" + this, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""onLowMemory "" + this, [])  AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])])    VariableReference(mCalled, [])    Expression(true, [])  MethodCall(mFragments.dispatchLowMemory(), [VariableReference(mFragments, []), Expression(, [])])    VariableReference(mFragments, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG_LIFECYCLE), []), MethodCall(Slog.v(TAG, ""onLowMemory "" + this), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onLowMemory "" + this, [])]), AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])]), MethodCall(mFragments.dispatchLowMemory(), [VariableReference(mFragments, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mCallbacksController !, []), Expression(null) {, [])]), MethodCall(mCallbacksController.dispatchLowMemory(), [VariableReference(mCallbacksController, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG_LIFECYCLE), [])  MethodCall(Slog.v(TAG, ""onLowMemory "" + this), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onLowMemory "" + this, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""onLowMemory "" + this, [])  AssignmentExpression(=, [VariableReference(mCalled, []), Expression(true, [])])    VariableReference(mCalled, [])    Expression(true, [])  MethodCall(mFragments.dispatchLowMemory(), [VariableReference(mFragments, []), Expression(, [])])    VariableReference(mFragments, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mCallbacksController !, []), Expression(null) {, [])])    VariableReference(if (mCallbacksController !, [])    Expression(null) {, [])  MethodCall(mCallbacksController.dispatchLowMemory(), [VariableReference(mCallbacksController, []), Expression(, [])])    VariableReference(mCallbacksController, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,"1,2","3,4",0,3,0,"A new control dependency using an `if` statement has been added, which checks if `mCallbacksController` is not null before calling `mCallbacksController.dispatchLowMemory()`. Therefore, the code change type is 3.","The addition of the `if (mCallbacksController != null)` check and subsequent method call does not lead to a change in return values or exception handling of the `onLowMemory()` API itself. Therefore, no compatibility issues will arise, and the CI type is 0."
"<android.hardware.camera2.params.OutputConfiguration: void writeToParcel(Parcel,int)>",32,33,,,,"{
    if (dest == null) {
        throw new IllegalArgumentException(""dest must not be null"");
    }
    dest.writeInt(mRotation);
    dest.writeInt(mSurfaceGroupId);
    dest.writeInt(mSurfaceType);
    dest.writeInt(mConfiguredSize.getWidth());
    dest.writeInt(mConfiguredSize.getHeight());
    dest.writeInt(mIsDeferredConfig ? 1 : 0);
    dest.writeInt(mIsShared ? 1 : 0);
    dest.writeTypedList(mSurfaces);
    dest.writeString(mPhysicalCameraId);
    dest.writeInt(mIsMultiResolution ? 1 : 0);
    // writeList doesn't seem to work well with Integer list.
    dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed));
}","{
    if (dest == null) {
        throw new IllegalArgumentException(""dest must not be null"");
    }
    dest.writeInt(mRotation);
    dest.writeInt(mSurfaceGroupId);
    dest.writeInt(mSurfaceType);
    dest.writeInt(mConfiguredSize.getWidth());
    dest.writeInt(mConfiguredSize.getHeight());
    dest.writeInt(mIsDeferredConfig ? 1 : 0);
    dest.writeInt(mIsShared ? 1 : 0);
    dest.writeTypedList(mSurfaces);
    dest.writeString(mPhysicalCameraId);
    dest.writeInt(mIsMultiResolution ? 1 : 0);
    // writeList doesn't seem to work well with Integer list.
    dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed));
    dest.writeLong(mDynamicRangeProfile);
    dest.writeLong(mStreamUseCase);
    dest.writeInt(mTimestampBase);
    dest.writeInt(mMirrorMode);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (dest, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""dest must not be null""), []), Statement(}, []), MethodCall(dest.writeInt(mRotation), [VariableReference(dest, []), Expression(mRotation, [])]), MethodCall(dest.writeInt(mSurfaceGroupId), [VariableReference(dest, []), Expression(mSurfaceGroupId, [])]), MethodCall(dest.writeInt(mSurfaceType), [VariableReference(dest, []), Expression(mSurfaceType, [])]), MethodCall(dest.writeInt(mConfiguredSize.getWidth()), [VariableReference(dest, []), Expression(mConfiguredSize.getWidth(), [])]), MethodCall(dest.writeInt(mConfiguredSize.getHeight()), [VariableReference(dest, []), Expression(mConfiguredSize.getHeight(), [])]), MethodCall(dest.writeInt(mIsDeferredConfig ? 1 : 0), [VariableReference(dest, []), Expression(mIsDeferredConfig ? 1 : 0, [])]), MethodCall(dest.writeInt(mIsShared ? 1 : 0), [VariableReference(dest, []), Expression(mIsShared ? 1 : 0, [])]), MethodCall(dest.writeTypedList(mSurfaces), [VariableReference(dest, []), Expression(mSurfaces, [])]), MethodCall(dest.writeString(mPhysicalCameraId), [VariableReference(dest, []), Expression(mPhysicalCameraId, [])]), MethodCall(dest.writeInt(mIsMultiResolution ? 1 : 0), [VariableReference(dest, []), Expression(mIsMultiResolution ? 1 : 0, [])]), Statement(// writeList doesn't seem to work well with Integer list., []), MethodCall(dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed)), [VariableReference(dest, []), Expression(convertIntegerToIntList(mSensorPixelModesUsed), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (dest, []), Expression(, [])])    VariableReference(if (dest, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""dest must not be null""), [])  Statement(}, [])  MethodCall(dest.writeInt(mRotation), [VariableReference(dest, []), Expression(mRotation, [])])    VariableReference(dest, [])    Expression(mRotation, [])  MethodCall(dest.writeInt(mSurfaceGroupId), [VariableReference(dest, []), Expression(mSurfaceGroupId, [])])    VariableReference(dest, [])    Expression(mSurfaceGroupId, [])  MethodCall(dest.writeInt(mSurfaceType), [VariableReference(dest, []), Expression(mSurfaceType, [])])    VariableReference(dest, [])    Expression(mSurfaceType, [])  MethodCall(dest.writeInt(mConfiguredSize.getWidth()), [VariableReference(dest, []), Expression(mConfiguredSize.getWidth(), [])])    VariableReference(dest, [])    Expression(mConfiguredSize.getWidth(), [])  MethodCall(dest.writeInt(mConfiguredSize.getHeight()), [VariableReference(dest, []), Expression(mConfiguredSize.getHeight(), [])])    VariableReference(dest, [])    Expression(mConfiguredSize.getHeight(), [])  MethodCall(dest.writeInt(mIsDeferredConfig ? 1 : 0), [VariableReference(dest, []), Expression(mIsDeferredConfig ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsDeferredConfig ? 1 : 0, [])  MethodCall(dest.writeInt(mIsShared ? 1 : 0), [VariableReference(dest, []), Expression(mIsShared ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsShared ? 1 : 0, [])  MethodCall(dest.writeTypedList(mSurfaces), [VariableReference(dest, []), Expression(mSurfaces, [])])    VariableReference(dest, [])    Expression(mSurfaces, [])  MethodCall(dest.writeString(mPhysicalCameraId), [VariableReference(dest, []), Expression(mPhysicalCameraId, [])])    VariableReference(dest, [])    Expression(mPhysicalCameraId, [])  MethodCall(dest.writeInt(mIsMultiResolution ? 1 : 0), [VariableReference(dest, []), Expression(mIsMultiResolution ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsMultiResolution ? 1 : 0, [])  Statement(// writeList doesn't seem to work well with Integer list., [])  MethodCall(dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed)), [VariableReference(dest, []), Expression(convertIntegerToIntList(mSensorPixelModesUsed), [])])    VariableReference(dest, [])    Expression(convertIntegerToIntList(mSensorPixelModesUsed), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (dest, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""dest must not be null""), []), Statement(}, []), MethodCall(dest.writeInt(mRotation), [VariableReference(dest, []), Expression(mRotation, [])]), MethodCall(dest.writeInt(mSurfaceGroupId), [VariableReference(dest, []), Expression(mSurfaceGroupId, [])]), MethodCall(dest.writeInt(mSurfaceType), [VariableReference(dest, []), Expression(mSurfaceType, [])]), MethodCall(dest.writeInt(mConfiguredSize.getWidth()), [VariableReference(dest, []), Expression(mConfiguredSize.getWidth(), [])]), MethodCall(dest.writeInt(mConfiguredSize.getHeight()), [VariableReference(dest, []), Expression(mConfiguredSize.getHeight(), [])]), MethodCall(dest.writeInt(mIsDeferredConfig ? 1 : 0), [VariableReference(dest, []), Expression(mIsDeferredConfig ? 1 : 0, [])]), MethodCall(dest.writeInt(mIsShared ? 1 : 0), [VariableReference(dest, []), Expression(mIsShared ? 1 : 0, [])]), MethodCall(dest.writeTypedList(mSurfaces), [VariableReference(dest, []), Expression(mSurfaces, [])]), MethodCall(dest.writeString(mPhysicalCameraId), [VariableReference(dest, []), Expression(mPhysicalCameraId, [])]), MethodCall(dest.writeInt(mIsMultiResolution ? 1 : 0), [VariableReference(dest, []), Expression(mIsMultiResolution ? 1 : 0, [])]), Statement(// writeList doesn't seem to work well with Integer list., []), MethodCall(dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed)), [VariableReference(dest, []), Expression(convertIntegerToIntList(mSensorPixelModesUsed), [])]), MethodCall(dest.writeLong(mDynamicRangeProfile), [VariableReference(dest, []), Expression(mDynamicRangeProfile, [])]), MethodCall(dest.writeLong(mStreamUseCase), [VariableReference(dest, []), Expression(mStreamUseCase, [])]), MethodCall(dest.writeInt(mTimestampBase), [VariableReference(dest, []), Expression(mTimestampBase, [])]), MethodCall(dest.writeInt(mMirrorMode), [VariableReference(dest, []), Expression(mMirrorMode, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (dest, []), Expression(, [])])    VariableReference(if (dest, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""dest must not be null""), [])  Statement(}, [])  MethodCall(dest.writeInt(mRotation), [VariableReference(dest, []), Expression(mRotation, [])])    VariableReference(dest, [])    Expression(mRotation, [])  MethodCall(dest.writeInt(mSurfaceGroupId), [VariableReference(dest, []), Expression(mSurfaceGroupId, [])])    VariableReference(dest, [])    Expression(mSurfaceGroupId, [])  MethodCall(dest.writeInt(mSurfaceType), [VariableReference(dest, []), Expression(mSurfaceType, [])])    VariableReference(dest, [])    Expression(mSurfaceType, [])  MethodCall(dest.writeInt(mConfiguredSize.getWidth()), [VariableReference(dest, []), Expression(mConfiguredSize.getWidth(), [])])    VariableReference(dest, [])    Expression(mConfiguredSize.getWidth(), [])  MethodCall(dest.writeInt(mConfiguredSize.getHeight()), [VariableReference(dest, []), Expression(mConfiguredSize.getHeight(), [])])    VariableReference(dest, [])    Expression(mConfiguredSize.getHeight(), [])  MethodCall(dest.writeInt(mIsDeferredConfig ? 1 : 0), [VariableReference(dest, []), Expression(mIsDeferredConfig ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsDeferredConfig ? 1 : 0, [])  MethodCall(dest.writeInt(mIsShared ? 1 : 0), [VariableReference(dest, []), Expression(mIsShared ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsShared ? 1 : 0, [])  MethodCall(dest.writeTypedList(mSurfaces), [VariableReference(dest, []), Expression(mSurfaces, [])])    VariableReference(dest, [])    Expression(mSurfaces, [])  MethodCall(dest.writeString(mPhysicalCameraId), [VariableReference(dest, []), Expression(mPhysicalCameraId, [])])    VariableReference(dest, [])    Expression(mPhysicalCameraId, [])  MethodCall(dest.writeInt(mIsMultiResolution ? 1 : 0), [VariableReference(dest, []), Expression(mIsMultiResolution ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsMultiResolution ? 1 : 0, [])  Statement(// writeList doesn't seem to work well with Integer list., [])  MethodCall(dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed)), [VariableReference(dest, []), Expression(convertIntegerToIntList(mSensorPixelModesUsed), [])])    VariableReference(dest, [])    Expression(convertIntegerToIntList(mSensorPixelModesUsed), [])  MethodCall(dest.writeLong(mDynamicRangeProfile), [VariableReference(dest, []), Expression(mDynamicRangeProfile, [])])    VariableReference(dest, [])    Expression(mDynamicRangeProfile, [])  MethodCall(dest.writeLong(mStreamUseCase), [VariableReference(dest, []), Expression(mStreamUseCase, [])])    VariableReference(dest, [])    Expression(mStreamUseCase, [])  MethodCall(dest.writeInt(mTimestampBase), [VariableReference(dest, []), Expression(mTimestampBase, [])])    VariableReference(dest, [])    Expression(mTimestampBase, [])  MethodCall(dest.writeInt(mMirrorMode), [VariableReference(dest, []), Expression(mMirrorMode, [])])    VariableReference(dest, [])    Expression(mMirrorMode, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2",4,0,4,0,"Several new method calls have been introduced to write additional fields (`mDynamicRangeProfile`, `mStreamUseCase`, `mTimestampBase`, and `mMirrorMode`) to the `Parcel`, falling under type 4 (Other statement changed).","The added statements do not alter the return type or exception handling behavior of the method, nor do they change the control flow in a way that would affect the output values or behavior significantly. Therefore, there is no potential CI."
<android.os.BaseBundle: ArrayList<Integer> getIntegerArrayList(String)>,32,33,,,,"{
    unparcel();
    Object o = mMap.get(key);
    if (o == null) {
        return null;
    }
    try {
        return (ArrayList<Integer>) o;
    } catch (ClassCastException e) {
        typeWarning(key, o, ""ArrayList<Integer>"", e);
        return null;
    }
}","{
    return getArrayList(key, Integer.class);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(unparcel(), []), AssignmentExpression(=, [VariableReference(Object o, []), Expression(mMap.get(key), [])]), AssignmentExpression(=, [VariableReference(if (o, []), Expression(, [])]), Statement(return null, []), Statement(}, []), Statement(try {, []), Statement(return (ArrayList<Integer>) o, []), Statement(} catch (ClassCastException e) {, []), Statement(typeWarning(key, o, ""ArrayList<Integer>"", e), []), Statement(return null, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(unparcel(), [])  AssignmentExpression(=, [VariableReference(Object o, []), Expression(mMap.get(key), [])])    VariableReference(Object o, [])    Expression(mMap.get(key), [])  AssignmentExpression(=, [VariableReference(if (o, []), Expression(, [])])    VariableReference(if (o, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  Statement(try {, [])  Statement(return (ArrayList<Integer>) o, [])  Statement(} catch (ClassCastException e) {, [])  Statement(typeWarning(key, o, ""ArrayList<Integer>"", e), [])  Statement(return null, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",1,"/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return an ArrayList<String> value, or null
 */
","/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return an ArrayList<String> value, or null
 */
",0,[@Nullable],[@Nullable],0,,,,"1,2","1,2,3,4,5","1,2","1,3,5","1,2","The early version performs multiple checks and a type cast operation, while the late version directly calls `getArrayList(key, Integer.class)`. This alters the control dependency, the return statement, and indicates a possible change in the dependent API. Therefore, the change types are 1, 3, and 5.","1. The simplification of the method could cause the method to return different values if the implementation of `getArrayList(key, Integer.class)` differs from the manual process done in the early version."
<android.service.dreams.DreamService: void onDreamingStarted()>,32,33,,,,"{
    if (mDebug)
        Slog.v(TAG, ""onDreamingStarted()"");
// hook for subclasses
}","{
    if (mDebug)
        Slog.v(mTag, ""onDreamingStarted()"");
// hook for subclasses
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mDebug), []), MethodCall(Slog.v(TAG, ""onDreamingStarted()""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onDreamingStarted()"", [])]), Statement(// hook for subclasses, []), Statement(}, [])])  Statement({, [])  Statement(if (mDebug), [])  MethodCall(Slog.v(TAG, ""onDreamingStarted()""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onDreamingStarted()"", [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""onDreamingStarted()"", [])  Statement(// hook for subclasses, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (mDebug), []), MethodCall(Slog.v(mTag, ""onDreamingStarted()""), [VariableReference(Slog, []), Expression(mTag, []), Expression(""onDreamingStarted()"", [])]), Statement(// hook for subclasses, []), Statement(}, [])])  Statement({, [])  Statement(if (mDebug), [])  MethodCall(Slog.v(mTag, ""onDreamingStarted()""), [VariableReference(Slog, []), Expression(mTag, []), Expression(""onDreamingStarted()"", [])])    VariableReference(Slog, [])    Expression(mTag, [])    Expression(""onDreamingStarted()"", [])  Statement(// hook for subclasses, [])  Statement(}, [])",1,"/**
 * Called when the dream's window has been created and is visible and animation may now begin.
 */
","/**
 * Called when the dream's window has been created and is visible and animation may now begin.
 */
",0,,,0,,,,1,4,0,4,0,"The only change is in the argument of `Slog.v` from `TAG` to `mTag`. This change does not affect the control flow, return values, or exception handling, so the code change type is 4.","Changing the argument from `TAG` to `mTag` in the log statement does not lead to any potential compatibility issues. The method's behavior and outcomes remain unchanged, so the CI type is 0."
<android.os.PowerComponents.Builder: double getTotalPower()>,32,33,,,,"{
    double totalPowerMah = 0;
    for (int i = mPowerComponentsMah.length - 1; i >= 0; i--) {
        totalPowerMah += mPowerComponentsMah[i];
    }
    return totalPowerMah;
}","{
    double totalPowerMah = 0;
    for (int componentId = 0; componentId < BatteryConsumer.POWER_COMPONENT_COUNT; componentId++) {
        totalPowerMah += mData.getDouble(mData.getKeyOrThrow(componentId, PROCESS_STATE_ANY).mPowerColumnIndex);
    }
    for (int i = 0; i < mData.layout.customPowerComponentCount; i++) {
        totalPowerMah += mData.getDouble(mData.layout.firstCustomConsumedPowerColumn + i);
    }
    return totalPowerMah;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(double totalPowerMah, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(mPowerComponentsMah.length - 1, [])]), AssignmentExpression(=, [VariableReference(i >, []), Expression(0, [])]), Statement(i--) {, []), AssignmentExpression(=, [VariableReference(totalPowerMah +, []), Expression(mPowerComponentsMah[i], [])]), Statement(}, []), Statement(return totalPowerMah, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(double totalPowerMah, []), Expression(0, [])])    VariableReference(double totalPowerMah, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(mPowerComponentsMah.length - 1, [])])    VariableReference(for (int i, [])    Expression(mPowerComponentsMah.length - 1, [])  AssignmentExpression(=, [VariableReference(i >, []), Expression(0, [])])    VariableReference(i >, [])    Expression(0, [])  Statement(i--) {, [])  AssignmentExpression(=, [VariableReference(totalPowerMah +, []), Expression(mPowerComponentsMah[i], [])])    VariableReference(totalPowerMah +, [])    Expression(mPowerComponentsMah[i], [])  Statement(}, [])  Statement(return totalPowerMah, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(double totalPowerMah, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(for (int componentId, []), Expression(0, [])]), Statement(componentId < BatteryConsumer.POWER_COMPONENT_COUNT, []), Statement(componentId++) {, []), AssignmentExpression(=, [VariableReference(totalPowerMah +, []), Expression(mData.getDouble(mData.getKeyOrThrow(componentId, PROCESS_STATE_ANY).mPowerColumnIndex), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < mData.layout.customPowerComponentCount, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(totalPowerMah +, []), Expression(mData.getDouble(mData.layout.firstCustomConsumedPowerColumn + i), [])]), Statement(}, []), Statement(return totalPowerMah, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(double totalPowerMah, []), Expression(0, [])])    VariableReference(double totalPowerMah, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(for (int componentId, []), Expression(0, [])])    VariableReference(for (int componentId, [])    Expression(0, [])  Statement(componentId < BatteryConsumer.POWER_COMPONENT_COUNT, [])  Statement(componentId++) {, [])  AssignmentExpression(=, [VariableReference(totalPowerMah +, []), Expression(mData.getDouble(mData.getKeyOrThrow(componentId, PROCESS_STATE_ANY).mPowerColumnIndex), [])])    VariableReference(totalPowerMah +, [])    Expression(mData.getDouble(mData.getKeyOrThrow(componentId, PROCESS_STATE_ANY).mPowerColumnIndex), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < mData.layout.customPowerComponentCount, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(totalPowerMah +, []), Expression(mData.getDouble(mData.layout.firstCustomConsumedPowerColumn + i), [])])    VariableReference(totalPowerMah +, [])    Expression(mData.getDouble(mData.layout.firstCustomConsumedPowerColumn + i), [])  Statement(}, [])  Statement(return totalPowerMah, [])  Statement(}, [])",1,"/**
 * Returns the total power accumulated by this builder so far. It may change
 * by the time the {@code build()} method is called.
 */
","/**
 * Returns the total power accumulated by this builder so far. It may change
 * by the time the {@code build()} method is called.
 */
",0,,,0,,,,"1,2","1,3,4",1,"1,3,5",1,"- The return statement remains the same, but the way the `totalPowerMah` is calculated has changed. ",
<android.hardware.camera2.CameraDevice: void createExtensionSession(ExtensionSessionConfiguration)>,32,33,,,,"{
    throw new UnsupportedOperationException(""No default implementation"");
}","{
    throw new UnsupportedOperationException(""No default implementation"");
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""No default implementation""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""No default implementation""), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""No default implementation""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""No default implementation""), [])  Statement(}, [])",0,"/**
 * Initialize a specific device-specific extension augmented camera capture
 * session.
 *
 * <p>Extension sessions can be used to enable device-specific operation modes like
 * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT} or
 * {@link CameraExtensionCharacteristics#EXTENSION_HDR}. These modes are less flexible than the
 * full camera API, but enable access to more sophisticated processing algorithms that can
 * capture multi-frame bursts to generate single output images. To query for available
 * extensions on this device call
 * {@link CameraExtensionCharacteristics#getSupportedExtensions()}.</p>
 *
 * <p>This method will also trigger the setup of the internal
 * processing pipeline for extension augmented preview and multi-frame
 * still capture.</p>
 *
 * <p>If a prior CameraCaptureSession already exists when this method is called, the previous
 * session will no longer be able to accept new capture requests and will be closed. Any
 * in-progress capture requests made on the prior session will be completed before it's closed.
 * </p>
 *
 * <p>The CameraExtensionSession will be active until the client
 * either calls CameraExtensionSession.close() or creates a new camera
 * capture session. In both cases all internal resources will be
 * released, continuous repeating requests stopped and any pending
 * multi-frame capture requests flushed.</p>
 *
 * <p>Note that the CameraExtensionSession currently supports at most wo
 * multi frame capture surface formats: ImageFormat.JPEG will be supported
 * by all extensions and ImageFormat.YUV_420_888 may or may not be supported.
 * Clients must query the multi-frame capture format support using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, int)}.
 * For repeating requests CameraExtensionSession supports only
 * {@link android.graphics.SurfaceTexture} as output. Clients can query the supported resolution
 * for the repeating request output using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, Class)
 * getExtensionSupportedSizes(..., Class)}.</p>
 *
 * <p>At the very minimum the initialization expects either one valid output
 * surface for repeating or one valid output for high-quality single requests registered in the
 * outputs argument of the extension configuration argument. At the maximum the initialization
 * will accept two valid output surfaces, one for repeating and the other for single requests.
 * Additional unsupported surfaces passed to ExtensionSessionConfiguration will cause an
 * {@link IllegalArgumentException} to be thrown.</p>
 *
 * @param extensionConfiguration extension configuration
 * @throws IllegalArgumentException If both the preview and still
 * capture surfaces are not set or invalid, or if any of the
 * registered surfaces do not meet the device-specific
 * extension requirements such as dimensions and/or
 * (output format)/(surface type), or if the extension is not
 * supported.
 * @see CameraExtensionCharacteristics#getSupportedExtensions
 * @see CameraExtensionCharacteristics#getExtensionSupportedSizes
 */
","/**
 * Initialize a specific device-specific extension augmented camera capture
 * session.
 *
 * <p>Extension sessions can be used to enable device-specific operation modes like
 * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT} or
 * {@link CameraExtensionCharacteristics#EXTENSION_HDR}. These modes are less flexible than the
 * full camera API, but enable access to more sophisticated processing algorithms that can
 * capture multi-frame bursts to generate single output images. To query for available
 * extensions on this device call
 * {@link CameraExtensionCharacteristics#getSupportedExtensions()}.</p>
 *
 * <p>This method will also trigger the setup of the internal
 * processing pipeline for extension augmented preview and multi-frame
 * still capture.</p>
 *
 * <p>If a prior CameraCaptureSession already exists when this method is called, the previous
 * session will no longer be able to accept new capture requests and will be closed. Any
 * in-progress capture requests made on the prior session will be completed before it's closed.
 * </p>
 *
 * <p>The CameraExtensionSession will be active until the client
 * either calls CameraExtensionSession.close() or creates a new camera
 * capture session. In both cases all internal resources will be
 * released, continuous repeating requests stopped and any pending
 * multi-frame capture requests flushed.</p>
 *
 * <p>Note that the CameraExtensionSession currently supports at most wo
 * multi frame capture surface formats: ImageFormat.JPEG will be supported
 * by all extensions and ImageFormat.YUV_420_888 may or may not be supported.
 * Clients must query the multi-frame capture format support using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, int)}.
 * For repeating requests CameraExtensionSession supports only
 * {@link android.graphics.SurfaceTexture} as output. Clients can query the supported resolution
 * for the repeating request output using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, Class)
 * getExtensionSupportedSizes(..., Class)}.</p>
 *
 * <p>At the very minimum the initialization expects either one valid output
 * surface for repeating or one valid output for high-quality single requests registered in the
 * outputs argument of the extension configuration argument. At the maximum the initialization
 * will accept two valid output surfaces, one for repeating and the other for single requests.
 * Additional unsupported surfaces passed to ExtensionSessionConfiguration will cause an
 * {@link IllegalArgumentException} to be thrown.</p>
 *
 * @param extensionConfiguration extension configuration
 * @throws IllegalArgumentException If both the preview and still
 * capture surfaces are not set or invalid, or if any of the
 * registered surfaces do not meet the device-specific
 * extension requirements such as dimensions and/or
 * (output format)/(surface type), or if the extension is not
 * supported, or if any of the output configurations select
 * a dynamic range different from
 * {@link android.hardware.camera2.params.DynamicRangeProfiles#STANDARD},
 * or if any of the output configurations sets a stream use
 * case different from {@link
 * android.hardware.camera2.CameraCharacteristics#SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT}.
 * @see CameraExtensionCharacteristics#getSupportedExtensions
 * @see CameraExtensionCharacteristics#getExtensionSupportedSizes
 */
",1,,,0,,,,0,0,0,0,0,No change in the implementation between early and late versions.,No potential compatibility issues as there have been no changes in the implementation.
"<android.text.TextShaper: void shapeText(CharSequence,int,int,TextDirectionHeuristic,TextPaint,GlyphsConsumer)>",32,33,,,,"{
    MeasuredParagraph mp = MeasuredParagraph.buildForBidi(text, start, start + count, dir, null);
    TextLine tl = TextLine.obtain();
    try {
        tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), false, /* tabstop is not supported */
        null, // ellipsis is not supported.
        -1, // ellipsis is not supported.
        -1);
        tl.shape(consumer);
    } finally {
        TextLine.recycle(tl);
    }
}","{
    MeasuredParagraph mp = MeasuredParagraph.buildForBidi(text, start, start + count, dir, null);
    TextLine tl = TextLine.obtain();
    try {
        tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), false, /* tabstop is not supported */
        null, // ellipsis is not supported.
        -1, // ellipsis is not supported.
        -1, false);
        tl.shape(consumer);
    } finally {
        TextLine.recycle(tl);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(MeasuredParagraph mp, []), Expression(MeasuredParagraph.buildForBidi(text, start, start + count, dir, null), [])]), AssignmentExpression(=, [VariableReference(TextLine tl, []), Expression(TextLine.obtain(), [])]), Statement(try {, []), MethodCall(tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), [VariableReference(tl, []), Expression(paint, []), Expression(text, []), Expression(start, []), Expression(start + count, []), Expression(mp.getParagraphDir(), []), Expression(mp.getDirections(0, []), Expression(count, [])]), Statement(null, // ellipsis is not supported., []), Statement(-1, // ellipsis is not supported., []), Statement(-1), []), MethodCall(tl.shape(consumer), [VariableReference(tl, []), Expression(consumer, [])]), Statement(} finally {, []), MethodCall(TextLine.recycle(tl), [VariableReference(TextLine, []), Expression(tl, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(MeasuredParagraph mp, []), Expression(MeasuredParagraph.buildForBidi(text, start, start + count, dir, null), [])])    VariableReference(MeasuredParagraph mp, [])    Expression(MeasuredParagraph.buildForBidi(text, start, start + count, dir, null), [])  AssignmentExpression(=, [VariableReference(TextLine tl, []), Expression(TextLine.obtain(), [])])    VariableReference(TextLine tl, [])    Expression(TextLine.obtain(), [])  Statement(try {, [])  MethodCall(tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), [VariableReference(tl, []), Expression(paint, []), Expression(text, []), Expression(start, []), Expression(start + count, []), Expression(mp.getParagraphDir(), []), Expression(mp.getDirections(0, []), Expression(count, [])])    VariableReference(tl, [])    Expression(paint, [])    Expression(text, [])    Expression(start, [])    Expression(start + count, [])    Expression(mp.getParagraphDir(), [])    Expression(mp.getDirections(0, [])    Expression(count, [])  Statement(null, // ellipsis is not supported., [])  Statement(-1, // ellipsis is not supported., [])  Statement(-1), [])  MethodCall(tl.shape(consumer), [VariableReference(tl, []), Expression(consumer, [])])    VariableReference(tl, [])    Expression(consumer, [])  Statement(} finally {, [])  MethodCall(TextLine.recycle(tl), [VariableReference(TextLine, []), Expression(tl, [])])    VariableReference(TextLine, [])    Expression(tl, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(MeasuredParagraph mp, []), Expression(MeasuredParagraph.buildForBidi(text, start, start + count, dir, null), [])]), AssignmentExpression(=, [VariableReference(TextLine tl, []), Expression(TextLine.obtain(), [])]), Statement(try {, []), MethodCall(tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), [VariableReference(tl, []), Expression(paint, []), Expression(text, []), Expression(start, []), Expression(start + count, []), Expression(mp.getParagraphDir(), []), Expression(mp.getDirections(0, []), Expression(count, [])]), Statement(null, // ellipsis is not supported., []), Statement(-1, // ellipsis is not supported., []), Statement(-1, false), []), MethodCall(tl.shape(consumer), [VariableReference(tl, []), Expression(consumer, [])]), Statement(} finally {, []), MethodCall(TextLine.recycle(tl), [VariableReference(TextLine, []), Expression(tl, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(MeasuredParagraph mp, []), Expression(MeasuredParagraph.buildForBidi(text, start, start + count, dir, null), [])])    VariableReference(MeasuredParagraph mp, [])    Expression(MeasuredParagraph.buildForBidi(text, start, start + count, dir, null), [])  AssignmentExpression(=, [VariableReference(TextLine tl, []), Expression(TextLine.obtain(), [])])    VariableReference(TextLine tl, [])    Expression(TextLine.obtain(), [])  Statement(try {, [])  MethodCall(tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), [VariableReference(tl, []), Expression(paint, []), Expression(text, []), Expression(start, []), Expression(start + count, []), Expression(mp.getParagraphDir(), []), Expression(mp.getDirections(0, []), Expression(count, [])])    VariableReference(tl, [])    Expression(paint, [])    Expression(text, [])    Expression(start, [])    Expression(start + count, [])    Expression(mp.getParagraphDir(), [])    Expression(mp.getDirections(0, [])    Expression(count, [])  Statement(null, // ellipsis is not supported., [])  Statement(-1, // ellipsis is not supported., [])  Statement(-1, false), [])  MethodCall(tl.shape(consumer), [VariableReference(tl, []), Expression(consumer, [])])    VariableReference(tl, [])    Expression(consumer, [])  Statement(} finally {, [])  MethodCall(TextLine.recycle(tl), [VariableReference(TextLine, []), Expression(tl, [])])    VariableReference(TextLine, [])    Expression(tl, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Shape multi-styled text.
 *
 * In the LTR context, the shape result will go from left to right, thus you may want to draw
 * glyphs from left most position of the canvas. In the RTL context, the shape result will go
 * from right to left, thus you may want to draw glyphs from right most position of the canvas.
 *
 * @param text a styled text.
 * @param start a start index of shaping target in the text.
 * @param count a length of shaping target in the text.
 * @param dir a text direction.
 * @param paint a paint
 * @param consumer a consumer of the shape result.
 */
","/**
 * Shape multi-styled text.
 *
 * In the LTR context, the shape result will go from left to right, thus you may want to draw
 * glyphs from left most position of the canvas. In the RTL context, the shape result will go
 * from right to left, thus you may want to draw glyphs from right most position of the canvas.
 *
 * @param text a styled text.
 * @param start a start index of shaping target in the text.
 * @param count a length of shaping target in the text.
 * @param dir a text direction.
 * @param paint a paint
 * @param consumer a consumer of the shape result.
 */
",0,,,0,,,,2,5,0,4,0,"An additional boolean parameter `false` has been added to the `tl.set()` method call. This indicates a change to the internal logic but it does not alter return values or modify exception handling directly, so it is classified as change type 4.","Since the change does not impact return values or exception handling, there is no compatibility issue introduced between the two versions. Thus, the CI type is 0."
<android.app.admin.DevicePolicyManager: List<ApnSetting> getOverrideApns(ComponentName)>,32,33,,,,"{
    throwIfParentInstance(""getOverrideApns"");
    if (mService != null) {
        try {
            return mService.getOverrideApns(admin);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
    return Collections.emptyList();
}","{
    throwIfParentInstance(""getOverrideApns"");
    if (mService != null) {
        try {
            return mService.getOverrideApns(admin);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
    return Collections.emptyList();
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getOverrideApns""), []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(return mService.getOverrideApns(admin), [VariableReference(return mService, []), Expression(admin, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getOverrideApns""), [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(return mService.getOverrideApns(admin), [VariableReference(return mService, []), Expression(admin, [])])    VariableReference(return mService, [])    Expression(admin, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getOverrideApns""), []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(return mService.getOverrideApns(admin), [VariableReference(return mService, []), Expression(admin, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getOverrideApns""), [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(return mService.getOverrideApns(admin), [VariableReference(return mService, []), Expression(admin, [])])    VariableReference(return mService, [])    Expression(admin, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])",0,"/**
 * Called by device owner to get all override APNs inserted by device owner.
 *
 * @param admin which {@link DeviceAdminReceiver} this request is associated with
 * @return A list of override APNs inserted by device owner.
 * @throws SecurityException if {@code admin} is not a device owner.
 *
 * @see #setOverrideApnsEnabled(ComponentName, boolean)
 */
","/**
 * Called by device owner or managed profile owner to get all override APNs inserted by
 * device owner or managed profile owner previously using {@link #addOverrideApn}.
 *
 * @param admin which {@link DeviceAdminReceiver} this request is associated with
 * @return A list of override APNs inserted by device owner.
 * @throws SecurityException if {@code admin} is not a device owner.
 *
 * @see #setOverrideApnsEnabled(ComponentName, boolean)
 */
",1,,,0,,,,0,0,0,0,0,"There are no differences between the early and late implementations, so the code change type is 0.","Since there are no changes between the two versions, no potential Compatibility Issues exist, so the CI type is 0."
<android.app.admin.DevicePolicyManager: boolean isPreferentialNetworkServiceEnabled()>,32,33,,,,"{
    throwIfParentInstance(""isPreferentialNetworkServiceEnabled"");
    if (mService == null) {
        return false;
    }
    try {
        return mService.isPreferentialNetworkServiceEnabled(myUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""isPreferentialNetworkServiceEnabled"");
    return getPreferentialNetworkServiceConfigs().stream().anyMatch(c -> c.isEnabled());
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""isPreferentialNetworkServiceEnabled""), []), AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])]), Statement(return false, []), Statement(}, []), Statement(try {, []), MethodCall(return mService.isPreferentialNetworkServiceEnabled(myUserId()), [VariableReference(return mService, []), Expression(myUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""isPreferentialNetworkServiceEnabled""), [])  AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])])    VariableReference(if (mService, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  Statement(try {, [])  MethodCall(return mService.isPreferentialNetworkServiceEnabled(myUserId()), [VariableReference(return mService, []), Expression(myUserId(), [])])    VariableReference(return mService, [])    Expression(myUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""isPreferentialNetworkServiceEnabled""), []), MethodCall(return getPreferentialNetworkServiceConfigs().stream().anyMatch(c -> c.isEnabled()), [VariableReference(return getPreferentialNetworkServiceConfigs(), []), Expression().anyMatch(c -> c.isEnabled(), [])]), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""isPreferentialNetworkServiceEnabled""), [])  MethodCall(return getPreferentialNetworkServiceConfigs().stream().anyMatch(c -> c.isEnabled()), [VariableReference(return getPreferentialNetworkServiceConfigs(), []), Expression().anyMatch(c -> c.isEnabled(), [])])    VariableReference(return getPreferentialNetworkServiceConfigs(), [])    Expression().anyMatch(c -> c.isEnabled(), [])  Statement(}, [])",1,"/**
 * Indicates whether preferential network service is enabled.
 *
 * <p>This method can be called by the profile owner of a managed profile.
 *
 * @return whether preferential network service is enabled.
 * @throws SecurityException if the caller is not the profile owner.
 */
","/**
 * Indicates whether preferential network service is enabled.
 *
 * <p> Before Android version {@link android.os.Build.VERSION_CODES#TIRAMISU}:
 * This method can be called by the profile owner of a managed profile.
 * <p> Starting from Android version {@link android.os.Build.VERSION_CODES#TIRAMISU}:
 * This method can be called by the profile owner of a managed profile
 * or device owner.
 *
 * @return whether preferential network service is enabled.
 * @throws SecurityException if the caller is not the profile owner or device owner.
 */
",1,,,0,,,,"1,2","1,2,3,4","1,2","1,2,5","1,2","1) The return statement has changed from returning the result of `mService.isPreferentialNetworkServiceEnabled(myUserId())` to returning the result of `getPreferentialNetworkServiceConfigs().stream().anyMatch(c -> c.isEnabled())`; 2) In the early version, when `RemoteException` is caught, it throws `e.rethrowFromSystemServer()`. The late version does not have this exception handling.",#CI_description
"<android.service.autofill.Dataset.Builder: Builder setValue(AutofillId,AutofillValue,RemoteViews,InlinePresentation)>",32,33,,,,"{
    throwIfDestroyed();
    Preconditions.checkNotNull(presentation, ""presentation cannot be null"");
    Preconditions.checkNotNull(inlinePresentation, ""inlinePresentation cannot be null"");
    setLifeTheUniverseAndEverything(id, value, presentation, inlinePresentation, null);
    return this;
}","{
    throwIfDestroyed();
    Objects.requireNonNull(presentation, ""presentation cannot be null"");
    Objects.requireNonNull(inlinePresentation, ""inlinePresentation cannot be null"");
    setLifeTheUniverseAndEverything(id, value, presentation, inlinePresentation, null, null, null);
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfDestroyed(), []), MethodCall(Preconditions.checkNotNull(presentation, ""presentation cannot be null""), [VariableReference(Preconditions, []), Expression(presentation, []), Expression(""presentation cannot be null"", [])]), MethodCall(Preconditions.checkNotNull(inlinePresentation, ""inlinePresentation cannot be null""), [VariableReference(Preconditions, []), Expression(inlinePresentation, []), Expression(""inlinePresentation cannot be null"", [])]), Statement(setLifeTheUniverseAndEverything(id, value, presentation, inlinePresentation, null), []), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(throwIfDestroyed(), [])  MethodCall(Preconditions.checkNotNull(presentation, ""presentation cannot be null""), [VariableReference(Preconditions, []), Expression(presentation, []), Expression(""presentation cannot be null"", [])])    VariableReference(Preconditions, [])    Expression(presentation, [])    Expression(""presentation cannot be null"", [])  MethodCall(Preconditions.checkNotNull(inlinePresentation, ""inlinePresentation cannot be null""), [VariableReference(Preconditions, []), Expression(inlinePresentation, []), Expression(""inlinePresentation cannot be null"", [])])    VariableReference(Preconditions, [])    Expression(inlinePresentation, [])    Expression(""inlinePresentation cannot be null"", [])  Statement(setLifeTheUniverseAndEverything(id, value, presentation, inlinePresentation, null), [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfDestroyed(), []), MethodCall(Objects.requireNonNull(presentation, ""presentation cannot be null""), [VariableReference(Objects, []), Expression(presentation, []), Expression(""presentation cannot be null"", [])]), MethodCall(Objects.requireNonNull(inlinePresentation, ""inlinePresentation cannot be null""), [VariableReference(Objects, []), Expression(inlinePresentation, []), Expression(""inlinePresentation cannot be null"", [])]), Statement(setLifeTheUniverseAndEverything(id, value, presentation, inlinePresentation, null, null, null), []), Statement(return this, []), Statement(}, [])])  Statement({, [])  Statement(throwIfDestroyed(), [])  MethodCall(Objects.requireNonNull(presentation, ""presentation cannot be null""), [VariableReference(Objects, []), Expression(presentation, []), Expression(""presentation cannot be null"", [])])    VariableReference(Objects, [])    Expression(presentation, [])    Expression(""presentation cannot be null"", [])  MethodCall(Objects.requireNonNull(inlinePresentation, ""inlinePresentation cannot be null""), [VariableReference(Objects, []), Expression(inlinePresentation, []), Expression(""inlinePresentation cannot be null"", [])])    VariableReference(Objects, [])    Expression(inlinePresentation, [])    Expression(""inlinePresentation cannot be null"", [])  Statement(setLifeTheUniverseAndEverything(id, value, presentation, inlinePresentation, null, null, null), [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Sets the value of a field, using a custom {@link RemoteViews presentation} to
 * visualize it and an {@link InlinePresentation} to visualize it as an inline suggestion.
 *
 * <p><b>Note:</b> If the dataset requires authentication but the service knows its text
 * value it's easier to filter by calling
 * {@link #setValue(AutofillId, AutofillValue, RemoteViews)} and using the value to filter.
 *
 * @param id id returned by {@link
 * android.app.assist.AssistStructure.ViewNode#getAutofillId()}.
 * @param value the value to be autofilled. Pass {@code null} if you do not have the value
 * but the target view is a logical part of the dataset. For example, if
 * the dataset needs authentication and you have no access to the value.
 * @param presentation the presentation used to visualize this field.
 * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset
 * as inline suggestions. If the dataset supports inline suggestions,
 * this should not be null.
 *
 * @throws IllegalStateException if {@link #build()} was already called.
 *
 * @return this builder.
 */
","/**
 * Sets the value of a field, using a custom {@link RemoteViews presentation} to
 * visualize it and an {@link InlinePresentation} to visualize it as an inline suggestion.
 *
 * <p><b>Note:</b> If the dataset requires authentication but the service knows its text
 * value it's easier to filter by calling
 * {@link #setValue(AutofillId, AutofillValue, RemoteViews)} and using the value to filter.
 *
 * @param id id returned by {@link
 * android.app.assist.AssistStructure.ViewNode#getAutofillId()}.
 * @param value the value to be autofilled. Pass {@code null} if you do not have the value
 * but the target view is a logical part of the dataset. For example, if
 * the dataset needs authentication and you have no access to the value.
 * @param presentation the presentation used to visualize this field.
 * @param inlinePresentation The {@link InlinePresentation} used to visualize this dataset
 * as inline suggestions. If the dataset supports inline suggestions,
 * this should not be null.
 *
 * @throws IllegalStateException if {@link #build()} was already called.
 *
 * @return this builder.
 * @deprecated Use {@link #setField(AutofillId, Field)} instead.
 */
",1,[@NonNull],"[@Deprecated, @NonNull]",1,,,,2,"1,5",1,"2,3,5","1,2","1. The method `Preconditions.checkNotNull` has been replaced with `Objects.requireNonNull`, leading to a potential change in exception handling.",
"<android.widget.RemoteViews.ViewGroupActionAdd: void apply(View,ViewGroup,InteractionHandler,ColorResources)>",32,33,,,,"{
    final Context context = root.getContext();
    final ViewGroup target = root.findViewById(viewId);
    if (target == null) {
        return;
    }
    // If removeAllViews was called, this returns the next potential recycled view.
    // If there are no more views to recycle (or removeAllViews was not called), this
    // will return -1.
    final int nextChild = getNextRecyclableChild(target);
    RemoteViews rvToApply = mNestedViews.getRemoteViewsToApply(context);
    if (nextChild >= 0 && mStableId != NO_ID) {
        // At that point, the views starting at index nextChild are the ones recyclable but
        // not yet recycled. All views added on that round of application are placed before.
        // Find the next view with the same stable id, or -1.
        int recycledViewIndex = findViewIndexToRecycle(target, rvToApply);
        if (recycledViewIndex >= 0) {
            View child = target.getChildAt(recycledViewIndex);
            if (rvToApply.canRecycleView(child)) {
                if (nextChild < recycledViewIndex) {
                    target.removeViews(nextChild, recycledViewIndex - nextChild);
                }
                setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
                rvToApply.reapply(context, child, handler, null, /* size */
                colorResources, false);
                return;
            }
            // If we cannot recycle the views, we still remove all views in between to
            // avoid weird behaviors and insert the new view in place of the old one.
            target.removeViews(nextChild, recycledViewIndex - nextChild + 1);
        }
    }
    // If we cannot recycle, insert the new view before the next recyclable child.
    // Inflate nested views and add as children
    View nestedView = rvToApply.apply(context, target, handler, null, /* size */
    colorResources);
    if (mStableId != NO_ID) {
        setStableId(nestedView, mStableId);
    }
    target.addView(nestedView, mIndex >= 0 ? mIndex : nextChild);
    if (nextChild >= 0) {
        // If we are at the end, there is no reason to try to recycle anymore
        setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
    }
}","{
    final Context context = root.getContext();
    final ViewGroup target = root.findViewById(viewId);
    if (target == null) {
        return;
    }
    // If removeAllViews was called, this returns the next potential recycled view.
    // If there are no more views to recycle (or removeAllViews was not called), this
    // will return -1.
    final int nextChild = getNextRecyclableChild(target);
    RemoteViews rvToApply = mNestedViews.getRemoteViewsToApply(context);
    int flagsToPropagate = mApplyFlags & FLAG_MASK_TO_PROPAGATE;
    if (flagsToPropagate != 0)
        rvToApply.addFlags(flagsToPropagate);
    if (nextChild >= 0 && mStableId != NO_ID) {
        // At that point, the views starting at index nextChild are the ones recyclable but
        // not yet recycled. All views added on that round of application are placed before.
        // Find the next view with the same stable id, or -1.
        int recycledViewIndex = findViewIndexToRecycle(target, rvToApply);
        if (recycledViewIndex >= 0) {
            View child = target.getChildAt(recycledViewIndex);
            if (rvToApply.canRecycleView(child)) {
                if (nextChild < recycledViewIndex) {
                    target.removeViews(nextChild, recycledViewIndex - nextChild);
                }
                setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
                rvToApply.reapplyNestedViews(context, child, rootParent, handler, null, /* size */
                colorResources);
                return;
            }
            // If we cannot recycle the views, we still remove all views in between to
            // avoid weird behaviors and insert the new view in place of the old one.
            target.removeViews(nextChild, recycledViewIndex - nextChild + 1);
        }
    }
    // If we cannot recycle, insert the new view before the next recyclable child.
    // Inflate nested views and add as children
    View nestedView = rvToApply.applyNestedViews(context, target, rootParent, handler, null, /* size */
    colorResources);
    if (mStableId != NO_ID) {
        setStableId(nestedView, mStableId);
    }
    target.addView(nestedView, mIndex >= 0 ? mIndex : nextChild);
    if (nextChild >= 0) {
        // If we are at the end, there is no reason to try to recycle anymore
        setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Context context, []), Expression(root.getContext(), [])]), AssignmentExpression(=, [VariableReference(final ViewGroup target, []), Expression(root.findViewById(viewId), [])]), AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(// If removeAllViews was called, this returns the next potential recycled view., []), Statement(// If there are no more views to recycle (or removeAllViews was not called), this, []), Statement(// will return -1., []), AssignmentExpression(=, [VariableReference(final int nextChild, []), Expression(getNextRecyclableChild(target), [])]), AssignmentExpression(=, [VariableReference(RemoteViews rvToApply, []), Expression(mNestedViews.getRemoteViewsToApply(context), [])]), AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0 && mStableId !, [])]), Statement(// At that point, the views starting at index nextChild are the ones recyclable but, []), Statement(// not yet recycled. All views added on that round of application are placed before., []), Statement(// Find the next view with the same stable id, or -1., []), AssignmentExpression(=, [VariableReference(int recycledViewIndex, []), Expression(findViewIndexToRecycle(target, rvToApply), [])]), AssignmentExpression(=, [VariableReference(if (recycledViewIndex >, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(View child, []), Expression(target.getChildAt(recycledViewIndex), [])]), MethodCall(if (rvToApply.canRecycleView(child)), [VariableReference(if (rvToApply, []), Expression(child), [])]), Statement(if (nextChild < recycledViewIndex) {, []), MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild, [])]), Statement(}, []), MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])]), Statement(colorResources, false), []), Statement(return, []), Statement(}, []), Statement(// If we cannot recycle the views, we still remove all views in between to, []), Statement(// avoid weird behaviors and insert the new view in place of the old one., []), MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild + 1), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild + 1, [])]), Statement(}, []), Statement(}, []), Statement(// If we cannot recycle, insert the new view before the next recyclable child., []), Statement(// Inflate nested views and add as children, []), AssignmentExpression(=, [VariableReference(View nestedView, []), Expression(rvToApply.apply(context, target, handler, null, /* size */, [])]), Statement(colorResources), []), AssignmentExpression(=, [VariableReference(if (mStableId !, []), Expression(NO_ID) {, [])]), Statement(setStableId(nestedView, mStableId), []), Statement(}, []), AssignmentExpression(=, [VariableReference(target.addView(nestedView, mIndex >, []), Expression(0 ? mIndex : nextChild), [])]), AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0) {, [])]), Statement(// If we are at the end, there is no reason to try to recycle anymore, []), MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Context context, []), Expression(root.getContext(), [])])    VariableReference(final Context context, [])    Expression(root.getContext(), [])  AssignmentExpression(=, [VariableReference(final ViewGroup target, []), Expression(root.findViewById(viewId), [])])    VariableReference(final ViewGroup target, [])    Expression(root.findViewById(viewId), [])  AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])])    VariableReference(if (target, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(// If removeAllViews was called, this returns the next potential recycled view., [])  Statement(// If there are no more views to recycle (or removeAllViews was not called), this, [])  Statement(// will return -1., [])  AssignmentExpression(=, [VariableReference(final int nextChild, []), Expression(getNextRecyclableChild(target), [])])    VariableReference(final int nextChild, [])    Expression(getNextRecyclableChild(target), [])  AssignmentExpression(=, [VariableReference(RemoteViews rvToApply, []), Expression(mNestedViews.getRemoteViewsToApply(context), [])])    VariableReference(RemoteViews rvToApply, [])    Expression(mNestedViews.getRemoteViewsToApply(context), [])  AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0 && mStableId !, [])])    VariableReference(if (nextChild >, [])    Expression(0 && mStableId !, [])  Statement(// At that point, the views starting at index nextChild are the ones recyclable but, [])  Statement(// not yet recycled. All views added on that round of application are placed before., [])  Statement(// Find the next view with the same stable id, or -1., [])  AssignmentExpression(=, [VariableReference(int recycledViewIndex, []), Expression(findViewIndexToRecycle(target, rvToApply), [])])    VariableReference(int recycledViewIndex, [])    Expression(findViewIndexToRecycle(target, rvToApply), [])  AssignmentExpression(=, [VariableReference(if (recycledViewIndex >, []), Expression(0) {, [])])    VariableReference(if (recycledViewIndex >, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(View child, []), Expression(target.getChildAt(recycledViewIndex), [])])    VariableReference(View child, [])    Expression(target.getChildAt(recycledViewIndex), [])  MethodCall(if (rvToApply.canRecycleView(child)), [VariableReference(if (rvToApply, []), Expression(child), [])])    VariableReference(if (rvToApply, [])    Expression(child), [])  Statement(if (nextChild < recycledViewIndex) {, [])  MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild, [])])    VariableReference(target, [])    Expression(nextChild, [])    Expression(recycledViewIndex - nextChild, [])  Statement(}, [])  MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])])    VariableReference(setNextRecyclableChild(target, nextChild + 1, target, [])    Expression(), [])  Statement(colorResources, false), [])  Statement(return, [])  Statement(}, [])  Statement(// If we cannot recycle the views, we still remove all views in between to, [])  Statement(// avoid weird behaviors and insert the new view in place of the old one., [])  MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild + 1), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild + 1, [])])    VariableReference(target, [])    Expression(nextChild, [])    Expression(recycledViewIndex - nextChild + 1, [])  Statement(}, [])  Statement(}, [])  Statement(// If we cannot recycle, insert the new view before the next recyclable child., [])  Statement(// Inflate nested views and add as children, [])  AssignmentExpression(=, [VariableReference(View nestedView, []), Expression(rvToApply.apply(context, target, handler, null, /* size */, [])])    VariableReference(View nestedView, [])    Expression(rvToApply.apply(context, target, handler, null, /* size */, [])  Statement(colorResources), [])  AssignmentExpression(=, [VariableReference(if (mStableId !, []), Expression(NO_ID) {, [])])    VariableReference(if (mStableId !, [])    Expression(NO_ID) {, [])  Statement(setStableId(nestedView, mStableId), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(target.addView(nestedView, mIndex >, []), Expression(0 ? mIndex : nextChild), [])])    VariableReference(target.addView(nestedView, mIndex >, [])    Expression(0 ? mIndex : nextChild), [])  AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0) {, [])])    VariableReference(if (nextChild >, [])    Expression(0) {, [])  Statement(// If we are at the end, there is no reason to try to recycle anymore, [])  MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])])    VariableReference(setNextRecyclableChild(target, nextChild + 1, target, [])    Expression(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Context context, []), Expression(root.getContext(), [])]), AssignmentExpression(=, [VariableReference(final ViewGroup target, []), Expression(root.findViewById(viewId), [])]), AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(// If removeAllViews was called, this returns the next potential recycled view., []), Statement(// If there are no more views to recycle (or removeAllViews was not called), this, []), Statement(// will return -1., []), AssignmentExpression(=, [VariableReference(final int nextChild, []), Expression(getNextRecyclableChild(target), [])]), AssignmentExpression(=, [VariableReference(RemoteViews rvToApply, []), Expression(mNestedViews.getRemoteViewsToApply(context), [])]), AssignmentExpression(=, [VariableReference(int flagsToPropagate, []), Expression(mApplyFlags & FLAG_MASK_TO_PROPAGATE, [])]), AssignmentExpression(=, [VariableReference(if (flagsToPropagate !, []), Expression(0), [])]), MethodCall(rvToApply.addFlags(flagsToPropagate), [VariableReference(rvToApply, []), Expression(flagsToPropagate, [])]), AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0 && mStableId !, [])]), Statement(// At that point, the views starting at index nextChild are the ones recyclable but, []), Statement(// not yet recycled. All views added on that round of application are placed before., []), Statement(// Find the next view with the same stable id, or -1., []), AssignmentExpression(=, [VariableReference(int recycledViewIndex, []), Expression(findViewIndexToRecycle(target, rvToApply), [])]), AssignmentExpression(=, [VariableReference(if (recycledViewIndex >, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(View child, []), Expression(target.getChildAt(recycledViewIndex), [])]), MethodCall(if (rvToApply.canRecycleView(child)), [VariableReference(if (rvToApply, []), Expression(child), [])]), Statement(if (nextChild < recycledViewIndex) {, []), MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild, [])]), Statement(}, []), MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])]), Statement(colorResources), []), Statement(return, []), Statement(}, []), Statement(// If we cannot recycle the views, we still remove all views in between to, []), Statement(// avoid weird behaviors and insert the new view in place of the old one., []), MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild + 1), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild + 1, [])]), Statement(}, []), Statement(}, []), Statement(// If we cannot recycle, insert the new view before the next recyclable child., []), Statement(// Inflate nested views and add as children, []), AssignmentExpression(=, [VariableReference(View nestedView, []), Expression(rvToApply.applyNestedViews(context, target, rootParent, handler, null, /* size */, [])]), Statement(colorResources), []), AssignmentExpression(=, [VariableReference(if (mStableId !, []), Expression(NO_ID) {, [])]), Statement(setStableId(nestedView, mStableId), []), Statement(}, []), AssignmentExpression(=, [VariableReference(target.addView(nestedView, mIndex >, []), Expression(0 ? mIndex : nextChild), [])]), AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0) {, [])]), Statement(// If we are at the end, there is no reason to try to recycle anymore, []), MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Context context, []), Expression(root.getContext(), [])])    VariableReference(final Context context, [])    Expression(root.getContext(), [])  AssignmentExpression(=, [VariableReference(final ViewGroup target, []), Expression(root.findViewById(viewId), [])])    VariableReference(final ViewGroup target, [])    Expression(root.findViewById(viewId), [])  AssignmentExpression(=, [VariableReference(if (target, []), Expression(, [])])    VariableReference(if (target, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(// If removeAllViews was called, this returns the next potential recycled view., [])  Statement(// If there are no more views to recycle (or removeAllViews was not called), this, [])  Statement(// will return -1., [])  AssignmentExpression(=, [VariableReference(final int nextChild, []), Expression(getNextRecyclableChild(target), [])])    VariableReference(final int nextChild, [])    Expression(getNextRecyclableChild(target), [])  AssignmentExpression(=, [VariableReference(RemoteViews rvToApply, []), Expression(mNestedViews.getRemoteViewsToApply(context), [])])    VariableReference(RemoteViews rvToApply, [])    Expression(mNestedViews.getRemoteViewsToApply(context), [])  AssignmentExpression(=, [VariableReference(int flagsToPropagate, []), Expression(mApplyFlags & FLAG_MASK_TO_PROPAGATE, [])])    VariableReference(int flagsToPropagate, [])    Expression(mApplyFlags & FLAG_MASK_TO_PROPAGATE, [])  AssignmentExpression(=, [VariableReference(if (flagsToPropagate !, []), Expression(0), [])])    VariableReference(if (flagsToPropagate !, [])    Expression(0), [])  MethodCall(rvToApply.addFlags(flagsToPropagate), [VariableReference(rvToApply, []), Expression(flagsToPropagate, [])])    VariableReference(rvToApply, [])    Expression(flagsToPropagate, [])  AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0 && mStableId !, [])])    VariableReference(if (nextChild >, [])    Expression(0 && mStableId !, [])  Statement(// At that point, the views starting at index nextChild are the ones recyclable but, [])  Statement(// not yet recycled. All views added on that round of application are placed before., [])  Statement(// Find the next view with the same stable id, or -1., [])  AssignmentExpression(=, [VariableReference(int recycledViewIndex, []), Expression(findViewIndexToRecycle(target, rvToApply), [])])    VariableReference(int recycledViewIndex, [])    Expression(findViewIndexToRecycle(target, rvToApply), [])  AssignmentExpression(=, [VariableReference(if (recycledViewIndex >, []), Expression(0) {, [])])    VariableReference(if (recycledViewIndex >, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(View child, []), Expression(target.getChildAt(recycledViewIndex), [])])    VariableReference(View child, [])    Expression(target.getChildAt(recycledViewIndex), [])  MethodCall(if (rvToApply.canRecycleView(child)), [VariableReference(if (rvToApply, []), Expression(child), [])])    VariableReference(if (rvToApply, [])    Expression(child), [])  Statement(if (nextChild < recycledViewIndex) {, [])  MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild, [])])    VariableReference(target, [])    Expression(nextChild, [])    Expression(recycledViewIndex - nextChild, [])  Statement(}, [])  MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])])    VariableReference(setNextRecyclableChild(target, nextChild + 1, target, [])    Expression(), [])  Statement(colorResources), [])  Statement(return, [])  Statement(}, [])  Statement(// If we cannot recycle the views, we still remove all views in between to, [])  Statement(// avoid weird behaviors and insert the new view in place of the old one., [])  MethodCall(target.removeViews(nextChild, recycledViewIndex - nextChild + 1), [VariableReference(target, []), Expression(nextChild, []), Expression(recycledViewIndex - nextChild + 1, [])])    VariableReference(target, [])    Expression(nextChild, [])    Expression(recycledViewIndex - nextChild + 1, [])  Statement(}, [])  Statement(}, [])  Statement(// If we cannot recycle, insert the new view before the next recyclable child., [])  Statement(// Inflate nested views and add as children, [])  AssignmentExpression(=, [VariableReference(View nestedView, []), Expression(rvToApply.applyNestedViews(context, target, rootParent, handler, null, /* size */, [])])    VariableReference(View nestedView, [])    Expression(rvToApply.applyNestedViews(context, target, rootParent, handler, null, /* size */, [])  Statement(colorResources), [])  AssignmentExpression(=, [VariableReference(if (mStableId !, []), Expression(NO_ID) {, [])])    VariableReference(if (mStableId !, [])    Expression(NO_ID) {, [])  Statement(setStableId(nestedView, mStableId), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(target.addView(nestedView, mIndex >, []), Expression(0 ? mIndex : nextChild), [])])    VariableReference(target.addView(nestedView, mIndex >, [])    Expression(0 ? mIndex : nextChild), [])  AssignmentExpression(=, [VariableReference(if (nextChild >, []), Expression(0) {, [])])    VariableReference(if (nextChild >, [])    Expression(0) {, [])  Statement(// If we are at the end, there is no reason to try to recycle anymore, [])  MethodCall(setNextRecyclableChild(target, nextChild + 1, target.getChildCount()), [VariableReference(setNextRecyclableChild(target, nextChild + 1, target, []), Expression(), [])])    VariableReference(setNextRecyclableChild(target, nextChild + 1, target, [])    Expression(), [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",1,"3,4,5",1,"There have been changes involving control dependencies with the introduction of new logic regarding `flagsToPropagate` and its subsequent propagation to `rvToApply`. The nested view handling methods have also changed from `rvToApply.apply` and `rvToApply.reapply` to `rvToApply.applyNestedViews` and `rvToApply.reapplyNestedViews`. These changes fall under control dependency (3), other statement change (4) and dependent API change (5).","The changes in the methods used for applying and reapplying nested views might lead to different view handling behavior, potentially leading to different return values or exceptions being thrown. Thus, the CI type is 1."
<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(AutofillId)>,32,33,,,,"{
    Preconditions.checkNotNull(id);
    if (!isContentCaptureEnabled())
        return;
    internalNotifyViewDisappeared(id);
}","{
    Objects.requireNonNull(id);
    if (!isContentCaptureEnabled())
        return;
    internalNotifyViewDisappeared(id);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(id), [VariableReference(Preconditions, []), Expression(id, [])]), Statement(if (!isContentCaptureEnabled()), []), Statement(return, []), Statement(internalNotifyViewDisappeared(id), []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(id), [VariableReference(Preconditions, []), Expression(id, [])])    VariableReference(Preconditions, [])    Expression(id, [])  Statement(if (!isContentCaptureEnabled()), [])  Statement(return, [])  Statement(internalNotifyViewDisappeared(id), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Objects.requireNonNull(id), [VariableReference(Objects, []), Expression(id, [])]), Statement(if (!isContentCaptureEnabled()), []), Statement(return, []), Statement(internalNotifyViewDisappeared(id), []), Statement(}, [])])  Statement({, [])  MethodCall(Objects.requireNonNull(id), [VariableReference(Objects, []), Expression(id, [])])    VariableReference(Objects, [])    Expression(id, [])  Statement(if (!isContentCaptureEnabled()), [])  Statement(return, [])  Statement(internalNotifyViewDisappeared(id), [])  Statement(}, [])",1,"/**
 * Notifies the Content Capture Service that a node has been removed from the view structure.
 *
 * <p>Typically called ""manually"" by views that handle their own virtual view hierarchy, or
 * automatically by the Android System for standard views.
 *
 * @param id id of the node that has been removed.
 */
","/**
 * Notifies the Content Capture Service that a node has been removed from the view structure.
 *
 * <p>Typically called ""manually"" by views that handle their own virtual view hierarchy, or
 * automatically by the Android System for standard views.
 *
 * @param id id of the node that has been removed.
 */
",0,,,0,,,,2,5,0,4,0,"The method has changed from using `Preconditions.checkNotNull(id)` to `Objects.requireNonNull(id)`. This is a change in the validation method used, which falls under other statement changes.",There is no potential compatibility issue as both methods serve the same purpose: to check for null values and throw the same type of exception (`NullPointerException`) if the check fails. The behavior of the API remains the same.
"<android.webkit.WebView: String[] getHttpAuthUsernamePassword(String,String)>",27,28,,,,"{
    checkThread();
    return mProvider.getHttpAuthUsernamePassword(host, realm);
}","{
    checkThread();
    return mProvider.getHttpAuthUsernamePassword(host, realm);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(return mProvider.getHttpAuthUsernamePassword(host, realm), [VariableReference(return mProvider, []), Expression(host, []), Expression(realm, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(return mProvider.getHttpAuthUsernamePassword(host, realm), [VariableReference(return mProvider, []), Expression(host, []), Expression(realm, [])])    VariableReference(return mProvider, [])    Expression(host, [])    Expression(realm, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(return mProvider.getHttpAuthUsernamePassword(host, realm), [VariableReference(return mProvider, []), Expression(host, []), Expression(realm, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(return mProvider.getHttpAuthUsernamePassword(host, realm), [VariableReference(return mProvider, []), Expression(host, []), Expression(realm, [])])    VariableReference(return mProvider, [])    Expression(host, [])    Expression(realm, [])  Statement(}, [])",0,"/**
 * Retrieves HTTP authentication credentials for a given host and realm from the {@link
 * WebViewDatabase} instance.
 * @param host the host to which the credentials apply
 * @param realm the realm to which the credentials apply
 * @return the credentials as a String array, if found. The first element
 * is the username and the second element is the password. Null if
 * no credentials are found.
 * @deprecated Use {@link WebViewDatabase#getHttpAuthUsernamePassword} instead
 */
","/**
 * Retrieves HTTP authentication credentials for a given host and realm from the {@link
 * WebViewDatabase} instance.
 * @param host the host to which the credentials apply
 * @param realm the realm to which the credentials apply
 * @return the credentials as a String array, if found. The first element
 * is the username and the second element is the password. {@code null} if
 * no credentials are found.
 * @deprecated Use {@link WebViewDatabase#getHttpAuthUsernamePassword} instead
 */
",1,[@Deprecated],"[@Deprecated, @Nullable]",1,,,,0,0,0,0,0,"There are no changes in the method implementation between the early and late versions. Both the logic and the sequence of statements remain the same. The only change is the addition of the `@Nullable` annotation, which does not affect the method's behavior.","There is no potential for a compatibility issue since the implementation remains unchanged, and the addition of the `@Nullable` annotation alone does not influence the method's execution or its return values."
<android.widget.TextView: void setText(int)>,27,28,,,,"{
    setText(getContext().getResources().getText(resid));
    mTextFromResource = true;
}","{
    setText(getContext().getResources().getText(resid));
    mTextSetFromXmlOrResourceId = true;
    mTextId = resid;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(setText(getContext().getResources().getText(resid)), [VariableReference(setText(getContext(), []), Expression().getText(resid), [])]), AssignmentExpression(=, [VariableReference(mTextFromResource, []), Expression(true, [])]), Statement(}, [])])  Statement({, [])  MethodCall(setText(getContext().getResources().getText(resid)), [VariableReference(setText(getContext(), []), Expression().getText(resid), [])])    VariableReference(setText(getContext(), [])    Expression().getText(resid), [])  AssignmentExpression(=, [VariableReference(mTextFromResource, []), Expression(true, [])])    VariableReference(mTextFromResource, [])    Expression(true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(setText(getContext().getResources().getText(resid)), [VariableReference(setText(getContext(), []), Expression().getText(resid), [])]), AssignmentExpression(=, [VariableReference(mTextSetFromXmlOrResourceId, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mTextId, []), Expression(resid, [])]), Statement(}, [])])  Statement({, [])  MethodCall(setText(getContext().getResources().getText(resid)), [VariableReference(setText(getContext(), []), Expression().getText(resid), [])])    VariableReference(setText(getContext(), [])    Expression().getText(resid), [])  AssignmentExpression(=, [VariableReference(mTextSetFromXmlOrResourceId, []), Expression(true, [])])    VariableReference(mTextSetFromXmlOrResourceId, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mTextId, []), Expression(resid, [])])    VariableReference(mTextId, [])    Expression(resid, [])  Statement(}, [])",1,"/**
 * Sets the text to be displayed using a string resource identifier.
 *
 * @param resid the resource identifier of the string resource to be displayed
 *
 * @see #setText(CharSequence)
 *
 * @attr ref android.R.styleable#TextView_text
 */
","/**
 * Sets the text to be displayed using a string resource identifier.
 *
 * @param resid the resource identifier of the string resource to be displayed
 *
 * @see #setText(CharSequence)
 *
 * @attr ref android.R.styleable#TextView_text
 */
",0,[@android.view.RemotableViewMethod],[@android.view.RemotableViewMethod],0,,,,1,4,1,4,0,"In the late version, two new statements involving assignments to `mTextSetFromXmlOrResourceId` and `mTextId` have been added. Hence, the code change type is 4.","These additional assignments do not affect the return type, return values, or exception handling of the method. Therefore, no compatibility issue arises, so the CI type is 0."
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(IBinder)>,27,28,,,,"{
    synchronized (mH) {
        try {
            return mService.switchToLastInputMethod(imeToken);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}","{
    return switchToPreviousInputMethodInternal(imeToken);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mH) {, []), Statement(try {, []), MethodCall(return mService.switchToLastInputMethod(imeToken), [VariableReference(return mService, []), Expression(imeToken, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mH) {, [])  Statement(try {, [])  MethodCall(return mService.switchToLastInputMethod(imeToken), [VariableReference(return mService, []), Expression(imeToken, [])])    VariableReference(return mService, [])    Expression(imeToken, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return switchToPreviousInputMethodInternal(imeToken), []), Statement(}, [])])  Statement({, [])  Statement(return switchToPreviousInputMethodInternal(imeToken), [])  Statement(}, [])",1,"/**
 * Force switch to the last used input method and subtype. If the last input method didn't have
 * any subtypes, the framework will simply switch to the last input method with no subtype
 * specified.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @return true if the current input method and subtype was successfully switched to the last
 * used input method and subtype.
 */
","/**
 * Force switch to the last used input method and subtype. If the last input method didn't have
 * any subtypes, the framework will simply switch to the last input method with no subtype
 * specified.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @return true if the current input method and subtype was successfully switched to the last
 * used input method and subtype.
 * @deprecated Use {@link InputMethodService#switchToPreviousInputMethod()} instead. This method
 * was intended for IME developers who should be accessing APIs through the service. APIs in
 * this class are intended for app developers interacting with the IME.
 */
",1,,[@Deprecated],1,,,,"1,2","1,2,5","1,2","1,2,5","1,2","The return statement has changed from `return mService.switchToLastInputMethod(imeToken)` to `return switchToPreviousInputMethodInternal(imeToken)`, and the exception handling statement was removed. Moreover, the method now depends on `switchToPreviousInputMethodInternal` instead of `mService.switchToLastInputMethod`. So, the code change type is 1,2,5.","The method now calls a different method (`switchToPreviousInputMethodInternal`), which might lead to a different return value, and the removal of the exception handling may lead to different exceptions being thrown. Therefore, the CI types are 1 and 2."
<android.net.IpSecManager.UdpEncapsulationSocket: void close()>,27,28,,,,"{
    try {
        mService.closeUdpEncapsulationSocket(mResourceId);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
    try {
        mPfd.close();
    } catch (IOException e) {
        Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port= "" + mPort);
        throw e;
    }
    mCloseGuard.close();
}","{
    try {
        mService.closeUdpEncapsulationSocket(mResourceId);
        mResourceId = INVALID_RESOURCE_ID;
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (Exception e) {
        // On close we swallow all random exceptions since failure to close is not
        // actionable by the user.
        Log.e(TAG, ""Failed to close "" + this + "", Exception="" + e);
    } finally {
        mResourceId = INVALID_RESOURCE_ID;
        mCloseGuard.close();
    }
    try {
        mPfd.close();
    } catch (IOException e) {
        Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port= "" + mPort);
        throw e;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(mService.closeUdpEncapsulationSocket(mResourceId), [VariableReference(mService, []), Expression(mResourceId, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(try {, []), MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])]), Statement(} catch (IOException e) {, []), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port, []), Expression("" + mPort), [])]), Statement(throw e, []), Statement(}, []), MethodCall(mCloseGuard.close(), [VariableReference(mCloseGuard, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(mService.closeUdpEncapsulationSocket(mResourceId), [VariableReference(mService, []), Expression(mResourceId, [])])    VariableReference(mService, [])    Expression(mResourceId, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(try {, [])  MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])])    VariableReference(mPfd, [])    Expression(, [])  Statement(} catch (IOException e) {, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port, []), Expression("" + mPort), [])])    VariableReference(Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port, [])    Expression("" + mPort), [])  Statement(throw e, [])  Statement(}, [])  MethodCall(mCloseGuard.close(), [VariableReference(mCloseGuard, []), Expression(, [])])    VariableReference(mCloseGuard, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(mService.closeUdpEncapsulationSocket(mResourceId), [VariableReference(mService, []), Expression(mResourceId, [])]), AssignmentExpression(=, [VariableReference(mResourceId, []), Expression(INVALID_RESOURCE_ID, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(} catch (Exception e) {, []), Statement(// On close we swallow all random exceptions since failure to close is not, []), Statement(// actionable by the user., []), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Failed to close "" + this + "", Exception, []), Expression("" + e), [])]), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(mResourceId, []), Expression(INVALID_RESOURCE_ID, [])]), MethodCall(mCloseGuard.close(), [VariableReference(mCloseGuard, []), Expression(, [])]), Statement(}, []), Statement(try {, []), MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])]), Statement(} catch (IOException e) {, []), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port, []), Expression("" + mPort), [])]), Statement(throw e, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(mService.closeUdpEncapsulationSocket(mResourceId), [VariableReference(mService, []), Expression(mResourceId, [])])    VariableReference(mService, [])    Expression(mResourceId, [])  AssignmentExpression(=, [VariableReference(mResourceId, []), Expression(INVALID_RESOURCE_ID, [])])    VariableReference(mResourceId, [])    Expression(INVALID_RESOURCE_ID, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(} catch (Exception e) {, [])  Statement(// On close we swallow all random exceptions since failure to close is not, [])  Statement(// actionable by the user., [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Failed to close "" + this + "", Exception, []), Expression("" + e), [])])    VariableReference(Log.e(TAG, ""Failed to close "" + this + "", Exception, [])    Expression("" + e), [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(mResourceId, []), Expression(INVALID_RESOURCE_ID, [])])    VariableReference(mResourceId, [])    Expression(INVALID_RESOURCE_ID, [])  MethodCall(mCloseGuard.close(), [VariableReference(mCloseGuard, []), Expression(, [])])    VariableReference(mCloseGuard, [])    Expression(, [])  Statement(}, [])  Statement(try {, [])  MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])])    VariableReference(mPfd, [])    Expression(, [])  Statement(} catch (IOException e) {, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port, []), Expression("" + mPort), [])])    VariableReference(Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port, [])    Expression("" + mPort), [])  Statement(throw e, [])  Statement(}, [])  Statement(}, [])",1,,"/**
 * Close this socket.
 *
 * <p>This closes the wrapped socket. Open encapsulation sockets count against a user's
 * resource limits, and forgetting to close them eventually will result in {@link
 * ResourceUnavailableException} being thrown.
 */
",1,[@Override],[@Override],0,,,,"1,2","2,4,5",2,"2,3",2,"The control flow has changed with the addition of a `finally` block and an extra `catch (Exception e)` block. Additionally, `mResourceId` is set to `INVALID_RESOURCE_ID` in various places. These changes fall into the categories of exception handling (2) and control dependency (3).","The addition of the `catch (Exception e)` and `finally` blocks alters the exception handling behavior. Since the new version swallows random exceptions, the exception handling path differs from the old version, which results in a potential compatibility issue due to different exception handling. The CI type is 2."
<android.webkit.WebView: WebBackForwardList restoreState(Bundle)>,27,28,,,,"{
    checkThread();
    return mProvider.restoreState(inState);
}","{
    checkThread();
    return mProvider.restoreState(inState);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(return mProvider.restoreState(inState), [VariableReference(return mProvider, []), Expression(inState, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(return mProvider.restoreState(inState), [VariableReference(return mProvider, []), Expression(inState, [])])    VariableReference(return mProvider, [])    Expression(inState, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(return mProvider.restoreState(inState), [VariableReference(return mProvider, []), Expression(inState, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(return mProvider.restoreState(inState), [VariableReference(return mProvider, []), Expression(inState, [])])    VariableReference(return mProvider, [])    Expression(inState, [])  Statement(}, [])",0,"/**
 * Restores the state of this WebView from the given Bundle. This method is
 * intended for use in {@link android.app.Activity#onRestoreInstanceState}
 * and should be called to restore the state of this WebView. If
 * it is called after this WebView has had a chance to build state (load
 * pages, create a back/forward list, etc.) there may be undesirable
 * side-effects. Please note that this method no longer restores the
 * display data for this WebView.
 *
 * @param inState the incoming Bundle of state
 * @return the restored back/forward list or null if restoreState failed
 */
","/**
 * Restores the state of this WebView from the given Bundle. This method is
 * intended for use in {@link android.app.Activity#onRestoreInstanceState}
 * and should be called to restore the state of this WebView. If
 * it is called after this WebView has had a chance to build state (load
 * pages, create a back/forward list, etc.) there may be undesirable
 * side-effects. Please note that this method no longer restores the
 * display data for this WebView.
 *
 * @param inState the incoming Bundle of state
 * @return the restored back/forward list or {@code null} if restoreState failed
 */
",1,,[@Nullable],1,,,,0,0,0,0,0,There are no changes in the method implementation between the two versions. The AST nodes for both versions are identical.,"Since there are no changes in the method implementation, there are no potential compatibility issues."
<android.widget.TextView: void setElegantTextHeight(boolean)>,27,28,,,,"{
    if (elegant != mTextPaint.isElegantTextHeight()) {
        mTextPaint.setElegantTextHeight(elegant);
        if (mLayout != null) {
            nullLayouts();
            requestLayout();
            invalidate();
        }
    }
}","{
    if (elegant != mTextPaint.isElegantTextHeight()) {
        mTextPaint.setElegantTextHeight(elegant);
        if (mLayout != null) {
            nullLayouts();
            requestLayout();
            invalidate();
        }
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (elegant !, []), Expression(mTextPaint.isElegantTextHeight()) {, [])]), MethodCall(mTextPaint.setElegantTextHeight(elegant), [VariableReference(mTextPaint, []), Expression(elegant, [])]), AssignmentExpression(=, [VariableReference(if (mLayout !, []), Expression(null) {, [])]), Statement(nullLayouts(), []), Statement(requestLayout(), []), Statement(invalidate(), []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (elegant !, []), Expression(mTextPaint.isElegantTextHeight()) {, [])])    VariableReference(if (elegant !, [])    Expression(mTextPaint.isElegantTextHeight()) {, [])  MethodCall(mTextPaint.setElegantTextHeight(elegant), [VariableReference(mTextPaint, []), Expression(elegant, [])])    VariableReference(mTextPaint, [])    Expression(elegant, [])  AssignmentExpression(=, [VariableReference(if (mLayout !, []), Expression(null) {, [])])    VariableReference(if (mLayout !, [])    Expression(null) {, [])  Statement(nullLayouts(), [])  Statement(requestLayout(), [])  Statement(invalidate(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (elegant !, []), Expression(mTextPaint.isElegantTextHeight()) {, [])]), MethodCall(mTextPaint.setElegantTextHeight(elegant), [VariableReference(mTextPaint, []), Expression(elegant, [])]), AssignmentExpression(=, [VariableReference(if (mLayout !, []), Expression(null) {, [])]), Statement(nullLayouts(), []), Statement(requestLayout(), []), Statement(invalidate(), []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (elegant !, []), Expression(mTextPaint.isElegantTextHeight()) {, [])])    VariableReference(if (elegant !, [])    Expression(mTextPaint.isElegantTextHeight()) {, [])  MethodCall(mTextPaint.setElegantTextHeight(elegant), [VariableReference(mTextPaint, []), Expression(elegant, [])])    VariableReference(mTextPaint, [])    Expression(elegant, [])  AssignmentExpression(=, [VariableReference(if (mLayout !, []), Expression(null) {, [])])    VariableReference(if (mLayout !, [])    Expression(null) {, [])  Statement(nullLayouts(), [])  Statement(requestLayout(), [])  Statement(invalidate(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Set the TextView's elegant height metrics flag. This setting selects font
 * variants that have not been compacted to fit Latin-based vertical
 * metrics, and also increases top and bottom bounds to provide more space.
 *
 * @param elegant set the paint's elegant metrics flag.
 *
 * @attr ref android.R.styleable#TextView_elegantTextHeight
 */
","/**
 * Set the TextView's elegant height metrics flag. This setting selects font
 * variants that have not been compacted to fit Latin-based vertical
 * metrics, and also increases top and bottom bounds to provide more space.
 *
 * @param elegant set the paint's elegant metrics flag.
 *
 * @see #isElegantTextHeight()
 * @see Paint#isElegantTextHeight()
 *
 * @attr ref android.R.styleable#TextView_elegantTextHeight
 */
",1,,,0,,,,0,0,0,0,0,The implementations of the method in both the early and late versions are identical. There are no differences in the code.,"Since there are no changes between the two versions, there are no potential compatibility issues."
<android.widget.Toast.TN: void handleHide()>,27,28,,,,"{
    if (localLOGV)
        Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView="" + mView);
    if (mView != null) {
        // the view isn't yet added, so let's try not to crash.
        if (mView.getParent() != null) {
            if (localLOGV)
                Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this);
            mWM.removeViewImmediate(mView);
        }
        mView = null;
    }
}","{
    if (localLOGV)
        Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView="" + mView);
    if (mView != null) {
        // the view isn't yet added, so let's try not to crash.
        if (mView.getParent() != null) {
            if (localLOGV)
                Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this);
            mWM.removeViewImmediate(mView);
        }
        // the resources.
        try {
            getService().finishToken(mPackageName, this);
        } catch (RemoteException e) {
        }
        mView = null;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (localLOGV), []), AssignmentExpression(=, [VariableReference(Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView, []), Expression("" + mView), [])]), AssignmentExpression(=, [VariableReference(if (mView !, []), Expression(null) {, [])]), Statement(// the view isn't yet added, so let's try not to crash., []), AssignmentExpression(=, [VariableReference(if (mView.getParent() !, []), Expression(null) {, [])]), Statement(if (localLOGV), []), MethodCall(Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this), [VariableReference(Log, []), Expression(TAG, []), Expression(""REMOVE! "" + mView + "" in "" + this, [])]), MethodCall(mWM.removeViewImmediate(mView), [VariableReference(mWM, []), Expression(mView, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mView, []), Expression(null, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (localLOGV), [])  AssignmentExpression(=, [VariableReference(Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView, []), Expression("" + mView), [])])    VariableReference(Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView, [])    Expression("" + mView), [])  AssignmentExpression(=, [VariableReference(if (mView !, []), Expression(null) {, [])])    VariableReference(if (mView !, [])    Expression(null) {, [])  Statement(// the view isn't yet added, so let's try not to crash., [])  AssignmentExpression(=, [VariableReference(if (mView.getParent() !, []), Expression(null) {, [])])    VariableReference(if (mView.getParent() !, [])    Expression(null) {, [])  Statement(if (localLOGV), [])  MethodCall(Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this), [VariableReference(Log, []), Expression(TAG, []), Expression(""REMOVE! "" + mView + "" in "" + this, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""REMOVE! "" + mView + "" in "" + this, [])  MethodCall(mWM.removeViewImmediate(mView), [VariableReference(mWM, []), Expression(mView, [])])    VariableReference(mWM, [])    Expression(mView, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mView, []), Expression(null, [])])    VariableReference(mView, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (localLOGV), []), AssignmentExpression(=, [VariableReference(Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView, []), Expression("" + mView), [])]), AssignmentExpression(=, [VariableReference(if (mView !, []), Expression(null) {, [])]), Statement(// the view isn't yet added, so let's try not to crash., []), AssignmentExpression(=, [VariableReference(if (mView.getParent() !, []), Expression(null) {, [])]), Statement(if (localLOGV), []), MethodCall(Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this), [VariableReference(Log, []), Expression(TAG, []), Expression(""REMOVE! "" + mView + "" in "" + this, [])]), MethodCall(mWM.removeViewImmediate(mView), [VariableReference(mWM, []), Expression(mView, [])]), Statement(}, []), Statement(// the resources., []), Statement(try {, []), MethodCall(getService().finishToken(mPackageName, this), [VariableReference(getService(), []), Expression(mPackageName, []), Expression(this, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mView, []), Expression(null, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (localLOGV), [])  AssignmentExpression(=, [VariableReference(Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView, []), Expression("" + mView), [])])    VariableReference(Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView, [])    Expression("" + mView), [])  AssignmentExpression(=, [VariableReference(if (mView !, []), Expression(null) {, [])])    VariableReference(if (mView !, [])    Expression(null) {, [])  Statement(// the view isn't yet added, so let's try not to crash., [])  AssignmentExpression(=, [VariableReference(if (mView.getParent() !, []), Expression(null) {, [])])    VariableReference(if (mView.getParent() !, [])    Expression(null) {, [])  Statement(if (localLOGV), [])  MethodCall(Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this), [VariableReference(Log, []), Expression(TAG, []), Expression(""REMOVE! "" + mView + "" in "" + this, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""REMOVE! "" + mView + "" in "" + this, [])  MethodCall(mWM.removeViewImmediate(mView), [VariableReference(mWM, []), Expression(mView, [])])    VariableReference(mWM, [])    Expression(mView, [])  Statement(}, [])  Statement(// the resources., [])  Statement(try {, [])  MethodCall(getService().finishToken(mPackageName, this), [VariableReference(getService(), []), Expression(mPackageName, []), Expression(this, [])])    VariableReference(getService(), [])    Expression(mPackageName, [])    Expression(this, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mView, []), Expression(null, [])])    VariableReference(mView, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,"1,2","2,4",2,"2,4",2,"A new exception handling block is introduced in the late version (`try { getService().finishToken(mPackageName, this); } catch (RemoteException e) {}`). This introduces a new statement and affects exception handling, so the change type is 2,4.","The newly introduced `catch (RemoteException e)` block can lead to exceptions being handled differently compared to the early version. Thus, it could result in a different runtime behavior, leading to a Compatibility Issue type 2."
"<android.provider.Settings.System: boolean putString(ContentResolver,String,String)>",27,28,,,,"{
    return putStringForUser(resolver, name, value, UserHandle.myUserId());
}","{
    return putStringForUser(resolver, name, value, resolver.getUserId());
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return putStringForUser(resolver, name, value, UserHandle.myUserId()), [VariableReference(return putStringForUser(resolver, name, value, UserHandle, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return putStringForUser(resolver, name, value, UserHandle.myUserId()), [VariableReference(return putStringForUser(resolver, name, value, UserHandle, []), Expression(), [])])    VariableReference(return putStringForUser(resolver, name, value, UserHandle, [])    Expression(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return putStringForUser(resolver, name, value, resolver.getUserId()), [VariableReference(return putStringForUser(resolver, name, value, resolver, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return putStringForUser(resolver, name, value, resolver.getUserId()), [VariableReference(return putStringForUser(resolver, name, value, resolver, []), Expression(), [])])    VariableReference(return putStringForUser(resolver, name, value, resolver, [])    Expression(), [])  Statement(}, [])",1,"/**
 * Store a name/value pair into the database.
 * @param resolver to access the database with
 * @param name to store
 * @param value to associate with the name
 * @return true if the value was set, false on database errors
 */
","/**
 * Store a name/value pair into the database.
 * @param resolver to access the database with
 * @param name to store
 * @param value to associate with the name
 * @return true if the value was set, false on database errors
 */
",0,,,0,,,,"1,2","1,5",1,5,0,"The method being called within the return statement has had its parameter changed from `UserHandle.myUserId()` to `resolver.getUserId()`. This indicates a change in the dependent API being used to determine the user ID, so the code change type is 5.","Despite the change in the method used to obtain the user ID, there is no direct evidence that it leads to different return values or introduces new exceptions. Therefore, no compatibility issue is identified for this API."
"<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(WebView,String,boolean)>",27,28,,,,"{
}","{
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * Notify the host application of the url for an apple-touch-icon.
 * @param view The WebView that initiated the callback.
 * @param url The icon url.
 * @param precomposed True if the url is for a precomposed touch icon.
 */
","/**
 * Notify the host application of the url for an apple-touch-icon.
 * @param view The WebView that initiated the callback.
 * @param url The icon url.
 * @param precomposed {@code true} if the url is for a precomposed touch icon.
 */
",1,,,0,,,,0,0,0,0,0,"There is no change in the method implementation between the two versions, so the code change type is 0.","Since there are no changes in the method implementation, there are no potential compatibility issues, so the CI type is 0."
"<android.bluetooth.le.ScanFilter.Builder: Builder setServiceUuid(ParcelUuid,ParcelUuid)>",27,28,,,,"{
    if (mUuidMask != null && mServiceUuid == null) {
        throw new IllegalArgumentException(""uuid is null while uuidMask is not null!"");
    }
    mServiceUuid = serviceUuid;
    mUuidMask = uuidMask;
    return this;
}","{
    if (mUuidMask != null && mServiceUuid == null) {
        throw new IllegalArgumentException(""uuid is null while uuidMask is not null!"");
    }
    mServiceUuid = serviceUuid;
    mUuidMask = uuidMask;
    return this;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mUuidMask !, []), Expression(null && mServiceUuid, [])]), Statement(throw new IllegalArgumentException(""uuid is null while uuidMask is not null!""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mServiceUuid, []), Expression(serviceUuid, [])]), AssignmentExpression(=, [VariableReference(mUuidMask, []), Expression(uuidMask, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mUuidMask !, []), Expression(null && mServiceUuid, [])])    VariableReference(if (mUuidMask !, [])    Expression(null && mServiceUuid, [])  Statement(throw new IllegalArgumentException(""uuid is null while uuidMask is not null!""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mServiceUuid, []), Expression(serviceUuid, [])])    VariableReference(mServiceUuid, [])    Expression(serviceUuid, [])  AssignmentExpression(=, [VariableReference(mUuidMask, []), Expression(uuidMask, [])])    VariableReference(mUuidMask, [])    Expression(uuidMask, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mUuidMask !, []), Expression(null && mServiceUuid, [])]), Statement(throw new IllegalArgumentException(""uuid is null while uuidMask is not null!""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mServiceUuid, []), Expression(serviceUuid, [])]), AssignmentExpression(=, [VariableReference(mUuidMask, []), Expression(uuidMask, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mUuidMask !, []), Expression(null && mServiceUuid, [])])    VariableReference(if (mUuidMask !, [])    Expression(null && mServiceUuid, [])  Statement(throw new IllegalArgumentException(""uuid is null while uuidMask is not null!""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mServiceUuid, []), Expression(serviceUuid, [])])    VariableReference(mServiceUuid, [])    Expression(serviceUuid, [])  AssignmentExpression(=, [VariableReference(mUuidMask, []), Expression(uuidMask, [])])    VariableReference(mUuidMask, [])    Expression(uuidMask, [])  Statement(return this, [])  Statement(}, [])",0,"/**
 * Set filter on partial service uuid. The {@code uuidMask} is the bit mask for the
 * {@code serviceUuid}. Set any bit in the mask to 1 to indicate a match is needed for the
 * bit in {@code serviceUuid}, and 0 to ignore that bit.
 *
 * @throws IllegalArgumentException If {@code serviceUuid} is {@code null} but
 * {@code uuidMask} is not {@code null}.
 */
","/**
 * Set filter on partial service uuid. The {@code uuidMask} is the bit mask for the
 * {@code serviceUuid}. Set any bit in the mask to 1 to indicate a match is needed for the
 * bit in {@code serviceUuid}, and 0 to ignore that bit.
 *
 * @throws IllegalArgumentException If {@code serviceUuid} is {@code null} but {@code
 * uuidMask} is not {@code null}.
 */
",1,,,0,,,,0,0,0,0,0,There are no changes between the early and late implementations; both versions are identical.,"No changes have been detected, so there are no potential compatibility issues."
"<android.app.usage.NetworkStatsManager: NetworkStats queryDetailsForUid(int,String,long,long,int)>",27,28,,,,"{
    return queryDetailsForUidTag(networkType, subscriberId, startTime, endTime, uid, NetworkStats.Bucket.TAG_NONE);
}","{
    return queryDetailsForUidTagState(networkType, subscriberId, startTime, endTime, uid, NetworkStats.Bucket.TAG_NONE, NetworkStats.Bucket.STATE_ALL);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",1,"/**
 * Query network usage statistics details for a given uid.
 *
 * #see queryDetailsForUidTag(int, String, long, long, int, int)
 */
","/**
 * Query network usage statistics details for a given uid.
 *
 * #see queryDetailsForUidTagState(int, String, long, long, int, int, int)
 */
",1,,,0,,,,"1,2","1,5",1,"1,5",1,"The method being called has changed from `queryDetailsForUidTag` to `queryDetailsForUidTagState`, and new parameters were added to the latter call. This change affects how the function operates internally, so the code change type is 1,5.","Changing the called method and adding parameters can potentially result in different return values. Therefore, there is a Compatibility Issue related to potential different return values or types, so the CI type is 1."
<android.net.NetworkStats.Entry: String toString()>,27,28,,,,"{
    final StringBuilder builder = new StringBuilder();
    builder.append(""iface="").append(iface);
    builder.append("" uid="").append(uid);
    builder.append("" set="").append(setToString(set));
    builder.append("" tag="").append(tagToString(tag));
    builder.append("" metered="").append(meteredToString(metered));
    builder.append("" roaming="").append(roamingToString(roaming));
    builder.append("" rxBytes="").append(rxBytes);
    builder.append("" rxPackets="").append(rxPackets);
    builder.append("" txBytes="").append(txBytes);
    builder.append("" txPackets="").append(txPackets);
    builder.append("" operations="").append(operations);
    return builder.toString();
}","{
    final StringBuilder builder = new StringBuilder();
    builder.append(""iface="").append(iface);
    builder.append("" uid="").append(uid);
    builder.append("" set="").append(setToString(set));
    builder.append("" tag="").append(tagToString(tag));
    builder.append("" metered="").append(meteredToString(metered));
    builder.append("" roaming="").append(roamingToString(roaming));
    builder.append("" defaultNetwork="").append(defaultNetworkToString(defaultNetwork));
    builder.append("" rxBytes="").append(rxBytes);
    builder.append("" rxPackets="").append(rxPackets);
    builder.append("" txBytes="").append(txBytes);
    builder.append("" txPackets="").append(txPackets);
    builder.append("" operations="").append(operations);
    return builder.toString();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final StringBuilder builder, []), Expression(new StringBuilder(), [])]), AssignmentExpression(=, [VariableReference(builder.append(""iface, []), Expression("").append(iface), [])]), AssignmentExpression(=, [VariableReference(builder.append("" uid, []), Expression("").append(uid), [])]), AssignmentExpression(=, [VariableReference(builder.append("" set, []), Expression("").append(setToString(set)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" tag, []), Expression("").append(tagToString(tag)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" metered, []), Expression("").append(meteredToString(metered)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" roaming, []), Expression("").append(roamingToString(roaming)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" rxBytes, []), Expression("").append(rxBytes), [])]), AssignmentExpression(=, [VariableReference(builder.append("" rxPackets, []), Expression("").append(rxPackets), [])]), AssignmentExpression(=, [VariableReference(builder.append("" txBytes, []), Expression("").append(txBytes), [])]), AssignmentExpression(=, [VariableReference(builder.append("" txPackets, []), Expression("").append(txPackets), [])]), AssignmentExpression(=, [VariableReference(builder.append("" operations, []), Expression("").append(operations), [])]), MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final StringBuilder builder, []), Expression(new StringBuilder(), [])])    VariableReference(final StringBuilder builder, [])    Expression(new StringBuilder(), [])  AssignmentExpression(=, [VariableReference(builder.append(""iface, []), Expression("").append(iface), [])])    VariableReference(builder.append(""iface, [])    Expression("").append(iface), [])  AssignmentExpression(=, [VariableReference(builder.append("" uid, []), Expression("").append(uid), [])])    VariableReference(builder.append("" uid, [])    Expression("").append(uid), [])  AssignmentExpression(=, [VariableReference(builder.append("" set, []), Expression("").append(setToString(set)), [])])    VariableReference(builder.append("" set, [])    Expression("").append(setToString(set)), [])  AssignmentExpression(=, [VariableReference(builder.append("" tag, []), Expression("").append(tagToString(tag)), [])])    VariableReference(builder.append("" tag, [])    Expression("").append(tagToString(tag)), [])  AssignmentExpression(=, [VariableReference(builder.append("" metered, []), Expression("").append(meteredToString(metered)), [])])    VariableReference(builder.append("" metered, [])    Expression("").append(meteredToString(metered)), [])  AssignmentExpression(=, [VariableReference(builder.append("" roaming, []), Expression("").append(roamingToString(roaming)), [])])    VariableReference(builder.append("" roaming, [])    Expression("").append(roamingToString(roaming)), [])  AssignmentExpression(=, [VariableReference(builder.append("" rxBytes, []), Expression("").append(rxBytes), [])])    VariableReference(builder.append("" rxBytes, [])    Expression("").append(rxBytes), [])  AssignmentExpression(=, [VariableReference(builder.append("" rxPackets, []), Expression("").append(rxPackets), [])])    VariableReference(builder.append("" rxPackets, [])    Expression("").append(rxPackets), [])  AssignmentExpression(=, [VariableReference(builder.append("" txBytes, []), Expression("").append(txBytes), [])])    VariableReference(builder.append("" txBytes, [])    Expression("").append(txBytes), [])  AssignmentExpression(=, [VariableReference(builder.append("" txPackets, []), Expression("").append(txPackets), [])])    VariableReference(builder.append("" txPackets, [])    Expression("").append(txPackets), [])  AssignmentExpression(=, [VariableReference(builder.append("" operations, []), Expression("").append(operations), [])])    VariableReference(builder.append("" operations, [])    Expression("").append(operations), [])  MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])])    VariableReference(return builder, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final StringBuilder builder, []), Expression(new StringBuilder(), [])]), AssignmentExpression(=, [VariableReference(builder.append(""iface, []), Expression("").append(iface), [])]), AssignmentExpression(=, [VariableReference(builder.append("" uid, []), Expression("").append(uid), [])]), AssignmentExpression(=, [VariableReference(builder.append("" set, []), Expression("").append(setToString(set)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" tag, []), Expression("").append(tagToString(tag)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" metered, []), Expression("").append(meteredToString(metered)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" roaming, []), Expression("").append(roamingToString(roaming)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" defaultNetwork, []), Expression("").append(defaultNetworkToString(defaultNetwork)), [])]), AssignmentExpression(=, [VariableReference(builder.append("" rxBytes, []), Expression("").append(rxBytes), [])]), AssignmentExpression(=, [VariableReference(builder.append("" rxPackets, []), Expression("").append(rxPackets), [])]), AssignmentExpression(=, [VariableReference(builder.append("" txBytes, []), Expression("").append(txBytes), [])]), AssignmentExpression(=, [VariableReference(builder.append("" txPackets, []), Expression("").append(txPackets), [])]), AssignmentExpression(=, [VariableReference(builder.append("" operations, []), Expression("").append(operations), [])]), MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final StringBuilder builder, []), Expression(new StringBuilder(), [])])    VariableReference(final StringBuilder builder, [])    Expression(new StringBuilder(), [])  AssignmentExpression(=, [VariableReference(builder.append(""iface, []), Expression("").append(iface), [])])    VariableReference(builder.append(""iface, [])    Expression("").append(iface), [])  AssignmentExpression(=, [VariableReference(builder.append("" uid, []), Expression("").append(uid), [])])    VariableReference(builder.append("" uid, [])    Expression("").append(uid), [])  AssignmentExpression(=, [VariableReference(builder.append("" set, []), Expression("").append(setToString(set)), [])])    VariableReference(builder.append("" set, [])    Expression("").append(setToString(set)), [])  AssignmentExpression(=, [VariableReference(builder.append("" tag, []), Expression("").append(tagToString(tag)), [])])    VariableReference(builder.append("" tag, [])    Expression("").append(tagToString(tag)), [])  AssignmentExpression(=, [VariableReference(builder.append("" metered, []), Expression("").append(meteredToString(metered)), [])])    VariableReference(builder.append("" metered, [])    Expression("").append(meteredToString(metered)), [])  AssignmentExpression(=, [VariableReference(builder.append("" roaming, []), Expression("").append(roamingToString(roaming)), [])])    VariableReference(builder.append("" roaming, [])    Expression("").append(roamingToString(roaming)), [])  AssignmentExpression(=, [VariableReference(builder.append("" defaultNetwork, []), Expression("").append(defaultNetworkToString(defaultNetwork)), [])])    VariableReference(builder.append("" defaultNetwork, [])    Expression("").append(defaultNetworkToString(defaultNetwork)), [])  AssignmentExpression(=, [VariableReference(builder.append("" rxBytes, []), Expression("").append(rxBytes), [])])    VariableReference(builder.append("" rxBytes, [])    Expression("").append(rxBytes), [])  AssignmentExpression(=, [VariableReference(builder.append("" rxPackets, []), Expression("").append(rxPackets), [])])    VariableReference(builder.append("" rxPackets, [])    Expression("").append(rxPackets), [])  AssignmentExpression(=, [VariableReference(builder.append("" txBytes, []), Expression("").append(txBytes), [])])    VariableReference(builder.append("" txBytes, [])    Expression("").append(txBytes), [])  AssignmentExpression(=, [VariableReference(builder.append("" txPackets, []), Expression("").append(txPackets), [])])    VariableReference(builder.append("" txPackets, [])    Expression("").append(txPackets), [])  AssignmentExpression(=, [VariableReference(builder.append("" operations, []), Expression("").append(operations), [])])    VariableReference(builder.append("" operations, [])    Expression("").append(operations), [])  MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])])    VariableReference(return builder, [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","1,4",1,4,0,"A new line `builder.append(""defaultNetwork="").append(defaultNetworkToString(defaultNetwork));` has been introduced in the late version, which falls under the category of ""Other statement changed.""","The change only introduces an additional detail to the resulting string output without modifying the variable types or introducing new exception handling. Thus, there is no potential for a Compatibility Issue."
<android.webkit.WebChromeClient: boolean onConsoleMessage(ConsoleMessage)>,27,28,,,,"{
    // Call the old version of this function for backwards compatability.
    onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId());
    return false;
}","{
    // Call the old version of this function for backwards compatability.
    onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId());
    return false;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(// Call the old version of this function for backwards compatability., []), MethodCall(onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId()), [VariableReference(onConsoleMessage(consoleMessage, []), Expression(), []), Expression(consoleMessage.lineNumber(), []), Expression(consoleMessage.sourceId(), [])]), Statement(return false, []), Statement(}, [])])  Statement({, [])  Statement(// Call the old version of this function for backwards compatability., [])  MethodCall(onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId()), [VariableReference(onConsoleMessage(consoleMessage, []), Expression(), []), Expression(consoleMessage.lineNumber(), []), Expression(consoleMessage.sourceId(), [])])    VariableReference(onConsoleMessage(consoleMessage, [])    Expression(), [])    Expression(consoleMessage.lineNumber(), [])    Expression(consoleMessage.sourceId(), [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// Call the old version of this function for backwards compatability., []), MethodCall(onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId()), [VariableReference(onConsoleMessage(consoleMessage, []), Expression(), []), Expression(consoleMessage.lineNumber(), []), Expression(consoleMessage.sourceId(), [])]), Statement(return false, []), Statement(}, [])])  Statement({, [])  Statement(// Call the old version of this function for backwards compatability., [])  MethodCall(onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId()), [VariableReference(onConsoleMessage(consoleMessage, []), Expression(), []), Expression(consoleMessage.lineNumber(), []), Expression(consoleMessage.sourceId(), [])])    VariableReference(onConsoleMessage(consoleMessage, [])    Expression(), [])    Expression(consoleMessage.lineNumber(), [])    Expression(consoleMessage.sourceId(), [])  Statement(return false, [])  Statement(}, [])",0,"/**
 * Report a JavaScript console message to the host application. The ChromeClient
 * should override this to process the log message as they see fit.
 * @param consoleMessage Object containing details of the console message.
 * @return true if the message is handled by the client.
 */
","/**
 * Report a JavaScript console message to the host application. The ChromeClient
 * should override this to process the log message as they see fit.
 * @param consoleMessage Object containing details of the console message.
 * @return {@code true} if the message is handled by the client.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the code between the early and late versions. The method implementation remains the same.,"Since there is no change in the method implementation, no compatibility issues are expected."
"<android.hardware.radio.RadioManager.ModuleProperties: void writeToParcel(Parcel,int)>",26,27,,,,"{
    dest.writeInt(mId);
    dest.writeInt(mClassId);
    dest.writeString(mImplementor);
    dest.writeString(mProduct);
    dest.writeString(mVersion);
    dest.writeString(mSerial);
    dest.writeInt(mNumTuners);
    dest.writeInt(mNumAudioSources);
    dest.writeInt(mIsCaptureSupported ? 1 : 0);
    dest.writeParcelableArray(mBands, flags);
}","{
    dest.writeInt(mId);
    dest.writeString(mServiceName);
    dest.writeInt(mClassId);
    dest.writeString(mImplementor);
    dest.writeString(mProduct);
    dest.writeString(mVersion);
    dest.writeString(mSerial);
    dest.writeInt(mNumTuners);
    dest.writeInt(mNumAudioSources);
    dest.writeInt(mIsCaptureSupported ? 1 : 0);
    dest.writeParcelableArray(mBands, flags);
    dest.writeInt(mIsBgScanSupported ? 1 : 0);
    dest.writeIntArray(setToArray(mSupportedProgramTypes));
    dest.writeIntArray(setToArray(mSupportedIdentifierTypes));
    writeStringMap(dest, mVendorInfo);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeInt(mId), [VariableReference(dest, []), Expression(mId, [])]), MethodCall(dest.writeInt(mClassId), [VariableReference(dest, []), Expression(mClassId, [])]), MethodCall(dest.writeString(mImplementor), [VariableReference(dest, []), Expression(mImplementor, [])]), MethodCall(dest.writeString(mProduct), [VariableReference(dest, []), Expression(mProduct, [])]), MethodCall(dest.writeString(mVersion), [VariableReference(dest, []), Expression(mVersion, [])]), MethodCall(dest.writeString(mSerial), [VariableReference(dest, []), Expression(mSerial, [])]), MethodCall(dest.writeInt(mNumTuners), [VariableReference(dest, []), Expression(mNumTuners, [])]), MethodCall(dest.writeInt(mNumAudioSources), [VariableReference(dest, []), Expression(mNumAudioSources, [])]), MethodCall(dest.writeInt(mIsCaptureSupported ? 1 : 0), [VariableReference(dest, []), Expression(mIsCaptureSupported ? 1 : 0, [])]), MethodCall(dest.writeParcelableArray(mBands, flags), [VariableReference(dest, []), Expression(mBands, []), Expression(flags, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeInt(mId), [VariableReference(dest, []), Expression(mId, [])])    VariableReference(dest, [])    Expression(mId, [])  MethodCall(dest.writeInt(mClassId), [VariableReference(dest, []), Expression(mClassId, [])])    VariableReference(dest, [])    Expression(mClassId, [])  MethodCall(dest.writeString(mImplementor), [VariableReference(dest, []), Expression(mImplementor, [])])    VariableReference(dest, [])    Expression(mImplementor, [])  MethodCall(dest.writeString(mProduct), [VariableReference(dest, []), Expression(mProduct, [])])    VariableReference(dest, [])    Expression(mProduct, [])  MethodCall(dest.writeString(mVersion), [VariableReference(dest, []), Expression(mVersion, [])])    VariableReference(dest, [])    Expression(mVersion, [])  MethodCall(dest.writeString(mSerial), [VariableReference(dest, []), Expression(mSerial, [])])    VariableReference(dest, [])    Expression(mSerial, [])  MethodCall(dest.writeInt(mNumTuners), [VariableReference(dest, []), Expression(mNumTuners, [])])    VariableReference(dest, [])    Expression(mNumTuners, [])  MethodCall(dest.writeInt(mNumAudioSources), [VariableReference(dest, []), Expression(mNumAudioSources, [])])    VariableReference(dest, [])    Expression(mNumAudioSources, [])  MethodCall(dest.writeInt(mIsCaptureSupported ? 1 : 0), [VariableReference(dest, []), Expression(mIsCaptureSupported ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsCaptureSupported ? 1 : 0, [])  MethodCall(dest.writeParcelableArray(mBands, flags), [VariableReference(dest, []), Expression(mBands, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mBands, [])    Expression(flags, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeInt(mId), [VariableReference(dest, []), Expression(mId, [])]), MethodCall(dest.writeString(mServiceName), [VariableReference(dest, []), Expression(mServiceName, [])]), MethodCall(dest.writeInt(mClassId), [VariableReference(dest, []), Expression(mClassId, [])]), MethodCall(dest.writeString(mImplementor), [VariableReference(dest, []), Expression(mImplementor, [])]), MethodCall(dest.writeString(mProduct), [VariableReference(dest, []), Expression(mProduct, [])]), MethodCall(dest.writeString(mVersion), [VariableReference(dest, []), Expression(mVersion, [])]), MethodCall(dest.writeString(mSerial), [VariableReference(dest, []), Expression(mSerial, [])]), MethodCall(dest.writeInt(mNumTuners), [VariableReference(dest, []), Expression(mNumTuners, [])]), MethodCall(dest.writeInt(mNumAudioSources), [VariableReference(dest, []), Expression(mNumAudioSources, [])]), MethodCall(dest.writeInt(mIsCaptureSupported ? 1 : 0), [VariableReference(dest, []), Expression(mIsCaptureSupported ? 1 : 0, [])]), MethodCall(dest.writeParcelableArray(mBands, flags), [VariableReference(dest, []), Expression(mBands, []), Expression(flags, [])]), MethodCall(dest.writeInt(mIsBgScanSupported ? 1 : 0), [VariableReference(dest, []), Expression(mIsBgScanSupported ? 1 : 0, [])]), MethodCall(dest.writeIntArray(setToArray(mSupportedProgramTypes)), [VariableReference(dest, []), Expression(setToArray(mSupportedProgramTypes), [])]), MethodCall(dest.writeIntArray(setToArray(mSupportedIdentifierTypes)), [VariableReference(dest, []), Expression(setToArray(mSupportedIdentifierTypes), [])]), Statement(writeStringMap(dest, mVendorInfo), []), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeInt(mId), [VariableReference(dest, []), Expression(mId, [])])    VariableReference(dest, [])    Expression(mId, [])  MethodCall(dest.writeString(mServiceName), [VariableReference(dest, []), Expression(mServiceName, [])])    VariableReference(dest, [])    Expression(mServiceName, [])  MethodCall(dest.writeInt(mClassId), [VariableReference(dest, []), Expression(mClassId, [])])    VariableReference(dest, [])    Expression(mClassId, [])  MethodCall(dest.writeString(mImplementor), [VariableReference(dest, []), Expression(mImplementor, [])])    VariableReference(dest, [])    Expression(mImplementor, [])  MethodCall(dest.writeString(mProduct), [VariableReference(dest, []), Expression(mProduct, [])])    VariableReference(dest, [])    Expression(mProduct, [])  MethodCall(dest.writeString(mVersion), [VariableReference(dest, []), Expression(mVersion, [])])    VariableReference(dest, [])    Expression(mVersion, [])  MethodCall(dest.writeString(mSerial), [VariableReference(dest, []), Expression(mSerial, [])])    VariableReference(dest, [])    Expression(mSerial, [])  MethodCall(dest.writeInt(mNumTuners), [VariableReference(dest, []), Expression(mNumTuners, [])])    VariableReference(dest, [])    Expression(mNumTuners, [])  MethodCall(dest.writeInt(mNumAudioSources), [VariableReference(dest, []), Expression(mNumAudioSources, [])])    VariableReference(dest, [])    Expression(mNumAudioSources, [])  MethodCall(dest.writeInt(mIsCaptureSupported ? 1 : 0), [VariableReference(dest, []), Expression(mIsCaptureSupported ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsCaptureSupported ? 1 : 0, [])  MethodCall(dest.writeParcelableArray(mBands, flags), [VariableReference(dest, []), Expression(mBands, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(mBands, [])    Expression(flags, [])  MethodCall(dest.writeInt(mIsBgScanSupported ? 1 : 0), [VariableReference(dest, []), Expression(mIsBgScanSupported ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mIsBgScanSupported ? 1 : 0, [])  MethodCall(dest.writeIntArray(setToArray(mSupportedProgramTypes)), [VariableReference(dest, []), Expression(setToArray(mSupportedProgramTypes), [])])    VariableReference(dest, [])    Expression(setToArray(mSupportedProgramTypes), [])  MethodCall(dest.writeIntArray(setToArray(mSupportedIdentifierTypes)), [VariableReference(dest, []), Expression(setToArray(mSupportedIdentifierTypes), [])])    VariableReference(dest, [])    Expression(setToArray(mSupportedIdentifierTypes), [])  Statement(writeStringMap(dest, mVendorInfo), [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","1,4",1,4,0,"Several new statements have been added, including `dest.writeString(mServiceName)`, `dest.writeInt(mIsBgScanSupported ? 1 : 0)`, `dest.writeIntArray(setToArray(mSupportedProgramTypes))`, `dest.writeIntArray(setToArray(mSupportedIdentifierTypes))`, and `writeStringMap(dest, mVendorInfo)`. These add additional information to the Parcel. Therefore, the change type is 4.","Even though several statements have been added, these changes do not alter the return values or exception handling directly. They extend the functionality by writing more data to the Parcel, which does not cause a Compatibility Issue by itself. Thus, the CI type is 0."
<android.app.Notification.Builder: Builder setGroupAlertBehavior(int)>,26,27,,,,"{
    mN.mGroupAlertBehavior = groupAlertBehavior;
    return this;
}","{
    mN.mGroupAlertBehavior = groupAlertBehavior;
    return this;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mN.mGroupAlertBehavior, []), Expression(groupAlertBehavior, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mN.mGroupAlertBehavior, []), Expression(groupAlertBehavior, [])])    VariableReference(mN.mGroupAlertBehavior, [])    Expression(groupAlertBehavior, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mN.mGroupAlertBehavior, []), Expression(groupAlertBehavior, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mN.mGroupAlertBehavior, []), Expression(groupAlertBehavior, [])])    VariableReference(mN.mGroupAlertBehavior, [])    Expression(groupAlertBehavior, [])  Statement(return this, [])  Statement(}, [])",0,"/**
 * Sets the group alert behavior for this notification. Use this method to mute this
 * notification if alerts for this notification's group should be handled by a different
 * notification. This is only applicable for notifications that belong to a
 * {@link #setGroup(String) group}.
 *
 * <p> The default value is {@link #GROUP_ALERT_ALL}.</p>
 */
","/**
 * Sets the group alert behavior for this notification. Use this method to mute this
 * notification if alerts for this notification's group should be handled by a different
 * notification. This is only applicable for notifications that belong to a
 * {@link #setGroup(String) group}. This must be called on all notifications you want to
 * mute. For example, if you want only the summary of your group to make noise, all
 * children in the group should have the group alert behavior {@link #GROUP_ALERT_SUMMARY}.
 *
 * <p> The default value is {@link #GROUP_ALERT_ALL}.</p>
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation between the early version and the late version.,"Since there is no change in the implementation, there is no potential for a compatibility issue."
"<android.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(Fragment,Context,boolean)>",26,27,,,,"{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true);
        }
    }
    if (mLifecycleCallbacks == null) {
        return;
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentPreAttached(this, f, context);
        }
    }
}","{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true);
        }
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentPreAttached(this, f, context);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])]), Statement(if (parentManager instanceof FragmentManagerImpl) {, []), MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(context, []), Expression(true, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mLifecycleCallbacks, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])])    VariableReference(if (mParent !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])])    VariableReference(FragmentManager parentManager, [])    Expression(mParent.getFragmentManager(), [])  Statement(if (parentManager instanceof FragmentManagerImpl) {, [])  MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(context, []), Expression(true, [])])    VariableReference(((FragmentManagerImpl) parentManager), [])    Expression(f, [])    Expression(context, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mLifecycleCallbacks, []), Expression(, [])])    VariableReference(if (mLifecycleCallbacks, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])]), Statement(if (parentManager instanceof FragmentManagerImpl) {, []), MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(context, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])])    VariableReference(if (mParent !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(FragmentManager parentManager, []), Expression(mParent.getFragmentManager(), [])])    VariableReference(FragmentManager parentManager, [])    Expression(mParent.getFragmentManager(), [])  Statement(if (parentManager instanceof FragmentManagerImpl) {, [])  MethodCall(((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true), [VariableReference(((FragmentManagerImpl) parentManager), []), Expression(f, []), Expression(context, []), Expression(true, [])])    VariableReference(((FragmentManagerImpl) parentManager), [])    Expression(f, [])    Expression(context, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,1,"1,3",1,4,0,The `if (mLifecycleCallbacks == null)` check and the subsequent `return` statement were removed in the late version but there is no indication harm other statements drastically.,"The removed statement does not have an impact on the return values or exception handling of the method in a way that would constitute a compatibility issue, so the CI type is 0."
<android.widget.ArrayAdapter: CharSequence[] getAutofillOptions()>,26,27,,,,"{
    if (!mObjectsFromResources || mObjects == null || mObjects.isEmpty()) {
        return null;
    }
    final int size = mObjects.size();
    final CharSequence[] options = new CharSequence[size];
    mObjects.toArray(options);
    return options;
}","{
    // First check if app developer explicitly set them.
    final CharSequence[] explicitOptions = super.getAutofillOptions();
    if (explicitOptions != null) {
        return explicitOptions;
    }
    // Otherwise, only return options that came from static resources.
    if (!mObjectsFromResources || mObjects == null || mObjects.isEmpty()) {
        return null;
    }
    final int size = mObjects.size();
    final CharSequence[] options = new CharSequence[size];
    mObjects.toArray(options);
    return options;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (!mObjectsFromResources || mObjects, []), Expression(, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int size, []), Expression(mObjects.size(), [])]), AssignmentExpression(=, [VariableReference(final CharSequence[] options, []), Expression(new CharSequence[size], [])]), MethodCall(mObjects.toArray(options), [VariableReference(mObjects, []), Expression(options, [])]), Statement(return options, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (!mObjectsFromResources || mObjects, []), Expression(, [])])    VariableReference(if (!mObjectsFromResources || mObjects, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int size, []), Expression(mObjects.size(), [])])    VariableReference(final int size, [])    Expression(mObjects.size(), [])  AssignmentExpression(=, [VariableReference(final CharSequence[] options, []), Expression(new CharSequence[size], [])])    VariableReference(final CharSequence[] options, [])    Expression(new CharSequence[size], [])  MethodCall(mObjects.toArray(options), [VariableReference(mObjects, []), Expression(options, [])])    VariableReference(mObjects, [])    Expression(options, [])  Statement(return options, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// First check if app developer explicitly set them., []), AssignmentExpression(=, [VariableReference(final CharSequence[] explicitOptions, []), Expression(super.getAutofillOptions(), [])]), AssignmentExpression(=, [VariableReference(if (explicitOptions !, []), Expression(null) {, [])]), Statement(return explicitOptions, []), Statement(}, []), Statement(// Otherwise, only return options that came from static resources., []), AssignmentExpression(=, [VariableReference(if (!mObjectsFromResources || mObjects, []), Expression(, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int size, []), Expression(mObjects.size(), [])]), AssignmentExpression(=, [VariableReference(final CharSequence[] options, []), Expression(new CharSequence[size], [])]), MethodCall(mObjects.toArray(options), [VariableReference(mObjects, []), Expression(options, [])]), Statement(return options, []), Statement(}, [])])  Statement({, [])  Statement(// First check if app developer explicitly set them., [])  AssignmentExpression(=, [VariableReference(final CharSequence[] explicitOptions, []), Expression(super.getAutofillOptions(), [])])    VariableReference(final CharSequence[] explicitOptions, [])    Expression(super.getAutofillOptions(), [])  AssignmentExpression(=, [VariableReference(if (explicitOptions !, []), Expression(null) {, [])])    VariableReference(if (explicitOptions !, [])    Expression(null) {, [])  Statement(return explicitOptions, [])  Statement(}, [])  Statement(// Otherwise, only return options that came from static resources., [])  AssignmentExpression(=, [VariableReference(if (!mObjectsFromResources || mObjects, []), Expression(, [])])    VariableReference(if (!mObjectsFromResources || mObjects, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int size, []), Expression(mObjects.size(), [])])    VariableReference(final int size, [])    Expression(mObjects.size(), [])  AssignmentExpression(=, [VariableReference(final CharSequence[] options, []), Expression(new CharSequence[size], [])])    VariableReference(final CharSequence[] options, [])    Expression(new CharSequence[size], [])  MethodCall(mObjects.toArray(options), [VariableReference(mObjects, []), Expression(options, [])])    VariableReference(mObjects, [])    Expression(options, [])  Statement(return options, [])  Statement(}, [])",1,"/**
 * {@inheritDoc}
 *
 * @return values from the string array used by {@link #createFromResource(Context, int, int)},
 * or {@code null} if object was created otherwsie or if contents were dynamically changed after
 * creation.
 */
","/**
 * {@inheritDoc}
 *
 * @return values from the string array used by {@link #createFromResource(Context, int, int)},
 * or {@code null} if object was created otherwsie or if contents were dynamically changed after
 * creation.
 */
",0,[@Override],[@Override],0,,,,"1,2","1,3,4",1,"1, 3, 5",1,"The late version introduced an additional check for explicit autofill options by calling the `super.getAutofillOptions()` method, which can change the control dependency. Additionally, a call to a dependent API `super.getAutofillOptions()` was added. Finally, this change may affect the return value based on the presence of explicit options, so the code change type is 1, 3, 5.","The change in control flow introduced by the check for explicit autofill options and the dependency on `super.getAutofillOptions()` can result in a different return value, hence the CI type is 1."
<android.os.PowerManager.WakeLock: String toString()>,26,27,,,,"{
    synchronized (mToken) {
        return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held="" + mHeld + "", refCount="" + mCount + ""}"";
    }
}","{
    synchronized (mToken) {
        return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held="" + mHeld + "", refCount="" + mInternalCount + ""}"";
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mToken) {, []), AssignmentExpression(=, [VariableReference(return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held, []), Expression("" + mHeld + "", refCount, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mToken) {, [])  AssignmentExpression(=, [VariableReference(return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held, []), Expression("" + mHeld + "", refCount, [])])    VariableReference(return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held, [])    Expression("" + mHeld + "", refCount, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mToken) {, []), AssignmentExpression(=, [VariableReference(return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held, []), Expression("" + mHeld + "", refCount, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mToken) {, [])  AssignmentExpression(=, [VariableReference(return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held, []), Expression("" + mHeld + "", refCount, [])])    VariableReference(return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held, [])    Expression("" + mHeld + "", refCount, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,2,"1,5",1,1,1,"The 'refCount' variable has been changed to 'mInternalCount' in the return statement. Thus, the code change type is 1.","The change in the return statement could produce different return values, leading to a potential Compatibility Issue. Therefore, the CI type is 1."
<android.service.vr.VrListenerService.VrListenerHandler: void handleMessage(Message)>,26,27,,,,"{
    switch(msg.what) {
        case MSG_ON_CURRENT_VR_ACTIVITY_CHANGED:
            {
                VrListenerService.this.onCurrentVrActivityChanged((ComponentName) msg.obj);
            }
            break;
    }
}","{
    switch(msg.what) {
        case MSG_ON_CURRENT_VR_ACTIVITY_CHANGED:
            {
                VrListenerService.this.onCurrentVrActivityChanged((ComponentName) msg.obj, msg.arg1 == 1, msg.arg2);
            }
            break;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(case MSG_ON_CURRENT_VR_ACTIVITY_CHANGED:, []), Statement({, []), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(case MSG_ON_CURRENT_VR_ACTIVITY_CHANGED:, [])  Statement({, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(case MSG_ON_CURRENT_VR_ACTIVITY_CHANGED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(VrListenerService.this.onCurrentVrActivityChanged((ComponentName) msg.obj, msg.arg1, []), Expression(, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(case MSG_ON_CURRENT_VR_ACTIVITY_CHANGED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(VrListenerService.this.onCurrentVrActivityChanged((ComponentName) msg.obj, msg.arg1, []), Expression(, [])])    VariableReference(VrListenerService.this.onCurrentVrActivityChanged((ComponentName) msg.obj, msg.arg1, [])    Expression(, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,2,5,0,"3, 5",1,"The control dependency has changed. In the late version, the method `onCurrentVrActivityChanged` is now called with three parameters instead of one, which indicates a change in the dependent API as well. Therefore, the change type is 3, 5.","The added parameters `msg.arg1 == 1` and `msg.arg2` in the late version change the behavior of the method call and could lead to different return values when the `handleMessage` method is invoked. Thus, the CI type is 1."
<android.hardware.usb.UsbConfiguration: String getName()>,25,26,,,,"{
    return mName;
}","{
    return mName;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mName, []), Statement(}, [])])  Statement({, [])  Statement(return mName, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mName, []), Statement(}, [])])  Statement({, [])  Statement(return mName, [])  Statement(}, [])",0,"/**
 * Returns the configuration's name.
 *
 * @return the configuration's name
 */
","/**
 * Returns the configuration's name.
 *
 * @return the configuration's name, or {@code null} if the property could not be read
 */
",1,,[@Nullable],1,,,,0,0,0,0,0,There is no change in the implementation between the early and late versions. The annotation change does not affect the actual implementation.,"Since there is no change in the implementation and the annotation change does not affect the execution or return value of the method, there is no compatibility issue."
"<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(UsbEndpoint,byte[],int,int)>",25,26,,,,"{
    return bulkTransfer(endpoint, buffer, 0, length, timeout);
}","{
    return bulkTransfer(endpoint, buffer, 0, length, timeout);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return bulkTransfer(endpoint, buffer, 0, length, timeout), []), Statement(}, [])])  Statement({, [])  Statement(return bulkTransfer(endpoint, buffer, 0, length, timeout), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return bulkTransfer(endpoint, buffer, 0, length, timeout), []), Statement(}, [])])  Statement({, [])  Statement(return bulkTransfer(endpoint, buffer, 0, length, timeout), [])  Statement(}, [])",0,"/**
 * Performs a bulk transaction on the given endpoint.
 * The direction of the transfer is determined by the direction of the endpoint.
 * <p>
 * This method transfers data starting from index 0 in the buffer.
 * To specify a different offset, use
 * {@link #bulkTransfer(UsbEndpoint, byte[], int, int, int)}.
 * </p>
 *
 * @param endpoint the endpoint for this transaction
 * @param buffer buffer for data to send or receive
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
","/**
 * Performs a bulk transaction on the given endpoint.
 * The direction of the transfer is determined by the direction of the endpoint.
 * <p>
 * This method transfers data starting from index 0 in the buffer.
 * To specify a different offset, use
 * {@link #bulkTransfer(UsbEndpoint, byte[], int, int, int)}.
 * </p>
 *
 * @param endpoint the endpoint for this transaction
 * @param buffer buffer for data to send or receive; can be {@code null} to wait for next
 * transaction without reading data
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds, 0 is infinite
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the method between the early version and the late version.,"Since there is no change in the implementation, there are no potential compatibility issues."
<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>,25,26,,,,"{
    return (mAllowEnterTransitionOverlap == null) ? true : mAllowEnterTransitionOverlap;
}","{
    return (mAnimationInfo == null || mAnimationInfo.mAllowEnterTransitionOverlap == null) ? true : mAnimationInfo.mAllowEnterTransitionOverlap;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return (mAllowEnterTransitionOverlap, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return (mAllowEnterTransitionOverlap, []), Expression(, [])])    VariableReference(return (mAllowEnterTransitionOverlap, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return (mAnimationInfo, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return (mAnimationInfo, []), Expression(, [])])    VariableReference(return (mAnimationInfo, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Returns whether the the exit transition and enter transition overlap or not.
 * When true, the enter transition will start as soon as possible. When false, the
 * enter transition will wait until the exit transition completes before starting.
 *
 * @return true when the enter transition should start as soon as possible or false to
 * when it should wait until the exiting transition completes.
 * @attr ref android.R.styleable#Fragment_fragmentAllowEnterTransitionOverlap
 */
","/**
 * Returns whether the the exit transition and enter transition overlap or not.
 * When true, the enter transition will start as soon as possible. When false, the
 * enter transition will wait until the exit transition completes before starting.
 *
 * @return true when the enter transition should start as soon as possible or false to
 * when it should wait until the exiting transition completes.
 * @attr ref android.R.styleable#Fragment_fragmentAllowEnterTransitionOverlap
 */
",0,,,0,,,,"1,2","1,5",1,"1, 4",1,"The return statement has changed from returning `(mAllowEnterTransitionOverlap == null) ? true : mAllowEnterTransitionOverlap` to returning `(mAnimationInfo == null || mAnimationInfo.mAllowEnterTransitionOverlap == null) ? true : mAnimationInfo.mAllowEnterTransitionOverlap`, which could potentially result in a different return value based on `mAnimationInfo`. Additionally, there are other statement changes associated with the migration from `mAllowEnterTransitionOverlap` to `mAnimationInfo.mAllowEnterTransitionOverlap`, so the code change type is 1, 4.","The change in the return statement could lead to the API returning different values due to the added conditions involving `mAnimationInfo`. Therefore, the Compatibility Issue type is 1."
<android.content.pm.ShortcutManager: boolean setDynamicShortcuts(List<ShortcutInfo>)>,25,26,,,,"{
    try {
        return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    try {
        return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId()), [VariableReference(return mService, []), Expression(mContext.getPackageName(), []), Expression(new ParceledListSlice(shortcutInfoList), []), Expression(injectMyUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId()), [VariableReference(return mService, []), Expression(mContext.getPackageName(), []), Expression(new ParceledListSlice(shortcutInfoList), []), Expression(injectMyUserId(), [])])    VariableReference(return mService, [])    Expression(mContext.getPackageName(), [])    Expression(new ParceledListSlice(shortcutInfoList), [])    Expression(injectMyUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId()), [VariableReference(return mService, []), Expression(mContext.getPackageName(), []), Expression(new ParceledListSlice(shortcutInfoList), []), Expression(injectMyUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId()), [VariableReference(return mService, []), Expression(mContext.getPackageName(), []), Expression(new ParceledListSlice(shortcutInfoList), []), Expression(injectMyUserId(), [])])    VariableReference(return mService, [])    Expression(mContext.getPackageName(), [])    Expression(new ParceledListSlice(shortcutInfoList), [])    Expression(injectMyUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Publish the list of shortcuts.  All existing dynamic shortcuts from the caller application
 * will be replaced.  If there are already pinned shortcuts with the same IDs,
 * the mutable pinned shortcuts are updated.
 *
 * <p>This API will be rate-limited.
 *
 * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.
 *
 * @throws IllegalArgumentException if {@link #getMaxShortcutCountPerActivity()} is exceeded,
 * or when trying to update immutable shortcuts.
 *
 * @throws IllegalStateException when the user is locked.
 */
","/**
 * Publish the list of shortcuts.  All existing dynamic shortcuts from the caller app
 * will be replaced.  If there are already pinned shortcuts with the same IDs,
 * the mutable pinned shortcuts are updated.
 *
 * <p>This API will be rate-limited.
 *
 * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.
 *
 * @throws IllegalArgumentException if {@link #getMaxShortcutCountPerActivity()} is exceeded,
 * or when trying to update immutable shortcuts.
 *
 * @throws IllegalStateException when the user is locked.
 */
",1,,,0,,,,0,0,0,0,0,There is no change between the early and late implementations. The method body and statements remain identical.,"Since there are no changes between the early and late implementations, there are no potential compatibility issues."
"<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int,Bundle)>",25,26,,,,"{
    startActivityForResult(fragment.mWho, intent, requestCode, options);
}","{
    startActivityForResult(fragment.mWho, intent, requestCode, options);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * This is called when a Fragment in this activity calls its
 * {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}
 * method.
 *
 * <p>This method throws {@link android.content.ActivityNotFoundException}
 * if there was no Activity found to run the given Intent.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 */
","/**
 * This is called when a Fragment in this activity calls its
 * {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}
 * method.
 *
 * <p>This method throws {@link android.content.ActivityNotFoundException}
 * if there was no Activity found to run the given Intent.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)}
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 */
",1,,,0,,,,0,0,0,0,0,There are no changes in the method implementation between the early and late versions.,"Since there are no changes in the method implementation, there is no potential for a compatibility issue."
<android.app.FragmentManagerImpl: void dispatchDestroy()>,25,26,,,,"{
    mDestroyed = true;
    execPendingActions();
    moveToState(Fragment.INITIALIZING, false);
    mHost = null;
    mContainer = null;
    mParent = null;
}","{
    mDestroyed = true;
    execPendingActions();
    dispatchMoveToState(Fragment.INITIALIZING);
    mHost = null;
    mContainer = null;
    mParent = null;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mDestroyed, []), Expression(true, [])]), Statement(execPendingActions(), []), AssignmentExpression(=, [VariableReference(mHost, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mContainer, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mParent, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mDestroyed, []), Expression(true, [])])    VariableReference(mDestroyed, [])    Expression(true, [])  Statement(execPendingActions(), [])  AssignmentExpression(=, [VariableReference(mHost, []), Expression(null, [])])    VariableReference(mHost, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mContainer, []), Expression(null, [])])    VariableReference(mContainer, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mParent, []), Expression(null, [])])    VariableReference(mParent, [])    Expression(null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mDestroyed, []), Expression(true, [])]), Statement(execPendingActions(), []), AssignmentExpression(=, [VariableReference(mHost, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mContainer, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mParent, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mDestroyed, []), Expression(true, [])])    VariableReference(mDestroyed, [])    Expression(true, [])  Statement(execPendingActions(), [])  AssignmentExpression(=, [VariableReference(mHost, []), Expression(null, [])])    VariableReference(mHost, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mContainer, []), Expression(null, [])])    VariableReference(mContainer, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mParent, []), Expression(null, [])])    VariableReference(mParent, [])    Expression(null, [])  Statement(}, [])",1,,,0,,,0,,,,2,5,1,5,0,"The call to `moveToState(Fragment.INITIALIZING, false)` has been replaced with `dispatchMoveToState(Fragment.INITIALIZING)`. This indicates that the method the API depends on has changed, so the change type is 5.","The change does not seem to affect the return values or exception handling directly from the `dispatchDestroy` method. Therefore, there is no Compatibility Issue detected, so the CI type is 0."
"<android.content.res.ResourcesImpl.ThemeImpl: TypedArray obtainStyledAttributes(Theme,AttributeSet,int[],int,int)>",25,26,,,,"{
    synchronized (mKey) {
        final int len = attrs.length;
        final TypedArray array = TypedArray.obtain(wrapper.getResources(), len);
        // XXX note that for now we only work with compiled XML files.
        // To support generic XML files we will need to manually parse
        // out the attributes from the XML file (applying type information
        // contained in the resources and such).
        final XmlBlock.Parser parser = (XmlBlock.Parser) set;
        AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser != null ? parser.mParseState : 0, attrs, array.mData, array.mIndices);
        array.mTheme = wrapper;
        array.mXml = parser;
        return array;
    }
}","{
    synchronized (mKey) {
        final int len = attrs.length;
        final TypedArray array = TypedArray.obtain(wrapper.getResources(), len);
        // XXX note that for now we only work with compiled XML files.
        // To support generic XML files we will need to manually parse
        // out the attributes from the XML file (applying type information
        // contained in the resources and such).
        final XmlBlock.Parser parser = (XmlBlock.Parser) set;
        AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser != null ? parser.mParseState : 0, attrs, attrs.length, array.mDataAddress, array.mIndicesAddress);
        array.mTheme = wrapper;
        array.mXml = parser;
        return array;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mKey) {, []), AssignmentExpression(=, [VariableReference(final int len, []), Expression(attrs.length, [])]), AssignmentExpression(=, [VariableReference(final TypedArray array, []), Expression(TypedArray.obtain(wrapper.getResources(), len), [])]), Statement(// XXX note that for now we only work with compiled XML files., []), Statement(// To support generic XML files we will need to manually parse, []), Statement(// out the attributes from the XML file (applying type information, []), Statement(// contained in the resources and such)., []), AssignmentExpression(=, [VariableReference(final XmlBlock.Parser parser, []), Expression((XmlBlock.Parser) set, [])]), AssignmentExpression(=, [VariableReference(AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser !, []), Expression(null ? parser.mParseState : 0, attrs, array.mData, array.mIndices), [])]), AssignmentExpression(=, [VariableReference(array.mTheme, []), Expression(wrapper, [])]), AssignmentExpression(=, [VariableReference(array.mXml, []), Expression(parser, [])]), Statement(return array, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mKey) {, [])  AssignmentExpression(=, [VariableReference(final int len, []), Expression(attrs.length, [])])    VariableReference(final int len, [])    Expression(attrs.length, [])  AssignmentExpression(=, [VariableReference(final TypedArray array, []), Expression(TypedArray.obtain(wrapper.getResources(), len), [])])    VariableReference(final TypedArray array, [])    Expression(TypedArray.obtain(wrapper.getResources(), len), [])  Statement(// XXX note that for now we only work with compiled XML files., [])  Statement(// To support generic XML files we will need to manually parse, [])  Statement(// out the attributes from the XML file (applying type information, [])  Statement(// contained in the resources and such)., [])  AssignmentExpression(=, [VariableReference(final XmlBlock.Parser parser, []), Expression((XmlBlock.Parser) set, [])])    VariableReference(final XmlBlock.Parser parser, [])    Expression((XmlBlock.Parser) set, [])  AssignmentExpression(=, [VariableReference(AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser !, []), Expression(null ? parser.mParseState : 0, attrs, array.mData, array.mIndices), [])])    VariableReference(AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser !, [])    Expression(null ? parser.mParseState : 0, attrs, array.mData, array.mIndices), [])  AssignmentExpression(=, [VariableReference(array.mTheme, []), Expression(wrapper, [])])    VariableReference(array.mTheme, [])    Expression(wrapper, [])  AssignmentExpression(=, [VariableReference(array.mXml, []), Expression(parser, [])])    VariableReference(array.mXml, [])    Expression(parser, [])  Statement(return array, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mKey) {, []), AssignmentExpression(=, [VariableReference(final int len, []), Expression(attrs.length, [])]), AssignmentExpression(=, [VariableReference(final TypedArray array, []), Expression(TypedArray.obtain(wrapper.getResources(), len), [])]), Statement(// XXX note that for now we only work with compiled XML files., []), Statement(// To support generic XML files we will need to manually parse, []), Statement(// out the attributes from the XML file (applying type information, []), Statement(// contained in the resources and such)., []), AssignmentExpression(=, [VariableReference(final XmlBlock.Parser parser, []), Expression((XmlBlock.Parser) set, [])]), AssignmentExpression(=, [VariableReference(AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser !, []), Expression(null ? parser.mParseState : 0, attrs, attrs.length, array.mDataAddress, array.mIndicesAddress), [])]), AssignmentExpression(=, [VariableReference(array.mTheme, []), Expression(wrapper, [])]), AssignmentExpression(=, [VariableReference(array.mXml, []), Expression(parser, [])]), Statement(return array, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mKey) {, [])  AssignmentExpression(=, [VariableReference(final int len, []), Expression(attrs.length, [])])    VariableReference(final int len, [])    Expression(attrs.length, [])  AssignmentExpression(=, [VariableReference(final TypedArray array, []), Expression(TypedArray.obtain(wrapper.getResources(), len), [])])    VariableReference(final TypedArray array, [])    Expression(TypedArray.obtain(wrapper.getResources(), len), [])  Statement(// XXX note that for now we only work with compiled XML files., [])  Statement(// To support generic XML files we will need to manually parse, [])  Statement(// out the attributes from the XML file (applying type information, [])  Statement(// contained in the resources and such)., [])  AssignmentExpression(=, [VariableReference(final XmlBlock.Parser parser, []), Expression((XmlBlock.Parser) set, [])])    VariableReference(final XmlBlock.Parser parser, [])    Expression((XmlBlock.Parser) set, [])  AssignmentExpression(=, [VariableReference(AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser !, []), Expression(null ? parser.mParseState : 0, attrs, attrs.length, array.mDataAddress, array.mIndicesAddress), [])])    VariableReference(AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser !, [])    Expression(null ? parser.mParseState : 0, attrs, attrs.length, array.mDataAddress, array.mIndicesAddress), [])  AssignmentExpression(=, [VariableReference(array.mTheme, []), Expression(wrapper, [])])    VariableReference(array.mTheme, [])    Expression(wrapper, [])  AssignmentExpression(=, [VariableReference(array.mXml, []), Expression(parser, [])])    VariableReference(array.mXml, [])    Expression(parser, [])  Statement(return array, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@NonNull],[@NonNull],0,,,,2,5,1,4,0,"The parameters for the `AssetManager.applyStyle` method call have changed, specifically `(parser != null ? parser.mParseState : 0, attrs, array.mData, array.mIndices)` was changed to `(parser != null ? parser.mParseState : 0, attrs, attrs.length, array.mDataAddress, array.mIndicesAddress)`. This falls under the ""Other statement changed"" category.","Despite the change in the parameters passed to `AssetManager.applyStyle`, there is no indication that the return value or exception handling behavior would be affected. Thus, no potential compatibility issue is identified."
<android.app.admin.DevicePolicyManager: int getPermissionPolicy(ComponentName)>,25,26,,,,"{
    throwIfParentInstance(""getPermissionPolicy"");
    try {
        return mService.getPermissionPolicy(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""getPermissionPolicy"");
    try {
        return mService.getPermissionPolicy(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getPermissionPolicy""), []), Statement(try {, []), MethodCall(return mService.getPermissionPolicy(admin), [VariableReference(return mService, []), Expression(admin, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getPermissionPolicy""), [])  Statement(try {, [])  MethodCall(return mService.getPermissionPolicy(admin), [VariableReference(return mService, []), Expression(admin, [])])    VariableReference(return mService, [])    Expression(admin, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])])    VariableReference(throw re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getPermissionPolicy""), []), Statement(try {, []), MethodCall(return mService.getPermissionPolicy(admin), [VariableReference(return mService, []), Expression(admin, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getPermissionPolicy""), [])  Statement(try {, [])  MethodCall(return mService.getPermissionPolicy(admin), [VariableReference(return mService, []), Expression(admin, [])])    VariableReference(return mService, [])    Expression(admin, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])])    VariableReference(throw re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Returns the current runtime permission policy set by the device or profile owner. The
 * default is {@link #PERMISSION_POLICY_PROMPT}.
 * @param admin Which profile or device owner this request is associated with.
 * @return the current policy for future permission requests.
 */
","/**
 * Returns the current runtime permission policy set by the device or profile owner. The
 * default is {@link #PERMISSION_POLICY_PROMPT}.
 *
 * @param admin Which profile or device owner this request is associated with.
 * @return the current policy for future permission requests.
 */
",1,,,0,,,,0,0,0,0,0,There are no changes between the early and late versions of the method implementation. The method bodies are identical in both versions.,"Since there are no changes in the code between the two versions, there are no compatibility issues."
"<android.app.Notification.Builder: Builder setSound(Uri,int)>",25,26,,,,"{
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}","{
    PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"");
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])]), AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])])    VariableReference(mN.sound, [])    Expression(sound, [])  AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])])    VariableReference(mN.audioStreamType, [])    Expression(streamType, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()""), [VariableReference(PlayerBase, []), Expression(streamType, []), Expression(""Notification"", []), Expression(""setSound()"", [])]), AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])]), AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()""), [VariableReference(PlayerBase, []), Expression(streamType, []), Expression(""Notification"", []), Expression(""setSound()"", [])])    VariableReference(PlayerBase, [])    Expression(streamType, [])    Expression(""Notification"", [])    Expression(""setSound()"", [])  AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])])    VariableReference(mN.sound, [])    Expression(sound, [])  AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])])    VariableReference(mN.audioStreamType, [])    Expression(streamType, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * <p>
 * A notification that is noisy is more likely to be presented as a heads-up notification.
 * </p>
 * @deprecated use {@link #setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
","/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)}.
 */
",1,[@Deprecated],[@Deprecated],0,,,,2,4,0,4,0,"A new method call `PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"")` has been introduced. This change type falls under `Other statement changed`.","The introduced method call `PlayerBase.deprecateStreamTypeForPlayback` does not change the return value or exception handling behavior of the API. Hence, there is no Compatibility Issue (`0`)."
"<android.provider.DocumentsProvider: String renameDocument(String,String)>",25,26,,,,"{
    throw new UnsupportedOperationException(""Rename not supported"");
}","{
    throw new UnsupportedOperationException(""Rename not supported"");
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""Rename not supported""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""Rename not supported""), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""Rename not supported""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""Rename not supported""), [])  Statement(}, [])",0,"/**
 * Rename an existing document.
 * <p>
 * If a different {@link Document#COLUMN_DOCUMENT_ID} must be used to
 * represent the renamed document, generate and return it. Any outstanding
 * URI permission grants will be updated to point at the new document. If
 * the original {@link Document#COLUMN_DOCUMENT_ID} is still valid after the
 * rename, return {@code null}.
 *
 * @param documentId the document to rename.
 * @param displayName the updated display name of the document. The provider
 * may alter this name to meet any internal constraints, such as
 * avoiding conflicting names.
 */
","/**
 * Rename an existing document.
 * <p>
 * If a different {@link Document#COLUMN_DOCUMENT_ID} must be used to
 * represent the renamed document, generate and return it. Any outstanding
 * URI permission grants will be updated to point at the new document. If
 * the original {@link Document#COLUMN_DOCUMENT_ID} is still valid after the
 * rename, return {@code null}.
 *
 * @param documentId the document to rename.
 * @param displayName the updated display name of the document. The provider
 * may alter this name to meet any internal constraints, such as
 * avoiding conflicting names.
 * @throws AuthenticationRequiredException If authentication is required from
 * the user (such as login credentials), but it is not guaranteed
 * that the client will handle this properly.
 */
",1,[@SuppressWarnings("unused")],[@SuppressWarnings("unused")],0,,,,0,0,0,0,0,"There are no changes in the implementation or annotations between the early and late versions, so the code change type is 0.","Since there are no changes between the two versions, there is no potential for compatibility issues, so the CI type is 0."
"<android.app.admin.DevicePolicyManager: boolean isPackageSuspended(ComponentName,String)>",25,26,,,,"{
    throwIfParentInstance(""isPackageSuspended"");
    if (mService != null) {
        try {
            return mService.isPackageSuspended(admin, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        } catch (IllegalArgumentException ex) {
            throw new NameNotFoundException(packageName);
        }
    }
    return false;
}","{
    throwIfParentInstance(""isPackageSuspended"");
    if (mService != null) {
        try {
            return mService.isPackageSuspended(admin, mContext.getPackageName(), packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        } catch (IllegalArgumentException ex) {
            throw new NameNotFoundException(packageName);
        }
    }
    return false;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""isPackageSuspended""), []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(return mService.isPackageSuspended(admin, packageName), [VariableReference(return mService, []), Expression(admin, []), Expression(packageName, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(} catch (IllegalArgumentException ex) {, []), Statement(throw new NameNotFoundException(packageName), []), Statement(}, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""isPackageSuspended""), [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(return mService.isPackageSuspended(admin, packageName), [VariableReference(return mService, []), Expression(admin, []), Expression(packageName, [])])    VariableReference(return mService, [])    Expression(admin, [])    Expression(packageName, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(} catch (IllegalArgumentException ex) {, [])  Statement(throw new NameNotFoundException(packageName), [])  Statement(}, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""isPackageSuspended""), []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(return mService.isPackageSuspended(admin, mContext.getPackageName(), packageName), [VariableReference(return mService, []), Expression(admin, []), Expression(mContext.getPackageName(), []), Expression(packageName, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(} catch (IllegalArgumentException ex) {, []), Statement(throw new NameNotFoundException(packageName), []), Statement(}, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""isPackageSuspended""), [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(return mService.isPackageSuspended(admin, mContext.getPackageName(), packageName), [VariableReference(return mService, []), Expression(admin, []), Expression(mContext.getPackageName(), []), Expression(packageName, [])])    VariableReference(return mService, [])    Expression(admin, [])    Expression(mContext.getPackageName(), [])    Expression(packageName, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(} catch (IllegalArgumentException ex) {, [])  Statement(throw new NameNotFoundException(packageName), [])  Statement(}, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])",1,"/**
 * Called by device or profile owners to determine if a package is suspended.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param packageName The name of the package to retrieve the suspended status of.
 * @return {@code true} if the package is suspended or {@code false} if the package is not
 * suspended, could not be found or an error occurred.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if the package could not be found.
 */
","/**
 * Determine if a package is suspended. This function can be called by a device owner, profile
 * owner, or by a delegate given the {@link #DELEGATION_PACKAGE_ACCESS} scope via
 * {@link #setDelegatedScopes}.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with, or
 * {@code null} if the caller is a package access delegate.
 * @param packageName The name of the package to retrieve the suspended status of.
 * @return {@code true} if the package is suspended or {@code false} if the package is not
 * suspended, could not be found or an error occurred.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if the package could not be found.
 * @see #setDelegatedScopes
 * @see #DELEGATION_PACKAGE_ACCESS
 */
",1,,,0,,,,2,"1,5",1,"3,5",1,"The method call `mService.isPackageSuspended()` in the try block was changed to include an additional parameter `mContext.getPackageName()`. Therefore, the change falls into the categories of control dependency change and dependent API change, so the code change type is 3,5.","The potential change in the method call's behavior due to the addition of a new parameter could lead to the method returning different values, hence the CI type is 1."
<android.app.UiAutomation: AccessibilityNodeInfo findFocus(int)>,25,26,,,,"{
    return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityNodeInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus);
}","{
    return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityWindowInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityNodeInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus), [VariableReference(return AccessibilityInteractionClient, []), Expression().findFocus(mConnectionId, []), Expression(AccessibilityNodeInfo.ANY_WINDOW_ID, []), Expression(AccessibilityNodeInfo.ROOT_NODE_ID, []), Expression(focus, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityNodeInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus), [VariableReference(return AccessibilityInteractionClient, []), Expression().findFocus(mConnectionId, []), Expression(AccessibilityNodeInfo.ANY_WINDOW_ID, []), Expression(AccessibilityNodeInfo.ROOT_NODE_ID, []), Expression(focus, [])])    VariableReference(return AccessibilityInteractionClient, [])    Expression().findFocus(mConnectionId, [])    Expression(AccessibilityNodeInfo.ANY_WINDOW_ID, [])    Expression(AccessibilityNodeInfo.ROOT_NODE_ID, [])    Expression(focus, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityWindowInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus), [VariableReference(return AccessibilityInteractionClient, []), Expression().findFocus(mConnectionId, []), Expression(AccessibilityWindowInfo.ANY_WINDOW_ID, []), Expression(AccessibilityNodeInfo.ROOT_NODE_ID, []), Expression(focus, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityWindowInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus), [VariableReference(return AccessibilityInteractionClient, []), Expression().findFocus(mConnectionId, []), Expression(AccessibilityWindowInfo.ANY_WINDOW_ID, []), Expression(AccessibilityNodeInfo.ROOT_NODE_ID, []), Expression(focus, [])])    VariableReference(return AccessibilityInteractionClient, [])    Expression().findFocus(mConnectionId, [])    Expression(AccessibilityWindowInfo.ANY_WINDOW_ID, [])    Expression(AccessibilityNodeInfo.ROOT_NODE_ID, [])    Expression(focus, [])  Statement(}, [])",1,"/**
 * Find the view that has the specified focus type. The search is performed
 * across all windows.
 * <p>
 * <strong>Note:</strong> In order to access the windows you have to opt-in
 * to retrieve the interactive windows by setting the
 * {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
 * Otherwise, the search will be performed only in the active window.
 * </p>
 *
 * @param focus The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or
 * {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.
 * @return The node info of the focused view or null.
 *
 * @see AccessibilityNodeInfo#FOCUS_INPUT
 * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY
 */
","/**
 * Find the view that has the specified focus type. The search is performed
 * across all windows.
 * <p>
 * <strong>Note:</strong> In order to access the windows you have to opt-in
 * to retrieve the interactive windows by setting the
 * {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
 * Otherwise, the search will be performed only in the active window.
 * </p>
 *
 * @param focus The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or
 * {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.
 * @return The node info of the focused view or null.
 *
 * @see AccessibilityNodeInfo#FOCUS_INPUT
 * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY
 */
",0,,,0,,,,"1,2","1,5",1,"1,5",1,The return statement now calls `findFocus` with `AccessibilityWindowInfo.ANY_WINDOW_ID` instead of `AccessibilityNodeInfo.ANY_WINDOW_ID`. The parameter type change in the dependent API call qualifies as 1 and 5.,"The change in the parameter type of the `findFocus` method can potentially alter the return value of the API, leading to a compatibility issue classified as type 1."
"<android.net.nsd.NsdServiceInfo: Map<String, byte[]> getAttributes()>",25,26,,,,"{
    return Collections.unmodifiableMap(mTxtRecord);
}","{
    return Collections.unmodifiableMap(mTxtRecord);
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return Collections.unmodifiableMap(mTxtRecord), [VariableReference(return Collections, []), Expression(mTxtRecord, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Collections.unmodifiableMap(mTxtRecord), [VariableReference(return Collections, []), Expression(mTxtRecord, [])])    VariableReference(return Collections, [])    Expression(mTxtRecord, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return Collections.unmodifiableMap(mTxtRecord), [VariableReference(return Collections, []), Expression(mTxtRecord, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Collections.unmodifiableMap(mTxtRecord), [VariableReference(return Collections, []), Expression(mTxtRecord, [])])    VariableReference(return Collections, [])    Expression(mTxtRecord, [])  Statement(}, [])",0,"/**
 * Retrive attributes as a map of String keys to byte[] values.
 *
 * <p> The returned map is unmodifiable; changes must be made through {@link #setAttribute} and
 * {@link #removeAttribute}.
 */
","/**
 * Retrieve attributes as a map of String keys to byte[] values. The attributes map is only
 * valid for a resolved service.
 *
 * <p> The returned map is unmodifiable; changes must be made through {@link #setAttribute} and
 * {@link #removeAttribute}.
 */
",1,,,0,,,,0,0,0,0,0,There is no change between the early and late implementations. The method body in both versions is identical and returns Collections.unmodifiableMap(mTxtRecord).,"Since there is no change in the code between the two versions, there are no potential compatibility issues."
"<android.content.pm.PackageInstaller.SessionParams: void writeToParcel(Parcel,int)>",25,26,,,,"{
    dest.writeInt(mode);
    dest.writeInt(installFlags);
    dest.writeInt(installLocation);
    dest.writeLong(sizeBytes);
    dest.writeString(appPackageName);
    dest.writeParcelable(appIcon, flags);
    dest.writeString(appLabel);
    dest.writeParcelable(originatingUri, flags);
    dest.writeInt(originatingUid);
    dest.writeParcelable(referrerUri, flags);
    dest.writeString(abiOverride);
    dest.writeString(volumeUuid);
    dest.writeStringArray(grantedRuntimePermissions);
}","{
    dest.writeInt(mode);
    dest.writeInt(installFlags);
    dest.writeInt(installLocation);
    dest.writeInt(installReason);
    dest.writeLong(sizeBytes);
    dest.writeString(appPackageName);
    dest.writeParcelable(appIcon, flags);
    dest.writeString(appLabel);
    dest.writeParcelable(originatingUri, flags);
    dest.writeInt(originatingUid);
    dest.writeParcelable(referrerUri, flags);
    dest.writeString(abiOverride);
    dest.writeString(volumeUuid);
    dest.writeStringArray(grantedRuntimePermissions);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeInt(mode), [VariableReference(dest, []), Expression(mode, [])]), MethodCall(dest.writeInt(installFlags), [VariableReference(dest, []), Expression(installFlags, [])]), MethodCall(dest.writeInt(installLocation), [VariableReference(dest, []), Expression(installLocation, [])]), MethodCall(dest.writeLong(sizeBytes), [VariableReference(dest, []), Expression(sizeBytes, [])]), MethodCall(dest.writeString(appPackageName), [VariableReference(dest, []), Expression(appPackageName, [])]), MethodCall(dest.writeParcelable(appIcon, flags), [VariableReference(dest, []), Expression(appIcon, []), Expression(flags, [])]), MethodCall(dest.writeString(appLabel), [VariableReference(dest, []), Expression(appLabel, [])]), MethodCall(dest.writeParcelable(originatingUri, flags), [VariableReference(dest, []), Expression(originatingUri, []), Expression(flags, [])]), MethodCall(dest.writeInt(originatingUid), [VariableReference(dest, []), Expression(originatingUid, [])]), MethodCall(dest.writeParcelable(referrerUri, flags), [VariableReference(dest, []), Expression(referrerUri, []), Expression(flags, [])]), MethodCall(dest.writeString(abiOverride), [VariableReference(dest, []), Expression(abiOverride, [])]), MethodCall(dest.writeString(volumeUuid), [VariableReference(dest, []), Expression(volumeUuid, [])]), MethodCall(dest.writeStringArray(grantedRuntimePermissions), [VariableReference(dest, []), Expression(grantedRuntimePermissions, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeInt(mode), [VariableReference(dest, []), Expression(mode, [])])    VariableReference(dest, [])    Expression(mode, [])  MethodCall(dest.writeInt(installFlags), [VariableReference(dest, []), Expression(installFlags, [])])    VariableReference(dest, [])    Expression(installFlags, [])  MethodCall(dest.writeInt(installLocation), [VariableReference(dest, []), Expression(installLocation, [])])    VariableReference(dest, [])    Expression(installLocation, [])  MethodCall(dest.writeLong(sizeBytes), [VariableReference(dest, []), Expression(sizeBytes, [])])    VariableReference(dest, [])    Expression(sizeBytes, [])  MethodCall(dest.writeString(appPackageName), [VariableReference(dest, []), Expression(appPackageName, [])])    VariableReference(dest, [])    Expression(appPackageName, [])  MethodCall(dest.writeParcelable(appIcon, flags), [VariableReference(dest, []), Expression(appIcon, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(appIcon, [])    Expression(flags, [])  MethodCall(dest.writeString(appLabel), [VariableReference(dest, []), Expression(appLabel, [])])    VariableReference(dest, [])    Expression(appLabel, [])  MethodCall(dest.writeParcelable(originatingUri, flags), [VariableReference(dest, []), Expression(originatingUri, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(originatingUri, [])    Expression(flags, [])  MethodCall(dest.writeInt(originatingUid), [VariableReference(dest, []), Expression(originatingUid, [])])    VariableReference(dest, [])    Expression(originatingUid, [])  MethodCall(dest.writeParcelable(referrerUri, flags), [VariableReference(dest, []), Expression(referrerUri, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(referrerUri, [])    Expression(flags, [])  MethodCall(dest.writeString(abiOverride), [VariableReference(dest, []), Expression(abiOverride, [])])    VariableReference(dest, [])    Expression(abiOverride, [])  MethodCall(dest.writeString(volumeUuid), [VariableReference(dest, []), Expression(volumeUuid, [])])    VariableReference(dest, [])    Expression(volumeUuid, [])  MethodCall(dest.writeStringArray(grantedRuntimePermissions), [VariableReference(dest, []), Expression(grantedRuntimePermissions, [])])    VariableReference(dest, [])    Expression(grantedRuntimePermissions, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeInt(mode), [VariableReference(dest, []), Expression(mode, [])]), MethodCall(dest.writeInt(installFlags), [VariableReference(dest, []), Expression(installFlags, [])]), MethodCall(dest.writeInt(installLocation), [VariableReference(dest, []), Expression(installLocation, [])]), MethodCall(dest.writeInt(installReason), [VariableReference(dest, []), Expression(installReason, [])]), MethodCall(dest.writeLong(sizeBytes), [VariableReference(dest, []), Expression(sizeBytes, [])]), MethodCall(dest.writeString(appPackageName), [VariableReference(dest, []), Expression(appPackageName, [])]), MethodCall(dest.writeParcelable(appIcon, flags), [VariableReference(dest, []), Expression(appIcon, []), Expression(flags, [])]), MethodCall(dest.writeString(appLabel), [VariableReference(dest, []), Expression(appLabel, [])]), MethodCall(dest.writeParcelable(originatingUri, flags), [VariableReference(dest, []), Expression(originatingUri, []), Expression(flags, [])]), MethodCall(dest.writeInt(originatingUid), [VariableReference(dest, []), Expression(originatingUid, [])]), MethodCall(dest.writeParcelable(referrerUri, flags), [VariableReference(dest, []), Expression(referrerUri, []), Expression(flags, [])]), MethodCall(dest.writeString(abiOverride), [VariableReference(dest, []), Expression(abiOverride, [])]), MethodCall(dest.writeString(volumeUuid), [VariableReference(dest, []), Expression(volumeUuid, [])]), MethodCall(dest.writeStringArray(grantedRuntimePermissions), [VariableReference(dest, []), Expression(grantedRuntimePermissions, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeInt(mode), [VariableReference(dest, []), Expression(mode, [])])    VariableReference(dest, [])    Expression(mode, [])  MethodCall(dest.writeInt(installFlags), [VariableReference(dest, []), Expression(installFlags, [])])    VariableReference(dest, [])    Expression(installFlags, [])  MethodCall(dest.writeInt(installLocation), [VariableReference(dest, []), Expression(installLocation, [])])    VariableReference(dest, [])    Expression(installLocation, [])  MethodCall(dest.writeInt(installReason), [VariableReference(dest, []), Expression(installReason, [])])    VariableReference(dest, [])    Expression(installReason, [])  MethodCall(dest.writeLong(sizeBytes), [VariableReference(dest, []), Expression(sizeBytes, [])])    VariableReference(dest, [])    Expression(sizeBytes, [])  MethodCall(dest.writeString(appPackageName), [VariableReference(dest, []), Expression(appPackageName, [])])    VariableReference(dest, [])    Expression(appPackageName, [])  MethodCall(dest.writeParcelable(appIcon, flags), [VariableReference(dest, []), Expression(appIcon, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(appIcon, [])    Expression(flags, [])  MethodCall(dest.writeString(appLabel), [VariableReference(dest, []), Expression(appLabel, [])])    VariableReference(dest, [])    Expression(appLabel, [])  MethodCall(dest.writeParcelable(originatingUri, flags), [VariableReference(dest, []), Expression(originatingUri, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(originatingUri, [])    Expression(flags, [])  MethodCall(dest.writeInt(originatingUid), [VariableReference(dest, []), Expression(originatingUid, [])])    VariableReference(dest, [])    Expression(originatingUid, [])  MethodCall(dest.writeParcelable(referrerUri, flags), [VariableReference(dest, []), Expression(referrerUri, []), Expression(flags, [])])    VariableReference(dest, [])    Expression(referrerUri, [])    Expression(flags, [])  MethodCall(dest.writeString(abiOverride), [VariableReference(dest, []), Expression(abiOverride, [])])    VariableReference(dest, [])    Expression(abiOverride, [])  MethodCall(dest.writeString(volumeUuid), [VariableReference(dest, []), Expression(volumeUuid, [])])    VariableReference(dest, [])    Expression(volumeUuid, [])  MethodCall(dest.writeStringArray(grantedRuntimePermissions), [VariableReference(dest, []), Expression(grantedRuntimePermissions, [])])    VariableReference(dest, [])    Expression(grantedRuntimePermissions, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,4,1,4,0,The late version adds an additional statement `dest.writeInt(installReason);`. This is an additional field being written to the `Parcel`.,"Since it's essentially writing more data to the Parcel without altering any existing functionality or behavior which could lead to differing return values or exceptions, there is no Compatibility Issue."
<android.os.ParcelFileDescriptor.AutoCloseOutputStream: void close()>,28,29,,,,"{
    try {
        mPfd.close();
    } finally {
        super.close();
    }
}","{
    try {
        super.close();
    } finally {
        mPfd.close();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])]), Statement(} finally {, []), MethodCall(super.close(), [VariableReference(super, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])])    VariableReference(mPfd, [])    Expression(, [])  Statement(} finally {, [])  MethodCall(super.close(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(super.close(), [VariableReference(super, []), Expression(, [])]), Statement(} finally {, []), MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(super.close(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(} finally {, [])  MethodCall(mPfd.close(), [VariableReference(mPfd, []), Expression(, [])])    VariableReference(mPfd, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,3,0,3,2,"The order of the statements inside the try-finally block has changed, leading to a change in the control flow. This is a control dependency change, so the change type is 3.","The order of closing the stream methods (super.close() and mPfd.close()) has changed. This could lead to different exceptions being thrown if mPfd.close() fails in the late version before super.close() is called. Hence, the CI type is 2."
"<android.app.usage.UsageStatsManager: List<UsageStats> queryUsageStats(int,long,long)>",28,29,,,,"{
    try {
        @SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice = mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName());
        if (slice != null) {
            return slice.getList();
        }
    } catch (RemoteException e) {
    // fallthrough and return the empty list.
    }
    return Collections.emptyList();
}","{
    try {
        @SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice = mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName());
        if (slice != null) {
            return slice.getList();
        }
    } catch (RemoteException e) {
    // fallthrough and return the empty list.
    }
    return Collections.emptyList();
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(@SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice, []), Expression(mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName()), [])]), AssignmentExpression(=, [VariableReference(if (slice !, []), Expression(null) {, [])]), MethodCall(return slice.getList(), [VariableReference(return slice, []), Expression(, [])]), Statement(}, []), Statement(} catch (RemoteException e) {, []), Statement(// fallthrough and return the empty list., []), Statement(}, []), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(@SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice, []), Expression(mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName()), [])])    VariableReference(@SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice, [])    Expression(mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName()), [])  AssignmentExpression(=, [VariableReference(if (slice !, []), Expression(null) {, [])])    VariableReference(if (slice !, [])    Expression(null) {, [])  MethodCall(return slice.getList(), [VariableReference(return slice, []), Expression(, [])])    VariableReference(return slice, [])    Expression(, [])  Statement(}, [])  Statement(} catch (RemoteException e) {, [])  Statement(// fallthrough and return the empty list., [])  Statement(}, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(@SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice, []), Expression(mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName()), [])]), AssignmentExpression(=, [VariableReference(if (slice !, []), Expression(null) {, [])]), MethodCall(return slice.getList(), [VariableReference(return slice, []), Expression(, [])]), Statement(}, []), Statement(} catch (RemoteException e) {, []), Statement(// fallthrough and return the empty list., []), Statement(}, []), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(@SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice, []), Expression(mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName()), [])])    VariableReference(@SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice, [])    Expression(mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName()), [])  AssignmentExpression(=, [VariableReference(if (slice !, []), Expression(null) {, [])])    VariableReference(if (slice !, [])    Expression(null) {, [])  MethodCall(return slice.getList(), [VariableReference(return slice, []), Expression(, [])])    VariableReference(return slice, [])    Expression(, [])  Statement(}, [])  Statement(} catch (RemoteException e) {, [])  Statement(// fallthrough and return the empty list., [])  Statement(}, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])",0,"/**
 * Gets application usage stats for the given time range, aggregated by the specified interval.
 * <p>The returned list will contain a {@link UsageStats} object for each package that
 * has data for an interval that is a subset of the time range given. To illustrate:</p>
 * <pre>
 * intervalType = INTERVAL_YEARLY
 * beginTime = 2013
 * endTime = 2015 (exclusive)
 *
 * Results:
 * 2013 - com.example.alpha
 * 2013 - com.example.beta
 * 2014 - com.example.alpha
 * 2014 - com.example.beta
 * 2014 - com.example.charlie
 * </pre>
 *
 * <p> The caller must have {@link android.Manifest.permission#PACKAGE_USAGE_STATS} </p>
 *
 * @param intervalType The time interval by which the stats are aggregated.
 * @param beginTime The inclusive beginning of the range of stats to include in the results.
 * @param endTime The exclusive end of the range of stats to include in the results.
 * @return A list of {@link UsageStats}
 *
 * @see #INTERVAL_DAILY
 * @see #INTERVAL_WEEKLY
 * @see #INTERVAL_MONTHLY
 * @see #INTERVAL_YEARLY
 * @see #INTERVAL_BEST
 */
","/**
 * Gets application usage stats for the given time range, aggregated by the specified interval.
 *
 * <p>
 * The returned list will contain one or more {@link UsageStats} objects for each package, with
 * usage data that covers at least the given time range.
 * Note: The begin and end times of the time range may be expanded to the nearest whole interval
 * period.
 * </p>
 *
 * <p> The caller must have {@link android.Manifest.permission#PACKAGE_USAGE_STATS} </p>
 *
 * @param intervalType The time interval by which the stats are aggregated.
 * @param beginTime The inclusive beginning of the range of stats to include in the results.
 * Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime The exclusive end of the range of stats to include in the results. Defined
 * in terms of ""Unix time"", see {@link java.lang.System#currentTimeMillis}.
 * @return A list of {@link UsageStats}
 *
 * @see #INTERVAL_DAILY
 * @see #INTERVAL_WEEKLY
 * @see #INTERVAL_MONTHLY
 * @see #INTERVAL_YEARLY
 * @see #INTERVAL_BEST
 */
",1,,,0,,,,0,0,0,0,0,"The method implementations in the early and late versions are identical. There are no changes in the code, so the change type is 0 (No change).","Since there are no changes in the code, there is no potential for compatibility issues. The CI type is 0 (No Compatibility Issue)."
"<android.view.LayoutInflater: View createViewFromTag(View,String,Context,AttributeSet,boolean)>",28,29,,,,"{
    if (name.equals(""view"")) {
        name = attrs.getAttributeValue(null, ""class"");
    }
    // Apply a theme wrapper, if allowed and one is specified.
    if (!ignoreThemeAttr) {
        final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);
        final int themeResId = ta.getResourceId(0, 0);
        if (themeResId != 0) {
            context = new ContextThemeWrapper(context, themeResId);
        }
        ta.recycle();
    }
    if (name.equals(TAG_1995)) {
        // Let's party like it's 1995!
        return new BlinkLayout(context, attrs);
    }
    try {
        View view;
        if (mFactory2 != null) {
            view = mFactory2.onCreateView(parent, name, context, attrs);
        } else if (mFactory != null) {
            view = mFactory.onCreateView(name, context, attrs);
        } else {
            view = null;
        }
        if (view == null && mPrivateFactory != null) {
            view = mPrivateFactory.onCreateView(parent, name, context, attrs);
        }
        if (view == null) {
            final Object lastContext = mConstructorArgs[0];
            mConstructorArgs[0] = context;
            try {
                if (-1 == name.indexOf('.')) {
                    view = onCreateView(parent, name, attrs);
                } else {
                    view = createView(name, null, attrs);
                }
            } finally {
                mConstructorArgs[0] = lastContext;
            }
        }
        return view;
    } catch (InflateException e) {
        throw e;
    } catch (ClassNotFoundException e) {
        final InflateException ie = new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    } catch (Exception e) {
        final InflateException ie = new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    }
}","{
    if (name.equals(""view"")) {
        name = attrs.getAttributeValue(null, ""class"");
    }
    // Apply a theme wrapper, if allowed and one is specified.
    if (!ignoreThemeAttr) {
        final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);
        final int themeResId = ta.getResourceId(0, 0);
        if (themeResId != 0) {
            context = new ContextThemeWrapper(context, themeResId);
        }
        ta.recycle();
    }
    try {
        View view = tryCreateView(parent, name, context, attrs);
        if (view == null) {
            final Object lastContext = mConstructorArgs[0];
            mConstructorArgs[0] = context;
            try {
                if (-1 == name.indexOf('.')) {
                    view = onCreateView(context, parent, name, attrs);
                } else {
                    view = createView(context, name, null, attrs);
                }
            } finally {
                mConstructorArgs[0] = lastContext;
            }
        }
        return view;
    } catch (InflateException e) {
        throw e;
    } catch (ClassNotFoundException e) {
        final InflateException ie = new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    } catch (Exception e) {
        final InflateException ie = new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(if (name.equals(""view"")), [VariableReference(if (name, []), Expression(""view""), [])]), AssignmentExpression(=, [VariableReference(name, []), Expression(attrs.getAttributeValue(null, ""class""), [])]), Statement(}, []), Statement(// Apply a theme wrapper, if allowed and one is specified., []), Statement(if (!ignoreThemeAttr) {, []), AssignmentExpression(=, [VariableReference(final TypedArray ta, []), Expression(context.obtainStyledAttributes(attrs, ATTRS_THEME), [])]), AssignmentExpression(=, [VariableReference(final int themeResId, []), Expression(ta.getResourceId(0, 0), [])]), AssignmentExpression(=, [VariableReference(if (themeResId !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(context, []), Expression(new ContextThemeWrapper(context, themeResId), [])]), Statement(}, []), MethodCall(ta.recycle(), [VariableReference(ta, []), Expression(, [])]), Statement(}, []), MethodCall(if (name.equals(TAG_1995)), [VariableReference(if (name, []), Expression(TAG_1995), [])]), Statement(// Let's party like it's 1995!, []), Statement(return new BlinkLayout(context, attrs), []), Statement(}, []), Statement(try {, []), Statement(View view, []), AssignmentExpression(=, [VariableReference(if (mFactory2 !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(view, []), Expression(mFactory2.onCreateView(parent, name, context, attrs), [])]), AssignmentExpression(=, [VariableReference(} else if (mFactory !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(view, []), Expression(mFactory.onCreateView(name, context, attrs), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(view, []), Expression(null, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (view, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(view, []), Expression(mPrivateFactory.onCreateView(parent, name, context, attrs), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (view, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final Object lastContext, []), Expression(mConstructorArgs[0], [])]), AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(context, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (-1, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(view, []), Expression(onCreateView(parent, name, attrs), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(view, []), Expression(createView(name, null, attrs), [])]), Statement(}, []), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(lastContext, [])]), Statement(}, []), Statement(}, []), Statement(return view, []), Statement(} catch (InflateException e) {, []), Statement(throw e, []), Statement(} catch (ClassNotFoundException e) {, []), AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e), [])]), MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])]), Statement(throw ie, []), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e), [])]), MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])]), Statement(throw ie, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(if (name.equals(""view"")), [VariableReference(if (name, []), Expression(""view""), [])])    VariableReference(if (name, [])    Expression(""view""), [])  AssignmentExpression(=, [VariableReference(name, []), Expression(attrs.getAttributeValue(null, ""class""), [])])    VariableReference(name, [])    Expression(attrs.getAttributeValue(null, ""class""), [])  Statement(}, [])  Statement(// Apply a theme wrapper, if allowed and one is specified., [])  Statement(if (!ignoreThemeAttr) {, [])  AssignmentExpression(=, [VariableReference(final TypedArray ta, []), Expression(context.obtainStyledAttributes(attrs, ATTRS_THEME), [])])    VariableReference(final TypedArray ta, [])    Expression(context.obtainStyledAttributes(attrs, ATTRS_THEME), [])  AssignmentExpression(=, [VariableReference(final int themeResId, []), Expression(ta.getResourceId(0, 0), [])])    VariableReference(final int themeResId, [])    Expression(ta.getResourceId(0, 0), [])  AssignmentExpression(=, [VariableReference(if (themeResId !, []), Expression(0) {, [])])    VariableReference(if (themeResId !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(context, []), Expression(new ContextThemeWrapper(context, themeResId), [])])    VariableReference(context, [])    Expression(new ContextThemeWrapper(context, themeResId), [])  Statement(}, [])  MethodCall(ta.recycle(), [VariableReference(ta, []), Expression(, [])])    VariableReference(ta, [])    Expression(, [])  Statement(}, [])  MethodCall(if (name.equals(TAG_1995)), [VariableReference(if (name, []), Expression(TAG_1995), [])])    VariableReference(if (name, [])    Expression(TAG_1995), [])  Statement(// Let's party like it's 1995!, [])  Statement(return new BlinkLayout(context, attrs), [])  Statement(}, [])  Statement(try {, [])  Statement(View view, [])  AssignmentExpression(=, [VariableReference(if (mFactory2 !, []), Expression(null) {, [])])    VariableReference(if (mFactory2 !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(mFactory2.onCreateView(parent, name, context, attrs), [])])    VariableReference(view, [])    Expression(mFactory2.onCreateView(parent, name, context, attrs), [])  AssignmentExpression(=, [VariableReference(} else if (mFactory !, []), Expression(null) {, [])])    VariableReference(} else if (mFactory !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(mFactory.onCreateView(name, context, attrs), [])])    VariableReference(view, [])    Expression(mFactory.onCreateView(name, context, attrs), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(null, [])])    VariableReference(view, [])    Expression(null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (view, []), Expression(, [])])    VariableReference(if (view, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(mPrivateFactory.onCreateView(parent, name, context, attrs), [])])    VariableReference(view, [])    Expression(mPrivateFactory.onCreateView(parent, name, context, attrs), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (view, []), Expression(, [])])    VariableReference(if (view, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final Object lastContext, []), Expression(mConstructorArgs[0], [])])    VariableReference(final Object lastContext, [])    Expression(mConstructorArgs[0], [])  AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(context, [])])    VariableReference(mConstructorArgs[0], [])    Expression(context, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (-1, []), Expression(, [])])    VariableReference(if (-1, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(onCreateView(parent, name, attrs), [])])    VariableReference(view, [])    Expression(onCreateView(parent, name, attrs), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(createView(name, null, attrs), [])])    VariableReference(view, [])    Expression(createView(name, null, attrs), [])  Statement(}, [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(lastContext, [])])    VariableReference(mConstructorArgs[0], [])    Expression(lastContext, [])  Statement(}, [])  Statement(}, [])  Statement(return view, [])  Statement(} catch (InflateException e) {, [])  Statement(throw e, [])  Statement(} catch (ClassNotFoundException e) {, [])  AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e), [])])    VariableReference(final InflateException ie, [])    Expression(new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e), [])  MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])])    VariableReference(ie, [])    Expression(EMPTY_STACK_TRACE, [])  Statement(throw ie, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e), [])])    VariableReference(final InflateException ie, [])    Expression(new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e), [])  MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])])    VariableReference(ie, [])    Expression(EMPTY_STACK_TRACE, [])  Statement(throw ie, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(if (name.equals(""view"")), [VariableReference(if (name, []), Expression(""view""), [])]), AssignmentExpression(=, [VariableReference(name, []), Expression(attrs.getAttributeValue(null, ""class""), [])]), Statement(}, []), Statement(// Apply a theme wrapper, if allowed and one is specified., []), Statement(if (!ignoreThemeAttr) {, []), AssignmentExpression(=, [VariableReference(final TypedArray ta, []), Expression(context.obtainStyledAttributes(attrs, ATTRS_THEME), [])]), AssignmentExpression(=, [VariableReference(final int themeResId, []), Expression(ta.getResourceId(0, 0), [])]), AssignmentExpression(=, [VariableReference(if (themeResId !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(context, []), Expression(new ContextThemeWrapper(context, themeResId), [])]), Statement(}, []), MethodCall(ta.recycle(), [VariableReference(ta, []), Expression(, [])]), Statement(}, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(View view, []), Expression(tryCreateView(parent, name, context, attrs), [])]), AssignmentExpression(=, [VariableReference(if (view, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final Object lastContext, []), Expression(mConstructorArgs[0], [])]), AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(context, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (-1, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(view, []), Expression(onCreateView(context, parent, name, attrs), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(view, []), Expression(createView(context, name, null, attrs), [])]), Statement(}, []), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(lastContext, [])]), Statement(}, []), Statement(}, []), Statement(return view, []), Statement(} catch (InflateException e) {, []), Statement(throw e, []), Statement(} catch (ClassNotFoundException e) {, []), AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e), [])]), MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])]), Statement(throw ie, []), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e), [])]), MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])]), Statement(throw ie, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(if (name.equals(""view"")), [VariableReference(if (name, []), Expression(""view""), [])])    VariableReference(if (name, [])    Expression(""view""), [])  AssignmentExpression(=, [VariableReference(name, []), Expression(attrs.getAttributeValue(null, ""class""), [])])    VariableReference(name, [])    Expression(attrs.getAttributeValue(null, ""class""), [])  Statement(}, [])  Statement(// Apply a theme wrapper, if allowed and one is specified., [])  Statement(if (!ignoreThemeAttr) {, [])  AssignmentExpression(=, [VariableReference(final TypedArray ta, []), Expression(context.obtainStyledAttributes(attrs, ATTRS_THEME), [])])    VariableReference(final TypedArray ta, [])    Expression(context.obtainStyledAttributes(attrs, ATTRS_THEME), [])  AssignmentExpression(=, [VariableReference(final int themeResId, []), Expression(ta.getResourceId(0, 0), [])])    VariableReference(final int themeResId, [])    Expression(ta.getResourceId(0, 0), [])  AssignmentExpression(=, [VariableReference(if (themeResId !, []), Expression(0) {, [])])    VariableReference(if (themeResId !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(context, []), Expression(new ContextThemeWrapper(context, themeResId), [])])    VariableReference(context, [])    Expression(new ContextThemeWrapper(context, themeResId), [])  Statement(}, [])  MethodCall(ta.recycle(), [VariableReference(ta, []), Expression(, [])])    VariableReference(ta, [])    Expression(, [])  Statement(}, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(View view, []), Expression(tryCreateView(parent, name, context, attrs), [])])    VariableReference(View view, [])    Expression(tryCreateView(parent, name, context, attrs), [])  AssignmentExpression(=, [VariableReference(if (view, []), Expression(, [])])    VariableReference(if (view, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final Object lastContext, []), Expression(mConstructorArgs[0], [])])    VariableReference(final Object lastContext, [])    Expression(mConstructorArgs[0], [])  AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(context, [])])    VariableReference(mConstructorArgs[0], [])    Expression(context, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (-1, []), Expression(, [])])    VariableReference(if (-1, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(onCreateView(context, parent, name, attrs), [])])    VariableReference(view, [])    Expression(onCreateView(context, parent, name, attrs), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(view, []), Expression(createView(context, name, null, attrs), [])])    VariableReference(view, [])    Expression(createView(context, name, null, attrs), [])  Statement(}, [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(mConstructorArgs[0], []), Expression(lastContext, [])])    VariableReference(mConstructorArgs[0], [])    Expression(lastContext, [])  Statement(}, [])  Statement(}, [])  Statement(return view, [])  Statement(} catch (InflateException e) {, [])  Statement(throw e, [])  Statement(} catch (ClassNotFoundException e) {, [])  AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e), [])])    VariableReference(final InflateException ie, [])    Expression(new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e), [])  MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])])    VariableReference(ie, [])    Expression(EMPTY_STACK_TRACE, [])  Statement(throw ie, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(final InflateException ie, []), Expression(new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e), [])])    VariableReference(final InflateException ie, [])    Expression(new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e), [])  MethodCall(ie.setStackTrace(EMPTY_STACK_TRACE), [VariableReference(ie, []), Expression(EMPTY_STACK_TRACE, [])])    VariableReference(ie, [])    Expression(EMPTY_STACK_TRACE, [])  Statement(throw ie, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Creates a view from a tag name using the supplied attribute set.
 * <p>
 * <strong>Note:</strong> Default visibility so the BridgeInflater can
 * override it.
 *
 * @param parent the parent view, used to inflate layout params
 * @param name the name of the XML tag used to define the view
 * @param context the inflation context for the view, typically the
 * {@code parent} or base layout inflater context
 * @param attrs the attribute set for the XML tag used to define the view
 * @param ignoreThemeAttr {@code true} to ignore the {@code android:theme}
 * attribute (if set) for the view being inflated,
 * {@code false} otherwise
 */
","/**
 * Creates a view from a tag name using the supplied attribute set.
 * <p>
 * <strong>Note:</strong> Default visibility so the BridgeInflater can
 * override it.
 *
 * @param parent the parent view, used to inflate layout params
 * @param name the name of the XML tag used to define the view
 * @param context the inflation context for the view, typically the
 * {@code parent} or base layout inflater context
 * @param attrs the attribute set for the XML tag used to define the view
 * @param ignoreThemeAttr {@code true} to ignore the {@code android:theme}
 * attribute (if set) for the view being inflated,
 * {@code false} otherwise
 */
",0,,[@UnsupportedAppUsage],1,,,,"1,2","1,3,4,5",1,"3,4,5",1,"The major changes in the code include: modification of control dependencies with the introduction of `tryCreateView` method and removal of some `if` conditions, changes in other statements such as the final context object passed in method calls, and change in the dependent API with the introduction of `tryCreateView` method.","These changes can cause the method to exhibit different behavior, especially in how `view` is created, and therefore, the CI type is 1."
"<android.view.textclassifier.TextLinks.Builder: Builder addLink(int,int,Map<String, Float>)>",28,29,,,,"{
    mLinks.add(new TextLink(start, end, entityScores, null));
    return this;
}","{
    return addLink(start, end, entityScores, Bundle.EMPTY, null);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mLinks.add(new TextLink(start, end, entityScores, null)), [VariableReference(mLinks, []), Expression(new TextLink(start, []), Expression(end, []), Expression(entityScores, []), Expression(null), [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(mLinks.add(new TextLink(start, end, entityScores, null)), [VariableReference(mLinks, []), Expression(new TextLink(start, []), Expression(end, []), Expression(entityScores, []), Expression(null), [])])    VariableReference(mLinks, [])    Expression(new TextLink(start, [])    Expression(end, [])    Expression(entityScores, [])    Expression(null), [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",1,"/**
 * Adds a TextLink.
 *
 * @param start The start index of the identified subsequence
 * @param end The end index of the identified subsequence
 * @param entityScores A mapping of entity type to confidence score
 *
 * @throws IllegalArgumentException if entityScores is null or empty.
 */
","/**
 * Adds a TextLink.
 *
 * @param start The start index of the identified subsequence
 * @param end The end index of the identified subsequence
 * @param entityScores A mapping of entity type to confidence score
 *
 * @throws IllegalArgumentException if entityScores is null or empty.
 */
",0,[@NonNull],[@NonNull],0,,,,"1,2","1,5",1,"4,5",0,"The implementation in the late version has changed to use the `addLink` method call with additional parameters instead of directly adding a new `TextLink` to `mLinks`. The dependent API change (method call) replaced the original implementation, so the code change type is 4,5.",There is no direct Compatibility Issue since the underlying method call changes the internal handling but does not affect the return type or exception handling directly in a way that would impact the API's outward behavior.
<android.view.inputmethod.InputMethodManager: InputMethodSubtype getLastInputMethodSubtype()>,28,29,,,,"{
    synchronized (mH) {
        try {
            return mService.getLastInputMethodSubtype();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}","{
    try {
        return mService.getLastInputMethodSubtype();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mH) {, []), Statement(try {, []), MethodCall(return mService.getLastInputMethodSubtype(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mH) {, [])  Statement(try {, [])  MethodCall(return mService.getLastInputMethodSubtype(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.getLastInputMethodSubtype(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.getLastInputMethodSubtype(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,1,4,0,3,0,"The `synchronized (mH)` block has been removed in the late version, which is a change in the control dependency, so the change type is 3.","Removing the `synchronized` block might change the thread-safety properties of the method, but it does not directly impact the return value or exception handling of the method. Therefore, it doesn't lead to a potential Compatibility Issue in terms of return values or exceptions, so the CI type is 0."
<android.util.ArrayMap: String toString()>,28,29,,,,"{
    if (isEmpty()) {
        return ""{}"";
    }
    StringBuilder buffer = new StringBuilder(mSize * 28);
    buffer.append('{');
    for (int i = 0; i < mSize; i++) {
        if (i > 0) {
            buffer.append("", "");
        }
        Object key = keyAt(i);
        if (key != this) {
            buffer.append(key);
        } else {
            buffer.append(""(this Map)"");
        }
        buffer.append('=');
        Object value = valueAt(i);
        if (value != this) {
            buffer.append(value);
        } else {
            buffer.append(""(this Map)"");
        }
    }
    buffer.append('}');
    return buffer.toString();
}","{
    if (isEmpty()) {
        return ""{}"";
    }
    StringBuilder buffer = new StringBuilder(mSize * 28);
    buffer.append('{');
    for (int i = 0; i < mSize; i++) {
        if (i > 0) {
            buffer.append("", "");
        }
        Object key = keyAt(i);
        if (key != this) {
            buffer.append(key);
        } else {
            buffer.append(""(this Map)"");
        }
        buffer.append('=');
        Object value = valueAt(i);
        if (value != this) {
            buffer.append(ArrayUtils.deepToString(value));
        } else {
            buffer.append(""(this Map)"");
        }
    }
    buffer.append('}');
    return buffer.toString();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (isEmpty()) {, []), Statement(return ""{}"", []), Statement(}, []), AssignmentExpression(=, [VariableReference(StringBuilder buffer, []), Expression(new StringBuilder(mSize * 28), [])]), MethodCall(buffer.append('{'), [VariableReference(buffer, []), Expression('{', [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < mSize, []), Statement(i++) {, []), Statement(if (i > 0) {, []), MethodCall(buffer.append("", ""), [VariableReference(buffer, []), Expression("", []), Expression("", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(Object key, []), Expression(keyAt(i), [])]), AssignmentExpression(=, [VariableReference(if (key !, []), Expression(this) {, [])]), MethodCall(buffer.append(key), [VariableReference(buffer, []), Expression(key, [])]), Statement(} else {, []), MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(buffer.append(', []), Expression('), [])]), AssignmentExpression(=, [VariableReference(Object value, []), Expression(valueAt(i), [])]), AssignmentExpression(=, [VariableReference(if (value !, []), Expression(this) {, [])]), MethodCall(buffer.append(value), [VariableReference(buffer, []), Expression(value, [])]), Statement(} else {, []), MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])]), Statement(}, []), Statement(}, []), MethodCall(buffer.append('}'), [VariableReference(buffer, []), Expression('}', [])]), MethodCall(return buffer.toString(), [VariableReference(return buffer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (isEmpty()) {, [])  Statement(return ""{}"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(StringBuilder buffer, []), Expression(new StringBuilder(mSize * 28), [])])    VariableReference(StringBuilder buffer, [])    Expression(new StringBuilder(mSize * 28), [])  MethodCall(buffer.append('{'), [VariableReference(buffer, []), Expression('{', [])])    VariableReference(buffer, [])    Expression('{', [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < mSize, [])  Statement(i++) {, [])  Statement(if (i > 0) {, [])  MethodCall(buffer.append("", ""), [VariableReference(buffer, []), Expression("", []), Expression("", [])])    VariableReference(buffer, [])    Expression("", [])    Expression("", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Object key, []), Expression(keyAt(i), [])])    VariableReference(Object key, [])    Expression(keyAt(i), [])  AssignmentExpression(=, [VariableReference(if (key !, []), Expression(this) {, [])])    VariableReference(if (key !, [])    Expression(this) {, [])  MethodCall(buffer.append(key), [VariableReference(buffer, []), Expression(key, [])])    VariableReference(buffer, [])    Expression(key, [])  Statement(} else {, [])  MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])])    VariableReference(buffer, [])    Expression(""(this Map)"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(buffer.append(', []), Expression('), [])])    VariableReference(buffer.append(', [])    Expression('), [])  AssignmentExpression(=, [VariableReference(Object value, []), Expression(valueAt(i), [])])    VariableReference(Object value, [])    Expression(valueAt(i), [])  AssignmentExpression(=, [VariableReference(if (value !, []), Expression(this) {, [])])    VariableReference(if (value !, [])    Expression(this) {, [])  MethodCall(buffer.append(value), [VariableReference(buffer, []), Expression(value, [])])    VariableReference(buffer, [])    Expression(value, [])  Statement(} else {, [])  MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])])    VariableReference(buffer, [])    Expression(""(this Map)"", [])  Statement(}, [])  Statement(}, [])  MethodCall(buffer.append('}'), [VariableReference(buffer, []), Expression('}', [])])    VariableReference(buffer, [])    Expression('}', [])  MethodCall(return buffer.toString(), [VariableReference(return buffer, []), Expression(, [])])    VariableReference(return buffer, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (isEmpty()) {, []), Statement(return ""{}"", []), Statement(}, []), AssignmentExpression(=, [VariableReference(StringBuilder buffer, []), Expression(new StringBuilder(mSize * 28), [])]), MethodCall(buffer.append('{'), [VariableReference(buffer, []), Expression('{', [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < mSize, []), Statement(i++) {, []), Statement(if (i > 0) {, []), MethodCall(buffer.append("", ""), [VariableReference(buffer, []), Expression("", []), Expression("", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(Object key, []), Expression(keyAt(i), [])]), AssignmentExpression(=, [VariableReference(if (key !, []), Expression(this) {, [])]), MethodCall(buffer.append(key), [VariableReference(buffer, []), Expression(key, [])]), Statement(} else {, []), MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(buffer.append(', []), Expression('), [])]), AssignmentExpression(=, [VariableReference(Object value, []), Expression(valueAt(i), [])]), AssignmentExpression(=, [VariableReference(if (value !, []), Expression(this) {, [])]), MethodCall(buffer.append(ArrayUtils.deepToString(value)), [VariableReference(buffer, []), Expression(ArrayUtils.deepToString(value), [])]), Statement(} else {, []), MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])]), Statement(}, []), Statement(}, []), MethodCall(buffer.append('}'), [VariableReference(buffer, []), Expression('}', [])]), MethodCall(return buffer.toString(), [VariableReference(return buffer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (isEmpty()) {, [])  Statement(return ""{}"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(StringBuilder buffer, []), Expression(new StringBuilder(mSize * 28), [])])    VariableReference(StringBuilder buffer, [])    Expression(new StringBuilder(mSize * 28), [])  MethodCall(buffer.append('{'), [VariableReference(buffer, []), Expression('{', [])])    VariableReference(buffer, [])    Expression('{', [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < mSize, [])  Statement(i++) {, [])  Statement(if (i > 0) {, [])  MethodCall(buffer.append("", ""), [VariableReference(buffer, []), Expression("", []), Expression("", [])])    VariableReference(buffer, [])    Expression("", [])    Expression("", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Object key, []), Expression(keyAt(i), [])])    VariableReference(Object key, [])    Expression(keyAt(i), [])  AssignmentExpression(=, [VariableReference(if (key !, []), Expression(this) {, [])])    VariableReference(if (key !, [])    Expression(this) {, [])  MethodCall(buffer.append(key), [VariableReference(buffer, []), Expression(key, [])])    VariableReference(buffer, [])    Expression(key, [])  Statement(} else {, [])  MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])])    VariableReference(buffer, [])    Expression(""(this Map)"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(buffer.append(', []), Expression('), [])])    VariableReference(buffer.append(', [])    Expression('), [])  AssignmentExpression(=, [VariableReference(Object value, []), Expression(valueAt(i), [])])    VariableReference(Object value, [])    Expression(valueAt(i), [])  AssignmentExpression(=, [VariableReference(if (value !, []), Expression(this) {, [])])    VariableReference(if (value !, [])    Expression(this) {, [])  MethodCall(buffer.append(ArrayUtils.deepToString(value)), [VariableReference(buffer, []), Expression(ArrayUtils.deepToString(value), [])])    VariableReference(buffer, [])    Expression(ArrayUtils.deepToString(value), [])  Statement(} else {, [])  MethodCall(buffer.append(""(this Map)""), [VariableReference(buffer, []), Expression(""(this Map)"", [])])    VariableReference(buffer, [])    Expression(""(this Map)"", [])  Statement(}, [])  Statement(}, [])  MethodCall(buffer.append('}'), [VariableReference(buffer, []), Expression('}', [])])    VariableReference(buffer, [])    Expression('}', [])  MethodCall(return buffer.toString(), [VariableReference(return buffer, []), Expression(, [])])    VariableReference(return buffer, [])    Expression(, [])  Statement(}, [])",1,"/**
 * {@inheritDoc}
 *
 * <p>This implementation composes a string by iterating over its mappings. If
 * this map contains itself as a key or a value, the string ""(this Map)""
 * will appear in its place.
 */
","/**
 * {@inheritDoc}
 *
 * <p>This implementation composes a string by iterating over its mappings. If
 * this map contains itself as a key or a value, the string ""(this Map)""
 * will appear in its place.
 */
",0,[@Override],[@Override],0,,,,"1,2",4,1,1,1,"In the late version, the `value` is processed with `ArrayUtils.deepToString(value)` before being appended to the `buffer`, whereas in the early version, the `value` is appended directly. This constitutes a change in the return statement, so the change type is 1.","The modification in how `value` is appended (using `ArrayUtils.deepToString(value)`) can lead to different return values (string representation of the map), thus causing a Compatibility Issue. Therefore, the CI type is 1."
<android.hardware.camera2.CameraMetadata: List<TKey> getKeys()>,28,29,,,,"{
    Class<CameraMetadata<TKey>> thisClass = (Class<CameraMetadata<TKey>>) getClass();
    return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), this, /*filterTags*/
    null));
}","{
    Class<CameraMetadata<TKey>> thisClass = (Class<CameraMetadata<TKey>>) getClass();
    return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), this, /*filterTags*/
    null, /*includeSynthetic*/
    true));
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Class<CameraMetadata<TKey>> thisClass, []), Expression((Class<CameraMetadata<TKey>>) getClass(), [])]), MethodCall(return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), [VariableReference(return Collections, []), Expression(getKeys(thisClass, []), Expression(getKeyClass(, [])]), Statement(null)), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Class<CameraMetadata<TKey>> thisClass, []), Expression((Class<CameraMetadata<TKey>>) getClass(), [])])    VariableReference(Class<CameraMetadata<TKey>> thisClass, [])    Expression((Class<CameraMetadata<TKey>>) getClass(), [])  MethodCall(return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), [VariableReference(return Collections, []), Expression(getKeys(thisClass, []), Expression(getKeyClass(, [])])    VariableReference(return Collections, [])    Expression(getKeys(thisClass, [])    Expression(getKeyClass(, [])  Statement(null)), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Class<CameraMetadata<TKey>> thisClass, []), Expression((Class<CameraMetadata<TKey>>) getClass(), [])]), MethodCall(return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), [VariableReference(return Collections, []), Expression(getKeys(thisClass, []), Expression(getKeyClass(, [])]), Statement(null, /*includeSynthetic*/, []), Statement(true)), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Class<CameraMetadata<TKey>> thisClass, []), Expression((Class<CameraMetadata<TKey>>) getClass(), [])])    VariableReference(Class<CameraMetadata<TKey>> thisClass, [])    Expression((Class<CameraMetadata<TKey>>) getClass(), [])  MethodCall(return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), [VariableReference(return Collections, []), Expression(getKeys(thisClass, []), Expression(getKeyClass(, [])])    VariableReference(return Collections, [])    Expression(getKeys(thisClass, [])    Expression(getKeyClass(, [])  Statement(null, /*includeSynthetic*/, [])  Statement(true)), [])  Statement(}, [])",1,"/**
 * Returns a list of the keys contained in this map.
 *
 * <p>The list returned is not modifiable, so any attempts to modify it will throw
 * a {@code UnsupportedOperationException}.</p>
 *
 * <p>All values retrieved by a key from this list with {@code #get} are guaranteed to be
 * non-{@code null}. Each key is only listed once in the list. The order of the keys
 * is undefined.</p>
 *
 * @return List of the keys contained in this map.
 */
","/**
 * Returns a list of the keys contained in this map.
 *
 * <p>The list returned is not modifiable, so any attempts to modify it will throw
 * a {@code UnsupportedOperationException}.</p>
 *
 * <p>All values retrieved by a key from this list with {@code #get} are guaranteed to be
 * non-{@code null}. Each key is only listed once in the list. The order of the keys
 * is undefined.</p>
 *
 * @return List of the keys contained in this map.
 */
",0,"[@SuppressWarnings(""unchecked""), @NonNull]","[@SuppressWarnings(""unchecked""), @NonNull]",0,,,,2,"1,5",1,"3,5",1,"The parameters of the `getKeys` method have changed in the late version, with an additional parameter `true` for `includeSynthetic`. This results in a control dependency change and a potential dependent API change, so the code change type is 3,5.","The changes in the parameters sent to `getKeys` can lead to different returned values since the behavior of `getKeys` may differ based on the `includeSynthetic` parameter. Therefore, the CI type is 1."
<android.app.Activity: int getRequestedOrientation()>,28,29,,,,"{
    if (mParent == null) {
        try {
            return ActivityManager.getService().getRequestedOrientation(mToken);
        } catch (RemoteException e) {
        // Empty
        }
    } else {
        return mParent.getRequestedOrientation();
    }
    return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
}","{
    if (mParent == null) {
        try {
            return ActivityTaskManager.getService().getRequestedOrientation(mToken);
        } catch (RemoteException e) {
        // Empty
        }
    } else {
        return mParent.getRequestedOrientation();
    }
    return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])]), Statement(try {, []), MethodCall(return ActivityManager.getService().getRequestedOrientation(mToken), [VariableReference(return ActivityManager, []), Expression().getRequestedOrientation(mToken, [])]), Statement(} catch (RemoteException e) {, []), Statement(// Empty, []), Statement(}, []), Statement(} else {, []), MethodCall(return mParent.getRequestedOrientation(), [VariableReference(return mParent, []), Expression(, [])]), Statement(}, []), Statement(return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])])    VariableReference(if (mParent, [])    Expression(, [])  Statement(try {, [])  MethodCall(return ActivityManager.getService().getRequestedOrientation(mToken), [VariableReference(return ActivityManager, []), Expression().getRequestedOrientation(mToken, [])])    VariableReference(return ActivityManager, [])    Expression().getRequestedOrientation(mToken, [])  Statement(} catch (RemoteException e) {, [])  Statement(// Empty, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(return mParent.getRequestedOrientation(), [VariableReference(return mParent, []), Expression(, [])])    VariableReference(return mParent, [])    Expression(, [])  Statement(}, [])  Statement(return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])]), Statement(try {, []), MethodCall(return ActivityTaskManager.getService().getRequestedOrientation(mToken), [VariableReference(return ActivityTaskManager, []), Expression().getRequestedOrientation(mToken, [])]), Statement(} catch (RemoteException e) {, []), Statement(// Empty, []), Statement(}, []), Statement(} else {, []), MethodCall(return mParent.getRequestedOrientation(), [VariableReference(return mParent, []), Expression(, [])]), Statement(}, []), Statement(return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])])    VariableReference(if (mParent, [])    Expression(, [])  Statement(try {, [])  MethodCall(return ActivityTaskManager.getService().getRequestedOrientation(mToken), [VariableReference(return ActivityTaskManager, []), Expression().getRequestedOrientation(mToken, [])])    VariableReference(return ActivityTaskManager, [])    Expression().getRequestedOrientation(mToken, [])  Statement(} catch (RemoteException e) {, [])  Statement(// Empty, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(return mParent.getRequestedOrientation(), [VariableReference(return mParent, []), Expression(, [])])    VariableReference(return mParent, [])    Expression(, [])  Statement(}, [])  Statement(return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, [])  Statement(}, [])",1,"/**
 * Return the current requested orientation of the activity.  This will
 * either be the orientation requested in its component's manifest, or
 * the last requested orientation given to
 * {@link #setRequestedOrientation(int)}.
 *
 * @return Returns an orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 */
","/**
 * Return the current requested orientation of the activity.  This will
 * either be the orientation requested in its component's manifest, or
 * the last requested orientation given to
 * {@link #setRequestedOrientation(int)}.
 *
 * @return Returns an orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 */
",0,[@ActivityInfo.ScreenOrientation],[@ActivityInfo.ScreenOrientation],0,,,,2,"1,5",1,5,0,"The dependent API has changed from ActivityManager.getService().getRequestedOrientation(mToken) to ActivityTaskManager.getService().getRequestedOrientation(mToken), so the change type is 5.","Since the underlying behavior of getRequestedOrientation() in ActivityTaskManager might be similar to the original implementation in ActivityManager, there may not be significant differences in behavior. Therefore, the CI type is 0."
<android.view.MenuItem: Mode getIconTintMode()>,28,29,,,,"{
    return null;
}","{
    return null;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  Statement(return null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  Statement(return null, [])  Statement(}, [])",0,"/**
 * Returns the blending mode used to apply the tint to this item's icon, if specified.
 *
 * @return the blending mode used to apply the tint to this item's icon
 * @attr ref android.R.styleable#MenuItem_iconTintMode
 * @see #setIconTintMode(PorterDuff.Mode)
 */
","/**
 * Returns the blending mode used to apply the tint to this item's icon, if specified.
 *
 * @return the blending mode used to apply the tint to this item's icon
 * @attr ref android.R.styleable#MenuItem_iconTintMode
 * @see #setIconTintMode(PorterDuff.Mode)
 * @see #setIconTintBlendMode(BlendMode)
 */
",1,[@Nullable],[@Nullable],0,,,,0,0,0,0,0,"There is no code change between the early and late implementations. Both versions are identical, returning null.","Since there is no change between the two versions, there are no potential compatibility issues."
<android.view.ViewTreeObserver: void merge(ViewTreeObserver)>,28,29,,,,"{
    if (observer.mOnWindowAttachListeners != null) {
        if (mOnWindowAttachListeners != null) {
            mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners);
        } else {
            mOnWindowAttachListeners = observer.mOnWindowAttachListeners;
        }
    }
    if (observer.mOnWindowFocusListeners != null) {
        if (mOnWindowFocusListeners != null) {
            mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners);
        } else {
            mOnWindowFocusListeners = observer.mOnWindowFocusListeners;
        }
    }
    if (observer.mOnGlobalFocusListeners != null) {
        if (mOnGlobalFocusListeners != null) {
            mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners);
        } else {
            mOnGlobalFocusListeners = observer.mOnGlobalFocusListeners;
        }
    }
    if (observer.mOnGlobalLayoutListeners != null) {
        if (mOnGlobalLayoutListeners != null) {
            mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners);
        } else {
            mOnGlobalLayoutListeners = observer.mOnGlobalLayoutListeners;
        }
    }
    if (observer.mOnPreDrawListeners != null) {
        if (mOnPreDrawListeners != null) {
            mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners);
        } else {
            mOnPreDrawListeners = observer.mOnPreDrawListeners;
        }
    }
    if (observer.mOnDrawListeners != null) {
        if (mOnDrawListeners != null) {
            mOnDrawListeners.addAll(observer.mOnDrawListeners);
        } else {
            mOnDrawListeners = observer.mOnDrawListeners;
        }
    }
    if (observer.mOnTouchModeChangeListeners != null) {
        if (mOnTouchModeChangeListeners != null) {
            mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners);
        } else {
            mOnTouchModeChangeListeners = observer.mOnTouchModeChangeListeners;
        }
    }
    if (observer.mOnComputeInternalInsetsListeners != null) {
        if (mOnComputeInternalInsetsListeners != null) {
            mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners);
        } else {
            mOnComputeInternalInsetsListeners = observer.mOnComputeInternalInsetsListeners;
        }
    }
    if (observer.mOnScrollChangedListeners != null) {
        if (mOnScrollChangedListeners != null) {
            mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners);
        } else {
            mOnScrollChangedListeners = observer.mOnScrollChangedListeners;
        }
    }
    if (observer.mOnWindowShownListeners != null) {
        if (mOnWindowShownListeners != null) {
            mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners);
        } else {
            mOnWindowShownListeners = observer.mOnWindowShownListeners;
        }
    }
    observer.kill();
}","{
    if (observer.mOnWindowAttachListeners != null) {
        if (mOnWindowAttachListeners != null) {
            mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners);
        } else {
            mOnWindowAttachListeners = observer.mOnWindowAttachListeners;
        }
    }
    if (observer.mOnWindowFocusListeners != null) {
        if (mOnWindowFocusListeners != null) {
            mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners);
        } else {
            mOnWindowFocusListeners = observer.mOnWindowFocusListeners;
        }
    }
    if (observer.mOnGlobalFocusListeners != null) {
        if (mOnGlobalFocusListeners != null) {
            mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners);
        } else {
            mOnGlobalFocusListeners = observer.mOnGlobalFocusListeners;
        }
    }
    if (observer.mOnGlobalLayoutListeners != null) {
        if (mOnGlobalLayoutListeners != null) {
            mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners);
        } else {
            mOnGlobalLayoutListeners = observer.mOnGlobalLayoutListeners;
        }
    }
    if (observer.mOnPreDrawListeners != null) {
        if (mOnPreDrawListeners != null) {
            mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners);
        } else {
            mOnPreDrawListeners = observer.mOnPreDrawListeners;
        }
    }
    if (observer.mOnDrawListeners != null) {
        if (mOnDrawListeners != null) {
            mOnDrawListeners.addAll(observer.mOnDrawListeners);
        } else {
            mOnDrawListeners = observer.mOnDrawListeners;
        }
    }
    if (observer.mOnFrameCommitListeners != null) {
        if (mOnFrameCommitListeners != null) {
            mOnFrameCommitListeners.addAll(observer.captureFrameCommitCallbacks());
        } else {
            mOnFrameCommitListeners = observer.captureFrameCommitCallbacks();
        }
    }
    if (observer.mOnTouchModeChangeListeners != null) {
        if (mOnTouchModeChangeListeners != null) {
            mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners);
        } else {
            mOnTouchModeChangeListeners = observer.mOnTouchModeChangeListeners;
        }
    }
    if (observer.mOnComputeInternalInsetsListeners != null) {
        if (mOnComputeInternalInsetsListeners != null) {
            mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners);
        } else {
            mOnComputeInternalInsetsListeners = observer.mOnComputeInternalInsetsListeners;
        }
    }
    if (observer.mOnScrollChangedListeners != null) {
        if (mOnScrollChangedListeners != null) {
            mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners);
        } else {
            mOnScrollChangedListeners = observer.mOnScrollChangedListeners;
        }
    }
    if (observer.mOnWindowShownListeners != null) {
        if (mOnWindowShownListeners != null) {
            mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners);
        } else {
            mOnWindowShownListeners = observer.mOnWindowShownListeners;
        }
    }
    if (observer.mGestureExclusionListeners != null) {
        if (mGestureExclusionListeners != null) {
            mGestureExclusionListeners.addAll(observer.mGestureExclusionListeners);
        } else {
            mGestureExclusionListeners = observer.mGestureExclusionListeners;
        }
    }
    observer.kill();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (observer.mOnWindowAttachListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnWindowAttachListeners !, []), Expression(null) {, [])]), MethodCall(mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners), [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnWindowFocusListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnWindowFocusListeners !, []), Expression(null) {, [])]), MethodCall(mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners), [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalFocusListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnGlobalFocusListeners !, []), Expression(null) {, [])]), MethodCall(mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners), [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalLayoutListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnGlobalLayoutListeners !, []), Expression(null) {, [])]), MethodCall(mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners), [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnPreDrawListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnPreDrawListeners !, []), Expression(null) {, [])]), MethodCall(mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners), [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnDrawListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnDrawListeners !, []), Expression(null) {, [])]), MethodCall(mOnDrawListeners.addAll(observer.mOnDrawListeners), [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnTouchModeChangeListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnTouchModeChangeListeners !, []), Expression(null) {, [])]), MethodCall(mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners), [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])]), MethodCall(mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners), [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnScrollChangedListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnScrollChangedListeners !, []), Expression(null) {, [])]), MethodCall(mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners), [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnWindowShownListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnWindowShownListeners !, []), Expression(null) {, [])]), MethodCall(mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners), [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])]), Statement(}, []), Statement(}, []), MethodCall(observer.kill(), [VariableReference(observer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnWindowAttachListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnWindowAttachListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnWindowAttachListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnWindowAttachListeners !, [])    Expression(null) {, [])  MethodCall(mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners), [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])])    VariableReference(mOnWindowAttachListeners, [])    Expression(observer.mOnWindowAttachListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])])    VariableReference(mOnWindowAttachListeners, [])    Expression(observer.mOnWindowAttachListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnWindowFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnWindowFocusListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnWindowFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnWindowFocusListeners !, [])    Expression(null) {, [])  MethodCall(mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners), [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])])    VariableReference(mOnWindowFocusListeners, [])    Expression(observer.mOnWindowFocusListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])])    VariableReference(mOnWindowFocusListeners, [])    Expression(observer.mOnWindowFocusListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnGlobalFocusListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnGlobalFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnGlobalFocusListeners !, [])    Expression(null) {, [])  MethodCall(mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners), [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])])    VariableReference(mOnGlobalFocusListeners, [])    Expression(observer.mOnGlobalFocusListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])])    VariableReference(mOnGlobalFocusListeners, [])    Expression(observer.mOnGlobalFocusListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalLayoutListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnGlobalLayoutListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnGlobalLayoutListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnGlobalLayoutListeners !, [])    Expression(null) {, [])  MethodCall(mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners), [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])])    VariableReference(mOnGlobalLayoutListeners, [])    Expression(observer.mOnGlobalLayoutListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])])    VariableReference(mOnGlobalLayoutListeners, [])    Expression(observer.mOnGlobalLayoutListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnPreDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnPreDrawListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnPreDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnPreDrawListeners !, [])    Expression(null) {, [])  MethodCall(mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners), [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])])    VariableReference(mOnPreDrawListeners, [])    Expression(observer.mOnPreDrawListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])])    VariableReference(mOnPreDrawListeners, [])    Expression(observer.mOnPreDrawListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnDrawListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnDrawListeners !, [])    Expression(null) {, [])  MethodCall(mOnDrawListeners.addAll(observer.mOnDrawListeners), [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])])    VariableReference(mOnDrawListeners, [])    Expression(observer.mOnDrawListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])])    VariableReference(mOnDrawListeners, [])    Expression(observer.mOnDrawListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnTouchModeChangeListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnTouchModeChangeListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnTouchModeChangeListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnTouchModeChangeListeners !, [])    Expression(null) {, [])  MethodCall(mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners), [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])])    VariableReference(mOnTouchModeChangeListeners, [])    Expression(observer.mOnTouchModeChangeListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])])    VariableReference(mOnTouchModeChangeListeners, [])    Expression(observer.mOnTouchModeChangeListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnComputeInternalInsetsListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnComputeInternalInsetsListeners !, [])    Expression(null) {, [])  MethodCall(mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners), [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])])    VariableReference(mOnComputeInternalInsetsListeners, [])    Expression(observer.mOnComputeInternalInsetsListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])])    VariableReference(mOnComputeInternalInsetsListeners, [])    Expression(observer.mOnComputeInternalInsetsListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnScrollChangedListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnScrollChangedListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnScrollChangedListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnScrollChangedListeners !, [])    Expression(null) {, [])  MethodCall(mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners), [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])])    VariableReference(mOnScrollChangedListeners, [])    Expression(observer.mOnScrollChangedListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])])    VariableReference(mOnScrollChangedListeners, [])    Expression(observer.mOnScrollChangedListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnWindowShownListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnWindowShownListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnWindowShownListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnWindowShownListeners !, [])    Expression(null) {, [])  MethodCall(mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners), [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])])    VariableReference(mOnWindowShownListeners, [])    Expression(observer.mOnWindowShownListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])])    VariableReference(mOnWindowShownListeners, [])    Expression(observer.mOnWindowShownListeners, [])  Statement(}, [])  Statement(}, [])  MethodCall(observer.kill(), [VariableReference(observer, []), Expression(, [])])    VariableReference(observer, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (observer.mOnWindowAttachListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnWindowAttachListeners !, []), Expression(null) {, [])]), MethodCall(mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners), [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnWindowFocusListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnWindowFocusListeners !, []), Expression(null) {, [])]), MethodCall(mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners), [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalFocusListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnGlobalFocusListeners !, []), Expression(null) {, [])]), MethodCall(mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners), [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalLayoutListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnGlobalLayoutListeners !, []), Expression(null) {, [])]), MethodCall(mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners), [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnPreDrawListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnPreDrawListeners !, []), Expression(null) {, [])]), MethodCall(mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners), [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnDrawListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnDrawListeners !, []), Expression(null) {, [])]), MethodCall(mOnDrawListeners.addAll(observer.mOnDrawListeners), [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnFrameCommitListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnFrameCommitListeners !, []), Expression(null) {, [])]), MethodCall(mOnFrameCommitListeners.addAll(observer.captureFrameCommitCallbacks()), [VariableReference(mOnFrameCommitListeners, []), Expression(observer.captureFrameCommitCallbacks(), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnFrameCommitListeners, []), Expression(observer.captureFrameCommitCallbacks(), [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnTouchModeChangeListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnTouchModeChangeListeners !, []), Expression(null) {, [])]), MethodCall(mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners), [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])]), MethodCall(mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners), [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnScrollChangedListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnScrollChangedListeners !, []), Expression(null) {, [])]), MethodCall(mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners), [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mOnWindowShownListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mOnWindowShownListeners !, []), Expression(null) {, [])]), MethodCall(mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners), [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (observer.mGestureExclusionListeners !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (mGestureExclusionListeners !, []), Expression(null) {, [])]), MethodCall(mGestureExclusionListeners.addAll(observer.mGestureExclusionListeners), [VariableReference(mGestureExclusionListeners, []), Expression(observer.mGestureExclusionListeners, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mGestureExclusionListeners, []), Expression(observer.mGestureExclusionListeners, [])]), Statement(}, []), Statement(}, []), MethodCall(observer.kill(), [VariableReference(observer, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnWindowAttachListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnWindowAttachListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnWindowAttachListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnWindowAttachListeners !, [])    Expression(null) {, [])  MethodCall(mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners), [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])])    VariableReference(mOnWindowAttachListeners, [])    Expression(observer.mOnWindowAttachListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnWindowAttachListeners, []), Expression(observer.mOnWindowAttachListeners, [])])    VariableReference(mOnWindowAttachListeners, [])    Expression(observer.mOnWindowAttachListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnWindowFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnWindowFocusListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnWindowFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnWindowFocusListeners !, [])    Expression(null) {, [])  MethodCall(mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners), [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])])    VariableReference(mOnWindowFocusListeners, [])    Expression(observer.mOnWindowFocusListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnWindowFocusListeners, []), Expression(observer.mOnWindowFocusListeners, [])])    VariableReference(mOnWindowFocusListeners, [])    Expression(observer.mOnWindowFocusListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnGlobalFocusListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnGlobalFocusListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnGlobalFocusListeners !, [])    Expression(null) {, [])  MethodCall(mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners), [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])])    VariableReference(mOnGlobalFocusListeners, [])    Expression(observer.mOnGlobalFocusListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnGlobalFocusListeners, []), Expression(observer.mOnGlobalFocusListeners, [])])    VariableReference(mOnGlobalFocusListeners, [])    Expression(observer.mOnGlobalFocusListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnGlobalLayoutListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnGlobalLayoutListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnGlobalLayoutListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnGlobalLayoutListeners !, [])    Expression(null) {, [])  MethodCall(mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners), [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])])    VariableReference(mOnGlobalLayoutListeners, [])    Expression(observer.mOnGlobalLayoutListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnGlobalLayoutListeners, []), Expression(observer.mOnGlobalLayoutListeners, [])])    VariableReference(mOnGlobalLayoutListeners, [])    Expression(observer.mOnGlobalLayoutListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnPreDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnPreDrawListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnPreDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnPreDrawListeners !, [])    Expression(null) {, [])  MethodCall(mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners), [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])])    VariableReference(mOnPreDrawListeners, [])    Expression(observer.mOnPreDrawListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnPreDrawListeners, []), Expression(observer.mOnPreDrawListeners, [])])    VariableReference(mOnPreDrawListeners, [])    Expression(observer.mOnPreDrawListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnDrawListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnDrawListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnDrawListeners !, [])    Expression(null) {, [])  MethodCall(mOnDrawListeners.addAll(observer.mOnDrawListeners), [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])])    VariableReference(mOnDrawListeners, [])    Expression(observer.mOnDrawListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnDrawListeners, []), Expression(observer.mOnDrawListeners, [])])    VariableReference(mOnDrawListeners, [])    Expression(observer.mOnDrawListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnFrameCommitListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnFrameCommitListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnFrameCommitListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnFrameCommitListeners !, [])    Expression(null) {, [])  MethodCall(mOnFrameCommitListeners.addAll(observer.captureFrameCommitCallbacks()), [VariableReference(mOnFrameCommitListeners, []), Expression(observer.captureFrameCommitCallbacks(), [])])    VariableReference(mOnFrameCommitListeners, [])    Expression(observer.captureFrameCommitCallbacks(), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnFrameCommitListeners, []), Expression(observer.captureFrameCommitCallbacks(), [])])    VariableReference(mOnFrameCommitListeners, [])    Expression(observer.captureFrameCommitCallbacks(), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnTouchModeChangeListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnTouchModeChangeListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnTouchModeChangeListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnTouchModeChangeListeners !, [])    Expression(null) {, [])  MethodCall(mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners), [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])])    VariableReference(mOnTouchModeChangeListeners, [])    Expression(observer.mOnTouchModeChangeListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnTouchModeChangeListeners, []), Expression(observer.mOnTouchModeChangeListeners, [])])    VariableReference(mOnTouchModeChangeListeners, [])    Expression(observer.mOnTouchModeChangeListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnComputeInternalInsetsListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnComputeInternalInsetsListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnComputeInternalInsetsListeners !, [])    Expression(null) {, [])  MethodCall(mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners), [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])])    VariableReference(mOnComputeInternalInsetsListeners, [])    Expression(observer.mOnComputeInternalInsetsListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnComputeInternalInsetsListeners, []), Expression(observer.mOnComputeInternalInsetsListeners, [])])    VariableReference(mOnComputeInternalInsetsListeners, [])    Expression(observer.mOnComputeInternalInsetsListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnScrollChangedListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnScrollChangedListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnScrollChangedListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnScrollChangedListeners !, [])    Expression(null) {, [])  MethodCall(mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners), [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])])    VariableReference(mOnScrollChangedListeners, [])    Expression(observer.mOnScrollChangedListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnScrollChangedListeners, []), Expression(observer.mOnScrollChangedListeners, [])])    VariableReference(mOnScrollChangedListeners, [])    Expression(observer.mOnScrollChangedListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mOnWindowShownListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mOnWindowShownListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mOnWindowShownListeners !, []), Expression(null) {, [])])    VariableReference(if (mOnWindowShownListeners !, [])    Expression(null) {, [])  MethodCall(mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners), [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])])    VariableReference(mOnWindowShownListeners, [])    Expression(observer.mOnWindowShownListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mOnWindowShownListeners, []), Expression(observer.mOnWindowShownListeners, [])])    VariableReference(mOnWindowShownListeners, [])    Expression(observer.mOnWindowShownListeners, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (observer.mGestureExclusionListeners !, []), Expression(null) {, [])])    VariableReference(if (observer.mGestureExclusionListeners !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (mGestureExclusionListeners !, []), Expression(null) {, [])])    VariableReference(if (mGestureExclusionListeners !, [])    Expression(null) {, [])  MethodCall(mGestureExclusionListeners.addAll(observer.mGestureExclusionListeners), [VariableReference(mGestureExclusionListeners, []), Expression(observer.mGestureExclusionListeners, [])])    VariableReference(mGestureExclusionListeners, [])    Expression(observer.mGestureExclusionListeners, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mGestureExclusionListeners, []), Expression(observer.mGestureExclusionListeners, [])])    VariableReference(mGestureExclusionListeners, [])    Expression(observer.mGestureExclusionListeners, [])  Statement(}, [])  Statement(}, [])  MethodCall(observer.kill(), [VariableReference(observer, []), Expression(, [])])    VariableReference(observer, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Merges all the listeners registered on the specified observer with the listeners
 * registered on this object. After this method is invoked, the specified observer
 * will return false in {@link #isAlive()} and should not be used anymore.
 *
 * @param observer The ViewTreeObserver whose listeners must be added to this observer
 */
","/**
 * Merges all the listeners registered on the specified observer with the listeners
 * registered on this object. After this method is invoked, the specified observer
 * will return false in {@link #isAlive()} and should not be used anymore.
 *
 * @param observer The ViewTreeObserver whose listeners must be added to this observer
 */
",0,,,0,,,,"1,2","3,4",1,"3,4",0,"The control structure has changed by adding new statements for handling new listeners (`mOnFrameCommitListeners` and `mGestureExclusionListeners`). Additionally, there is a new method call to `observer.captureFrameCommitCallbacks()`, which adds elements to `mOnFrameCommitListeners`, so the code change types are 3 and 4.","While the change adds new listeners and calls a new method, it doesn't alter the return type or exception handling of the `merge` method. The behavior of the listeners being merged might differ, but there is no direct difference in the return values or exception handling of this method itself. Therefore, no direct Compatibility Issue arises from the changes observed here."
<android.os.StrictMode.AndroidBlockGuardPolicy: int getPolicyMask()>,28,29,,,,"{
    return mPolicyMask;
}","{
    return mThreadPolicyMask;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mPolicyMask, []), Statement(}, [])])  Statement({, [])  Statement(return mPolicyMask, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mThreadPolicyMask, []), Statement(}, [])])  Statement({, [])  Statement(return mThreadPolicyMask, [])  Statement(}, [])",1,"// Part of BlockGuard.Policy interface:
","// Part of BlockGuard.Policy interface:
",0,,,0,,,,"1,2","1,5",1,1,1,"The return statement has changed from returning `mPolicyMask` to returning `mThreadPolicyMask`, so the code change type is 1.","As the return statement has changed, the method might return a different value in the late version compared to the early version, leading to the potential for Compatibility Issues. Therefore, the CI type is 1."
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>,22,23,,,,"{
    try {
        return mService.isActiveNetworkMetered();
    } catch (RemoteException e) {
        return false;
    }
}","{
    try {
        return mService.isActiveNetworkMetered();
    } catch (RemoteException e) {
        return false;
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.isActiveNetworkMetered(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), Statement(return false, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.isActiveNetworkMetered(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.isActiveNetworkMetered(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), Statement(return false, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.isActiveNetworkMetered(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Returns if the currently active data network is metered. A network is
 * classified as metered when the user is sensitive to heavy data usage on
 * that connection due to monetary costs, data limitations or
 * battery/performance issues. You should check this before doing large
 * data transfers, and warn the user or delay the operation until another
 * network is available.
 *
 * @return {@code true} if large transfers should be avoided, otherwise
 * {@code false}.
 *
 * <p>This method requires the call to hold the permission
 * {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.
 */
","/**
 * Returns if the currently active data network is metered. A network is
 * classified as metered when the user is sensitive to heavy data usage on
 * that connection due to monetary costs, data limitations or
 * battery/performance issues. You should check this before doing large
 * data transfers, and warn the user or delay the operation until another
 * network is available.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.
 *
 * @return {@code true} if large transfers should be avoided, otherwise
 * {@code false}.
 */
",1,,,0,,,,0,0,0,0,0,"There is no change in the implementation, AST nodes, or annotations between the early and late versions.",There are no Compatibility Issues as there is no change in the code.
<android.view.InputDevice: String toString()>,22,23,,,,"{
    StringBuilder description = new StringBuilder();
    description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n"");
    description.append(""  Descriptor: "").append(mDescriptor).append(""\n"");
    description.append(""  Generation: "").append(mGeneration).append(""\n"");
    description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"");
    description.append(""  Keyboard Type: "");
    switch(mKeyboardType) {
        case KEYBOARD_TYPE_NONE:
            description.append(""none"");
            break;
        case KEYBOARD_TYPE_NON_ALPHABETIC:
            description.append(""non-alphabetic"");
            break;
        case KEYBOARD_TYPE_ALPHABETIC:
            description.append(""alphabetic"");
            break;
    }
    description.append(""\n"");
    description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n"");
    description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("");
    appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard"");
    appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen"");
    appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse"");
    appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick"");
    appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad"");
    description.append("" )\n"");
    final int numAxes = mMotionRanges.size();
    for (int i = 0; i < numAxes; i++) {
        MotionRange range = mMotionRanges.get(i);
        description.append(""    "").append(MotionEvent.axisToString(range.mAxis));
        description.append("": source=0x"").append(Integer.toHexString(range.mSource));
        description.append("" min="").append(range.mMin);
        description.append("" max="").append(range.mMax);
        description.append("" flat="").append(range.mFlat);
        description.append("" fuzz="").append(range.mFuzz);
        description.append("" resolution="").append(range.mResolution);
        description.append(""\n"");
    }
    return description.toString();
}","{
    StringBuilder description = new StringBuilder();
    description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n"");
    description.append(""  Descriptor: "").append(mDescriptor).append(""\n"");
    description.append(""  Generation: "").append(mGeneration).append(""\n"");
    description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"");
    description.append(""  Keyboard Type: "");
    switch(mKeyboardType) {
        case KEYBOARD_TYPE_NONE:
            description.append(""none"");
            break;
        case KEYBOARD_TYPE_NON_ALPHABETIC:
            description.append(""non-alphabetic"");
            break;
        case KEYBOARD_TYPE_ALPHABETIC:
            description.append(""alphabetic"");
            break;
    }
    description.append(""\n"");
    description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n"");
    description.append(""  Has mic: "").append(mHasMicrophone).append(""\n"");
    description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("");
    appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard"");
    appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen"");
    appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse"");
    appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick"");
    appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad"");
    description.append("" )\n"");
    final int numAxes = mMotionRanges.size();
    for (int i = 0; i < numAxes; i++) {
        MotionRange range = mMotionRanges.get(i);
        description.append(""    "").append(MotionEvent.axisToString(range.mAxis));
        description.append("": source=0x"").append(Integer.toHexString(range.mSource));
        description.append("" min="").append(range.mMin);
        description.append("" max="").append(range.mMax);
        description.append("" flat="").append(range.mFlat);
        description.append("" fuzz="").append(range.mFuzz);
        description.append("" resolution="").append(range.mResolution);
        description.append(""\n"");
    }
    return description.toString();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(StringBuilder description, []), Expression(new StringBuilder(), [])]), MethodCall(description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n""), [VariableReference(description, []), Expression(""Input Device "").append(mId).append("": "").append(mName).append(""\n"", [])]), MethodCall(description.append(""  Descriptor: "").append(mDescriptor).append(""\n""), [VariableReference(description, []), Expression(""  Descriptor: "").append(mDescriptor).append(""\n"", [])]), MethodCall(description.append(""  Generation: "").append(mGeneration).append(""\n""), [VariableReference(description, []), Expression(""  Generation: "").append(mGeneration).append(""\n"", [])]), MethodCall(description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n""), [VariableReference(description, []), Expression(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"", [])]), MethodCall(description.append(""  Keyboard Type: ""), [VariableReference(description, []), Expression(""  Keyboard Type: "", [])]), Statement(switch(mKeyboardType) {, []), Statement(case KEYBOARD_TYPE_NONE:, []), MethodCall(description.append(""none""), [VariableReference(description, []), Expression(""none"", [])]), Statement(break, []), Statement(case KEYBOARD_TYPE_NON_ALPHABETIC:, []), MethodCall(description.append(""non-alphabetic""), [VariableReference(description, []), Expression(""non-alphabetic"", [])]), Statement(break, []), Statement(case KEYBOARD_TYPE_ALPHABETIC:, []), MethodCall(description.append(""alphabetic""), [VariableReference(description, []), Expression(""alphabetic"", [])]), Statement(break, []), Statement(}, []), MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])]), MethodCall(description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n""), [VariableReference(description, []), Expression(""  Has Vibrator: "").append(mHasVibrator).append(""\n"", [])]), MethodCall(description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" (""), [VariableReference(description, []), Expression(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("", [])]), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad""), []), MethodCall(description.append("" )\n""), [VariableReference(description, []), Expression("" )\n"", [])]), AssignmentExpression(=, [VariableReference(final int numAxes, []), Expression(mMotionRanges.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numAxes, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(MotionRange range, []), Expression(mMotionRanges.get(i), [])]), MethodCall(description.append(""    "").append(MotionEvent.axisToString(range.mAxis)), [VariableReference(description, []), Expression(""    "").append(MotionEvent.axisToString(range.mAxis), [])]), AssignmentExpression(=, [VariableReference(description.append("": source, []), Expression(0x"").append(Integer.toHexString(range.mSource)), [])]), AssignmentExpression(=, [VariableReference(description.append("" min, []), Expression("").append(range.mMin), [])]), AssignmentExpression(=, [VariableReference(description.append("" max, []), Expression("").append(range.mMax), [])]), AssignmentExpression(=, [VariableReference(description.append("" flat, []), Expression("").append(range.mFlat), [])]), AssignmentExpression(=, [VariableReference(description.append("" fuzz, []), Expression("").append(range.mFuzz), [])]), AssignmentExpression(=, [VariableReference(description.append("" resolution, []), Expression("").append(range.mResolution), [])]), MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])]), Statement(}, []), MethodCall(return description.toString(), [VariableReference(return description, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(StringBuilder description, []), Expression(new StringBuilder(), [])])    VariableReference(StringBuilder description, [])    Expression(new StringBuilder(), [])  MethodCall(description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n""), [VariableReference(description, []), Expression(""Input Device "").append(mId).append("": "").append(mName).append(""\n"", [])])    VariableReference(description, [])    Expression(""Input Device "").append(mId).append("": "").append(mName).append(""\n"", [])  MethodCall(description.append(""  Descriptor: "").append(mDescriptor).append(""\n""), [VariableReference(description, []), Expression(""  Descriptor: "").append(mDescriptor).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Descriptor: "").append(mDescriptor).append(""\n"", [])  MethodCall(description.append(""  Generation: "").append(mGeneration).append(""\n""), [VariableReference(description, []), Expression(""  Generation: "").append(mGeneration).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Generation: "").append(mGeneration).append(""\n"", [])  MethodCall(description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n""), [VariableReference(description, []), Expression(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"", [])])    VariableReference(description, [])    Expression(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"", [])  MethodCall(description.append(""  Keyboard Type: ""), [VariableReference(description, []), Expression(""  Keyboard Type: "", [])])    VariableReference(description, [])    Expression(""  Keyboard Type: "", [])  Statement(switch(mKeyboardType) {, [])  Statement(case KEYBOARD_TYPE_NONE:, [])  MethodCall(description.append(""none""), [VariableReference(description, []), Expression(""none"", [])])    VariableReference(description, [])    Expression(""none"", [])  Statement(break, [])  Statement(case KEYBOARD_TYPE_NON_ALPHABETIC:, [])  MethodCall(description.append(""non-alphabetic""), [VariableReference(description, []), Expression(""non-alphabetic"", [])])    VariableReference(description, [])    Expression(""non-alphabetic"", [])  Statement(break, [])  Statement(case KEYBOARD_TYPE_ALPHABETIC:, [])  MethodCall(description.append(""alphabetic""), [VariableReference(description, []), Expression(""alphabetic"", [])])    VariableReference(description, [])    Expression(""alphabetic"", [])  Statement(break, [])  Statement(}, [])  MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])])    VariableReference(description, [])    Expression(""\n"", [])  MethodCall(description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n""), [VariableReference(description, []), Expression(""  Has Vibrator: "").append(mHasVibrator).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Has Vibrator: "").append(mHasVibrator).append(""\n"", [])  MethodCall(description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" (""), [VariableReference(description, []), Expression(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("", [])])    VariableReference(description, [])    Expression(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("", [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad""), [])  MethodCall(description.append("" )\n""), [VariableReference(description, []), Expression("" )\n"", [])])    VariableReference(description, [])    Expression("" )\n"", [])  AssignmentExpression(=, [VariableReference(final int numAxes, []), Expression(mMotionRanges.size(), [])])    VariableReference(final int numAxes, [])    Expression(mMotionRanges.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numAxes, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(MotionRange range, []), Expression(mMotionRanges.get(i), [])])    VariableReference(MotionRange range, [])    Expression(mMotionRanges.get(i), [])  MethodCall(description.append(""    "").append(MotionEvent.axisToString(range.mAxis)), [VariableReference(description, []), Expression(""    "").append(MotionEvent.axisToString(range.mAxis), [])])    VariableReference(description, [])    Expression(""    "").append(MotionEvent.axisToString(range.mAxis), [])  AssignmentExpression(=, [VariableReference(description.append("": source, []), Expression(0x"").append(Integer.toHexString(range.mSource)), [])])    VariableReference(description.append("": source, [])    Expression(0x"").append(Integer.toHexString(range.mSource)), [])  AssignmentExpression(=, [VariableReference(description.append("" min, []), Expression("").append(range.mMin), [])])    VariableReference(description.append("" min, [])    Expression("").append(range.mMin), [])  AssignmentExpression(=, [VariableReference(description.append("" max, []), Expression("").append(range.mMax), [])])    VariableReference(description.append("" max, [])    Expression("").append(range.mMax), [])  AssignmentExpression(=, [VariableReference(description.append("" flat, []), Expression("").append(range.mFlat), [])])    VariableReference(description.append("" flat, [])    Expression("").append(range.mFlat), [])  AssignmentExpression(=, [VariableReference(description.append("" fuzz, []), Expression("").append(range.mFuzz), [])])    VariableReference(description.append("" fuzz, [])    Expression("").append(range.mFuzz), [])  AssignmentExpression(=, [VariableReference(description.append("" resolution, []), Expression("").append(range.mResolution), [])])    VariableReference(description.append("" resolution, [])    Expression("").append(range.mResolution), [])  MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])])    VariableReference(description, [])    Expression(""\n"", [])  Statement(}, [])  MethodCall(return description.toString(), [VariableReference(return description, []), Expression(, [])])    VariableReference(return description, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(StringBuilder description, []), Expression(new StringBuilder(), [])]), MethodCall(description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n""), [VariableReference(description, []), Expression(""Input Device "").append(mId).append("": "").append(mName).append(""\n"", [])]), MethodCall(description.append(""  Descriptor: "").append(mDescriptor).append(""\n""), [VariableReference(description, []), Expression(""  Descriptor: "").append(mDescriptor).append(""\n"", [])]), MethodCall(description.append(""  Generation: "").append(mGeneration).append(""\n""), [VariableReference(description, []), Expression(""  Generation: "").append(mGeneration).append(""\n"", [])]), MethodCall(description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n""), [VariableReference(description, []), Expression(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"", [])]), MethodCall(description.append(""  Keyboard Type: ""), [VariableReference(description, []), Expression(""  Keyboard Type: "", [])]), Statement(switch(mKeyboardType) {, []), Statement(case KEYBOARD_TYPE_NONE:, []), MethodCall(description.append(""none""), [VariableReference(description, []), Expression(""none"", [])]), Statement(break, []), Statement(case KEYBOARD_TYPE_NON_ALPHABETIC:, []), MethodCall(description.append(""non-alphabetic""), [VariableReference(description, []), Expression(""non-alphabetic"", [])]), Statement(break, []), Statement(case KEYBOARD_TYPE_ALPHABETIC:, []), MethodCall(description.append(""alphabetic""), [VariableReference(description, []), Expression(""alphabetic"", [])]), Statement(break, []), Statement(}, []), MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])]), MethodCall(description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n""), [VariableReference(description, []), Expression(""  Has Vibrator: "").append(mHasVibrator).append(""\n"", [])]), MethodCall(description.append(""  Has mic: "").append(mHasMicrophone).append(""\n""), [VariableReference(description, []), Expression(""  Has mic: "").append(mHasMicrophone).append(""\n"", [])]), MethodCall(description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" (""), [VariableReference(description, []), Expression(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("", [])]), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick""), []), Statement(appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad""), []), MethodCall(description.append("" )\n""), [VariableReference(description, []), Expression("" )\n"", [])]), AssignmentExpression(=, [VariableReference(final int numAxes, []), Expression(mMotionRanges.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numAxes, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(MotionRange range, []), Expression(mMotionRanges.get(i), [])]), MethodCall(description.append(""    "").append(MotionEvent.axisToString(range.mAxis)), [VariableReference(description, []), Expression(""    "").append(MotionEvent.axisToString(range.mAxis), [])]), AssignmentExpression(=, [VariableReference(description.append("": source, []), Expression(0x"").append(Integer.toHexString(range.mSource)), [])]), AssignmentExpression(=, [VariableReference(description.append("" min, []), Expression("").append(range.mMin), [])]), AssignmentExpression(=, [VariableReference(description.append("" max, []), Expression("").append(range.mMax), [])]), AssignmentExpression(=, [VariableReference(description.append("" flat, []), Expression("").append(range.mFlat), [])]), AssignmentExpression(=, [VariableReference(description.append("" fuzz, []), Expression("").append(range.mFuzz), [])]), AssignmentExpression(=, [VariableReference(description.append("" resolution, []), Expression("").append(range.mResolution), [])]), MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])]), Statement(}, []), MethodCall(return description.toString(), [VariableReference(return description, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(StringBuilder description, []), Expression(new StringBuilder(), [])])    VariableReference(StringBuilder description, [])    Expression(new StringBuilder(), [])  MethodCall(description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n""), [VariableReference(description, []), Expression(""Input Device "").append(mId).append("": "").append(mName).append(""\n"", [])])    VariableReference(description, [])    Expression(""Input Device "").append(mId).append("": "").append(mName).append(""\n"", [])  MethodCall(description.append(""  Descriptor: "").append(mDescriptor).append(""\n""), [VariableReference(description, []), Expression(""  Descriptor: "").append(mDescriptor).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Descriptor: "").append(mDescriptor).append(""\n"", [])  MethodCall(description.append(""  Generation: "").append(mGeneration).append(""\n""), [VariableReference(description, []), Expression(""  Generation: "").append(mGeneration).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Generation: "").append(mGeneration).append(""\n"", [])  MethodCall(description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n""), [VariableReference(description, []), Expression(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"", [])])    VariableReference(description, [])    Expression(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"", [])  MethodCall(description.append(""  Keyboard Type: ""), [VariableReference(description, []), Expression(""  Keyboard Type: "", [])])    VariableReference(description, [])    Expression(""  Keyboard Type: "", [])  Statement(switch(mKeyboardType) {, [])  Statement(case KEYBOARD_TYPE_NONE:, [])  MethodCall(description.append(""none""), [VariableReference(description, []), Expression(""none"", [])])    VariableReference(description, [])    Expression(""none"", [])  Statement(break, [])  Statement(case KEYBOARD_TYPE_NON_ALPHABETIC:, [])  MethodCall(description.append(""non-alphabetic""), [VariableReference(description, []), Expression(""non-alphabetic"", [])])    VariableReference(description, [])    Expression(""non-alphabetic"", [])  Statement(break, [])  Statement(case KEYBOARD_TYPE_ALPHABETIC:, [])  MethodCall(description.append(""alphabetic""), [VariableReference(description, []), Expression(""alphabetic"", [])])    VariableReference(description, [])    Expression(""alphabetic"", [])  Statement(break, [])  Statement(}, [])  MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])])    VariableReference(description, [])    Expression(""\n"", [])  MethodCall(description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n""), [VariableReference(description, []), Expression(""  Has Vibrator: "").append(mHasVibrator).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Has Vibrator: "").append(mHasVibrator).append(""\n"", [])  MethodCall(description.append(""  Has mic: "").append(mHasMicrophone).append(""\n""), [VariableReference(description, []), Expression(""  Has mic: "").append(mHasMicrophone).append(""\n"", [])])    VariableReference(description, [])    Expression(""  Has mic: "").append(mHasMicrophone).append(""\n"", [])  MethodCall(description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" (""), [VariableReference(description, []), Expression(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("", [])])    VariableReference(description, [])    Expression(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("", [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick""), [])  Statement(appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad""), [])  MethodCall(description.append("" )\n""), [VariableReference(description, []), Expression("" )\n"", [])])    VariableReference(description, [])    Expression("" )\n"", [])  AssignmentExpression(=, [VariableReference(final int numAxes, []), Expression(mMotionRanges.size(), [])])    VariableReference(final int numAxes, [])    Expression(mMotionRanges.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numAxes, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(MotionRange range, []), Expression(mMotionRanges.get(i), [])])    VariableReference(MotionRange range, [])    Expression(mMotionRanges.get(i), [])  MethodCall(description.append(""    "").append(MotionEvent.axisToString(range.mAxis)), [VariableReference(description, []), Expression(""    "").append(MotionEvent.axisToString(range.mAxis), [])])    VariableReference(description, [])    Expression(""    "").append(MotionEvent.axisToString(range.mAxis), [])  AssignmentExpression(=, [VariableReference(description.append("": source, []), Expression(0x"").append(Integer.toHexString(range.mSource)), [])])    VariableReference(description.append("": source, [])    Expression(0x"").append(Integer.toHexString(range.mSource)), [])  AssignmentExpression(=, [VariableReference(description.append("" min, []), Expression("").append(range.mMin), [])])    VariableReference(description.append("" min, [])    Expression("").append(range.mMin), [])  AssignmentExpression(=, [VariableReference(description.append("" max, []), Expression("").append(range.mMax), [])])    VariableReference(description.append("" max, [])    Expression("").append(range.mMax), [])  AssignmentExpression(=, [VariableReference(description.append("" flat, []), Expression("").append(range.mFlat), [])])    VariableReference(description.append("" flat, [])    Expression("").append(range.mFlat), [])  AssignmentExpression(=, [VariableReference(description.append("" fuzz, []), Expression("").append(range.mFuzz), [])])    VariableReference(description.append("" fuzz, [])    Expression("").append(range.mFuzz), [])  AssignmentExpression(=, [VariableReference(description.append("" resolution, []), Expression("").append(range.mResolution), [])])    VariableReference(description.append("" resolution, [])    Expression("").append(range.mResolution), [])  MethodCall(description.append(""\n""), [VariableReference(description, []), Expression(""\n"", [])])    VariableReference(description, [])    Expression(""\n"", [])  Statement(}, [])  MethodCall(return description.toString(), [VariableReference(return description, []), Expression(, [])])    VariableReference(return description, [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,1,"1,4",1,4,0,A new statement has been added to append information about the microphone: `description.append(" Has mic: ").append(mHasMicrophone).append("\n");`. This change is an addition of a new statement.,"The addition of this new statement does not affect the return value or exception handling of the method. It only adds additional descriptive information, so there is no Compatibility Issue."
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>,22,23,,,,"{
    return (mGroupFlags & FLAG_ANIMATION_CACHE) == FLAG_ANIMATION_CACHE;
}","{
    return (mGroupFlags & FLAG_ANIMATION_CACHE) == FLAG_ANIMATION_CACHE;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return (mGroupFlags & FLAG_ANIMATION_CACHE), []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return (mGroupFlags & FLAG_ANIMATION_CACHE), []), Expression(, [])])    VariableReference(return (mGroupFlags & FLAG_ANIMATION_CACHE), [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return (mGroupFlags & FLAG_ANIMATION_CACHE), []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return (mGroupFlags & FLAG_ANIMATION_CACHE), []), Expression(, [])])    VariableReference(return (mGroupFlags & FLAG_ANIMATION_CACHE), [])    Expression(, [])  Statement(}, [])",0,"/**
 * Indicates whether the children's drawing cache is used during a layout
 * animation. By default, the drawing cache is enabled but this will prevent
 * nested layout animations from working. To nest animations, you must disable
 * the cache.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAnimationCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 */
","/**
 * Indicates whether the children's drawing cache is used during a layout
 * animation. By default, the drawing cache is enabled but this will prevent
 * nested layout animations from working. To nest animations, you must disable
 * the cache.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAnimationCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Caching behavior of children may be controlled through {@link View#setLayerType(int, Paint)}.
 */
",1,[@ViewDebug.ExportedProperty],,1,,,,0,0,0,0,0,"There are no changes in the method implementations of both versions, the code remains identical.","Since there are no changes in the implementation between the two versions, there is no potential for a Compatibility Issue."
"<android.hardware.SystemSensorManager.TriggerEventQueue: void dispatchSensorEvent(int,float[],int,long)>",22,23,,,,"{
    final Sensor sensor = sHandleToSensor.get(handle);
    TriggerEvent t = null;
    synchronized (mTriggerEvents) {
        t = mTriggerEvents.get(handle);
    }
    if (t == null) {
        Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor);
        return;
    }
    // Copy from the values array.
    System.arraycopy(values, 0, t.values, 0, t.values.length);
    t.timestamp = timestamp;
    t.sensor = sensor;
    // A trigger sensor is auto disabled. So just clean up and don't call native
    // disable.
    mManager.cancelTriggerSensorImpl(mListener, sensor, false);
    mListener.onTrigger(t);
}","{
    final Sensor sensor = mManager.mHandleToSensor.get(handle);
    TriggerEvent t = null;
    synchronized (mTriggerEvents) {
        t = mTriggerEvents.get(handle);
    }
    if (t == null) {
        Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor);
        return;
    }
    // Copy from the values array.
    System.arraycopy(values, 0, t.values, 0, t.values.length);
    t.timestamp = timestamp;
    t.sensor = sensor;
    // A trigger sensor is auto disabled. So just clean up and don't call native
    // disable.
    mManager.cancelTriggerSensorImpl(mListener, sensor, false);
    mListener.onTrigger(t);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Sensor sensor, []), Expression(sHandleToSensor.get(handle), [])]), AssignmentExpression(=, [VariableReference(TriggerEvent t, []), Expression(null, [])]), Statement(synchronized (mTriggerEvents) {, []), AssignmentExpression(=, [VariableReference(t, []), Expression(mTriggerEvents.get(handle), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (t, []), Expression(, [])]), MethodCall(Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error: Trigger Event is null for Sensor: "" + sensor, [])]), Statement(return, []), Statement(}, []), Statement(// Copy from the values array., []), MethodCall(System.arraycopy(values, 0, t.values, 0, t.values.length), [VariableReference(System, []), Expression(values, []), Expression(0, []), Expression(t.values, []), Expression(0, []), Expression(t.values.length, [])]), AssignmentExpression(=, [VariableReference(t.timestamp, []), Expression(timestamp, [])]), AssignmentExpression(=, [VariableReference(t.sensor, []), Expression(sensor, [])]), Statement(// A trigger sensor is auto disabled. So just clean up and don't call native, []), Statement(// disable., []), MethodCall(mManager.cancelTriggerSensorImpl(mListener, sensor, false), [VariableReference(mManager, []), Expression(mListener, []), Expression(sensor, []), Expression(false, [])]), MethodCall(mListener.onTrigger(t), [VariableReference(mListener, []), Expression(t, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Sensor sensor, []), Expression(sHandleToSensor.get(handle), [])])    VariableReference(final Sensor sensor, [])    Expression(sHandleToSensor.get(handle), [])  AssignmentExpression(=, [VariableReference(TriggerEvent t, []), Expression(null, [])])    VariableReference(TriggerEvent t, [])    Expression(null, [])  Statement(synchronized (mTriggerEvents) {, [])  AssignmentExpression(=, [VariableReference(t, []), Expression(mTriggerEvents.get(handle), [])])    VariableReference(t, [])    Expression(mTriggerEvents.get(handle), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (t, []), Expression(, [])])    VariableReference(if (t, [])    Expression(, [])  MethodCall(Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error: Trigger Event is null for Sensor: "" + sensor, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Error: Trigger Event is null for Sensor: "" + sensor, [])  Statement(return, [])  Statement(}, [])  Statement(// Copy from the values array., [])  MethodCall(System.arraycopy(values, 0, t.values, 0, t.values.length), [VariableReference(System, []), Expression(values, []), Expression(0, []), Expression(t.values, []), Expression(0, []), Expression(t.values.length, [])])    VariableReference(System, [])    Expression(values, [])    Expression(0, [])    Expression(t.values, [])    Expression(0, [])    Expression(t.values.length, [])  AssignmentExpression(=, [VariableReference(t.timestamp, []), Expression(timestamp, [])])    VariableReference(t.timestamp, [])    Expression(timestamp, [])  AssignmentExpression(=, [VariableReference(t.sensor, []), Expression(sensor, [])])    VariableReference(t.sensor, [])    Expression(sensor, [])  Statement(// A trigger sensor is auto disabled. So just clean up and don't call native, [])  Statement(// disable., [])  MethodCall(mManager.cancelTriggerSensorImpl(mListener, sensor, false), [VariableReference(mManager, []), Expression(mListener, []), Expression(sensor, []), Expression(false, [])])    VariableReference(mManager, [])    Expression(mListener, [])    Expression(sensor, [])    Expression(false, [])  MethodCall(mListener.onTrigger(t), [VariableReference(mListener, []), Expression(t, [])])    VariableReference(mListener, [])    Expression(t, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Sensor sensor, []), Expression(mManager.mHandleToSensor.get(handle), [])]), AssignmentExpression(=, [VariableReference(TriggerEvent t, []), Expression(null, [])]), Statement(synchronized (mTriggerEvents) {, []), AssignmentExpression(=, [VariableReference(t, []), Expression(mTriggerEvents.get(handle), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (t, []), Expression(, [])]), MethodCall(Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error: Trigger Event is null for Sensor: "" + sensor, [])]), Statement(return, []), Statement(}, []), Statement(// Copy from the values array., []), MethodCall(System.arraycopy(values, 0, t.values, 0, t.values.length), [VariableReference(System, []), Expression(values, []), Expression(0, []), Expression(t.values, []), Expression(0, []), Expression(t.values.length, [])]), AssignmentExpression(=, [VariableReference(t.timestamp, []), Expression(timestamp, [])]), AssignmentExpression(=, [VariableReference(t.sensor, []), Expression(sensor, [])]), Statement(// A trigger sensor is auto disabled. So just clean up and don't call native, []), Statement(// disable., []), MethodCall(mManager.cancelTriggerSensorImpl(mListener, sensor, false), [VariableReference(mManager, []), Expression(mListener, []), Expression(sensor, []), Expression(false, [])]), MethodCall(mListener.onTrigger(t), [VariableReference(mListener, []), Expression(t, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Sensor sensor, []), Expression(mManager.mHandleToSensor.get(handle), [])])    VariableReference(final Sensor sensor, [])    Expression(mManager.mHandleToSensor.get(handle), [])  AssignmentExpression(=, [VariableReference(TriggerEvent t, []), Expression(null, [])])    VariableReference(TriggerEvent t, [])    Expression(null, [])  Statement(synchronized (mTriggerEvents) {, [])  AssignmentExpression(=, [VariableReference(t, []), Expression(mTriggerEvents.get(handle), [])])    VariableReference(t, [])    Expression(mTriggerEvents.get(handle), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (t, []), Expression(, [])])    VariableReference(if (t, [])    Expression(, [])  MethodCall(Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error: Trigger Event is null for Sensor: "" + sensor, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Error: Trigger Event is null for Sensor: "" + sensor, [])  Statement(return, [])  Statement(}, [])  Statement(// Copy from the values array., [])  MethodCall(System.arraycopy(values, 0, t.values, 0, t.values.length), [VariableReference(System, []), Expression(values, []), Expression(0, []), Expression(t.values, []), Expression(0, []), Expression(t.values.length, [])])    VariableReference(System, [])    Expression(values, [])    Expression(0, [])    Expression(t.values, [])    Expression(0, [])    Expression(t.values.length, [])  AssignmentExpression(=, [VariableReference(t.timestamp, []), Expression(timestamp, [])])    VariableReference(t.timestamp, [])    Expression(timestamp, [])  AssignmentExpression(=, [VariableReference(t.sensor, []), Expression(sensor, [])])    VariableReference(t.sensor, [])    Expression(sensor, [])  Statement(// A trigger sensor is auto disabled. So just clean up and don't call native, [])  Statement(// disable., [])  MethodCall(mManager.cancelTriggerSensorImpl(mListener, sensor, false), [VariableReference(mManager, []), Expression(mListener, []), Expression(sensor, []), Expression(false, [])])    VariableReference(mManager, [])    Expression(mListener, [])    Expression(sensor, [])    Expression(false, [])  MethodCall(mListener.onTrigger(t), [VariableReference(mListener, []), Expression(t, [])])    VariableReference(mListener, [])    Expression(t, [])  Statement(}, [])",1,"// Called from native code.
","// Called from native code.
",0,"[@SuppressWarnings(""unused""), @Override]","[@SuppressWarnings(""unused""), @Override]",0,,,,2,"4,5",0,5,0,"The only change between the early and late version is that the lookup for the sensor is done through `mManager.mHandleToSensor` instead of `sHandleToSensor`. This indicates that the method relies on a different dependent API to get the sensor. Therefore, the change type is 5.","Even though the dependent API has changed, it does not inherently imply that this change will lead to different return values or exceptions. The core functionality and output, from what is observable, does not change. Therefore, no Compatibility Issue is detected, and the CI type is 0."
<android.os.Bundle: boolean hasFileDescriptors()>,22,23,,,,"{
    if (!mFdsKnown) {
        // keep going until we find one or run out of data
        boolean fdFound = false;
        if (mParcelledData != null) {
            if (mParcelledData.hasFileDescriptors()) {
                fdFound = true;
            }
        } else {
            // It's been unparcelled, so we need to walk the map
            for (int i = mMap.size() - 1; i >= 0; i--) {
                Object obj = mMap.valueAt(i);
                if (obj instanceof Parcelable) {
                    if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                        fdFound = true;
                        break;
                    }
                } else if (obj instanceof Parcelable[]) {
                    Parcelable[] array = (Parcelable[]) obj;
                    for (int n = array.length - 1; n >= 0; n--) {
                        if ((array[n].describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof SparseArray) {
                    SparseArray<? extends Parcelable> array = (SparseArray<? extends Parcelable>) obj;
                    for (int n = array.size() - 1; n >= 0; n--) {
                        if ((array.valueAt(n).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof ArrayList) {
                    ArrayList array = (ArrayList) obj;
                    // Parcelables; only look inside for Parcelables
                    if (!array.isEmpty() && (array.get(0) instanceof Parcelable)) {
                        for (int n = array.size() - 1; n >= 0; n--) {
                            Parcelable p = (Parcelable) array.get(n);
                            if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                fdFound = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        mHasFds = fdFound;
        mFdsKnown = true;
    }
    return mHasFds;
}","{
    if (!mFdsKnown) {
        // keep going until we find one or run out of data
        boolean fdFound = false;
        if (mParcelledData != null) {
            if (mParcelledData.hasFileDescriptors()) {
                fdFound = true;
            }
        } else {
            // It's been unparcelled, so we need to walk the map
            for (int i = mMap.size() - 1; i >= 0; i--) {
                Object obj = mMap.valueAt(i);
                if (obj instanceof Parcelable) {
                    if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                        fdFound = true;
                        break;
                    }
                } else if (obj instanceof Parcelable[]) {
                    Parcelable[] array = (Parcelable[]) obj;
                    for (int n = array.length - 1; n >= 0; n--) {
                        Parcelable p = array[n];
                        if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof SparseArray) {
                    SparseArray<? extends Parcelable> array = (SparseArray<? extends Parcelable>) obj;
                    for (int n = array.size() - 1; n >= 0; n--) {
                        Parcelable p = array.valueAt(n);
                        if (p != null && (p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof ArrayList) {
                    ArrayList array = (ArrayList) obj;
                    // Parcelables; only look inside for Parcelables
                    if (!array.isEmpty() && (array.get(0) instanceof Parcelable)) {
                        for (int n = array.size() - 1; n >= 0; n--) {
                            Parcelable p = (Parcelable) array.get(n);
                            if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                fdFound = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        mHasFds = fdFound;
        mFdsKnown = true;
    }
    return mHasFds;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!mFdsKnown) {, []), Statement(// keep going until we find one or run out of data, []), AssignmentExpression(=, [VariableReference(boolean fdFound, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(if (mParcelledData !, []), Expression(null) {, [])]), MethodCall(if (mParcelledData.hasFileDescriptors()), [VariableReference(if (mParcelledData, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(}, []), Statement(} else {, []), Statement(// It's been unparcelled, so we need to walk the map, []), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(mMap.size() - 1, [])]), AssignmentExpression(=, [VariableReference(i >, []), Expression(0, [])]), Statement(i--) {, []), AssignmentExpression(=, [VariableReference(Object obj, []), Expression(mMap.valueAt(i), [])]), Statement(if (obj instanceof Parcelable) {, []), AssignmentExpression(=, [VariableReference(if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(} else if (obj instanceof Parcelable[]) {, []), AssignmentExpression(=, [VariableReference(Parcelable[] array, []), Expression((Parcelable[]) obj, [])]), AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.length - 1, [])]), AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])]), Statement(n--) {, []), AssignmentExpression(=, [VariableReference(if ((array[n].describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(}, []), Statement(} else if (obj instanceof SparseArray) {, []), AssignmentExpression(=, [VariableReference(SparseArray<? extends Parcelable> array, []), Expression((SparseArray<? extends Parcelable>) obj, [])]), AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])]), AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])]), Statement(n--) {, []), AssignmentExpression(=, [VariableReference(if ((array.valueAt(n).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(}, []), Statement(} else if (obj instanceof ArrayList) {, []), AssignmentExpression(=, [VariableReference(ArrayList array, []), Expression((ArrayList) obj, [])]), Statement(// Parcelables, []), Statement(only look inside for Parcelables, []), MethodCall(if (!array.isEmpty() && (array.get(0) instanceof Parcelable)), [VariableReference(if (!array, []), Expression() && (array.get(0) instanceof Parcelable), [])]), AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])]), AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])]), Statement(n--) {, []), AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression((Parcelable) array.get(n), [])]), AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mHasFds, []), Expression(fdFound, [])]), AssignmentExpression(=, [VariableReference(mFdsKnown, []), Expression(true, [])]), Statement(}, []), Statement(return mHasFds, []), Statement(}, [])])  Statement({, [])  Statement(if (!mFdsKnown) {, [])  Statement(// keep going until we find one or run out of data, [])  AssignmentExpression(=, [VariableReference(boolean fdFound, []), Expression(false, [])])    VariableReference(boolean fdFound, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(if (mParcelledData !, []), Expression(null) {, [])])    VariableReference(if (mParcelledData !, [])    Expression(null) {, [])  MethodCall(if (mParcelledData.hasFileDescriptors()), [VariableReference(if (mParcelledData, []), Expression(), [])])    VariableReference(if (mParcelledData, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(}, [])  Statement(} else {, [])  Statement(// It's been unparcelled, so we need to walk the map, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(mMap.size() - 1, [])])    VariableReference(for (int i, [])    Expression(mMap.size() - 1, [])  AssignmentExpression(=, [VariableReference(i >, []), Expression(0, [])])    VariableReference(i >, [])    Expression(0, [])  Statement(i--) {, [])  AssignmentExpression(=, [VariableReference(Object obj, []), Expression(mMap.valueAt(i), [])])    VariableReference(Object obj, [])    Expression(mMap.valueAt(i), [])  Statement(if (obj instanceof Parcelable) {, [])  AssignmentExpression(=, [VariableReference(if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])])    VariableReference(if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(} else if (obj instanceof Parcelable[]) {, [])  AssignmentExpression(=, [VariableReference(Parcelable[] array, []), Expression((Parcelable[]) obj, [])])    VariableReference(Parcelable[] array, [])    Expression((Parcelable[]) obj, [])  AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.length - 1, [])])    VariableReference(for (int n, [])    Expression(array.length - 1, [])  AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])])    VariableReference(n >, [])    Expression(0, [])  Statement(n--) {, [])  AssignmentExpression(=, [VariableReference(if ((array[n].describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])])    VariableReference(if ((array[n].describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(} else if (obj instanceof SparseArray) {, [])  AssignmentExpression(=, [VariableReference(SparseArray<? extends Parcelable> array, []), Expression((SparseArray<? extends Parcelable>) obj, [])])    VariableReference(SparseArray<? extends Parcelable> array, [])    Expression((SparseArray<? extends Parcelable>) obj, [])  AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])])    VariableReference(for (int n, [])    Expression(array.size() - 1, [])  AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])])    VariableReference(n >, [])    Expression(0, [])  Statement(n--) {, [])  AssignmentExpression(=, [VariableReference(if ((array.valueAt(n).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])])    VariableReference(if ((array.valueAt(n).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(} else if (obj instanceof ArrayList) {, [])  AssignmentExpression(=, [VariableReference(ArrayList array, []), Expression((ArrayList) obj, [])])    VariableReference(ArrayList array, [])    Expression((ArrayList) obj, [])  Statement(// Parcelables, [])  Statement(only look inside for Parcelables, [])  MethodCall(if (!array.isEmpty() && (array.get(0) instanceof Parcelable)), [VariableReference(if (!array, []), Expression() && (array.get(0) instanceof Parcelable), [])])    VariableReference(if (!array, [])    Expression() && (array.get(0) instanceof Parcelable), [])  AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])])    VariableReference(for (int n, [])    Expression(array.size() - 1, [])  AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])])    VariableReference(n >, [])    Expression(0, [])  Statement(n--) {, [])  AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression((Parcelable) array.get(n), [])])    VariableReference(Parcelable p, [])    Expression((Parcelable) array.get(n), [])  AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])])    VariableReference(if (p !, [])    Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mHasFds, []), Expression(fdFound, [])])    VariableReference(mHasFds, [])    Expression(fdFound, [])  AssignmentExpression(=, [VariableReference(mFdsKnown, []), Expression(true, [])])    VariableReference(mFdsKnown, [])    Expression(true, [])  Statement(}, [])  Statement(return mHasFds, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!mFdsKnown) {, []), Statement(// keep going until we find one or run out of data, []), AssignmentExpression(=, [VariableReference(boolean fdFound, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(if (mParcelledData !, []), Expression(null) {, [])]), MethodCall(if (mParcelledData.hasFileDescriptors()), [VariableReference(if (mParcelledData, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(}, []), Statement(} else {, []), Statement(// It's been unparcelled, so we need to walk the map, []), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(mMap.size() - 1, [])]), AssignmentExpression(=, [VariableReference(i >, []), Expression(0, [])]), Statement(i--) {, []), AssignmentExpression(=, [VariableReference(Object obj, []), Expression(mMap.valueAt(i), [])]), Statement(if (obj instanceof Parcelable) {, []), AssignmentExpression(=, [VariableReference(if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(} else if (obj instanceof Parcelable[]) {, []), AssignmentExpression(=, [VariableReference(Parcelable[] array, []), Expression((Parcelable[]) obj, [])]), AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.length - 1, [])]), AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])]), Statement(n--) {, []), AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression(array[n], [])]), AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(}, []), Statement(} else if (obj instanceof SparseArray) {, []), AssignmentExpression(=, [VariableReference(SparseArray<? extends Parcelable> array, []), Expression((SparseArray<? extends Parcelable>) obj, [])]), AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])]), AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])]), Statement(n--) {, []), AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression(array.valueAt(n), [])]), AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && (p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(}, []), Statement(} else if (obj instanceof ArrayList) {, []), AssignmentExpression(=, [VariableReference(ArrayList array, []), Expression((ArrayList) obj, [])]), Statement(// Parcelables, []), Statement(only look inside for Parcelables, []), MethodCall(if (!array.isEmpty() && (array.get(0) instanceof Parcelable)), [VariableReference(if (!array, []), Expression() && (array.get(0) instanceof Parcelable), [])]), AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])]), AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])]), Statement(n--) {, []), AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression((Parcelable) array.get(n), [])]), AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])]), AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])]), Statement(break, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mHasFds, []), Expression(fdFound, [])]), AssignmentExpression(=, [VariableReference(mFdsKnown, []), Expression(true, [])]), Statement(}, []), Statement(return mHasFds, []), Statement(}, [])])  Statement({, [])  Statement(if (!mFdsKnown) {, [])  Statement(// keep going until we find one or run out of data, [])  AssignmentExpression(=, [VariableReference(boolean fdFound, []), Expression(false, [])])    VariableReference(boolean fdFound, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(if (mParcelledData !, []), Expression(null) {, [])])    VariableReference(if (mParcelledData !, [])    Expression(null) {, [])  MethodCall(if (mParcelledData.hasFileDescriptors()), [VariableReference(if (mParcelledData, []), Expression(), [])])    VariableReference(if (mParcelledData, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(}, [])  Statement(} else {, [])  Statement(// It's been unparcelled, so we need to walk the map, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(mMap.size() - 1, [])])    VariableReference(for (int i, [])    Expression(mMap.size() - 1, [])  AssignmentExpression(=, [VariableReference(i >, []), Expression(0, [])])    VariableReference(i >, [])    Expression(0, [])  Statement(i--) {, [])  AssignmentExpression(=, [VariableReference(Object obj, []), Expression(mMap.valueAt(i), [])])    VariableReference(Object obj, [])    Expression(mMap.valueAt(i), [])  Statement(if (obj instanceof Parcelable) {, [])  AssignmentExpression(=, [VariableReference(if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, []), Expression(0) {, [])])    VariableReference(if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(} else if (obj instanceof Parcelable[]) {, [])  AssignmentExpression(=, [VariableReference(Parcelable[] array, []), Expression((Parcelable[]) obj, [])])    VariableReference(Parcelable[] array, [])    Expression((Parcelable[]) obj, [])  AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.length - 1, [])])    VariableReference(for (int n, [])    Expression(array.length - 1, [])  AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])])    VariableReference(n >, [])    Expression(0, [])  Statement(n--) {, [])  AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression(array[n], [])])    VariableReference(Parcelable p, [])    Expression(array[n], [])  AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])])    VariableReference(if (p !, [])    Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(} else if (obj instanceof SparseArray) {, [])  AssignmentExpression(=, [VariableReference(SparseArray<? extends Parcelable> array, []), Expression((SparseArray<? extends Parcelable>) obj, [])])    VariableReference(SparseArray<? extends Parcelable> array, [])    Expression((SparseArray<? extends Parcelable>) obj, [])  AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])])    VariableReference(for (int n, [])    Expression(array.size() - 1, [])  AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])])    VariableReference(n >, [])    Expression(0, [])  Statement(n--) {, [])  AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression(array.valueAt(n), [])])    VariableReference(Parcelable p, [])    Expression(array.valueAt(n), [])  AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && (p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])])    VariableReference(if (p !, [])    Expression(null && (p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(} else if (obj instanceof ArrayList) {, [])  AssignmentExpression(=, [VariableReference(ArrayList array, []), Expression((ArrayList) obj, [])])    VariableReference(ArrayList array, [])    Expression((ArrayList) obj, [])  Statement(// Parcelables, [])  Statement(only look inside for Parcelables, [])  MethodCall(if (!array.isEmpty() && (array.get(0) instanceof Parcelable)), [VariableReference(if (!array, []), Expression() && (array.get(0) instanceof Parcelable), [])])    VariableReference(if (!array, [])    Expression() && (array.get(0) instanceof Parcelable), [])  AssignmentExpression(=, [VariableReference(for (int n, []), Expression(array.size() - 1, [])])    VariableReference(for (int n, [])    Expression(array.size() - 1, [])  AssignmentExpression(=, [VariableReference(n >, []), Expression(0, [])])    VariableReference(n >, [])    Expression(0, [])  Statement(n--) {, [])  AssignmentExpression(=, [VariableReference(Parcelable p, []), Expression((Parcelable) array.get(n), [])])    VariableReference(Parcelable p, [])    Expression((Parcelable) array.get(n), [])  AssignmentExpression(=, [VariableReference(if (p !, []), Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])])    VariableReference(if (p !, [])    Expression(null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) !, [])  AssignmentExpression(=, [VariableReference(fdFound, []), Expression(true, [])])    VariableReference(fdFound, [])    Expression(true, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mHasFds, []), Expression(fdFound, [])])    VariableReference(mHasFds, [])    Expression(fdFound, [])  AssignmentExpression(=, [VariableReference(mFdsKnown, []), Expression(true, [])])    VariableReference(mFdsKnown, [])    Expression(true, [])  Statement(}, [])  Statement(return mHasFds, [])  Statement(}, [])",1,"/**
 * Reports whether the bundle contains any parcelled file descriptors.
 */
","/**
 * Reports whether the bundle contains any parcelled file descriptors.
 */
",0,,,0,,,,"1,2","3,4",1,"3,4",0,The late version introduces additional null checks before accessing `Parcelable` objects in several places of the nested `for` loops. These changes qualify as both control dependency changes and other statement changes because they introduce new conditions and involve adding null checks.,"The changes involve additional null checks, which do not lead to different return values or exceptions being thrown in a way that would qualify as a Compatibility Issue. Thus, the CI type is 0."
"<android.content.IntentFilter: void writeToParcel(Parcel,int)>",22,23,,,,"{
    dest.writeStringList(mActions);
    if (mCategories != null) {
        dest.writeInt(1);
        dest.writeStringList(mCategories);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataSchemes);
    } else {
        dest.writeInt(0);
    }
    if (mDataTypes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataTypes);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemeSpecificParts != null) {
        final int N = mDataSchemeSpecificParts.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataAuthorities != null) {
        final int N = mDataAuthorities.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataAuthorities.get(i).writeToParcel(dest);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataPaths != null) {
        final int N = mDataPaths.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataPaths.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(mPriority);
    dest.writeInt(mHasPartialTypes ? 1 : 0);
}","{
    dest.writeStringList(mActions);
    if (mCategories != null) {
        dest.writeInt(1);
        dest.writeStringList(mCategories);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataSchemes);
    } else {
        dest.writeInt(0);
    }
    if (mDataTypes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataTypes);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemeSpecificParts != null) {
        final int N = mDataSchemeSpecificParts.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataAuthorities != null) {
        final int N = mDataAuthorities.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataAuthorities.get(i).writeToParcel(dest);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataPaths != null) {
        final int N = mDataPaths.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataPaths.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(mPriority);
    dest.writeInt(mHasPartialTypes ? 1 : 0);
    dest.writeInt(getAutoVerify() ? 1 : 0);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeStringList(mActions), [VariableReference(dest, []), Expression(mActions, [])]), AssignmentExpression(=, [VariableReference(if (mCategories !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeStringList(mCategories), [VariableReference(dest, []), Expression(mCategories, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataSchemes !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeStringList(mDataSchemes), [VariableReference(dest, []), Expression(mDataSchemes, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataTypes !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeStringList(mDataTypes), [VariableReference(dest, []), Expression(mDataTypes, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataSchemeSpecificParts !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataSchemeSpecificParts.size(), [])]), MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), MethodCall(mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags), [VariableReference(mDataSchemeSpecificParts, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])]), Statement(}, []), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataAuthorities !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataAuthorities.size(), [])]), MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), MethodCall(mDataAuthorities.get(i).writeToParcel(dest), [VariableReference(mDataAuthorities, []), Expression(i).writeToParcel(dest, [])]), Statement(}, []), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataPaths !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataPaths.size(), [])]), MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), MethodCall(mDataPaths.get(i).writeToParcel(dest, flags), [VariableReference(mDataPaths, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])]), Statement(}, []), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeInt(mPriority), [VariableReference(dest, []), Expression(mPriority, [])]), MethodCall(dest.writeInt(mHasPartialTypes ? 1 : 0), [VariableReference(dest, []), Expression(mHasPartialTypes ? 1 : 0, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeStringList(mActions), [VariableReference(dest, []), Expression(mActions, [])])    VariableReference(dest, [])    Expression(mActions, [])  AssignmentExpression(=, [VariableReference(if (mCategories !, []), Expression(null) {, [])])    VariableReference(if (mCategories !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeStringList(mCategories), [VariableReference(dest, []), Expression(mCategories, [])])    VariableReference(dest, [])    Expression(mCategories, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataSchemes !, []), Expression(null) {, [])])    VariableReference(if (mDataSchemes !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeStringList(mDataSchemes), [VariableReference(dest, []), Expression(mDataSchemes, [])])    VariableReference(dest, [])    Expression(mDataSchemes, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataTypes !, []), Expression(null) {, [])])    VariableReference(if (mDataTypes !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeStringList(mDataTypes), [VariableReference(dest, []), Expression(mDataTypes, [])])    VariableReference(dest, [])    Expression(mDataTypes, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataSchemeSpecificParts !, []), Expression(null) {, [])])    VariableReference(if (mDataSchemeSpecificParts !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataSchemeSpecificParts.size(), [])])    VariableReference(final int N, [])    Expression(mDataSchemeSpecificParts.size(), [])  MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])])    VariableReference(dest, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  MethodCall(mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags), [VariableReference(mDataSchemeSpecificParts, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])])    VariableReference(mDataSchemeSpecificParts, [])    Expression(i).writeToParcel(dest, [])    Expression(flags, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataAuthorities !, []), Expression(null) {, [])])    VariableReference(if (mDataAuthorities !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataAuthorities.size(), [])])    VariableReference(final int N, [])    Expression(mDataAuthorities.size(), [])  MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])])    VariableReference(dest, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  MethodCall(mDataAuthorities.get(i).writeToParcel(dest), [VariableReference(mDataAuthorities, []), Expression(i).writeToParcel(dest, [])])    VariableReference(mDataAuthorities, [])    Expression(i).writeToParcel(dest, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataPaths !, []), Expression(null) {, [])])    VariableReference(if (mDataPaths !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataPaths.size(), [])])    VariableReference(final int N, [])    Expression(mDataPaths.size(), [])  MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])])    VariableReference(dest, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  MethodCall(mDataPaths.get(i).writeToParcel(dest, flags), [VariableReference(mDataPaths, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])])    VariableReference(mDataPaths, [])    Expression(i).writeToParcel(dest, [])    Expression(flags, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeInt(mPriority), [VariableReference(dest, []), Expression(mPriority, [])])    VariableReference(dest, [])    Expression(mPriority, [])  MethodCall(dest.writeInt(mHasPartialTypes ? 1 : 0), [VariableReference(dest, []), Expression(mHasPartialTypes ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mHasPartialTypes ? 1 : 0, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(dest.writeStringList(mActions), [VariableReference(dest, []), Expression(mActions, [])]), AssignmentExpression(=, [VariableReference(if (mCategories !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeStringList(mCategories), [VariableReference(dest, []), Expression(mCategories, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataSchemes !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeStringList(mDataSchemes), [VariableReference(dest, []), Expression(mDataSchemes, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataTypes !, []), Expression(null) {, [])]), MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])]), MethodCall(dest.writeStringList(mDataTypes), [VariableReference(dest, []), Expression(mDataTypes, [])]), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataSchemeSpecificParts !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataSchemeSpecificParts.size(), [])]), MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), MethodCall(mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags), [VariableReference(mDataSchemeSpecificParts, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])]), Statement(}, []), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataAuthorities !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataAuthorities.size(), [])]), MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), MethodCall(mDataAuthorities.get(i).writeToParcel(dest), [VariableReference(mDataAuthorities, []), Expression(i).writeToParcel(dest, [])]), Statement(}, []), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDataPaths !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataPaths.size(), [])]), MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), MethodCall(mDataPaths.get(i).writeToParcel(dest, flags), [VariableReference(mDataPaths, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])]), Statement(}, []), Statement(} else {, []), MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])]), Statement(}, []), MethodCall(dest.writeInt(mPriority), [VariableReference(dest, []), Expression(mPriority, [])]), MethodCall(dest.writeInt(mHasPartialTypes ? 1 : 0), [VariableReference(dest, []), Expression(mHasPartialTypes ? 1 : 0, [])]), MethodCall(dest.writeInt(getAutoVerify() ? 1 : 0), [VariableReference(dest, []), Expression(getAutoVerify() ? 1 : 0, [])]), Statement(}, [])])  Statement({, [])  MethodCall(dest.writeStringList(mActions), [VariableReference(dest, []), Expression(mActions, [])])    VariableReference(dest, [])    Expression(mActions, [])  AssignmentExpression(=, [VariableReference(if (mCategories !, []), Expression(null) {, [])])    VariableReference(if (mCategories !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeStringList(mCategories), [VariableReference(dest, []), Expression(mCategories, [])])    VariableReference(dest, [])    Expression(mCategories, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataSchemes !, []), Expression(null) {, [])])    VariableReference(if (mDataSchemes !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeStringList(mDataSchemes), [VariableReference(dest, []), Expression(mDataSchemes, [])])    VariableReference(dest, [])    Expression(mDataSchemes, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataTypes !, []), Expression(null) {, [])])    VariableReference(if (mDataTypes !, [])    Expression(null) {, [])  MethodCall(dest.writeInt(1), [VariableReference(dest, []), Expression(1, [])])    VariableReference(dest, [])    Expression(1, [])  MethodCall(dest.writeStringList(mDataTypes), [VariableReference(dest, []), Expression(mDataTypes, [])])    VariableReference(dest, [])    Expression(mDataTypes, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataSchemeSpecificParts !, []), Expression(null) {, [])])    VariableReference(if (mDataSchemeSpecificParts !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataSchemeSpecificParts.size(), [])])    VariableReference(final int N, [])    Expression(mDataSchemeSpecificParts.size(), [])  MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])])    VariableReference(dest, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  MethodCall(mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags), [VariableReference(mDataSchemeSpecificParts, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])])    VariableReference(mDataSchemeSpecificParts, [])    Expression(i).writeToParcel(dest, [])    Expression(flags, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataAuthorities !, []), Expression(null) {, [])])    VariableReference(if (mDataAuthorities !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataAuthorities.size(), [])])    VariableReference(final int N, [])    Expression(mDataAuthorities.size(), [])  MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])])    VariableReference(dest, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  MethodCall(mDataAuthorities.get(i).writeToParcel(dest), [VariableReference(mDataAuthorities, []), Expression(i).writeToParcel(dest, [])])    VariableReference(mDataAuthorities, [])    Expression(i).writeToParcel(dest, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDataPaths !, []), Expression(null) {, [])])    VariableReference(if (mDataPaths !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mDataPaths.size(), [])])    VariableReference(final int N, [])    Expression(mDataPaths.size(), [])  MethodCall(dest.writeInt(N), [VariableReference(dest, []), Expression(N, [])])    VariableReference(dest, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  MethodCall(mDataPaths.get(i).writeToParcel(dest, flags), [VariableReference(mDataPaths, []), Expression(i).writeToParcel(dest, []), Expression(flags, [])])    VariableReference(mDataPaths, [])    Expression(i).writeToParcel(dest, [])    Expression(flags, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(dest.writeInt(0), [VariableReference(dest, []), Expression(0, [])])    VariableReference(dest, [])    Expression(0, [])  Statement(}, [])  MethodCall(dest.writeInt(mPriority), [VariableReference(dest, []), Expression(mPriority, [])])    VariableReference(dest, [])    Expression(mPriority, [])  MethodCall(dest.writeInt(mHasPartialTypes ? 1 : 0), [VariableReference(dest, []), Expression(mHasPartialTypes ? 1 : 0, [])])    VariableReference(dest, [])    Expression(mHasPartialTypes ? 1 : 0, [])  MethodCall(dest.writeInt(getAutoVerify() ? 1 : 0), [VariableReference(dest, []), Expression(getAutoVerify() ? 1 : 0, [])])    VariableReference(dest, [])    Expression(getAutoVerify() ? 1 : 0, [])  Statement(}, [])",1,,,0,,,0,,,,1,"1,4",1,4,0,"The late version adds a new line of code `dest.writeInt(getAutoVerify() ? 1 : 0);` at the end of the method. This falls under the ""Other statement changed"" category because it does not directly modify return value, exception handling, or control flow, nor does it change a dependent API.","The added statement writes an additional value to the Parcel, but this does not affect the return value or control flow or exception. So, no compatibility issue is detected in this context."
<android.content.res.TypedArray: Resources getResources()>,22,23,,,,"{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    return mResources;
}","{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    return mResources;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mRecycled) {, []), Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), []), Statement(}, []), Statement(return mResources, []), Statement(}, [])])  Statement({, [])  Statement(if (mRecycled) {, [])  Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), [])  Statement(}, [])  Statement(return mResources, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (mRecycled) {, []), Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), []), Statement(}, []), Statement(return mResources, []), Statement(}, [])])  Statement({, [])  Statement(if (mRecycled) {, [])  Statement(throw new RuntimeException(""Cannot make calls to a recycled instance!""), [])  Statement(}, [])  Statement(return mResources, [])  Statement(}, [])",0,"/**
 * Return the Resources object this array was loaded from.
 */
","/**
 * Returns the Resources object this array was loaded from.
 *
 * @throws RuntimeException if the TypedArray has already been recycled.
 */
",1,,,0,,,,0,0,0,0,0,There are no changes between the early and late implementations of the method.,No compatibility issues since there are no changes in the implementation between the two versions.
<android.widget.TimePicker: boolean is24HourView()>,22,23,,,,"{
    return mDelegate.is24HourView();
}","{
    return mDelegate.is24HourView();
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return mDelegate.is24HourView(), [VariableReference(return mDelegate, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mDelegate.is24HourView(), [VariableReference(return mDelegate, []), Expression(, [])])    VariableReference(return mDelegate, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mDelegate.is24HourView(), [VariableReference(return mDelegate, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mDelegate.is24HourView(), [VariableReference(return mDelegate, []), Expression(, [])])    VariableReference(return mDelegate, [])    Expression(, [])  Statement(}, [])",0,"/**
 * @return true if this is in 24 hour view else false.
 */
","/**
 * @return {@code true} if this widget displays time in 24-hour mode,
 * {@code false} otherwise}
 * @see #setIs24HourView(Boolean)
 */
",1,,,0,,,,0,0,0,0,0,There is no change between the early and late implementations. The code and the AST nodes are identical.,"Since there are no changes in the implementation, there are no potential Compatibility Issues."
<android.net.DhcpStateMachine.StoppedState: boolean processMessage(Message)>,22,23,,,,"{
    boolean retValue = HANDLED;
    if (DBG)
        Log.d(TAG, getName() + message.toString() + ""\n"");
    switch(message.what) {
        case CMD_START_DHCP:
            if (mRegisteredForPreDhcpNotification) {
                /* Notify controller before starting DHCP */
                mController.sendMessage(CMD_PRE_DHCP_ACTION);
                transitionTo(mWaitBeforeStartState);
            } else {
                if (runDhcp(DhcpAction.START)) {
                    transitionTo(mRunningState);
                }
            }
            break;
        case CMD_STOP_DHCP:
            // ignore
            break;
        default:
            retValue = NOT_HANDLED;
            break;
    }
    return retValue;
}","{
    boolean retValue = HANDLED;
    if (DBG)
        Log.d(TAG, getName() + message.toString() + ""\n"");
    switch(message.what) {
        case CMD_START_DHCP:
            if (mRegisteredForPreDhcpNotification) {
                /* Notify controller before starting DHCP */
                mController.sendMessage(CMD_PRE_DHCP_ACTION);
                transitionTo(mWaitBeforeStartState);
            } else {
                if (runDhcpStart()) {
                    transitionTo(mRunningState);
                }
            }
            break;
        case CMD_STOP_DHCP:
            // ignore
            break;
        default:
            retValue = NOT_HANDLED;
            break;
    }
    return retValue;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(boolean retValue, []), Expression(HANDLED, [])]), Statement(if (DBG), []), MethodCall(Log.d(TAG, getName() + message.toString() + ""\n""), [VariableReference(Log, []), Expression(TAG, []), Expression(getName() + message.toString() + ""\n"", [])]), Statement(case CMD_START_DHCP:, []), Statement(if (mRegisteredForPreDhcpNotification) {, []), Statement(/* Notify controller before starting DHCP */, []), MethodCall(mController.sendMessage(CMD_PRE_DHCP_ACTION), [VariableReference(mController, []), Expression(CMD_PRE_DHCP_ACTION, [])]), Statement(transitionTo(mWaitBeforeStartState), []), Statement(} else {, []), Statement(transitionTo(mRunningState), []), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case CMD_STOP_DHCP:, []), Statement(// ignore, []), Statement(break, []), Statement(default:, []), AssignmentExpression(=, [VariableReference(retValue, []), Expression(NOT_HANDLED, [])]), Statement(break, []), Statement(}, []), Statement(return retValue, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(boolean retValue, []), Expression(HANDLED, [])])    VariableReference(boolean retValue, [])    Expression(HANDLED, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, getName() + message.toString() + ""\n""), [VariableReference(Log, []), Expression(TAG, []), Expression(getName() + message.toString() + ""\n"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(getName() + message.toString() + ""\n"", [])  Statement(case CMD_START_DHCP:, [])  Statement(if (mRegisteredForPreDhcpNotification) {, [])  Statement(/* Notify controller before starting DHCP */, [])  MethodCall(mController.sendMessage(CMD_PRE_DHCP_ACTION), [VariableReference(mController, []), Expression(CMD_PRE_DHCP_ACTION, [])])    VariableReference(mController, [])    Expression(CMD_PRE_DHCP_ACTION, [])  Statement(transitionTo(mWaitBeforeStartState), [])  Statement(} else {, [])  Statement(transitionTo(mRunningState), [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case CMD_STOP_DHCP:, [])  Statement(// ignore, [])  Statement(break, [])  Statement(default:, [])  AssignmentExpression(=, [VariableReference(retValue, []), Expression(NOT_HANDLED, [])])    VariableReference(retValue, [])    Expression(NOT_HANDLED, [])  Statement(break, [])  Statement(}, [])  Statement(return retValue, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(boolean retValue, []), Expression(HANDLED, [])]), Statement(if (DBG), []), MethodCall(Log.d(TAG, getName() + message.toString() + ""\n""), [VariableReference(Log, []), Expression(TAG, []), Expression(getName() + message.toString() + ""\n"", [])]), Statement(case CMD_START_DHCP:, []), Statement(if (mRegisteredForPreDhcpNotification) {, []), Statement(/* Notify controller before starting DHCP */, []), MethodCall(mController.sendMessage(CMD_PRE_DHCP_ACTION), [VariableReference(mController, []), Expression(CMD_PRE_DHCP_ACTION, [])]), Statement(transitionTo(mWaitBeforeStartState), []), Statement(} else {, []), Statement(if (runDhcpStart()) {, []), Statement(transitionTo(mRunningState), []), Statement(}, []), Statement(}, []), Statement(break, []), Statement(case CMD_STOP_DHCP:, []), Statement(// ignore, []), Statement(break, []), Statement(default:, []), AssignmentExpression(=, [VariableReference(retValue, []), Expression(NOT_HANDLED, [])]), Statement(break, []), Statement(}, []), Statement(return retValue, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(boolean retValue, []), Expression(HANDLED, [])])    VariableReference(boolean retValue, [])    Expression(HANDLED, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, getName() + message.toString() + ""\n""), [VariableReference(Log, []), Expression(TAG, []), Expression(getName() + message.toString() + ""\n"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(getName() + message.toString() + ""\n"", [])  Statement(case CMD_START_DHCP:, [])  Statement(if (mRegisteredForPreDhcpNotification) {, [])  Statement(/* Notify controller before starting DHCP */, [])  MethodCall(mController.sendMessage(CMD_PRE_DHCP_ACTION), [VariableReference(mController, []), Expression(CMD_PRE_DHCP_ACTION, [])])    VariableReference(mController, [])    Expression(CMD_PRE_DHCP_ACTION, [])  Statement(transitionTo(mWaitBeforeStartState), [])  Statement(} else {, [])  Statement(if (runDhcpStart()) {, [])  Statement(transitionTo(mRunningState), [])  Statement(}, [])  Statement(}, [])  Statement(break, [])  Statement(case CMD_STOP_DHCP:, [])  Statement(// ignore, [])  Statement(break, [])  Statement(default:, [])  AssignmentExpression(=, [VariableReference(retValue, []), Expression(NOT_HANDLED, [])])    VariableReference(retValue, [])    Expression(NOT_HANDLED, [])  Statement(break, [])  Statement(}, [])  Statement(return retValue, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,2,"3,5",1,"1,3,5",1,"The method `runDhcp(DhcpAction.START)` was removed and replaced by `runDhcpStart()`, which is a dependent API change. Furthermore, the control flow within the else block of `case CMD_START_DHCP` has changed due to the addition of an if statement, resulting in a control dependency change and potential return value change.","The changes can result in different return values and hence different behavior of the API when invoked in different versions (based on the return values of `runDhcp(DhcpAction.START)` and `runDhcpStart()`), leading to CI type 1."
<android.widget.ProgressBar: void setProgressDrawable(Drawable)>,23,24,,,,"{
    if (mProgressDrawable != d) {
        if (mProgressDrawable != null) {
            mProgressDrawable.setCallback(null);
            unscheduleDrawable(mProgressDrawable);
        }
        mProgressDrawable = d;
        if (d != null) {
            d.setCallback(this);
            d.setLayoutDirection(getLayoutDirection());
            if (d.isStateful()) {
                d.setState(getDrawableState());
            }
            // Make sure the ProgressBar is always tall enough
            int drawableHeight = d.getMinimumHeight();
            if (mMaxHeight < drawableHeight) {
                mMaxHeight = drawableHeight;
                requestLayout();
            }
            applyProgressTints();
        }
        if (!mIndeterminate) {
            mCurrentDrawable = d;
            postInvalidate();
        }
        updateDrawableBounds(getWidth(), getHeight());
        updateDrawableState();
        doRefreshProgress(R.id.progress, mProgress, false, false);
        doRefreshProgress(R.id.secondaryProgress, mSecondaryProgress, false, false);
    }
}","{
    if (mProgressDrawable != d) {
        if (mProgressDrawable != null) {
            mProgressDrawable.setCallback(null);
            unscheduleDrawable(mProgressDrawable);
        }
        mProgressDrawable = d;
        if (d != null) {
            d.setCallback(this);
            d.setLayoutDirection(getLayoutDirection());
            if (d.isStateful()) {
                d.setState(getDrawableState());
            }
            // Make sure the ProgressBar is always tall enough
            int drawableHeight = d.getMinimumHeight();
            if (mMaxHeight < drawableHeight) {
                mMaxHeight = drawableHeight;
                requestLayout();
            }
            applyProgressTints();
        }
        if (!mIndeterminate) {
            swapCurrentDrawable(d);
            postInvalidate();
        }
        updateDrawableBounds(getWidth(), getHeight());
        updateDrawableState();
        doRefreshProgress(R.id.progress, mProgress, false, false, false);
        doRefreshProgress(R.id.secondaryProgress, mSecondaryProgress, false, false, false);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(d) {, [])]), AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(null) {, [])]), MethodCall(mProgressDrawable.setCallback(null), [VariableReference(mProgressDrawable, []), Expression(null, [])]), Statement(unscheduleDrawable(mProgressDrawable), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mProgressDrawable, []), Expression(d, [])]), AssignmentExpression(=, [VariableReference(if (d !, []), Expression(null) {, [])]), MethodCall(d.setCallback(this), [VariableReference(d, []), Expression(this, [])]), MethodCall(d.setLayoutDirection(getLayoutDirection()), [VariableReference(d, []), Expression(getLayoutDirection(), [])]), MethodCall(if (d.isStateful()), [VariableReference(if (d, []), Expression(), [])]), MethodCall(d.setState(getDrawableState()), [VariableReference(d, []), Expression(getDrawableState(), [])]), Statement(}, []), Statement(// Make sure the ProgressBar is always tall enough, []), AssignmentExpression(=, [VariableReference(int drawableHeight, []), Expression(d.getMinimumHeight(), [])]), Statement(if (mMaxHeight < drawableHeight) {, []), AssignmentExpression(=, [VariableReference(mMaxHeight, []), Expression(drawableHeight, [])]), Statement(requestLayout(), []), Statement(}, []), Statement(applyProgressTints(), []), Statement(}, []), Statement(if (!mIndeterminate) {, []), AssignmentExpression(=, [VariableReference(mCurrentDrawable, []), Expression(d, [])]), Statement(postInvalidate(), []), Statement(}, []), Statement(updateDrawableBounds(getWidth(), getHeight()), []), Statement(updateDrawableState(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(d) {, [])])    VariableReference(if (mProgressDrawable !, [])    Expression(d) {, [])  AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(null) {, [])])    VariableReference(if (mProgressDrawable !, [])    Expression(null) {, [])  MethodCall(mProgressDrawable.setCallback(null), [VariableReference(mProgressDrawable, []), Expression(null, [])])    VariableReference(mProgressDrawable, [])    Expression(null, [])  Statement(unscheduleDrawable(mProgressDrawable), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mProgressDrawable, []), Expression(d, [])])    VariableReference(mProgressDrawable, [])    Expression(d, [])  AssignmentExpression(=, [VariableReference(if (d !, []), Expression(null) {, [])])    VariableReference(if (d !, [])    Expression(null) {, [])  MethodCall(d.setCallback(this), [VariableReference(d, []), Expression(this, [])])    VariableReference(d, [])    Expression(this, [])  MethodCall(d.setLayoutDirection(getLayoutDirection()), [VariableReference(d, []), Expression(getLayoutDirection(), [])])    VariableReference(d, [])    Expression(getLayoutDirection(), [])  MethodCall(if (d.isStateful()), [VariableReference(if (d, []), Expression(), [])])    VariableReference(if (d, [])    Expression(), [])  MethodCall(d.setState(getDrawableState()), [VariableReference(d, []), Expression(getDrawableState(), [])])    VariableReference(d, [])    Expression(getDrawableState(), [])  Statement(}, [])  Statement(// Make sure the ProgressBar is always tall enough, [])  AssignmentExpression(=, [VariableReference(int drawableHeight, []), Expression(d.getMinimumHeight(), [])])    VariableReference(int drawableHeight, [])    Expression(d.getMinimumHeight(), [])  Statement(if (mMaxHeight < drawableHeight) {, [])  AssignmentExpression(=, [VariableReference(mMaxHeight, []), Expression(drawableHeight, [])])    VariableReference(mMaxHeight, [])    Expression(drawableHeight, [])  Statement(requestLayout(), [])  Statement(}, [])  Statement(applyProgressTints(), [])  Statement(}, [])  Statement(if (!mIndeterminate) {, [])  AssignmentExpression(=, [VariableReference(mCurrentDrawable, []), Expression(d, [])])    VariableReference(mCurrentDrawable, [])    Expression(d, [])  Statement(postInvalidate(), [])  Statement(}, [])  Statement(updateDrawableBounds(getWidth(), getHeight()), [])  Statement(updateDrawableState(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(d) {, [])]), AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(null) {, [])]), MethodCall(mProgressDrawable.setCallback(null), [VariableReference(mProgressDrawable, []), Expression(null, [])]), Statement(unscheduleDrawable(mProgressDrawable), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mProgressDrawable, []), Expression(d, [])]), AssignmentExpression(=, [VariableReference(if (d !, []), Expression(null) {, [])]), MethodCall(d.setCallback(this), [VariableReference(d, []), Expression(this, [])]), MethodCall(d.setLayoutDirection(getLayoutDirection()), [VariableReference(d, []), Expression(getLayoutDirection(), [])]), MethodCall(if (d.isStateful()), [VariableReference(if (d, []), Expression(), [])]), MethodCall(d.setState(getDrawableState()), [VariableReference(d, []), Expression(getDrawableState(), [])]), Statement(}, []), Statement(// Make sure the ProgressBar is always tall enough, []), AssignmentExpression(=, [VariableReference(int drawableHeight, []), Expression(d.getMinimumHeight(), [])]), Statement(if (mMaxHeight < drawableHeight) {, []), AssignmentExpression(=, [VariableReference(mMaxHeight, []), Expression(drawableHeight, [])]), Statement(requestLayout(), []), Statement(}, []), Statement(applyProgressTints(), []), Statement(}, []), Statement(if (!mIndeterminate) {, []), Statement(swapCurrentDrawable(d), []), Statement(postInvalidate(), []), Statement(}, []), Statement(updateDrawableBounds(getWidth(), getHeight()), []), Statement(updateDrawableState(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(d) {, [])])    VariableReference(if (mProgressDrawable !, [])    Expression(d) {, [])  AssignmentExpression(=, [VariableReference(if (mProgressDrawable !, []), Expression(null) {, [])])    VariableReference(if (mProgressDrawable !, [])    Expression(null) {, [])  MethodCall(mProgressDrawable.setCallback(null), [VariableReference(mProgressDrawable, []), Expression(null, [])])    VariableReference(mProgressDrawable, [])    Expression(null, [])  Statement(unscheduleDrawable(mProgressDrawable), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mProgressDrawable, []), Expression(d, [])])    VariableReference(mProgressDrawable, [])    Expression(d, [])  AssignmentExpression(=, [VariableReference(if (d !, []), Expression(null) {, [])])    VariableReference(if (d !, [])    Expression(null) {, [])  MethodCall(d.setCallback(this), [VariableReference(d, []), Expression(this, [])])    VariableReference(d, [])    Expression(this, [])  MethodCall(d.setLayoutDirection(getLayoutDirection()), [VariableReference(d, []), Expression(getLayoutDirection(), [])])    VariableReference(d, [])    Expression(getLayoutDirection(), [])  MethodCall(if (d.isStateful()), [VariableReference(if (d, []), Expression(), [])])    VariableReference(if (d, [])    Expression(), [])  MethodCall(d.setState(getDrawableState()), [VariableReference(d, []), Expression(getDrawableState(), [])])    VariableReference(d, [])    Expression(getDrawableState(), [])  Statement(}, [])  Statement(// Make sure the ProgressBar is always tall enough, [])  AssignmentExpression(=, [VariableReference(int drawableHeight, []), Expression(d.getMinimumHeight(), [])])    VariableReference(int drawableHeight, [])    Expression(d.getMinimumHeight(), [])  Statement(if (mMaxHeight < drawableHeight) {, [])  AssignmentExpression(=, [VariableReference(mMaxHeight, []), Expression(drawableHeight, [])])    VariableReference(mMaxHeight, [])    Expression(drawableHeight, [])  Statement(requestLayout(), [])  Statement(}, [])  Statement(applyProgressTints(), [])  Statement(}, [])  Statement(if (!mIndeterminate) {, [])  Statement(swapCurrentDrawable(d), [])  Statement(postInvalidate(), [])  Statement(}, [])  Statement(updateDrawableBounds(getWidth(), getHeight()), [])  Statement(updateDrawableState(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Define the drawable used to draw the progress bar in progress mode.
 *
 * @param d the new drawable
 * @see #getProgressDrawable()
 * @see #setIndeterminate(boolean)
 */
","/**
 * Define the drawable used to draw the progress bar in progress mode.
 *
 * @param d the new drawable
 * @see #getProgressDrawable()
 * @see #setIndeterminate(boolean)
 */
",0,,,0,,,,"1,2","4,5",1,"1,3",1,"Several changes have been made. The assignment to `mCurrentDrawable` has been replaced with a method call to `swapCurrentDrawable(d)`, and the `doRefreshProgress` method calls have an additional parameter. Specifically, this involves the return type and control dependency. ","The use of `swapCurrentDrawable(d)` instead of straight assignment `mCurrentDrawable = d` can lead to different behavior, particularly with a possible change in internal handling in the `swapCurrentDrawable` method. Additionally, `doRefreshProgress` now has a new parameter which could affect how progress is updated. Thus, the CI type is 1."
"<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(CharSequence,int)>",23,24,,,,"{
    return mTarget.setComposingText(text, newCursorPosition);
}","{
    return mTarget.setComposingText(text, newCursorPosition);
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return mTarget.setComposingText(text, newCursorPosition), [VariableReference(return mTarget, []), Expression(text, []), Expression(newCursorPosition, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mTarget.setComposingText(text, newCursorPosition), [VariableReference(return mTarget, []), Expression(text, []), Expression(newCursorPosition, [])])    VariableReference(return mTarget, [])    Expression(text, [])    Expression(newCursorPosition, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mTarget.setComposingText(text, newCursorPosition), [VariableReference(return mTarget, []), Expression(text, []), Expression(newCursorPosition, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mTarget.setComposingText(text, newCursorPosition), [VariableReference(return mTarget, []), Expression(text, []), Expression(newCursorPosition, [])])    VariableReference(return mTarget, [])    Expression(text, [])    Expression(newCursorPosition, [])  Statement(}, [])",0,,"/**
 * {@inheritDoc}
 * @throws NullPointerException if the target is {@code null}.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation between the early and late versions.,There are no potential Compatibility Issues since the implementation has not changed.
<android.preference.PreferenceFragment: void onDestroyView()>,23,24,,,,"{
    mList = null;
    mHandler.removeCallbacks(mRequestFocus);
    mHandler.removeMessages(MSG_BIND_PREFERENCES);
    super.onDestroyView();
}","{
    if (mList != null) {
        mList.setOnKeyListener(null);
    }
    mList = null;
    mHandler.removeCallbacks(mRequestFocus);
    mHandler.removeMessages(MSG_BIND_PREFERENCES);
    super.onDestroyView();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mList, []), Expression(null, [])]), MethodCall(mHandler.removeCallbacks(mRequestFocus), [VariableReference(mHandler, []), Expression(mRequestFocus, [])]), MethodCall(mHandler.removeMessages(MSG_BIND_PREFERENCES), [VariableReference(mHandler, []), Expression(MSG_BIND_PREFERENCES, [])]), MethodCall(super.onDestroyView(), [VariableReference(super, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mList, []), Expression(null, [])])    VariableReference(mList, [])    Expression(null, [])  MethodCall(mHandler.removeCallbacks(mRequestFocus), [VariableReference(mHandler, []), Expression(mRequestFocus, [])])    VariableReference(mHandler, [])    Expression(mRequestFocus, [])  MethodCall(mHandler.removeMessages(MSG_BIND_PREFERENCES), [VariableReference(mHandler, []), Expression(MSG_BIND_PREFERENCES, [])])    VariableReference(mHandler, [])    Expression(MSG_BIND_PREFERENCES, [])  MethodCall(super.onDestroyView(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mList !, []), Expression(null) {, [])]), MethodCall(mList.setOnKeyListener(null), [VariableReference(mList, []), Expression(null, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mList, []), Expression(null, [])]), MethodCall(mHandler.removeCallbacks(mRequestFocus), [VariableReference(mHandler, []), Expression(mRequestFocus, [])]), MethodCall(mHandler.removeMessages(MSG_BIND_PREFERENCES), [VariableReference(mHandler, []), Expression(MSG_BIND_PREFERENCES, [])]), MethodCall(super.onDestroyView(), [VariableReference(super, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mList !, []), Expression(null) {, [])])    VariableReference(if (mList !, [])    Expression(null) {, [])  MethodCall(mList.setOnKeyListener(null), [VariableReference(mList, []), Expression(null, [])])    VariableReference(mList, [])    Expression(null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mList, []), Expression(null, [])])    VariableReference(mList, [])    Expression(null, [])  MethodCall(mHandler.removeCallbacks(mRequestFocus), [VariableReference(mHandler, []), Expression(mRequestFocus, [])])    VariableReference(mHandler, [])    Expression(mRequestFocus, [])  MethodCall(mHandler.removeMessages(MSG_BIND_PREFERENCES), [VariableReference(mHandler, []), Expression(MSG_BIND_PREFERENCES, [])])    VariableReference(mHandler, [])    Expression(MSG_BIND_PREFERENCES, [])  MethodCall(super.onDestroyView(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4",0,"3,4",0,"A control dependency change occurred with the addition of an `if (mList != null)` check and a call to `mList.setOnKeyListener(null)` within that `if` statement. This modifies the flow but does not change the return or exception handling. Other changes include adding a method call (`mList.setOnKeyListener(null)`), so the code change types are 3,4.","The added control dependency and method call alterations are unlikely to cause differing return values or exception handling behaviors. Therefore, no Compatibility Issue is detected based on the provided information."
"<android.app.admin.DevicePolicyManager: void setUserIcon(ComponentName,Bitmap)>",23,24,,,,"{
    try {
        mService.setUserIcon(admin, icon);
    } catch (RemoteException re) {
        Log.w(TAG, ""Could not set the user icon "", re);
    }
}","{
    throwIfParentInstance(""setUserIcon"");
    try {
        mService.setUserIcon(admin, icon);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(mService.setUserIcon(admin, icon), [VariableReference(mService, []), Expression(admin, []), Expression(icon, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.w(TAG, ""Could not set the user icon "", re), [VariableReference(Log, []), Expression(TAG, []), Expression(""Could not set the user icon "", []), Expression(re, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(mService.setUserIcon(admin, icon), [VariableReference(mService, []), Expression(admin, []), Expression(icon, [])])    VariableReference(mService, [])    Expression(admin, [])    Expression(icon, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.w(TAG, ""Could not set the user icon "", re), [VariableReference(Log, []), Expression(TAG, []), Expression(""Could not set the user icon "", []), Expression(re, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Could not set the user icon "", [])    Expression(re, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""setUserIcon""), []), Statement(try {, []), MethodCall(mService.setUserIcon(admin, icon), [VariableReference(mService, []), Expression(admin, []), Expression(icon, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""setUserIcon""), [])  Statement(try {, [])  MethodCall(mService.setUserIcon(admin, icon), [VariableReference(mService, []), Expression(admin, []), Expression(icon, [])])    VariableReference(mService, [])    Expression(admin, [])    Expression(icon, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])])    VariableReference(throw re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Called by profile or device owners to set the current user's photo.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param icon the bitmap to set as the photo.
 */
","/**
 * Called by profile or device owners to set the user's photo.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param icon the bitmap to set as the photo.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 */
",1,,,0,,,,"1,2","2,4",2,"2,3",2,"A throw statement is modified in the catch block for a RemoteException. The earlier implementation logged a warning, whereas the later implementation rethrows the exception (re.rethrowFromSystemServer()). Additionally, there's a new control statement added (throwIfParentInstance(""setUserIcon"")). Thus, the change types are 2,3.","The modified exception handling could lead to different behaviors when a RemoteException is caught. The new throw statement in the later implementation causes a rethrow of the exception, whereas the early implementation logs a warning. Therefore, the CI type is 2."
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(BluetoothGattCharacteristic)>,23,24,,,,"{
    if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ) == 0)
        return false;
    if (VDBG)
        Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid());
    if (mService == null || mClientIf == 0)
        return false;
    BluetoothGattService service = characteristic.getService();
    if (service == null)
        return false;
    BluetoothDevice device = service.getDevice();
    if (device == null)
        return false;
    synchronized (mDeviceBusy) {
        if (mDeviceBusy)
            return false;
        mDeviceBusy = true;
    }
    try {
        mService.readCharacteristic(mClientIf, device.getAddress(), service.getType(), service.getInstanceId(), new ParcelUuid(service.getUuid()), characteristic.getInstanceId(), new ParcelUuid(characteristic.getUuid()), AUTHENTICATION_NONE);
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
        mDeviceBusy = false;
        return false;
    }
    return true;
}","{
    if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ) == 0)
        return false;
    if (VDBG)
        Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid());
    if (mService == null || mClientIf == 0)
        return false;
    BluetoothGattService service = characteristic.getService();
    if (service == null)
        return false;
    BluetoothDevice device = service.getDevice();
    if (device == null)
        return false;
    synchronized (mDeviceBusy) {
        if (mDeviceBusy)
            return false;
        mDeviceBusy = true;
    }
    try {
        mService.readCharacteristic(mClientIf, device.getAddress(), characteristic.getInstanceId(), AUTHENTICATION_NONE);
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
        mDeviceBusy = false;
        return false;
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ), []), Expression(, [])]), Statement(return false, []), Statement(if (VDBG), []), MethodCall(Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid()), [VariableReference(Log, []), Expression(TAG, []), Expression(""readCharacteristic() - uuid: "" + characteristic.getUuid(), [])]), AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(BluetoothGattService service, []), Expression(characteristic.getService(), [])]), AssignmentExpression(=, [VariableReference(if (service, []), Expression(, [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(BluetoothDevice device, []), Expression(service.getDevice(), [])]), AssignmentExpression(=, [VariableReference(if (device, []), Expression(, [])]), Statement(return false, []), Statement(synchronized (mDeviceBusy) {, []), Statement(if (mDeviceBusy), []), Statement(return false, []), AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(true, [])]), Statement(}, []), Statement(try {, []), MethodCall(mService.readCharacteristic(mClientIf, device.getAddress(), service.getType(), service.getInstanceId(), new ParcelUuid(service.getUuid()), characteristic.getInstanceId(), new ParcelUuid(characteristic.getUuid()), AUTHENTICATION_NONE), [VariableReference(mService, []), Expression(mClientIf, []), Expression(device.getAddress(), []), Expression(service.getType(), []), Expression(service.getInstanceId(), []), Expression(new ParcelUuid(service.getUuid()), []), Expression(characteristic.getInstanceId(), []), Expression(new ParcelUuid(characteristic.getUuid()), []), Expression(AUTHENTICATION_NONE, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])]), AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(false, [])]), Statement(return false, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ), []), Expression(, [])])    VariableReference(if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ), [])    Expression(, [])  Statement(return false, [])  Statement(if (VDBG), [])  MethodCall(Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid()), [VariableReference(Log, []), Expression(TAG, []), Expression(""readCharacteristic() - uuid: "" + characteristic.getUuid(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""readCharacteristic() - uuid: "" + characteristic.getUuid(), [])  AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])])    VariableReference(if (mService, [])    Expression(, [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(BluetoothGattService service, []), Expression(characteristic.getService(), [])])    VariableReference(BluetoothGattService service, [])    Expression(characteristic.getService(), [])  AssignmentExpression(=, [VariableReference(if (service, []), Expression(, [])])    VariableReference(if (service, [])    Expression(, [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(BluetoothDevice device, []), Expression(service.getDevice(), [])])    VariableReference(BluetoothDevice device, [])    Expression(service.getDevice(), [])  AssignmentExpression(=, [VariableReference(if (device, []), Expression(, [])])    VariableReference(if (device, [])    Expression(, [])  Statement(return false, [])  Statement(synchronized (mDeviceBusy) {, [])  Statement(if (mDeviceBusy), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(true, [])])    VariableReference(mDeviceBusy, [])    Expression(true, [])  Statement(}, [])  Statement(try {, [])  MethodCall(mService.readCharacteristic(mClientIf, device.getAddress(), service.getType(), service.getInstanceId(), new ParcelUuid(service.getUuid()), characteristic.getInstanceId(), new ParcelUuid(characteristic.getUuid()), AUTHENTICATION_NONE), [VariableReference(mService, []), Expression(mClientIf, []), Expression(device.getAddress(), []), Expression(service.getType(), []), Expression(service.getInstanceId(), []), Expression(new ParcelUuid(service.getUuid()), []), Expression(characteristic.getInstanceId(), []), Expression(new ParcelUuid(characteristic.getUuid()), []), Expression(AUTHENTICATION_NONE, [])])    VariableReference(mService, [])    Expression(mClientIf, [])    Expression(device.getAddress(), [])    Expression(service.getType(), [])    Expression(service.getInstanceId(), [])    Expression(new ParcelUuid(service.getUuid()), [])    Expression(characteristic.getInstanceId(), [])    Expression(new ParcelUuid(characteristic.getUuid()), [])    Expression(AUTHENTICATION_NONE, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression("""", [])    Expression(e, [])  AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(false, [])])    VariableReference(mDeviceBusy, [])    Expression(false, [])  Statement(return false, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ), []), Expression(, [])]), Statement(return false, []), Statement(if (VDBG), []), MethodCall(Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid()), [VariableReference(Log, []), Expression(TAG, []), Expression(""readCharacteristic() - uuid: "" + characteristic.getUuid(), [])]), AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(BluetoothGattService service, []), Expression(characteristic.getService(), [])]), AssignmentExpression(=, [VariableReference(if (service, []), Expression(, [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(BluetoothDevice device, []), Expression(service.getDevice(), [])]), AssignmentExpression(=, [VariableReference(if (device, []), Expression(, [])]), Statement(return false, []), Statement(synchronized (mDeviceBusy) {, []), Statement(if (mDeviceBusy), []), Statement(return false, []), AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(true, [])]), Statement(}, []), Statement(try {, []), MethodCall(mService.readCharacteristic(mClientIf, device.getAddress(), characteristic.getInstanceId(), AUTHENTICATION_NONE), [VariableReference(mService, []), Expression(mClientIf, []), Expression(device.getAddress(), []), Expression(characteristic.getInstanceId(), []), Expression(AUTHENTICATION_NONE, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])]), AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(false, [])]), Statement(return false, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ), []), Expression(, [])])    VariableReference(if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ), [])    Expression(, [])  Statement(return false, [])  Statement(if (VDBG), [])  MethodCall(Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid()), [VariableReference(Log, []), Expression(TAG, []), Expression(""readCharacteristic() - uuid: "" + characteristic.getUuid(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""readCharacteristic() - uuid: "" + characteristic.getUuid(), [])  AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])])    VariableReference(if (mService, [])    Expression(, [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(BluetoothGattService service, []), Expression(characteristic.getService(), [])])    VariableReference(BluetoothGattService service, [])    Expression(characteristic.getService(), [])  AssignmentExpression(=, [VariableReference(if (service, []), Expression(, [])])    VariableReference(if (service, [])    Expression(, [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(BluetoothDevice device, []), Expression(service.getDevice(), [])])    VariableReference(BluetoothDevice device, [])    Expression(service.getDevice(), [])  AssignmentExpression(=, [VariableReference(if (device, []), Expression(, [])])    VariableReference(if (device, [])    Expression(, [])  Statement(return false, [])  Statement(synchronized (mDeviceBusy) {, [])  Statement(if (mDeviceBusy), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(true, [])])    VariableReference(mDeviceBusy, [])    Expression(true, [])  Statement(}, [])  Statement(try {, [])  MethodCall(mService.readCharacteristic(mClientIf, device.getAddress(), characteristic.getInstanceId(), AUTHENTICATION_NONE), [VariableReference(mService, []), Expression(mClientIf, []), Expression(device.getAddress(), []), Expression(characteristic.getInstanceId(), []), Expression(AUTHENTICATION_NONE, [])])    VariableReference(mService, [])    Expression(mClientIf, [])    Expression(device.getAddress(), [])    Expression(characteristic.getInstanceId(), [])    Expression(AUTHENTICATION_NONE, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression("""", [])    Expression(e, [])  AssignmentExpression(=, [VariableReference(mDeviceBusy, []), Expression(false, [])])    VariableReference(mDeviceBusy, [])    Expression(false, [])  Statement(return false, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,"/**
 * Reads the requested characteristic from the associated remote device.
 *
 * <p>This is an asynchronous operation. The result of the read operation
 * is reported by the {@link BluetoothGattCallback#onCharacteristicRead}
 * callback.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param characteristic Characteristic to read from the remote device
 * @return true, if the read operation was initiated successfully
 */
","/**
 * Reads the requested characteristic from the associated remote device.
 *
 * <p>This is an asynchronous operation. The result of the read operation
 * is reported by the {@link BluetoothGattCallback#onCharacteristicRead}
 * callback.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param characteristic Characteristic to read from the remote device
 * @return true, if the read operation was initiated successfully
 */
",0,,,0,,,,2,5,1,"1,5",1,"The method call to `mService.readCharacteristic` has reduced the number of parameters from eight to four. The early version passes various details such as `device.getAddress()`, `service.getType()`, `service.getInstanceId()`, and two ParcelUuids. The late version passes only `device.getAddress()` and `characteristic.getInstanceId()`. This indicates both a change in the dependent API (as the `readCharacteristic` method signature of `mService` has changed) and in the return statement of our method due to possibly different behavior. Therefore, the code change type is 1,5.","Because the return statement now potentially invokes a modified dependent API with different parameters, this may lead to different return values. This means the API can behave differently leading to different results, thus, the CI is 1."
<android.widget.TextView: void drawableStateChanged()>,23,24,,,,"{
    super.drawableStateChanged();
    if (mTextColor != null && mTextColor.isStateful() || (mHintTextColor != null && mHintTextColor.isStateful()) || (mLinkTextColor != null && mLinkTextColor.isStateful())) {
        updateTextColors();
    }
    if (mDrawables != null) {
        final int[] state = getDrawableState();
        for (Drawable dr : mDrawables.mShowing) {
            if (dr != null && dr.isStateful()) {
                dr.setState(state);
            }
        }
    }
}","{
    super.drawableStateChanged();
    if (mTextColor != null && mTextColor.isStateful() || (mHintTextColor != null && mHintTextColor.isStateful()) || (mLinkTextColor != null && mLinkTextColor.isStateful())) {
        updateTextColors();
    }
    if (mDrawables != null) {
        final int[] state = getDrawableState();
        for (Drawable dr : mDrawables.mShowing) {
            if (dr != null && dr.isStateful() && dr.setState(state)) {
                invalidateDrawable(dr);
            }
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.drawableStateChanged(), [VariableReference(super, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mTextColor !, []), Expression(null && mTextColor.isStateful() || (mHintTextColor !, [])]), Statement(updateTextColors(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDrawables !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int[] state, []), Expression(getDrawableState(), [])]), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null && dr.isStateful()) {, [])]), MethodCall(dr.setState(state), [VariableReference(dr, []), Expression(state, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.drawableStateChanged(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mTextColor !, []), Expression(null && mTextColor.isStateful() || (mHintTextColor !, [])])    VariableReference(if (mTextColor !, [])    Expression(null && mTextColor.isStateful() || (mHintTextColor !, [])  Statement(updateTextColors(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDrawables !, []), Expression(null) {, [])])    VariableReference(if (mDrawables !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int[] state, []), Expression(getDrawableState(), [])])    VariableReference(final int[] state, [])    Expression(getDrawableState(), [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null && dr.isStateful()) {, [])])    VariableReference(if (dr !, [])    Expression(null && dr.isStateful()) {, [])  MethodCall(dr.setState(state), [VariableReference(dr, []), Expression(state, [])])    VariableReference(dr, [])    Expression(state, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.drawableStateChanged(), [VariableReference(super, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mTextColor !, []), Expression(null && mTextColor.isStateful() || (mHintTextColor !, [])]), Statement(updateTextColors(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDrawables !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(final int[] state, []), Expression(getDrawableState(), [])]), AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null && dr.isStateful() && dr.setState(state)) {, [])]), Statement(invalidateDrawable(dr), []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.drawableStateChanged(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mTextColor !, []), Expression(null && mTextColor.isStateful() || (mHintTextColor !, [])])    VariableReference(if (mTextColor !, [])    Expression(null && mTextColor.isStateful() || (mHintTextColor !, [])  Statement(updateTextColors(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDrawables !, []), Expression(null) {, [])])    VariableReference(if (mDrawables !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(final int[] state, []), Expression(getDrawableState(), [])])    VariableReference(final int[] state, [])    Expression(getDrawableState(), [])  AssignmentExpression(=, [VariableReference(if (dr !, []), Expression(null && dr.isStateful() && dr.setState(state)) {, [])])    VariableReference(if (dr !, [])    Expression(null && dr.isStateful() && dr.setState(state)) {, [])  Statement(invalidateDrawable(dr), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",1,"3,4",0,"In the late implementation, an additional condition is added to check if the `setState` method returns true, and if it does, `invalidateDrawable` is then called. This change is primarily in the control dependency and addition of a method call, so the code change type is 3,4.","The changes made do not affect the return type or exception handling of the method. The primary behaviour of the method remains the same, and it does not introduce any new exceptions or alter the return values. Hence, there is no potential compatibility issue, so the CI type is 0."
<android.widget.AbsSeekBar: void jumpDrawablesToCurrentState()>,23,24,,,,"{
    super.jumpDrawablesToCurrentState();
    if (mThumb != null) {
        mThumb.jumpToCurrentState();
    }
}","{
    super.jumpDrawablesToCurrentState();
    if (mThumb != null) {
        mThumb.jumpToCurrentState();
    }
    if (mTickMark != null) {
        mTickMark.jumpToCurrentState();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.jumpDrawablesToCurrentState(), [VariableReference(super, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mThumb !, []), Expression(null) {, [])]), MethodCall(mThumb.jumpToCurrentState(), [VariableReference(mThumb, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.jumpDrawablesToCurrentState(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mThumb !, []), Expression(null) {, [])])    VariableReference(if (mThumb !, [])    Expression(null) {, [])  MethodCall(mThumb.jumpToCurrentState(), [VariableReference(mThumb, []), Expression(, [])])    VariableReference(mThumb, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.jumpDrawablesToCurrentState(), [VariableReference(super, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mThumb !, []), Expression(null) {, [])]), MethodCall(mThumb.jumpToCurrentState(), [VariableReference(mThumb, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mTickMark !, []), Expression(null) {, [])]), MethodCall(mTickMark.jumpToCurrentState(), [VariableReference(mTickMark, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.jumpDrawablesToCurrentState(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mThumb !, []), Expression(null) {, [])])    VariableReference(if (mThumb !, [])    Expression(null) {, [])  MethodCall(mThumb.jumpToCurrentState(), [VariableReference(mThumb, []), Expression(, [])])    VariableReference(mThumb, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mTickMark !, []), Expression(null) {, [])])    VariableReference(if (mTickMark !, [])    Expression(null) {, [])  MethodCall(mTickMark.jumpToCurrentState(), [VariableReference(mTickMark, []), Expression(, [])])    VariableReference(mTickMark, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","1,3,4",0,4,0,"An additional statement `if (mTickMark != null) { mTickMark.jumpToCurrentState(); }` has been added, which is neither a return statement nor an exception handling statement. It doesn't affect control flow significantly, so the code change type is 4.","The added statement does not alter the method's return value or its exception handling behavior. Therefore, there are no potential compatibility issues, so the CI type is 0."
"<android.preference.SeekBarVolumizer.Receiver: void onReceive(Context,Intent)>",23,24,,,,"{
    final String action = intent.getAction();
    if (AudioManager.VOLUME_CHANGED_ACTION.equals(action)) {
        int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
        int streamValue = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1);
        final boolean streamMatch = mNotificationOrRing ? isNotificationOrRing(streamType) : (streamType == mStreamType);
        if (mSeekBar != null && streamMatch && streamValue != -1) {
            final boolean muted = mAudioManager.isStreamMute(mStreamType) || streamValue == 0;
            mUiHandler.postUpdateSlider(streamValue, mLastAudibleStreamVolume, muted);
        }
    } else if (AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION.equals(action)) {
        if (mNotificationOrRing) {
            mRingerMode = mAudioManager.getRingerModeInternal();
        }
        if (mAffectedByRingerMode) {
            updateSlider();
        }
    } else if (NotificationManager.ACTION_INTERRUPTION_FILTER_CHANGED.equals(action)) {
        mZenMode = mNotificationManager.getZenMode();
        updateSlider();
    }
}","{
    final String action = intent.getAction();
    if (AudioManager.VOLUME_CHANGED_ACTION.equals(action)) {
        int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
        int streamValue = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1);
        updateVolumeSlider(streamType, streamValue);
    } else if (AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION.equals(action)) {
        if (mNotificationOrRing) {
            mRingerMode = mAudioManager.getRingerModeInternal();
        }
        if (mAffectedByRingerMode) {
            updateSlider();
        }
    } else if (AudioManager.STREAM_DEVICES_CHANGED_ACTION.equals(action)) {
        int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
        int streamVolume = mAudioManager.getStreamVolume(streamType);
        updateVolumeSlider(streamType, streamVolume);
    } else if (NotificationManager.ACTION_INTERRUPTION_FILTER_CHANGED.equals(action)) {
        mZenMode = mNotificationManager.getZenMode();
        updateSlider();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final String action, []), Expression(intent.getAction(), [])]), AssignmentExpression(=, [VariableReference(int streamType, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])]), AssignmentExpression(=, [VariableReference(int streamValue, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1), [])]), AssignmentExpression(=, [VariableReference(final boolean streamMatch, []), Expression(mNotificationOrRing ? isNotificationOrRing(streamType) : (streamType, [])]), AssignmentExpression(=, [VariableReference(if (mSeekBar !, []), Expression(null && streamMatch && streamValue !, [])]), AssignmentExpression(=, [VariableReference(final boolean muted, []), Expression(mAudioManager.isStreamMute(mStreamType) || streamValue, [])]), MethodCall(mUiHandler.postUpdateSlider(streamValue, mLastAudibleStreamVolume, muted), [VariableReference(mUiHandler, []), Expression(streamValue, []), Expression(mLastAudibleStreamVolume, []), Expression(muted, [])]), Statement(}, []), Statement(if (mNotificationOrRing) {, []), AssignmentExpression(=, [VariableReference(mRingerMode, []), Expression(mAudioManager.getRingerModeInternal(), [])]), Statement(}, []), Statement(if (mAffectedByRingerMode) {, []), Statement(updateSlider(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mZenMode, []), Expression(mNotificationManager.getZenMode(), [])]), Statement(updateSlider(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final String action, []), Expression(intent.getAction(), [])])    VariableReference(final String action, [])    Expression(intent.getAction(), [])  AssignmentExpression(=, [VariableReference(int streamType, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])])    VariableReference(int streamType, [])    Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])  AssignmentExpression(=, [VariableReference(int streamValue, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1), [])])    VariableReference(int streamValue, [])    Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1), [])  AssignmentExpression(=, [VariableReference(final boolean streamMatch, []), Expression(mNotificationOrRing ? isNotificationOrRing(streamType) : (streamType, [])])    VariableReference(final boolean streamMatch, [])    Expression(mNotificationOrRing ? isNotificationOrRing(streamType) : (streamType, [])  AssignmentExpression(=, [VariableReference(if (mSeekBar !, []), Expression(null && streamMatch && streamValue !, [])])    VariableReference(if (mSeekBar !, [])    Expression(null && streamMatch && streamValue !, [])  AssignmentExpression(=, [VariableReference(final boolean muted, []), Expression(mAudioManager.isStreamMute(mStreamType) || streamValue, [])])    VariableReference(final boolean muted, [])    Expression(mAudioManager.isStreamMute(mStreamType) || streamValue, [])  MethodCall(mUiHandler.postUpdateSlider(streamValue, mLastAudibleStreamVolume, muted), [VariableReference(mUiHandler, []), Expression(streamValue, []), Expression(mLastAudibleStreamVolume, []), Expression(muted, [])])    VariableReference(mUiHandler, [])    Expression(streamValue, [])    Expression(mLastAudibleStreamVolume, [])    Expression(muted, [])  Statement(}, [])  Statement(if (mNotificationOrRing) {, [])  AssignmentExpression(=, [VariableReference(mRingerMode, []), Expression(mAudioManager.getRingerModeInternal(), [])])    VariableReference(mRingerMode, [])    Expression(mAudioManager.getRingerModeInternal(), [])  Statement(}, [])  Statement(if (mAffectedByRingerMode) {, [])  Statement(updateSlider(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mZenMode, []), Expression(mNotificationManager.getZenMode(), [])])    VariableReference(mZenMode, [])    Expression(mNotificationManager.getZenMode(), [])  Statement(updateSlider(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final String action, []), Expression(intent.getAction(), [])]), AssignmentExpression(=, [VariableReference(int streamType, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])]), AssignmentExpression(=, [VariableReference(int streamValue, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1), [])]), Statement(updateVolumeSlider(streamType, streamValue), []), Statement(if (mNotificationOrRing) {, []), AssignmentExpression(=, [VariableReference(mRingerMode, []), Expression(mAudioManager.getRingerModeInternal(), [])]), Statement(}, []), Statement(if (mAffectedByRingerMode) {, []), Statement(updateSlider(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(int streamType, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])]), AssignmentExpression(=, [VariableReference(int streamVolume, []), Expression(mAudioManager.getStreamVolume(streamType), [])]), Statement(updateVolumeSlider(streamType, streamVolume), []), AssignmentExpression(=, [VariableReference(mZenMode, []), Expression(mNotificationManager.getZenMode(), [])]), Statement(updateSlider(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final String action, []), Expression(intent.getAction(), [])])    VariableReference(final String action, [])    Expression(intent.getAction(), [])  AssignmentExpression(=, [VariableReference(int streamType, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])])    VariableReference(int streamType, [])    Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])  AssignmentExpression(=, [VariableReference(int streamValue, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1), [])])    VariableReference(int streamValue, [])    Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1), [])  Statement(updateVolumeSlider(streamType, streamValue), [])  Statement(if (mNotificationOrRing) {, [])  AssignmentExpression(=, [VariableReference(mRingerMode, []), Expression(mAudioManager.getRingerModeInternal(), [])])    VariableReference(mRingerMode, [])    Expression(mAudioManager.getRingerModeInternal(), [])  Statement(}, [])  Statement(if (mAffectedByRingerMode) {, [])  Statement(updateSlider(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int streamType, []), Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])])    VariableReference(int streamType, [])    Expression(intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1), [])  AssignmentExpression(=, [VariableReference(int streamVolume, []), Expression(mAudioManager.getStreamVolume(streamType), [])])    VariableReference(int streamVolume, [])    Expression(mAudioManager.getStreamVolume(streamType), [])  Statement(updateVolumeSlider(streamType, streamVolume), [])  AssignmentExpression(=, [VariableReference(mZenMode, []), Expression(mNotificationManager.getZenMode(), [])])    VariableReference(mZenMode, [])    Expression(mNotificationManager.getZenMode(), [])  Statement(updateSlider(), [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4",0,"3,4",0,"The control dependency has changed due to the addition of a new condition `else if (AudioManager.STREAM_DEVICES_CHANGED_ACTION.equals(action))` and its corresponding implementation. Additionally, the behavior for updating the volume slider in the `VOLUME_CHANGED_ACTION` case has been refactored into a method call `updateVolumeSlider(streamType, streamValue)`. These fall under categories 3 (Control dependency changed) and 4 (Other statement changed).","Although the control dependency and some statements have changed, these changes do not lead to different return values or types, nor do they introduce new exceptions or modify exception handling behaviors. Therefore, there are no potential compatibility issues."
<android.widget.Editor.PinnedPopupWindow: void hide()>,23,24,,,,"{
    mPopupWindow.dismiss();
    getPositionListener().removeSubscriber(this);
}","{
    if (!isShowing()) {
        return;
    }
    mPopupWindow.dismiss();
    getPositionListener().removeSubscriber(this);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mPopupWindow.dismiss(), [VariableReference(mPopupWindow, []), Expression(, [])]), MethodCall(getPositionListener().removeSubscriber(this), [VariableReference(getPositionListener(), []), Expression(this, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mPopupWindow.dismiss(), [VariableReference(mPopupWindow, []), Expression(, [])])    VariableReference(mPopupWindow, [])    Expression(, [])  MethodCall(getPositionListener().removeSubscriber(this), [VariableReference(getPositionListener(), []), Expression(this, [])])    VariableReference(getPositionListener(), [])    Expression(this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!isShowing()) {, []), Statement(return, []), Statement(}, []), MethodCall(mPopupWindow.dismiss(), [VariableReference(mPopupWindow, []), Expression(, [])]), MethodCall(getPositionListener().removeSubscriber(this), [VariableReference(getPositionListener(), []), Expression(this, [])]), Statement(}, [])])  Statement({, [])  Statement(if (!isShowing()) {, [])  Statement(return, [])  Statement(}, [])  MethodCall(mPopupWindow.dismiss(), [VariableReference(mPopupWindow, []), Expression(, [])])    VariableReference(mPopupWindow, [])    Expression(, [])  MethodCall(getPositionListener().removeSubscriber(this), [VariableReference(getPositionListener(), []), Expression(this, [])])    VariableReference(getPositionListener(), [])    Expression(this, [])  Statement(}, [])",1,,,0,,,0,,,,"1,2","1,3,4",1,3,1,"The late version introduces an `if` statement to check `isShowing()`, and the rest of the code remains the same. This change qualifies as a control dependency change, so the code change type is 3.","Due to the new `if (!isShowing()) { return; }` condition, the behavior of the method may vary. Now, the method might return early without invoking `mPopupWindow.dismiss()` or `getPositionListener().removeSubscriber(this)`, leading to different return behavior or the method no longer performing its intended actions. Therefore, the CI type is 1."
<android.content.pm.PackageInstaller: List<SessionInfo> getAllSessions()>,23,24,,,,"{
    final ApplicationInfo info = mContext.getApplicationInfo();
    if (""com.google.android.googlequicksearchbox"".equals(info.packageName) && info.versionCode <= 300400110) {
        Log.d(TAG, ""Ignoring callback request from old prebuilt"");
        return Collections.EMPTY_LIST;
    }
    try {
        return mInstaller.getAllSessions(mUserId).getList();
    } catch (RemoteException e) {
        throw e.rethrowAsRuntimeException();
    }
}","{
    try {
        return mInstaller.getAllSessions(mUserId).getList();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final ApplicationInfo info, []), Expression(mContext.getApplicationInfo(), [])]), AssignmentExpression(=, [VariableReference(if (""com.google.android.googlequicksearchbox"".equals(info.packageName) && info.versionCode <, []), Expression(300400110) {, [])]), MethodCall(Log.d(TAG, ""Ignoring callback request from old prebuilt""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Ignoring callback request from old prebuilt"", [])]), Statement(return Collections.EMPTY_LIST, []), Statement(}, []), Statement(try {, []), MethodCall(return mInstaller.getAllSessions(mUserId).getList(), [VariableReference(return mInstaller, []), Expression(mUserId).getList(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowAsRuntimeException(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final ApplicationInfo info, []), Expression(mContext.getApplicationInfo(), [])])    VariableReference(final ApplicationInfo info, [])    Expression(mContext.getApplicationInfo(), [])  AssignmentExpression(=, [VariableReference(if (""com.google.android.googlequicksearchbox"".equals(info.packageName) && info.versionCode <, []), Expression(300400110) {, [])])    VariableReference(if (""com.google.android.googlequicksearchbox"".equals(info.packageName) && info.versionCode <, [])    Expression(300400110) {, [])  MethodCall(Log.d(TAG, ""Ignoring callback request from old prebuilt""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Ignoring callback request from old prebuilt"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Ignoring callback request from old prebuilt"", [])  Statement(return Collections.EMPTY_LIST, [])  Statement(}, [])  Statement(try {, [])  MethodCall(return mInstaller.getAllSessions(mUserId).getList(), [VariableReference(return mInstaller, []), Expression(mUserId).getList(, [])])    VariableReference(return mInstaller, [])    Expression(mUserId).getList(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowAsRuntimeException(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mInstaller.getAllSessions(mUserId).getList(), [VariableReference(return mInstaller, []), Expression(mUserId).getList(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mInstaller.getAllSessions(mUserId).getList(), [VariableReference(return mInstaller, []), Expression(mUserId).getList(, [])])    VariableReference(return mInstaller, [])    Expression(mUserId).getList(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Return list of all known install sessions, regardless of the installer.
 */
","/**
 * Return list of all known install sessions, regardless of the installer.
 */
",0,[@NonNull],[@NonNull],0,,,,"1,2","1,2,3,4,5","1,2","2,3","1,2","The `if` statement checking for ""com.google.android.googlequicksearchbox"" and its corresponding `return Collections.EMPTY_LIST` statement are removed, changing the control dependency. Additionally, the exception handling within the `catch` block has changed from `rethrowAsRuntimeException()` to `rethrowFromSystemServer()`, so the change type is 2,3.","The change could lead to different return values in situations where the condition `""com.google.android.googlequicksearchbox"".equals(info.packageName) && info.versionCode <= 300400110` was true, potentially resulting in different return lists. Additionally, the API now throws a different exception, altering its exception handling behavior. Therefore, the CI type is 1,2."
<android.widget.ActionMenuPresenter.OpenOverflowRunnable: void run()>,23,24,,,,"{
    mMenu.changeMenuMode();
    final View menuView = (View) mMenuView;
    if (menuView != null && menuView.getWindowToken() != null && mPopup.tryShow()) {
        mOverflowPopup = mPopup;
    }
    mPostedOpenRunnable = null;
}","{
    if (mMenu != null) {
        mMenu.changeMenuMode();
    }
    final View menuView = (View) mMenuView;
    if (menuView != null && menuView.getWindowToken() != null && mPopup.tryShow()) {
        mOverflowPopup = mPopup;
    }
    mPostedOpenRunnable = null;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mMenu.changeMenuMode(), [VariableReference(mMenu, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final View menuView, []), Expression((View) mMenuView, [])]), AssignmentExpression(=, [VariableReference(if (menuView !, []), Expression(null && menuView.getWindowToken() !, [])]), AssignmentExpression(=, [VariableReference(mOverflowPopup, []), Expression(mPopup, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mPostedOpenRunnable, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mMenu.changeMenuMode(), [VariableReference(mMenu, []), Expression(, [])])    VariableReference(mMenu, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final View menuView, []), Expression((View) mMenuView, [])])    VariableReference(final View menuView, [])    Expression((View) mMenuView, [])  AssignmentExpression(=, [VariableReference(if (menuView !, []), Expression(null && menuView.getWindowToken() !, [])])    VariableReference(if (menuView !, [])    Expression(null && menuView.getWindowToken() !, [])  AssignmentExpression(=, [VariableReference(mOverflowPopup, []), Expression(mPopup, [])])    VariableReference(mOverflowPopup, [])    Expression(mPopup, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mPostedOpenRunnable, []), Expression(null, [])])    VariableReference(mPostedOpenRunnable, [])    Expression(null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mMenu !, []), Expression(null) {, [])]), MethodCall(mMenu.changeMenuMode(), [VariableReference(mMenu, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final View menuView, []), Expression((View) mMenuView, [])]), AssignmentExpression(=, [VariableReference(if (menuView !, []), Expression(null && menuView.getWindowToken() !, [])]), AssignmentExpression(=, [VariableReference(mOverflowPopup, []), Expression(mPopup, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mPostedOpenRunnable, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mMenu !, []), Expression(null) {, [])])    VariableReference(if (mMenu !, [])    Expression(null) {, [])  MethodCall(mMenu.changeMenuMode(), [VariableReference(mMenu, []), Expression(, [])])    VariableReference(mMenu, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final View menuView, []), Expression((View) mMenuView, [])])    VariableReference(final View menuView, [])    Expression((View) mMenuView, [])  AssignmentExpression(=, [VariableReference(if (menuView !, []), Expression(null && menuView.getWindowToken() !, [])])    VariableReference(if (menuView !, [])    Expression(null && menuView.getWindowToken() !, [])  AssignmentExpression(=, [VariableReference(mOverflowPopup, []), Expression(mPopup, [])])    VariableReference(mOverflowPopup, [])    Expression(mPopup, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mPostedOpenRunnable, []), Expression(null, [])])    VariableReference(mPostedOpenRunnable, [])    Expression(null, [])  Statement(}, [])",1,,,0,,,0,,,,1,3,1,3,0,"A control dependency has been introduced with the `if (mMenu != null)` condition wrapping the `mMenu.changeMenuMode()` call, so the code change type is 3.","The addition of the condition `if (mMenu != null)` ensures that `mMenu.changeMenuMode()` is only called when `mMenu` is not null. However, this does not lead to a change in return values or exceptions thrown by the method, hence there is no Compatibility Issue."
"<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(Account,String,Bundle,boolean,AccountManagerCallback<Bundle>,Handler)>",23,24,,,,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    final Bundle optionsIn = new Bundle();
    if (options != null) {
        optionsIn.putAll(options);
    }
    optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName());
    return new AmsTask(null, handler, callback) {

        public void doWork() throws RemoteException {
            mService.getAuthToken(mResponse, account, authTokenType, notifyAuthFailure, false, /* expectActivityLaunch */
            optionsIn);
        }
    }.start();
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    final Bundle optionsIn = new Bundle();
    if (options != null) {
        optionsIn.putAll(options);
    }
    optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName());
    return new AmsTask(null, handler, callback) {

        @Override
        public void doWork() throws RemoteException {
            mService.getAuthToken(mResponse, account, authTokenType, notifyAuthFailure, false, /* expectActivityLaunch */
            optionsIn);
        }
    }.start();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""authTokenType is null""), []), AssignmentExpression(=, [VariableReference(final Bundle optionsIn, []), Expression(new Bundle(), [])]), AssignmentExpression(=, [VariableReference(if (options !, []), Expression(null) {, [])]), MethodCall(optionsIn.putAll(options), [VariableReference(optionsIn, []), Expression(options, [])]), Statement(}, []), MethodCall(optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName()), [VariableReference(optionsIn, []), Expression(KEY_ANDROID_PACKAGE_NAME, []), Expression(mContext.getPackageName(), [])]), Statement(return new AmsTask(null, handler, callback) {, []), Statement(public void doWork() throws RemoteException {, []), Statement(optionsIn), []), Statement(}, []), MethodCall(}.start(), [VariableReference(}, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])])    VariableReference(if (authTokenType, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""authTokenType is null""), [])  AssignmentExpression(=, [VariableReference(final Bundle optionsIn, []), Expression(new Bundle(), [])])    VariableReference(final Bundle optionsIn, [])    Expression(new Bundle(), [])  AssignmentExpression(=, [VariableReference(if (options !, []), Expression(null) {, [])])    VariableReference(if (options !, [])    Expression(null) {, [])  MethodCall(optionsIn.putAll(options), [VariableReference(optionsIn, []), Expression(options, [])])    VariableReference(optionsIn, [])    Expression(options, [])  Statement(}, [])  MethodCall(optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName()), [VariableReference(optionsIn, []), Expression(KEY_ANDROID_PACKAGE_NAME, []), Expression(mContext.getPackageName(), [])])    VariableReference(optionsIn, [])    Expression(KEY_ANDROID_PACKAGE_NAME, [])    Expression(mContext.getPackageName(), [])  Statement(return new AmsTask(null, handler, callback) {, [])  Statement(public void doWork() throws RemoteException {, [])  Statement(optionsIn), [])  Statement(}, [])  MethodCall(}.start(), [VariableReference(}, []), Expression(, [])])    VariableReference(}, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""authTokenType is null""), []), AssignmentExpression(=, [VariableReference(final Bundle optionsIn, []), Expression(new Bundle(), [])]), AssignmentExpression(=, [VariableReference(if (options !, []), Expression(null) {, [])]), MethodCall(optionsIn.putAll(options), [VariableReference(optionsIn, []), Expression(options, [])]), Statement(}, []), MethodCall(optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName()), [VariableReference(optionsIn, []), Expression(KEY_ANDROID_PACKAGE_NAME, []), Expression(mContext.getPackageName(), [])]), Statement(return new AmsTask(null, handler, callback) {, []), Statement(@Override, []), Statement(public void doWork() throws RemoteException {, []), Statement(optionsIn), []), Statement(}, []), MethodCall(}.start(), [VariableReference(}, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  AssignmentExpression(=, [VariableReference(if (authTokenType, []), Expression(, [])])    VariableReference(if (authTokenType, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""authTokenType is null""), [])  AssignmentExpression(=, [VariableReference(final Bundle optionsIn, []), Expression(new Bundle(), [])])    VariableReference(final Bundle optionsIn, [])    Expression(new Bundle(), [])  AssignmentExpression(=, [VariableReference(if (options !, []), Expression(null) {, [])])    VariableReference(if (options !, [])    Expression(null) {, [])  MethodCall(optionsIn.putAll(options), [VariableReference(optionsIn, []), Expression(options, [])])    VariableReference(optionsIn, [])    Expression(options, [])  Statement(}, [])  MethodCall(optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName()), [VariableReference(optionsIn, []), Expression(KEY_ANDROID_PACKAGE_NAME, []), Expression(mContext.getPackageName(), [])])    VariableReference(optionsIn, [])    Expression(KEY_ANDROID_PACKAGE_NAME, [])    Expression(mContext.getPackageName(), [])  Statement(return new AmsTask(null, handler, callback) {, [])  Statement(@Override, [])  Statement(public void doWork() throws RemoteException {, [])  Statement(optionsIn), [])  Statement(}, [])  MethodCall(}.start(), [VariableReference(}, []), Expression(, [])])    VariableReference(}, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Gets an auth token of the specified type for a particular account,
 * optionally raising a notification if the user must enter credentials.
 * This method is intended for background tasks and services where the
 * user should not be immediately interrupted with a password prompt.
 *
 * <p>If a previously generated auth token is cached for this account and
 * type, then it is returned.  Otherwise, if a saved password is
 * available, it is sent to the server to generate a new auth token.
 * Otherwise, an {@link Intent} is returned which, when started, will
 * prompt the user for a password.  If the notifyAuthFailure parameter is
 * set, a status bar notification is also created with the same Intent,
 * alerting the user that they need to enter a password at some point.
 *
 * <p>In that case, you may need to wait until the user responds, which
 * could take hours or days or forever.  When the user does respond and
 * supply a new password, the account manager will broadcast the
 * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can
 * use to try again.
 *
 * <p>If notifyAuthFailure is not set, it is the application's
 * responsibility to launch the returned Intent at some point.
 * Either way, the result from this call will not wait for user action.
 *
 * <p>Some authenticators have auth token <em>types</em>, whose value
 * is authenticator-dependent.  Some services use different token types to
 * access different functionality -- for example, Google uses different auth
 * tokens to access Gmail and Google Calendar for the same account.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * USE_CREDENTIALS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The account to fetch an auth token for
 * @param authTokenType The auth token type, an authenticator-dependent
 * string token, must not be null
 * @param options Authenticator-specific options for the request,
 * may be null or empty
 * @param notifyAuthFailure True to add a notification to prompt the
 * user for a password if necessary, false to leave that to the caller
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Bundle with
 * at least the following fields on success:
 * <ul>
 * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
 * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
 * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
 * </ul>
 *
 * (Other authenticator-specific values may be returned.)  If the user
 * must enter credentials, the returned Bundle contains only
 * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
 *
 * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
 * <ul>
 * <li> {@link AuthenticatorException} if the authenticator failed to respond
 * <li> {@link OperationCanceledException} if the operation is canceled for
 * any reason, incluidng the user canceling a credential request
 * <li> {@link IOException} if the authenticator experienced an I/O problem
 * creating a new auth token, usually because of network trouble
 * </ul>
 * If the account is no longer present on the device, the return value is
 * authenticator-dependent.  The caller should verify the validity of the
 * account before requesting an auth token.
 */
","/**
 * Gets an auth token of the specified type for a particular account,
 * optionally raising a notification if the user must enter credentials.
 * This method is intended for background tasks and services where the
 * user should not be immediately interrupted with a password prompt.
 *
 * <p>If a previously generated auth token is cached for this account and
 * type, then it is returned.  Otherwise, if a saved password is
 * available, it is sent to the server to generate a new auth token.
 * Otherwise, an {@link Intent} is returned which, when started, will
 * prompt the user for a password.  If the notifyAuthFailure parameter is
 * set, a status bar notification is also created with the same Intent,
 * alerting the user that they need to enter a password at some point.
 *
 * <p>In that case, you may need to wait until the user responds, which
 * could take hours or days or forever.  When the user does respond and
 * supply a new password, the account manager will broadcast the
 * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can
 * use to try again.
 *
 * <p>If notifyAuthFailure is not set, it is the application's
 * responsibility to launch the returned Intent at some point.
 * Either way, the result from this call will not wait for user action.
 *
 * <p>Some authenticators have auth token <em>types</em>, whose value
 * is authenticator-dependent.  Some services use different token types to
 * access different functionality -- for example, Google uses different auth
 * tokens to access Gmail and Google Calendar for the same account.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * USE_CREDENTIALS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The account to fetch an auth token for
 * @param authTokenType The auth token type, an authenticator-dependent
 * string token, must not be null
 * @param options Authenticator-specific options for the request,
 * may be null or empty
 * @param notifyAuthFailure True to add a notification to prompt the
 * user for a password if necessary, false to leave that to the caller
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Bundle with
 * at least the following fields on success:
 * <ul>
 * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
 * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
 * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
 * </ul>
 *
 * (Other authenticator-specific values may be returned.)  If the user
 * must enter credentials, the returned Bundle contains only
 * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
 *
 * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
 * <ul>
 * <li> {@link AuthenticatorException} if the authenticator failed to respond
 * <li> {@link OperationCanceledException} if the operation is canceled for
 * any reason, incluidng the user canceling a credential request
 * <li> {@link IOException} if the authenticator experienced an I/O problem
 * creating a new auth token, usually because of network trouble
 * </ul>
 * If the account is no longer present on the device, the return value is
 * authenticator-dependent.  The caller should verify the validity of the
 * account before requesting an auth token.
 */
",0,,,0,,,,1,4,0,4,0,"The only difference between the early and late implementations is the addition of the `@Override` annotation in the `doWork` method inside the `AmsTask` class. This is classed as an ""Other statement changed"" since it does not impact return statements, exception handling, control dependencies, or dependent APIs.","The addition of the `@Override` annotation does not affect the functional behavior of the `getAuthToken` method. Hence, there is no compatibility issue."
<android.net.NetworkRequest: int hashCode()>,24,25,,,,"{
    return requestId + (legacyType * 1013) + (networkCapabilities.hashCode() * 1051);
}","{
    return Objects.hash(requestId, legacyType, networkCapabilities, type);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return requestId + (legacyType * 1013) + (networkCapabilities.hashCode() * 1051), [VariableReference(return requestId + (legacyType * 1013) + (networkCapabilities, []), Expression() * 1051, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return requestId + (legacyType * 1013) + (networkCapabilities.hashCode() * 1051), [VariableReference(return requestId + (legacyType * 1013) + (networkCapabilities, []), Expression() * 1051, [])])    VariableReference(return requestId + (legacyType * 1013) + (networkCapabilities, [])    Expression() * 1051, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return Objects.hash(requestId, legacyType, networkCapabilities, type), [VariableReference(return Objects, []), Expression(requestId, []), Expression(legacyType, []), Expression(networkCapabilities, []), Expression(type, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Objects.hash(requestId, legacyType, networkCapabilities, type), [VariableReference(return Objects, []), Expression(requestId, []), Expression(legacyType, []), Expression(networkCapabilities, []), Expression(type, [])])    VariableReference(return Objects, [])    Expression(requestId, [])    Expression(legacyType, [])    Expression(networkCapabilities, [])    Expression(type, [])  Statement(}, [])",1,,,0,,,0,,,,"1,2","1,5",1,1,1,"The return statement has changed from a custom hash code calculation to using `Objects.hash` with an additional `type` parameter, indicating a potential change in the hash code value. Thus, the code change type is 1.","The change in the return statement could cause the method to return a different hash code due to the inclusion of the new `type` parameter and the different computation method (custom calculation vs. `Objects.hash`). Hence, the CI type is 1."
<android.view.TextureView: HardwareLayer getHardwareLayer()>,24,25,,,,"{
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createTextureLayer();
        if (!mUpdateSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = new SurfaceTexture(false);
            mLayer.setSurfaceTexture(mSurface);
        }
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        nCreateNativeWindow(mSurface);
        mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler);
        if (mListener != null && !mUpdateSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    return mLayer;
}","{
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createTextureLayer();
        boolean createNewSurface = (mSurface == null);
        if (createNewSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = new SurfaceTexture(false);
            nCreateNativeWindow(mSurface);
        }
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler);
        if (mListener != null && createNewSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    return mLayer;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])]), Statement(if (!mUpdateSurface) {, []), Statement(// Create a new SurfaceTexture for the layer., []), AssignmentExpression(=, [VariableReference(mSurface, []), Expression(new SurfaceTexture(false), [])]), MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])]), Statement(}, []), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(nCreateNativeWindow(mSurface), []), MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler), [VariableReference(mSurface, []), Expression(mUpdateListener, []), Expression(mAttachInfo.mHandler, [])]), AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && !mUpdateSurface) {, [])]), MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])]), Statement(}, []), Statement(if (mUpdateSurface) {, []), Statement(// Someone has requested that we use a specific SurfaceTexture, so, []), Statement(// tell mLayer about it and set the SurfaceTexture to use the, []), Statement(// current view size., []), AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])]), Statement(// Since we are updating the layer, force an update to ensure its, []), Statement(updateLayer(), []), AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])]), MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])]), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), Statement(return mLayer, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])])    VariableReference(if (mLayer, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])])    VariableReference(mLayer, [])    Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])  Statement(if (!mUpdateSurface) {, [])  Statement(// Create a new SurfaceTexture for the layer., [])  AssignmentExpression(=, [VariableReference(mSurface, []), Expression(new SurfaceTexture(false), [])])    VariableReference(mSurface, [])    Expression(new SurfaceTexture(false), [])  MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])])    VariableReference(mLayer, [])    Expression(mSurface, [])  Statement(}, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(nCreateNativeWindow(mSurface), [])  MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler), [VariableReference(mSurface, []), Expression(mUpdateListener, []), Expression(mAttachInfo.mHandler, [])])    VariableReference(mSurface, [])    Expression(mUpdateListener, [])    Expression(mAttachInfo.mHandler, [])  AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && !mUpdateSurface) {, [])])    VariableReference(if (mListener !, [])    Expression(null && !mUpdateSurface) {, [])  MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mListener, [])    Expression(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])])    VariableReference(mLayer, [])    Expression(mLayerPaint, [])  Statement(}, [])  Statement(if (mUpdateSurface) {, [])  Statement(// Someone has requested that we use a specific SurfaceTexture, so, [])  Statement(// tell mLayer about it and set the SurfaceTexture to use the, [])  Statement(// current view size., [])  AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])])    VariableReference(mUpdateSurface, [])    Expression(false, [])  Statement(// Since we are updating the layer, force an update to ensure its, [])  Statement(updateLayer(), [])  AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])])    VariableReference(mMatrixChanged, [])    Expression(true, [])  MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])])    VariableReference(mLayer, [])    Expression(mSurface, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  Statement(return mLayer, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])]), AssignmentExpression(=, [VariableReference(boolean createNewSurface, []), Expression((mSurface, [])]), Statement(if (createNewSurface) {, []), Statement(// Create a new SurfaceTexture for the layer., []), AssignmentExpression(=, [VariableReference(mSurface, []), Expression(new SurfaceTexture(false), [])]), Statement(nCreateNativeWindow(mSurface), []), Statement(}, []), MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])]), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler), [VariableReference(mSurface, []), Expression(mUpdateListener, []), Expression(mAttachInfo.mHandler, [])]), AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && createNewSurface) {, [])]), MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])]), Statement(}, []), Statement(if (mUpdateSurface) {, []), Statement(// Someone has requested that we use a specific SurfaceTexture, so, []), Statement(// tell mLayer about it and set the SurfaceTexture to use the, []), Statement(// current view size., []), AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])]), Statement(// Since we are updating the layer, force an update to ensure its, []), Statement(updateLayer(), []), AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])]), MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])]), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), Statement(return mLayer, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])])    VariableReference(if (mLayer, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])])    VariableReference(mLayer, [])    Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])  AssignmentExpression(=, [VariableReference(boolean createNewSurface, []), Expression((mSurface, [])])    VariableReference(boolean createNewSurface, [])    Expression((mSurface, [])  Statement(if (createNewSurface) {, [])  Statement(// Create a new SurfaceTexture for the layer., [])  AssignmentExpression(=, [VariableReference(mSurface, []), Expression(new SurfaceTexture(false), [])])    VariableReference(mSurface, [])    Expression(new SurfaceTexture(false), [])  Statement(nCreateNativeWindow(mSurface), [])  Statement(}, [])  MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])])    VariableReference(mLayer, [])    Expression(mSurface, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler), [VariableReference(mSurface, []), Expression(mUpdateListener, []), Expression(mAttachInfo.mHandler, [])])    VariableReference(mSurface, [])    Expression(mUpdateListener, [])    Expression(mAttachInfo.mHandler, [])  AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && createNewSurface) {, [])])    VariableReference(if (mListener !, [])    Expression(null && createNewSurface) {, [])  MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mListener, [])    Expression(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])])    VariableReference(mLayer, [])    Expression(mLayerPaint, [])  Statement(}, [])  Statement(if (mUpdateSurface) {, [])  Statement(// Someone has requested that we use a specific SurfaceTexture, so, [])  Statement(// tell mLayer about it and set the SurfaceTexture to use the, [])  Statement(// current view size., [])  AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])])    VariableReference(mUpdateSurface, [])    Expression(false, [])  Statement(// Since we are updating the layer, force an update to ensure its, [])  Statement(updateLayer(), [])  AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])])    VariableReference(mMatrixChanged, [])    Expression(true, [])  MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])])    VariableReference(mLayer, [])    Expression(mSurface, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  Statement(return mLayer, [])  Statement(}, [])",1,,,0,,,0,,,,"1,2","3,4,5",1,"3,4",0,The main changes between the early and late versions include:,
<android.nfc.NfcAdapter: void disableReaderMode(Activity)>,24,25,,,,"{
    mNfcActivityManager.disableReaderMode(activity);
}","{
    synchronized (NfcAdapter.class) {
        if (!sHasNfcFeature) {
            throw new UnsupportedOperationException();
        }
    }
    mNfcActivityManager.disableReaderMode(activity);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mNfcActivityManager.disableReaderMode(activity), [VariableReference(mNfcActivityManager, []), Expression(activity, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mNfcActivityManager.disableReaderMode(activity), [VariableReference(mNfcActivityManager, []), Expression(activity, [])])    VariableReference(mNfcActivityManager, [])    Expression(activity, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!sHasNfcFeature) {, []), Statement(throw new UnsupportedOperationException(), []), Statement(}, []), Statement(}, []), MethodCall(mNfcActivityManager.disableReaderMode(activity), [VariableReference(mNfcActivityManager, []), Expression(activity, [])]), Statement(}, [])])  Statement({, [])  Statement(if (!sHasNfcFeature) {, [])  Statement(throw new UnsupportedOperationException(), [])  Statement(}, [])  Statement(}, [])  MethodCall(mNfcActivityManager.disableReaderMode(activity), [VariableReference(mNfcActivityManager, []), Expression(activity, [])])    VariableReference(mNfcActivityManager, [])    Expression(activity, [])  Statement(}, [])",1,"/**
 * Restore the NFC adapter to normal mode of operation: supporting
 * peer-to-peer (Android Beam), card emulation, and polling for
 * all supported tag technologies.
 *
 * @param activity the Activity that currently has reader mode enabled
 */
","/**
 * Restore the NFC adapter to normal mode of operation: supporting
 * peer-to-peer (Android Beam), card emulation, and polling for
 * all supported tag technologies.
 *
 * @param activity the Activity that currently has reader mode enabled
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 */
",1,,,0,,,,"1,2","2,3,4","1,2","2,3",2,"An exception handling statement (throw new UnsupportedOperationException()) has been introduced, and there is a control statement change (synchronized block and if condition), so the code change type is 2,3.","The introduction of new exception handling (throw new UnsupportedOperationException()) can result in the API potentially throwing a different exception, leading to a CI type 2."
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(ComponentName)>,24,25,,,,"{
    return getPasswordMinimumLength(admin, myUserId());
}","{
    return getPasswordMinimumLength(admin, myUserId());
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return getPasswordMinimumLength(admin, myUserId()), []), Statement(}, [])])  Statement({, [])  Statement(return getPasswordMinimumLength(admin, myUserId()), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return getPasswordMinimumLength(admin, myUserId()), []), Statement(}, [])])  Statement({, [])  Statement(return getPasswordMinimumLength(admin, myUserId()), [])  Statement(}, [])",0,"/**
 * Retrieve the current minimum password length for a particular admin or all admins that set
 * retrictions on this user and its participating profiles. Restrictions on profiles that have
 * a separate challenge are not taken into account.
 *
 * <p>This method can be called on the {@link DevicePolicyManager} instance
 * returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
 * restrictions on the parent profile.
 *
 * user and its profiles or a particular one.
 * @param admin The name of the admin component to check, or {@code null} to aggregate
 * all admins.
 */
","/**
 * Retrieve the current minimum password length for a particular admin or all admins that set
 * restrictions on this user and its participating profiles. Restrictions on profiles that have
 * a separate challenge are not taken into account.
 *
 * <p>This method can be called on the {@link DevicePolicyManager} instance
 * returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
 * restrictions on the parent profile.
 *
 * user and its profiles or a particular one.
 * @param admin The name of the admin component to check, or {@code null} to aggregate
 * all admins.
 */
",1,,,0,,,,0,0,0,0,0,"There is no change between the early and late versions of the method implementation, so the code change type is 0.","Since there is no change in the implementation, there is no potential for Compatibility Issues, so the CI type is 0."
"<android.provider.DocumentsProvider: String copyDocument(String,String)>",25,26,,,,"{
    throw new UnsupportedOperationException(""Copy not supported"");
}","{
    throw new UnsupportedOperationException(""Copy not supported"");
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""Copy not supported""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""Copy not supported""), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""Copy not supported""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""Copy not supported""), [])  Statement(}, [])",0,"/**
 * Copy the requested document or a document tree.
 * <p>
 * Copies a document including all child documents to another location within
 * the same document provider. Upon completion returns the document id of
 * the copied document at the target destination. {@code null} must never
 * be returned.
 *
 * @param sourceDocumentId the document to copy.
 * @param targetParentDocumentId the target document to be copied into as a child.
 */
","/**
 * Copy the requested document or a document tree.
 * <p>
 * Copies a document including all child documents to another location within
 * the same document provider. Upon completion returns the document id of
 * the copied document at the target destination. {@code null} must never
 * be returned.
 *
 * @param sourceDocumentId the document to copy.
 * @param targetParentDocumentId the target document to be copied into as a child.
 * @throws AuthenticationRequiredException If authentication is required from
 * the user (such as login credentials), but it is not guaranteed
 * that the client will handle this properly.
 */
",1,[@SuppressWarnings("unused")],[@SuppressWarnings("unused")],0,,,,0,0,0,0,0,There is no change in the implementation of the method between the early and late versions. Both versions throw the same `UnsupportedOperationException` with the message "Copy not supported".,"Since there are no changes in the method implementation or its behavior, there are no compatibility issues."
<android.widget.TextView: void onCommitCorrection(CorrectionInfo)>,25,26,,,,"{
    if (mEditor != null)
        mEditor.onCommitCorrection(info);
}","{
    if (mEditor != null)
        mEditor.onCommitCorrection(info);
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mEditor !, []), Expression(null), [])]), MethodCall(mEditor.onCommitCorrection(info), [VariableReference(mEditor, []), Expression(info, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mEditor !, []), Expression(null), [])])    VariableReference(if (mEditor !, [])    Expression(null), [])  MethodCall(mEditor.onCommitCorrection(info), [VariableReference(mEditor, []), Expression(info, [])])    VariableReference(mEditor, [])    Expression(info, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mEditor !, []), Expression(null), [])]), MethodCall(mEditor.onCommitCorrection(info), [VariableReference(mEditor, []), Expression(info, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mEditor !, []), Expression(null), [])])    VariableReference(if (mEditor !, [])    Expression(null), [])  MethodCall(mEditor.onCommitCorrection(info), [VariableReference(mEditor, []), Expression(info, [])])    VariableReference(mEditor, [])    Expression(info, [])  Statement(}, [])",0,"/**
 * Called by the framework in response to a text auto-correction (such as fixing a typo using a
 * a dictionnary) from the current input method, provided by it calling
 * {@link InputConnection#commitCorrection} InputConnection.commitCorrection()}. The default
 * implementation flashes the background of the corrected word to provide feedback to the user.
 *
 * @param info The auto correct info about the text that was corrected.
 */
","/**
 * Called by the framework in response to a text auto-correction (such as fixing a typo using a
 * dictionary) from the current input method, provided by it calling
 * {@link InputConnection#commitCorrection(CorrectionInfo) InputConnection.commitCorrection()}.
 * The default implementation flashes the background of the corrected word to provide
 * feedback to the user.
 *
 * @param info The auto correct info about the text that was corrected.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the code implementation between the early version and the late version.,"Since there is no change in the code, there are no potential compatibility issues."
<android.appwidget.AppWidgetManager: List<AppWidgetProviderInfo> getInstalledProvidersForProfile(UserHandle)>,25,26,,,,"{
    if (mService == null) {
        return Collections.emptyList();
    }
    return getInstalledProvidersForProfile(AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, profile);
}","{
    if (mService == null) {
        return Collections.emptyList();
    }
    return getInstalledProvidersForProfile(AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, profile, null);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])]), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])])    VariableReference(if (mService, [])    Expression(, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])]), MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mService, []), Expression(, [])])    VariableReference(if (mService, [])    Expression(, [])  MethodCall(return Collections.emptyList(), [VariableReference(return Collections, []), Expression(, [])])    VariableReference(return Collections, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Gets the AppWidget providers for the given user profile. User profile can only
 * be the current user or a profile of the current user. For example, the current
 * user may have a corporate profile. In this case the parent user profile has a
 * child profile, the corporate one.
 *
 * @param profile The profile for which to get providers. Passing null is equivaled
 * to passing only the current user handle.
 * @return The intalled providers.
 *
 * @see android.os.Process#myUserHandle()
 * @see android.os.UserManager#getUserProfiles()
 */
","/**
 * Gets the AppWidget providers for the given user profile. User profile can only
 * be the current user or a profile of the current user. For example, the current
 * user may have a corporate profile. In this case the parent user profile has a
 * child profile, the corporate one.
 *
 * @param profile The profile for which to get providers. Passing null is equivalent
 * to querying for only the calling user.
 * @return The installed providers, or an empty list if none are found for the given user.
 *
 * @see android.os.Process#myUserHandle()
 * @see android.os.UserManager#getUserProfiles()
 */
",1,,[@NonNull],1,,,,2,"1,5",1,"4,5",0,"A new argument (null) has been added to the method call getInstalledProvidersForProfile(AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, profile). This change classifies as 4 (other statement change) and 5 (dependent API changed) since the dependent API's parameter list has been modified.","This change does not introduce any differences in return values or exceptions thrown. Therefore, no Compatibility Issue arises, making the CI type 0."
"<android.view.View: boolean onKeyDown(int,KeyEvent)>",25,26,,,,"{
    if (KeyEvent.isConfirmKey(keyCode)) {
        if ((mViewFlags & ENABLED_MASK) == DISABLED) {
            return true;
        }
        // Long clickable items don't necessarily have to be clickable.
        if (((mViewFlags & CLICKABLE) == CLICKABLE || (mViewFlags & LONG_CLICKABLE) == LONG_CLICKABLE) && (event.getRepeatCount() == 0)) {
            // For the purposes of menu anchoring and drawable hotspots,
            // key events are considered to be at the center of the view.
            final float x = getWidth() / 2f;
            final float y = getHeight() / 2f;
            setPressed(true, x, y);
            checkForLongClick(0, x, y);
            return true;
        }
    }
    return false;
}","{
    if (KeyEvent.isConfirmKey(keyCode)) {
        if ((mViewFlags & ENABLED_MASK) == DISABLED) {
            return true;
        }
        if (event.getRepeatCount() == 0) {
            // Long clickable items don't necessarily have to be clickable.
            final boolean clickable = (mViewFlags & CLICKABLE) == CLICKABLE || (mViewFlags & LONG_CLICKABLE) == LONG_CLICKABLE;
            if (clickable || (mViewFlags & TOOLTIP) == TOOLTIP) {
                // For the purposes of menu anchoring and drawable hotspots,
                // key events are considered to be at the center of the view.
                final float x = getWidth() / 2f;
                final float y = getHeight() / 2f;
                if (clickable) {
                    setPressed(true, x, y);
                }
                checkForLongClick(0, x, y);
                return true;
            }
        }
    }
    return false;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(if (KeyEvent.isConfirmKey(keyCode)), [VariableReference(if (KeyEvent, []), Expression(keyCode), [])]), AssignmentExpression(=, [VariableReference(if ((mViewFlags & ENABLED_MASK), []), Expression(, [])]), Statement(return true, []), Statement(}, []), Statement(// Long clickable items don't necessarily have to be clickable., []), AssignmentExpression(=, [VariableReference(if (((mViewFlags & CLICKABLE), []), Expression(, [])]), Statement(// For the purposes of menu anchoring and drawable hotspots,, []), Statement(// key events are considered to be at the center of the view., []), AssignmentExpression(=, [VariableReference(final float x, []), Expression(getWidth() / 2f, [])]), AssignmentExpression(=, [VariableReference(final float y, []), Expression(getHeight() / 2f, [])]), Statement(setPressed(true, x, y), []), Statement(checkForLongClick(0, x, y), []), Statement(return true, []), Statement(}, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  MethodCall(if (KeyEvent.isConfirmKey(keyCode)), [VariableReference(if (KeyEvent, []), Expression(keyCode), [])])    VariableReference(if (KeyEvent, [])    Expression(keyCode), [])  AssignmentExpression(=, [VariableReference(if ((mViewFlags & ENABLED_MASK), []), Expression(, [])])    VariableReference(if ((mViewFlags & ENABLED_MASK), [])    Expression(, [])  Statement(return true, [])  Statement(}, [])  Statement(// Long clickable items don't necessarily have to be clickable., [])  AssignmentExpression(=, [VariableReference(if (((mViewFlags & CLICKABLE), []), Expression(, [])])    VariableReference(if (((mViewFlags & CLICKABLE), [])    Expression(, [])  Statement(// For the purposes of menu anchoring and drawable hotspots,, [])  Statement(// key events are considered to be at the center of the view., [])  AssignmentExpression(=, [VariableReference(final float x, []), Expression(getWidth() / 2f, [])])    VariableReference(final float x, [])    Expression(getWidth() / 2f, [])  AssignmentExpression(=, [VariableReference(final float y, []), Expression(getHeight() / 2f, [])])    VariableReference(final float y, [])    Expression(getHeight() / 2f, [])  Statement(setPressed(true, x, y), [])  Statement(checkForLongClick(0, x, y), [])  Statement(return true, [])  Statement(}, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(if (KeyEvent.isConfirmKey(keyCode)), [VariableReference(if (KeyEvent, []), Expression(keyCode), [])]), AssignmentExpression(=, [VariableReference(if ((mViewFlags & ENABLED_MASK), []), Expression(, [])]), Statement(return true, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (event.getRepeatCount(), []), Expression(, [])]), Statement(// Long clickable items don't necessarily have to be clickable., []), AssignmentExpression(=, [VariableReference(final boolean clickable, []), Expression((mViewFlags & CLICKABLE), [])]), AssignmentExpression(=, [VariableReference(if (clickable || (mViewFlags & TOOLTIP), []), Expression(, [])]), Statement(// For the purposes of menu anchoring and drawable hotspots,, []), Statement(// key events are considered to be at the center of the view., []), AssignmentExpression(=, [VariableReference(final float x, []), Expression(getWidth() / 2f, [])]), AssignmentExpression(=, [VariableReference(final float y, []), Expression(getHeight() / 2f, [])]), Statement(if (clickable) {, []), Statement(setPressed(true, x, y), []), Statement(}, []), Statement(checkForLongClick(0, x, y), []), Statement(return true, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  MethodCall(if (KeyEvent.isConfirmKey(keyCode)), [VariableReference(if (KeyEvent, []), Expression(keyCode), [])])    VariableReference(if (KeyEvent, [])    Expression(keyCode), [])  AssignmentExpression(=, [VariableReference(if ((mViewFlags & ENABLED_MASK), []), Expression(, [])])    VariableReference(if ((mViewFlags & ENABLED_MASK), [])    Expression(, [])  Statement(return true, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (event.getRepeatCount(), []), Expression(, [])])    VariableReference(if (event.getRepeatCount(), [])    Expression(, [])  Statement(// Long clickable items don't necessarily have to be clickable., [])  AssignmentExpression(=, [VariableReference(final boolean clickable, []), Expression((mViewFlags & CLICKABLE), [])])    VariableReference(final boolean clickable, [])    Expression((mViewFlags & CLICKABLE), [])  AssignmentExpression(=, [VariableReference(if (clickable || (mViewFlags & TOOLTIP), []), Expression(, [])])    VariableReference(if (clickable || (mViewFlags & TOOLTIP), [])    Expression(, [])  Statement(// For the purposes of menu anchoring and drawable hotspots,, [])  Statement(// key events are considered to be at the center of the view., [])  AssignmentExpression(=, [VariableReference(final float x, []), Expression(getWidth() / 2f, [])])    VariableReference(final float x, [])    Expression(getWidth() / 2f, [])  AssignmentExpression(=, [VariableReference(final float y, []), Expression(getHeight() / 2f, [])])    VariableReference(final float y, [])    Expression(getHeight() / 2f, [])  Statement(if (clickable) {, [])  Statement(setPressed(true, x, y), [])  Statement(}, [])  Statement(checkForLongClick(0, x, y), [])  Statement(return true, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])",1,"/**
 * Default implementation of {@link KeyEvent.Callback#onKeyDown(int, KeyEvent)
 * KeyEvent.Callback.onKeyDown()}: perform press of the view
 * when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER}
 * is released, if the view is enabled and clickable.
 * <p>
 * Key presses in software keyboards will generally NOT trigger this
 * listener, although some may elect to do so in some situations. Do not
 * rely on this to catch software key presses.
 *
 * @param keyCode a key code that represents the button pressed, from
 * {@link android.view.KeyEvent}
 * @param event the KeyEvent object that defines the button action
 */
","/**
 * Default implementation of {@link KeyEvent.Callback#onKeyDown(int, KeyEvent)
 * KeyEvent.Callback.onKeyDown()}: perform press of the view
 * when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER}
 * is released, if the view is enabled and clickable.
 * <p>
 * Key presses in software keyboards will generally NOT trigger this
 * listener, although some may elect to do so in some situations. Do not
 * rely on this to catch software key presses.
 *
 * @param keyCode a key code that represents the button pressed, from
 * {@link android.view.KeyEvent}
 * @param event the KeyEvent object that defines the button action
 */
",0,,,0,,,,"1,2","3,4",1,"1,3,4",1,"The control dependency has changed due to the reorganization of conditions, introduction of the 'clickable' boolean variable, and inclusion of a new condition for TOOLTIP. The return statements remain primarily the same, except for potential changes influenced by the new logic. Thus, the change types are 1,3,4.","The changes in control dependencies and the introduction of additional conditions could affect the return values. The addition of the TOOLTIP condition and the new check for `clickable` could alter the behaviour of the function, which means the API may return different results under different circumstances, leading to Compatibility Issues of type 1."
<android.text.method.TimeKeyListener: TimeKeyListener getInstance()>,25,26,,,,"{
    if (sInstance != null)
        return sInstance;
    sInstance = new TimeKeyListener();
    return sInstance;
}","{
    return getInstance(null);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (sInstance !, []), Expression(null), [])]), Statement(return sInstance, []), AssignmentExpression(=, [VariableReference(sInstance, []), Expression(new TimeKeyListener(), [])]), Statement(return sInstance, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (sInstance !, []), Expression(null), [])])    VariableReference(if (sInstance !, [])    Expression(null), [])  Statement(return sInstance, [])  AssignmentExpression(=, [VariableReference(sInstance, []), Expression(new TimeKeyListener(), [])])    VariableReference(sInstance, [])    Expression(new TimeKeyListener(), [])  Statement(return sInstance, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return getInstance(null), []), Statement(}, [])])  Statement({, [])  Statement(return getInstance(null), [])  Statement(}, [])",1,,"/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
",1,,"[@Deprecated, @NonNull]",1,,,,"1,2","1,3,5",1,"1,4,5",1,"The method implementation changed to returning `getInstance(null)` instead of checking for `sInstance` and potentially creating a new `TimeKeyListener`. This leads to changing the return statement, other statement, and dependent API, so the code change types are 1,4,5.","The change in the return statement introduces a potential for different return values depending on the behavior of the `getInstance(null)` method, whereas previously, the method checked and created a new instance if necessary. This introduces a CI type of 1."
"<android.app.assist.AssistStructure.ParcelTransferWriter: void writeView(ViewNode,Parcel,PooledStringWriter,int)>",25,26,,,,"{
    if (DEBUG_PARCEL)
        Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows="" + mNumWrittenWindows + "", views="" + mNumWrittenViews + "", level="" + (mCurViewStackPos + levelAdj));
    out.writeInt(VALIDATE_VIEW_TOKEN);
    int flags = child.writeSelfToParcel(out, pwriter, mTmpMatrix);
    mNumWrittenViews++;
    // If the child has children, push it on the stack to write them next.
    if ((flags & ViewNode.FLAGS_HAS_CHILDREN) != 0) {
        if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN)
            Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj));
        out.writeInt(child.mChildren.length);
        int pos = ++mCurViewStackPos;
        pushViewStackEntry(child, pos);
    }
}","{
    if (DEBUG_PARCEL)
        Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows="" + mNumWrittenWindows + "", views="" + mNumWrittenViews + "", level="" + (mCurViewStackPos + levelAdj));
    out.writeInt(VALIDATE_VIEW_TOKEN);
    int flags = child.writeSelfToParcel(out, pwriter, mSanitizeOnWrite, mTmpMatrix);
    mNumWrittenViews++;
    // If the child has children, push it on the stack to write them next.
    if ((flags & ViewNode.FLAGS_HAS_CHILDREN) != 0) {
        if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN)
            Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj));
        out.writeInt(child.mChildren.length);
        int pos = ++mCurViewStackPos;
        pushViewStackEntry(child, pos);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG_PARCEL), []), AssignmentExpression(=, [VariableReference(Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows, []), Expression("" + mNumWrittenWindows + "", views, [])]), MethodCall(out.writeInt(VALIDATE_VIEW_TOKEN), [VariableReference(out, []), Expression(VALIDATE_VIEW_TOKEN, [])]), AssignmentExpression(=, [VariableReference(int flags, []), Expression(child.writeSelfToParcel(out, pwriter, mTmpMatrix), [])]), Statement(mNumWrittenViews++, []), Statement(// If the child has children, push it on the stack to write them next., []), AssignmentExpression(=, [VariableReference(if ((flags & ViewNode.FLAGS_HAS_CHILDREN) !, []), Expression(0) {, [])]), Statement(if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN), []), MethodCall(Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj)), [VariableReference(Log, []), Expression(TAG, []), Expression(""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", []), Expression(level "" + (mCurViewStackPos + levelAdj), [])]), MethodCall(out.writeInt(child.mChildren.length), [VariableReference(out, []), Expression(child.mChildren.length, [])]), AssignmentExpression(=, [VariableReference(int pos, []), Expression(++mCurViewStackPos, [])]), Statement(pushViewStackEntry(child, pos), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG_PARCEL), [])  AssignmentExpression(=, [VariableReference(Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows, []), Expression("" + mNumWrittenWindows + "", views, [])])    VariableReference(Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows, [])    Expression("" + mNumWrittenWindows + "", views, [])  MethodCall(out.writeInt(VALIDATE_VIEW_TOKEN), [VariableReference(out, []), Expression(VALIDATE_VIEW_TOKEN, [])])    VariableReference(out, [])    Expression(VALIDATE_VIEW_TOKEN, [])  AssignmentExpression(=, [VariableReference(int flags, []), Expression(child.writeSelfToParcel(out, pwriter, mTmpMatrix), [])])    VariableReference(int flags, [])    Expression(child.writeSelfToParcel(out, pwriter, mTmpMatrix), [])  Statement(mNumWrittenViews++, [])  Statement(// If the child has children, push it on the stack to write them next., [])  AssignmentExpression(=, [VariableReference(if ((flags & ViewNode.FLAGS_HAS_CHILDREN) !, []), Expression(0) {, [])])    VariableReference(if ((flags & ViewNode.FLAGS_HAS_CHILDREN) !, [])    Expression(0) {, [])  Statement(if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN), [])  MethodCall(Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj)), [VariableReference(Log, []), Expression(TAG, []), Expression(""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", []), Expression(level "" + (mCurViewStackPos + levelAdj), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", [])    Expression(level "" + (mCurViewStackPos + levelAdj), [])  MethodCall(out.writeInt(child.mChildren.length), [VariableReference(out, []), Expression(child.mChildren.length, [])])    VariableReference(out, [])    Expression(child.mChildren.length, [])  AssignmentExpression(=, [VariableReference(int pos, []), Expression(++mCurViewStackPos, [])])    VariableReference(int pos, [])    Expression(++mCurViewStackPos, [])  Statement(pushViewStackEntry(child, pos), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG_PARCEL), []), AssignmentExpression(=, [VariableReference(Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows, []), Expression("" + mNumWrittenWindows + "", views, [])]), MethodCall(out.writeInt(VALIDATE_VIEW_TOKEN), [VariableReference(out, []), Expression(VALIDATE_VIEW_TOKEN, [])]), AssignmentExpression(=, [VariableReference(int flags, []), Expression(child.writeSelfToParcel(out, pwriter, mSanitizeOnWrite, mTmpMatrix), [])]), Statement(mNumWrittenViews++, []), Statement(// If the child has children, push it on the stack to write them next., []), AssignmentExpression(=, [VariableReference(if ((flags & ViewNode.FLAGS_HAS_CHILDREN) !, []), Expression(0) {, [])]), Statement(if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN), []), MethodCall(Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj)), [VariableReference(Log, []), Expression(TAG, []), Expression(""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", []), Expression(level "" + (mCurViewStackPos + levelAdj), [])]), MethodCall(out.writeInt(child.mChildren.length), [VariableReference(out, []), Expression(child.mChildren.length, [])]), AssignmentExpression(=, [VariableReference(int pos, []), Expression(++mCurViewStackPos, [])]), Statement(pushViewStackEntry(child, pos), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG_PARCEL), [])  AssignmentExpression(=, [VariableReference(Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows, []), Expression("" + mNumWrittenWindows + "", views, [])])    VariableReference(Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows, [])    Expression("" + mNumWrittenWindows + "", views, [])  MethodCall(out.writeInt(VALIDATE_VIEW_TOKEN), [VariableReference(out, []), Expression(VALIDATE_VIEW_TOKEN, [])])    VariableReference(out, [])    Expression(VALIDATE_VIEW_TOKEN, [])  AssignmentExpression(=, [VariableReference(int flags, []), Expression(child.writeSelfToParcel(out, pwriter, mSanitizeOnWrite, mTmpMatrix), [])])    VariableReference(int flags, [])    Expression(child.writeSelfToParcel(out, pwriter, mSanitizeOnWrite, mTmpMatrix), [])  Statement(mNumWrittenViews++, [])  Statement(// If the child has children, push it on the stack to write them next., [])  AssignmentExpression(=, [VariableReference(if ((flags & ViewNode.FLAGS_HAS_CHILDREN) !, []), Expression(0) {, [])])    VariableReference(if ((flags & ViewNode.FLAGS_HAS_CHILDREN) !, [])    Expression(0) {, [])  Statement(if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN), [])  MethodCall(Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj)), [VariableReference(Log, []), Expression(TAG, []), Expression(""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", []), Expression(level "" + (mCurViewStackPos + levelAdj), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", [])    Expression(level "" + (mCurViewStackPos + levelAdj), [])  MethodCall(out.writeInt(child.mChildren.length), [VariableReference(out, []), Expression(child.mChildren.length, [])])    VariableReference(out, [])    Expression(child.mChildren.length, [])  AssignmentExpression(=, [VariableReference(int pos, []), Expression(++mCurViewStackPos, [])])    VariableReference(int pos, [])    Expression(++mCurViewStackPos, [])  Statement(pushViewStackEntry(child, pos), [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,2,5,1,"4,5  ",0,"A parameter has been added to the method call `child.writeSelfToParcel` in the late version. In the early version, it was `child.writeSelfToParcel(out, pwriter, mTmpMatrix)`, and in the late version, it changed to `child.writeSelfToParcel(out, pwriter, mSanitizeOnWrite, mTmpMatrix)`. This constitutes 'Dependent API changed' and 'Other statement changed' as the method it depends on and the parameters have changed.  ","While the change involves adding a parameter to the dependent method call, there is no indication that this change would result in different return values or exceptions being thrown. Therefore, there is no compatibility issue."
<android.text.TextUtils: boolean isEmpty(CharSequence)>,25,26,,,,"{
    if (str == null || str.length() == 0)
        return true;
    else
        return false;
}","{
    return str == null || str.length() == 0;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (str, []), Expression(, [])]), Statement(return true, []), Statement(else, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (str, []), Expression(, [])])    VariableReference(if (str, [])    Expression(, [])  Statement(return true, [])  Statement(else, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return str, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return str, []), Expression(, [])])    VariableReference(return str, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Returns true if the string is null or 0-length.
 * @param str the string to be examined
 * @return true if str is null or zero length
 */
","/**
 * Returns true if the string is null or 0-length.
 * @param str the string to be examined
 * @return true if str is null or zero length
 */
",0,,,0,,,,1,"1,3",1,"3,4",0,"The early implementation utilizes an if-else control statement to return true or false depending on the condition `str == null || str.length() == 0`. The late implementation simplifies this by directly returning the result of this condition. Therefore, changes involve both control dependency and other statement changes, so the code change type is 3,4.","The logical content and return values remain the same between the early and late implementation. Therefore, no potential compatibility issue arises, so the CI type is 0."
<android.widget.TextView: void setMinWidth(int)>,25,26,,,,"{
    mMinWidth = minpixels;
    mMinWidthMode = PIXELS;
    requestLayout();
    invalidate();
}","{
    mMinWidth = minPixels;
    mMinWidthMode = PIXELS;
    requestLayout();
    invalidate();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mMinWidth, []), Expression(minpixels, [])]), AssignmentExpression(=, [VariableReference(mMinWidthMode, []), Expression(PIXELS, [])]), Statement(requestLayout(), []), Statement(invalidate(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mMinWidth, []), Expression(minpixels, [])])    VariableReference(mMinWidth, [])    Expression(minpixels, [])  AssignmentExpression(=, [VariableReference(mMinWidthMode, []), Expression(PIXELS, [])])    VariableReference(mMinWidthMode, [])    Expression(PIXELS, [])  Statement(requestLayout(), [])  Statement(invalidate(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mMinWidth, []), Expression(minPixels, [])]), AssignmentExpression(=, [VariableReference(mMinWidthMode, []), Expression(PIXELS, [])]), Statement(requestLayout(), []), Statement(invalidate(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mMinWidth, []), Expression(minPixels, [])])    VariableReference(mMinWidth, [])    Expression(minPixels, [])  AssignmentExpression(=, [VariableReference(mMinWidthMode, []), Expression(PIXELS, [])])    VariableReference(mMinWidthMode, [])    Expression(PIXELS, [])  Statement(requestLayout(), [])  Statement(invalidate(), [])  Statement(}, [])",1,"/**
 * Makes the TextView at least this many pixels wide
 *
 * @attr ref android.R.styleable#TextView_minWidth
 */
","/**
 * Sets the width of the TextView to be at least {@code minPixels} wide.
 * <p>
 * This value is used for width calculation if LayoutParams does not force TextView to have an
 * exact width. Setting this value overrides previous minimum width configurations such as
 * {@link #setMinEms(int)} or {@link #setEms(int)}.
 * <p>
 * The value given here is different than {@link #setMinimumWidth(int)}. Between
 * {@code minWidth} and the value set in {@link #setMinimumWidth(int)}, the greater one is used
 * to decide the final width.
 *
 * @param minPixels the minimum width of TextView in terms of pixels
 *
 * @see #getMinWidth()
 * @see #setWidth(int)
 *
 * @attr ref android.R.styleable#TextView_minWidth
 */
",1,[@android.view.RemotableViewMethod],[@android.view.RemotableViewMethod],0,,,,1,4,0,4,0,"The only difference between the two versions is a change in the variable name from `minpixels` to `minPixels`. This change in naming convention does not affect the functionality or behavior of the method. Therefore, the change type is 4.","Since the change is purely a refinement or convention adjustment in variable naming and does not alter the behavior of the method, there is no compatibility issue. Therefore, the CI type is 0."
<android.service.notification.NotificationListenerService.MyHandler: void handleMessage(Message)>,25,26,,,,"{
    if (!isConnected) {
        return;
    }
    switch(msg.what) {
        case MSG_ON_NOTIFICATION_POSTED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                args.recycle();
                onNotificationPosted(sbn, rankingMap);
            }
            break;
        case MSG_ON_NOTIFICATION_REMOVED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                args.recycle();
                onNotificationRemoved(sbn, rankingMap);
            }
            break;
        case MSG_ON_LISTENER_CONNECTED:
            {
                onListenerConnected();
            }
            break;
        case MSG_ON_NOTIFICATION_RANKING_UPDATE:
            {
                RankingMap rankingMap = (RankingMap) msg.obj;
                onNotificationRankingUpdate(rankingMap);
            }
            break;
        case MSG_ON_LISTENER_HINTS_CHANGED:
            {
                final int hints = msg.arg1;
                onListenerHintsChanged(hints);
            }
            break;
        case MSG_ON_INTERRUPTION_FILTER_CHANGED:
            {
                final int interruptionFilter = msg.arg1;
                onInterruptionFilterChanged(interruptionFilter);
            }
            break;
    }
}","{
    if (!isConnected) {
        return;
    }
    switch(msg.what) {
        case MSG_ON_NOTIFICATION_POSTED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                args.recycle();
                onNotificationPosted(sbn, rankingMap);
            }
            break;
        case MSG_ON_NOTIFICATION_REMOVED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                int reason = (int) args.arg3;
                args.recycle();
                onNotificationRemoved(sbn, rankingMap, reason);
            }
            break;
        case MSG_ON_LISTENER_CONNECTED:
            {
                onListenerConnected();
            }
            break;
        case MSG_ON_NOTIFICATION_RANKING_UPDATE:
            {
                RankingMap rankingMap = (RankingMap) msg.obj;
                onNotificationRankingUpdate(rankingMap);
            }
            break;
        case MSG_ON_LISTENER_HINTS_CHANGED:
            {
                final int hints = msg.arg1;
                onListenerHintsChanged(hints);
            }
            break;
        case MSG_ON_INTERRUPTION_FILTER_CHANGED:
            {
                final int interruptionFilter = msg.arg1;
                onInterruptionFilterChanged(interruptionFilter);
            }
            break;
        case MSG_ON_NOTIFICATION_CHANNEL_MODIFIED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                String pkgName = (String) args.arg1;
                UserHandle user = (UserHandle) args.arg2;
                NotificationChannel channel = (NotificationChannel) args.arg3;
                int modificationType = (int) args.arg4;
                onNotificationChannelModified(pkgName, user, channel, modificationType);
            }
            break;
        case MSG_ON_NOTIFICATION_CHANNEL_GROUP_MODIFIED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                String pkgName = (String) args.arg1;
                UserHandle user = (UserHandle) args.arg2;
                NotificationChannelGroup group = (NotificationChannelGroup) args.arg3;
                int modificationType = (int) args.arg4;
                onNotificationChannelGroupModified(pkgName, user, group, modificationType);
            }
            break;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!isConnected) {, []), Statement(return, []), Statement(}, []), Statement(case MSG_ON_NOTIFICATION_POSTED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])]), AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(onNotificationPosted(sbn, rankingMap), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_NOTIFICATION_REMOVED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])]), AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(onNotificationRemoved(sbn, rankingMap), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_LISTENER_CONNECTED:, []), Statement({, []), Statement(onListenerConnected(), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_NOTIFICATION_RANKING_UPDATE:, []), Statement({, []), AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) msg.obj, [])]), Statement(onNotificationRankingUpdate(rankingMap), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_LISTENER_HINTS_CHANGED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final int hints, []), Expression(msg.arg1, [])]), Statement(onListenerHintsChanged(hints), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_INTERRUPTION_FILTER_CHANGED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final int interruptionFilter, []), Expression(msg.arg1, [])]), Statement(onInterruptionFilterChanged(interruptionFilter), []), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!isConnected) {, [])  Statement(return, [])  Statement(}, [])  Statement(case MSG_ON_NOTIFICATION_POSTED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])])    VariableReference(StatusBarNotification sbn, [])    Expression((StatusBarNotification) args.arg1, [])  AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])])    VariableReference(RankingMap rankingMap, [])    Expression((RankingMap) args.arg2, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(onNotificationPosted(sbn, rankingMap), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_NOTIFICATION_REMOVED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])])    VariableReference(StatusBarNotification sbn, [])    Expression((StatusBarNotification) args.arg1, [])  AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])])    VariableReference(RankingMap rankingMap, [])    Expression((RankingMap) args.arg2, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(onNotificationRemoved(sbn, rankingMap), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_LISTENER_CONNECTED:, [])  Statement({, [])  Statement(onListenerConnected(), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_NOTIFICATION_RANKING_UPDATE:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) msg.obj, [])])    VariableReference(RankingMap rankingMap, [])    Expression((RankingMap) msg.obj, [])  Statement(onNotificationRankingUpdate(rankingMap), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_LISTENER_HINTS_CHANGED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int hints, []), Expression(msg.arg1, [])])    VariableReference(final int hints, [])    Expression(msg.arg1, [])  Statement(onListenerHintsChanged(hints), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_INTERRUPTION_FILTER_CHANGED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int interruptionFilter, []), Expression(msg.arg1, [])])    VariableReference(final int interruptionFilter, [])    Expression(msg.arg1, [])  Statement(onInterruptionFilterChanged(interruptionFilter), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!isConnected) {, []), Statement(return, []), Statement(}, []), Statement(case MSG_ON_NOTIFICATION_POSTED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])]), AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(onNotificationPosted(sbn, rankingMap), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_NOTIFICATION_REMOVED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])]), AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])]), AssignmentExpression(=, [VariableReference(int reason, []), Expression((int) args.arg3, [])]), MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])]), Statement(onNotificationRemoved(sbn, rankingMap, reason), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_LISTENER_CONNECTED:, []), Statement({, []), Statement(onListenerConnected(), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_NOTIFICATION_RANKING_UPDATE:, []), Statement({, []), AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) msg.obj, [])]), Statement(onNotificationRankingUpdate(rankingMap), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_LISTENER_HINTS_CHANGED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final int hints, []), Expression(msg.arg1, [])]), Statement(onListenerHintsChanged(hints), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_INTERRUPTION_FILTER_CHANGED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(final int interruptionFilter, []), Expression(msg.arg1, [])]), Statement(onInterruptionFilterChanged(interruptionFilter), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_NOTIFICATION_CHANNEL_MODIFIED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(String pkgName, []), Expression((String) args.arg1, [])]), AssignmentExpression(=, [VariableReference(UserHandle user, []), Expression((UserHandle) args.arg2, [])]), AssignmentExpression(=, [VariableReference(NotificationChannel channel, []), Expression((NotificationChannel) args.arg3, [])]), AssignmentExpression(=, [VariableReference(int modificationType, []), Expression((int) args.arg4, [])]), Statement(onNotificationChannelModified(pkgName, user, channel, modificationType), []), Statement(}, []), Statement(break, []), Statement(case MSG_ON_NOTIFICATION_CHANNEL_GROUP_MODIFIED:, []), Statement({, []), AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])]), AssignmentExpression(=, [VariableReference(String pkgName, []), Expression((String) args.arg1, [])]), AssignmentExpression(=, [VariableReference(UserHandle user, []), Expression((UserHandle) args.arg2, [])]), AssignmentExpression(=, [VariableReference(NotificationChannelGroup group, []), Expression((NotificationChannelGroup) args.arg3, [])]), AssignmentExpression(=, [VariableReference(int modificationType, []), Expression((int) args.arg4, [])]), Statement(onNotificationChannelGroupModified(pkgName, user, group, modificationType), []), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!isConnected) {, [])  Statement(return, [])  Statement(}, [])  Statement(case MSG_ON_NOTIFICATION_POSTED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])])    VariableReference(StatusBarNotification sbn, [])    Expression((StatusBarNotification) args.arg1, [])  AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])])    VariableReference(RankingMap rankingMap, [])    Expression((RankingMap) args.arg2, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(onNotificationPosted(sbn, rankingMap), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_NOTIFICATION_REMOVED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(StatusBarNotification sbn, []), Expression((StatusBarNotification) args.arg1, [])])    VariableReference(StatusBarNotification sbn, [])    Expression((StatusBarNotification) args.arg1, [])  AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) args.arg2, [])])    VariableReference(RankingMap rankingMap, [])    Expression((RankingMap) args.arg2, [])  AssignmentExpression(=, [VariableReference(int reason, []), Expression((int) args.arg3, [])])    VariableReference(int reason, [])    Expression((int) args.arg3, [])  MethodCall(args.recycle(), [VariableReference(args, []), Expression(, [])])    VariableReference(args, [])    Expression(, [])  Statement(onNotificationRemoved(sbn, rankingMap, reason), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_LISTENER_CONNECTED:, [])  Statement({, [])  Statement(onListenerConnected(), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_NOTIFICATION_RANKING_UPDATE:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(RankingMap rankingMap, []), Expression((RankingMap) msg.obj, [])])    VariableReference(RankingMap rankingMap, [])    Expression((RankingMap) msg.obj, [])  Statement(onNotificationRankingUpdate(rankingMap), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_LISTENER_HINTS_CHANGED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int hints, []), Expression(msg.arg1, [])])    VariableReference(final int hints, [])    Expression(msg.arg1, [])  Statement(onListenerHintsChanged(hints), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_INTERRUPTION_FILTER_CHANGED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int interruptionFilter, []), Expression(msg.arg1, [])])    VariableReference(final int interruptionFilter, [])    Expression(msg.arg1, [])  Statement(onInterruptionFilterChanged(interruptionFilter), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_NOTIFICATION_CHANNEL_MODIFIED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(String pkgName, []), Expression((String) args.arg1, [])])    VariableReference(String pkgName, [])    Expression((String) args.arg1, [])  AssignmentExpression(=, [VariableReference(UserHandle user, []), Expression((UserHandle) args.arg2, [])])    VariableReference(UserHandle user, [])    Expression((UserHandle) args.arg2, [])  AssignmentExpression(=, [VariableReference(NotificationChannel channel, []), Expression((NotificationChannel) args.arg3, [])])    VariableReference(NotificationChannel channel, [])    Expression((NotificationChannel) args.arg3, [])  AssignmentExpression(=, [VariableReference(int modificationType, []), Expression((int) args.arg4, [])])    VariableReference(int modificationType, [])    Expression((int) args.arg4, [])  Statement(onNotificationChannelModified(pkgName, user, channel, modificationType), [])  Statement(}, [])  Statement(break, [])  Statement(case MSG_ON_NOTIFICATION_CHANNEL_GROUP_MODIFIED:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(SomeArgs args, []), Expression((SomeArgs) msg.obj, [])])    VariableReference(SomeArgs args, [])    Expression((SomeArgs) msg.obj, [])  AssignmentExpression(=, [VariableReference(String pkgName, []), Expression((String) args.arg1, [])])    VariableReference(String pkgName, [])    Expression((String) args.arg1, [])  AssignmentExpression(=, [VariableReference(UserHandle user, []), Expression((UserHandle) args.arg2, [])])    VariableReference(UserHandle user, [])    Expression((UserHandle) args.arg2, [])  AssignmentExpression(=, [VariableReference(NotificationChannelGroup group, []), Expression((NotificationChannelGroup) args.arg3, [])])    VariableReference(NotificationChannelGroup group, [])    Expression((NotificationChannelGroup) args.arg3, [])  AssignmentExpression(=, [VariableReference(int modificationType, []), Expression((int) args.arg4, [])])    VariableReference(int modificationType, [])    Expression((int) args.arg4, [])  Statement(onNotificationChannelGroupModified(pkgName, user, group, modificationType), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",1,"1,2,3,4","1,2",Several changes have been made between the early and late versions:,3. These new cases include assignments and method calls for `SomeArgs` and respective parameters.
<android.app.EnterTransitionCoordinator: void onTransitionsComplete()>,25,26,,,,"{
    moveSharedElementsFromOverlay();
    final ViewGroup decorView = getDecor();
    if (decorView != null) {
        decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
    }
}","{
    moveSharedElementsFromOverlay();
    final ViewGroup decorView = getDecor();
    if (decorView != null) {
        decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
        Window window = getWindow();
        if (window != null && mReplacedBackground == decorView.getBackground()) {
            window.setBackgroundDrawable(null);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(moveSharedElementsFromOverlay(), []), AssignmentExpression(=, [VariableReference(final ViewGroup decorView, []), Expression(getDecor(), [])]), AssignmentExpression(=, [VariableReference(if (decorView !, []), Expression(null) {, [])]), MethodCall(decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED), [VariableReference(decorView, []), Expression(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(moveSharedElementsFromOverlay(), [])  AssignmentExpression(=, [VariableReference(final ViewGroup decorView, []), Expression(getDecor(), [])])    VariableReference(final ViewGroup decorView, [])    Expression(getDecor(), [])  AssignmentExpression(=, [VariableReference(if (decorView !, []), Expression(null) {, [])])    VariableReference(if (decorView !, [])    Expression(null) {, [])  MethodCall(decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED), [VariableReference(decorView, []), Expression(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, [])])    VariableReference(decorView, [])    Expression(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(moveSharedElementsFromOverlay(), []), AssignmentExpression(=, [VariableReference(final ViewGroup decorView, []), Expression(getDecor(), [])]), AssignmentExpression(=, [VariableReference(if (decorView !, []), Expression(null) {, [])]), MethodCall(decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED), [VariableReference(decorView, []), Expression(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, [])]), AssignmentExpression(=, [VariableReference(Window window, []), Expression(getWindow(), [])]), AssignmentExpression(=, [VariableReference(if (window !, []), Expression(null && mReplacedBackground, [])]), MethodCall(window.setBackgroundDrawable(null), [VariableReference(window, []), Expression(null, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(moveSharedElementsFromOverlay(), [])  AssignmentExpression(=, [VariableReference(final ViewGroup decorView, []), Expression(getDecor(), [])])    VariableReference(final ViewGroup decorView, [])    Expression(getDecor(), [])  AssignmentExpression(=, [VariableReference(if (decorView !, []), Expression(null) {, [])])    VariableReference(if (decorView !, [])    Expression(null) {, [])  MethodCall(decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED), [VariableReference(decorView, []), Expression(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, [])])    VariableReference(decorView, [])    Expression(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED, [])  AssignmentExpression(=, [VariableReference(Window window, []), Expression(getWindow(), [])])    VariableReference(Window window, [])    Expression(getWindow(), [])  AssignmentExpression(=, [VariableReference(if (window !, []), Expression(null && mReplacedBackground, [])])    VariableReference(if (window !, [])    Expression(null && mReplacedBackground, [])  MethodCall(window.setBackgroundDrawable(null), [VariableReference(window, []), Expression(null, [])])    VariableReference(window, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4",1,3,0,The late implementation adds a new control dependency (`if (window != null && mReplacedBackground == decorView.getBackground())`) which includes a method call (`window.setBackgroundDrawable(null)`). The change type is 3.,"The additional control dependency does not affect the return value or exception handling of the method. Therefore, there is no potential compatibility issue. CI type is 0."
<android.widget.VideoView: void stopPlayback()>,25,26,,,,"{
    if (mMediaPlayer != null) {
        mMediaPlayer.stop();
        mMediaPlayer.release();
        mMediaPlayer = null;
        mCurrentState = STATE_IDLE;
        mTargetState = STATE_IDLE;
        AudioManager am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        am.abandonAudioFocus(null);
    }
}","{
    if (mMediaPlayer != null) {
        mMediaPlayer.stop();
        mMediaPlayer.release();
        mMediaPlayer = null;
        mCurrentState = STATE_IDLE;
        mTargetState = STATE_IDLE;
        mAudioManager.abandonAudioFocus(null);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mMediaPlayer !, []), Expression(null) {, [])]), MethodCall(mMediaPlayer.stop(), [VariableReference(mMediaPlayer, []), Expression(, [])]), MethodCall(mMediaPlayer.release(), [VariableReference(mMediaPlayer, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mMediaPlayer, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mCurrentState, []), Expression(STATE_IDLE, [])]), AssignmentExpression(=, [VariableReference(mTargetState, []), Expression(STATE_IDLE, [])]), AssignmentExpression(=, [VariableReference(AudioManager am, []), Expression((AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE), [])]), MethodCall(am.abandonAudioFocus(null), [VariableReference(am, []), Expression(null, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mMediaPlayer !, []), Expression(null) {, [])])    VariableReference(if (mMediaPlayer !, [])    Expression(null) {, [])  MethodCall(mMediaPlayer.stop(), [VariableReference(mMediaPlayer, []), Expression(, [])])    VariableReference(mMediaPlayer, [])    Expression(, [])  MethodCall(mMediaPlayer.release(), [VariableReference(mMediaPlayer, []), Expression(, [])])    VariableReference(mMediaPlayer, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mMediaPlayer, []), Expression(null, [])])    VariableReference(mMediaPlayer, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mCurrentState, []), Expression(STATE_IDLE, [])])    VariableReference(mCurrentState, [])    Expression(STATE_IDLE, [])  AssignmentExpression(=, [VariableReference(mTargetState, []), Expression(STATE_IDLE, [])])    VariableReference(mTargetState, [])    Expression(STATE_IDLE, [])  AssignmentExpression(=, [VariableReference(AudioManager am, []), Expression((AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE), [])])    VariableReference(AudioManager am, [])    Expression((AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE), [])  MethodCall(am.abandonAudioFocus(null), [VariableReference(am, []), Expression(null, [])])    VariableReference(am, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mMediaPlayer !, []), Expression(null) {, [])]), MethodCall(mMediaPlayer.stop(), [VariableReference(mMediaPlayer, []), Expression(, [])]), MethodCall(mMediaPlayer.release(), [VariableReference(mMediaPlayer, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mMediaPlayer, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mCurrentState, []), Expression(STATE_IDLE, [])]), AssignmentExpression(=, [VariableReference(mTargetState, []), Expression(STATE_IDLE, [])]), MethodCall(mAudioManager.abandonAudioFocus(null), [VariableReference(mAudioManager, []), Expression(null, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mMediaPlayer !, []), Expression(null) {, [])])    VariableReference(if (mMediaPlayer !, [])    Expression(null) {, [])  MethodCall(mMediaPlayer.stop(), [VariableReference(mMediaPlayer, []), Expression(, [])])    VariableReference(mMediaPlayer, [])    Expression(, [])  MethodCall(mMediaPlayer.release(), [VariableReference(mMediaPlayer, []), Expression(, [])])    VariableReference(mMediaPlayer, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mMediaPlayer, []), Expression(null, [])])    VariableReference(mMediaPlayer, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mCurrentState, []), Expression(STATE_IDLE, [])])    VariableReference(mCurrentState, [])    Expression(STATE_IDLE, [])  AssignmentExpression(=, [VariableReference(mTargetState, []), Expression(STATE_IDLE, [])])    VariableReference(mTargetState, [])    Expression(STATE_IDLE, [])  MethodCall(mAudioManager.abandonAudioFocus(null), [VariableReference(mAudioManager, []), Expression(null, [])])    VariableReference(mAudioManager, [])    Expression(null, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,"1,2",4,0,4,0,"The only change in the code is that the `AudioManager am` variable was replaced with the `mAudioManager` instance variable. This change does not affect the return value or result in different exception handling; hence, it falls under category 4 - Other statement changed.","The change does not potentially lead to different return values, different exception handling, or altered behavior; hence, no compatibility issue is detected."
<android.app.Notification.Action.Builder: Action build()>,25,26,,,,"{
    RemoteInput[] remoteInputs = mRemoteInputs != null ? mRemoteInputs.toArray(new RemoteInput[mRemoteInputs.size()]) : null;
    return new Action(mIcon, mTitle, mIntent, mExtras, remoteInputs, mAllowGeneratedReplies);
}","{
    ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
    RemoteInput[] previousDataInputs = (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
    if (previousDataInputs != null) {
        for (RemoteInput input : previousDataInputs) {
            dataOnlyInputs.add(input);
        }
    }
    List<RemoteInput> textInputs = new ArrayList<>();
    if (mRemoteInputs != null) {
        for (RemoteInput input : mRemoteInputs) {
            if (input.isDataOnly()) {
                dataOnlyInputs.add(input);
            } else {
                textInputs.add(input);
            }
        }
    }
    if (!dataOnlyInputs.isEmpty()) {
        RemoteInput[] dataInputsArr = dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
        mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
    }
    RemoteInput[] textInputsArr = textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
    return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(RemoteInput[] remoteInputs, []), Expression(mRemoteInputs !, [])]), Statement(return new Action(mIcon, mTitle, mIntent, mExtras, remoteInputs, mAllowGeneratedReplies), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(RemoteInput[] remoteInputs, []), Expression(mRemoteInputs !, [])])    VariableReference(RemoteInput[] remoteInputs, [])    Expression(mRemoteInputs !, [])  Statement(return new Action(mIcon, mTitle, mIntent, mExtras, remoteInputs, mAllowGeneratedReplies), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(ArrayList<RemoteInput> dataOnlyInputs, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(RemoteInput[] previousDataInputs, []), Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])]), AssignmentExpression(=, [VariableReference(if (previousDataInputs !, []), Expression(null) {, [])]), Statement(for (RemoteInput input : previousDataInputs) {, []), MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<RemoteInput> textInputs, []), Expression(new ArrayList<>(), [])]), AssignmentExpression(=, [VariableReference(if (mRemoteInputs !, []), Expression(null) {, [])]), Statement(for (RemoteInput input : mRemoteInputs) {, []), MethodCall(if (input.isDataOnly()), [VariableReference(if (input, []), Expression(), [])]), MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])]), Statement(} else {, []), MethodCall(textInputs.add(input), [VariableReference(textInputs, []), Expression(input, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(if (!dataOnlyInputs.isEmpty()), [VariableReference(if (!dataOnlyInputs, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(RemoteInput[] dataInputsArr, []), Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])]), MethodCall(mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr), [VariableReference(mExtras, []), Expression(EXTRA_DATA_ONLY_INPUTS, []), Expression(dataInputsArr, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(RemoteInput[] textInputsArr, []), Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])]), Statement(return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(ArrayList<RemoteInput> dataOnlyInputs, []), Expression(new ArrayList<>(), [])])    VariableReference(ArrayList<RemoteInput> dataOnlyInputs, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(RemoteInput[] previousDataInputs, []), Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])])    VariableReference(RemoteInput[] previousDataInputs, [])    Expression((RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS), [])  AssignmentExpression(=, [VariableReference(if (previousDataInputs !, []), Expression(null) {, [])])    VariableReference(if (previousDataInputs !, [])    Expression(null) {, [])  Statement(for (RemoteInput input : previousDataInputs) {, [])  MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])])    VariableReference(dataOnlyInputs, [])    Expression(input, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<RemoteInput> textInputs, []), Expression(new ArrayList<>(), [])])    VariableReference(List<RemoteInput> textInputs, [])    Expression(new ArrayList<>(), [])  AssignmentExpression(=, [VariableReference(if (mRemoteInputs !, []), Expression(null) {, [])])    VariableReference(if (mRemoteInputs !, [])    Expression(null) {, [])  Statement(for (RemoteInput input : mRemoteInputs) {, [])  MethodCall(if (input.isDataOnly()), [VariableReference(if (input, []), Expression(), [])])    VariableReference(if (input, [])    Expression(), [])  MethodCall(dataOnlyInputs.add(input), [VariableReference(dataOnlyInputs, []), Expression(input, [])])    VariableReference(dataOnlyInputs, [])    Expression(input, [])  Statement(} else {, [])  MethodCall(textInputs.add(input), [VariableReference(textInputs, []), Expression(input, [])])    VariableReference(textInputs, [])    Expression(input, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (!dataOnlyInputs.isEmpty()), [VariableReference(if (!dataOnlyInputs, []), Expression(), [])])    VariableReference(if (!dataOnlyInputs, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(RemoteInput[] dataInputsArr, []), Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])])    VariableReference(RemoteInput[] dataInputsArr, [])    Expression(dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]), [])  MethodCall(mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr), [VariableReference(mExtras, []), Expression(EXTRA_DATA_ONLY_INPUTS, []), Expression(dataInputsArr, [])])    VariableReference(mExtras, [])    Expression(EXTRA_DATA_ONLY_INPUTS, [])    Expression(dataInputsArr, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RemoteInput[] textInputsArr, []), Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])])    VariableReference(RemoteInput[] textInputsArr, [])    Expression(textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]), [])  Statement(return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies), [])  Statement(}, [])",1,"/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */
","/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */
",0,,,0,,,,"1,2","1,3,4,5",1,"3,4",0,"There are changes in the control flow and some additional statements handling data inputs. Specifically, for-loops and conditional statements have been added to handle `dataOnlyInputs` and `textInputs`. Therefore, the code change types are 3 for control dependency and 4 for other statements.","The added control flow and additional statements do not change the return type or value directly since the return statement still creates an `Action` object with similar attributes. The changes involve preparing inputs before returning the `Action` object. Therefore, there are no potential compatibility issues. Hence, the CI type is 0."
"<android.app.SharedPreferencesImpl.EditorImpl: Editor putInt(String,int)>",25,26,,,,"{
    synchronized (this) {
        mModified.put(key, value);
        return this;
    }
}","{
    synchronized (mLock) {
        mModified.put(key, value);
        return this;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), MethodCall(mModified.put(key, value), [VariableReference(mModified, []), Expression(key, []), Expression(value, [])]), Statement(return this, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  MethodCall(mModified.put(key, value), [VariableReference(mModified, []), Expression(key, []), Expression(value, [])])    VariableReference(mModified, [])    Expression(key, [])    Expression(value, [])  Statement(return this, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mLock) {, []), MethodCall(mModified.put(key, value), [VariableReference(mModified, []), Expression(key, []), Expression(value, [])]), Statement(return this, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mLock) {, [])  MethodCall(mModified.put(key, value), [VariableReference(mModified, []), Expression(key, []), Expression(value, [])])    VariableReference(mModified, [])    Expression(key, [])    Expression(value, [])  Statement(return this, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,,1,4,0,4,0,"The synchronized block has changed from synchronizing on 'this' to synchronizing on 'mLock'. This modification is a statement change, thus the change type is 4.","This change in synchronization does not affect the return value or the exceptions thrown by the method. Thus, there are no potential compatibility issues, so the CI type is 0."
<android.appwidget.AppWidgetHost: int allocateAppWidgetId()>,26,27,,,,"{
    try {
        return sService.allocateAppWidgetId(mContextOpPackageName, mHostId);
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
}","{
    if (sService == null) {
        return -1;
    }
    try {
        return sService.allocateAppWidgetId(mContextOpPackageName, mHostId);
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return sService.allocateAppWidgetId(mContextOpPackageName, mHostId), [VariableReference(return sService, []), Expression(mContextOpPackageName, []), Expression(mHostId, [])]), Statement(} catch (RemoteException e) {, []), Statement(throw new RuntimeException(""system server dead?"", e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return sService.allocateAppWidgetId(mContextOpPackageName, mHostId), [VariableReference(return sService, []), Expression(mContextOpPackageName, []), Expression(mHostId, [])])    VariableReference(return sService, [])    Expression(mContextOpPackageName, [])    Expression(mHostId, [])  Statement(} catch (RemoteException e) {, [])  Statement(throw new RuntimeException(""system server dead?"", e), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (sService, []), Expression(, [])]), Statement(return -1, []), Statement(}, []), Statement(try {, []), MethodCall(return sService.allocateAppWidgetId(mContextOpPackageName, mHostId), [VariableReference(return sService, []), Expression(mContextOpPackageName, []), Expression(mHostId, [])]), Statement(} catch (RemoteException e) {, []), Statement(throw new RuntimeException(""system server dead?"", e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (sService, []), Expression(, [])])    VariableReference(if (sService, [])    Expression(, [])  Statement(return -1, [])  Statement(}, [])  Statement(try {, [])  MethodCall(return sService.allocateAppWidgetId(mContextOpPackageName, mHostId), [VariableReference(return sService, []), Expression(mContextOpPackageName, []), Expression(mHostId, [])])    VariableReference(return sService, [])    Expression(mContextOpPackageName, [])    Expression(mHostId, [])  Statement(} catch (RemoteException e) {, [])  Statement(throw new RuntimeException(""system server dead?"", e), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Get a appWidgetId for a host in the calling process.
 *
 * @return a appWidgetId
 */
","/**
 * Get a appWidgetId for a host in the calling process.
 *
 * @return a appWidgetId
 */
",0,,,0,,,,1,"1,3",1,"1,3",1,"An if statement is introduced in the late version (`if (sService == null) { return -1; }`). This change affects the control flow of the code and introduces a new return statement, so the code change type is 1,3.","The introduction of the new if statement and return statement (`return -1;`) can lead to the method returning a different value than it did in the early version. Thus, the CI type is 1."
<android.webkit.WebView: void shortPressOnTextField()>,4,5,<android.webkit.WebView: void shortPressOnTextField()>,<android.webkit.WebView: void shortPressOnTextField()>,0,"{
    if (inEditingMode()) {
        View v = mTextEntry;
        int x = viewToContent((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContent((v.getTop() + v.getBottom()) >> 1);
        nativeMotionUp(x, y, mNavSlop, true);
    }
}","{
    if (inEditingMode()) {
        View v = mWebTextView;
        int x = viewToContentX((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContentY((v.getTop() + v.getBottom()) >> 1);
        nativeTextInputMotionUp(x, y);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (inEditingMode()) {, []), AssignmentExpression(=, [VariableReference(View v, []), Expression(mTextEntry, [])]), AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContent((v.getLeft() + v.getRight()) >> 1), [])]), AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContent((v.getTop() + v.getBottom()) >> 1), [])]), Statement(nativeMotionUp(x, y, mNavSlop, true), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (inEditingMode()) {, [])  AssignmentExpression(=, [VariableReference(View v, []), Expression(mTextEntry, [])])    VariableReference(View v, [])    Expression(mTextEntry, [])  AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContent((v.getLeft() + v.getRight()) >> 1), [])])    VariableReference(int x, [])    Expression(viewToContent((v.getLeft() + v.getRight()) >> 1), [])  AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContent((v.getTop() + v.getBottom()) >> 1), [])])    VariableReference(int y, [])    Expression(viewToContent((v.getTop() + v.getBottom()) >> 1), [])  Statement(nativeMotionUp(x, y, mNavSlop, true), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (inEditingMode()) {, []), AssignmentExpression(=, [VariableReference(View v, []), Expression(mWebTextView, [])]), AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])]), AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])]), Statement(nativeTextInputMotionUp(x, y), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (inEditingMode()) {, [])  AssignmentExpression(=, [VariableReference(View v, []), Expression(mWebTextView, [])])    VariableReference(View v, [])    Expression(mWebTextView, [])  AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])])    VariableReference(int x, [])    Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])  AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])])    VariableReference(int y, [])    Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])  Statement(nativeTextInputMotionUp(x, y), [])  Statement(}, [])  Statement(}, [])",1,"/*package*/
","/*package*/
",0,,,0,,,0,"1,2","4,5",0,"1,5",1,Several changes occur: ,"3. The function `nativeTextInputMotionUp(x, y)` is called instead of `nativeMotionUp(x, y, mNavSlop, true)`. "
<android.webkit.MimeTypeMap: String getFileExtensionFromUrl(String)>,4,5,<android.webkit.MimeTypeMap: String getFileExtensionFromUrl(String)>,<android.webkit.MimeTypeMap: String getFileExtensionFromUrl(String)>,0,"{
    if (url != null && url.length() > 0) {
        int query = url.lastIndexOf('?');
        if (query > 0) {
            url = url.substring(0, query);
        }
        int filenamePos = url.lastIndexOf('/');
        String filename = 0 <= filenamePos ? url.substring(filenamePos + 1) : url;
        // consider it valid for our matching purposes:
        if (filename.length() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", filename)) {
            int dotPos = filename.lastIndexOf('.');
            if (0 <= dotPos) {
                return filename.substring(dotPos + 1);
            }
        }
    }
    return """";
}","{
    if (url != null && url.length() > 0) {
        int query = url.lastIndexOf('?');
        if (query > 0) {
            url = url.substring(0, query);
        }
        int filenamePos = url.lastIndexOf('/');
        String filename = 0 <= filenamePos ? url.substring(filenamePos + 1) : url;
        // consider it valid for our matching purposes:
        if (filename.length() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", filename)) {
            int dotPos = filename.lastIndexOf('.');
            if (0 <= dotPos) {
                return filename.substring(dotPos + 1);
            }
        }
    }
    return """";
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (url !, []), Expression(null && url.length() > 0) {, [])]), AssignmentExpression(=, [VariableReference(int query, []), Expression(url.lastIndexOf('?'), [])]), Statement(if (query > 0) {, []), AssignmentExpression(=, [VariableReference(url, []), Expression(url.substring(0, query), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(int filenamePos, []), Expression(url.lastIndexOf('/'), [])]), AssignmentExpression(=, [VariableReference(String filename, []), Expression(0 <, [])]), Statement(// consider it valid for our matching purposes:, []), MethodCall(if (filename.length() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", filename)), [VariableReference(if (filename, []), Expression() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", []), Expression(filename), [])]), AssignmentExpression(=, [VariableReference(int dotPos, []), Expression(filename.lastIndexOf('.'), [])]), AssignmentExpression(=, [VariableReference(if (0 <, []), Expression(dotPos) {, [])]), MethodCall(return filename.substring(dotPos + 1), [VariableReference(return filename, []), Expression(dotPos + 1, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return """", []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (url !, []), Expression(null && url.length() > 0) {, [])])    VariableReference(if (url !, [])    Expression(null && url.length() > 0) {, [])  AssignmentExpression(=, [VariableReference(int query, []), Expression(url.lastIndexOf('?'), [])])    VariableReference(int query, [])    Expression(url.lastIndexOf('?'), [])  Statement(if (query > 0) {, [])  AssignmentExpression(=, [VariableReference(url, []), Expression(url.substring(0, query), [])])    VariableReference(url, [])    Expression(url.substring(0, query), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int filenamePos, []), Expression(url.lastIndexOf('/'), [])])    VariableReference(int filenamePos, [])    Expression(url.lastIndexOf('/'), [])  AssignmentExpression(=, [VariableReference(String filename, []), Expression(0 <, [])])    VariableReference(String filename, [])    Expression(0 <, [])  Statement(// consider it valid for our matching purposes:, [])  MethodCall(if (filename.length() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", filename)), [VariableReference(if (filename, []), Expression() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", []), Expression(filename), [])])    VariableReference(if (filename, [])    Expression() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", [])    Expression(filename), [])  AssignmentExpression(=, [VariableReference(int dotPos, []), Expression(filename.lastIndexOf('.'), [])])    VariableReference(int dotPos, [])    Expression(filename.lastIndexOf('.'), [])  AssignmentExpression(=, [VariableReference(if (0 <, []), Expression(dotPos) {, [])])    VariableReference(if (0 <, [])    Expression(dotPos) {, [])  MethodCall(return filename.substring(dotPos + 1), [VariableReference(return filename, []), Expression(dotPos + 1, [])])    VariableReference(return filename, [])    Expression(dotPos + 1, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return """", [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (url !, []), Expression(null && url.length() > 0) {, [])]), AssignmentExpression(=, [VariableReference(int query, []), Expression(url.lastIndexOf('?'), [])]), Statement(if (query > 0) {, []), AssignmentExpression(=, [VariableReference(url, []), Expression(url.substring(0, query), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(int filenamePos, []), Expression(url.lastIndexOf('/'), [])]), AssignmentExpression(=, [VariableReference(String filename, []), Expression(0 <, [])]), Statement(// consider it valid for our matching purposes:, []), MethodCall(if (filename.length() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", filename)), [VariableReference(if (filename, []), Expression() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", []), Expression(filename), [])]), AssignmentExpression(=, [VariableReference(int dotPos, []), Expression(filename.lastIndexOf('.'), [])]), AssignmentExpression(=, [VariableReference(if (0 <, []), Expression(dotPos) {, [])]), MethodCall(return filename.substring(dotPos + 1), [VariableReference(return filename, []), Expression(dotPos + 1, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(return """", []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (url !, []), Expression(null && url.length() > 0) {, [])])    VariableReference(if (url !, [])    Expression(null && url.length() > 0) {, [])  AssignmentExpression(=, [VariableReference(int query, []), Expression(url.lastIndexOf('?'), [])])    VariableReference(int query, [])    Expression(url.lastIndexOf('?'), [])  Statement(if (query > 0) {, [])  AssignmentExpression(=, [VariableReference(url, []), Expression(url.substring(0, query), [])])    VariableReference(url, [])    Expression(url.substring(0, query), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int filenamePos, []), Expression(url.lastIndexOf('/'), [])])    VariableReference(int filenamePos, [])    Expression(url.lastIndexOf('/'), [])  AssignmentExpression(=, [VariableReference(String filename, []), Expression(0 <, [])])    VariableReference(String filename, [])    Expression(0 <, [])  Statement(// consider it valid for our matching purposes:, [])  MethodCall(if (filename.length() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", filename)), [VariableReference(if (filename, []), Expression() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", []), Expression(filename), [])])    VariableReference(if (filename, [])    Expression() > 0 && Pattern.matches(""[a-zA-Z_0-9\\.\\-\\(\\)]+"", [])    Expression(filename), [])  AssignmentExpression(=, [VariableReference(int dotPos, []), Expression(filename.lastIndexOf('.'), [])])    VariableReference(int dotPos, [])    Expression(filename.lastIndexOf('.'), [])  AssignmentExpression(=, [VariableReference(if (0 <, []), Expression(dotPos) {, [])])    VariableReference(if (0 <, [])    Expression(dotPos) {, [])  MethodCall(return filename.substring(dotPos + 1), [VariableReference(return filename, []), Expression(dotPos + 1, [])])    VariableReference(return filename, [])    Expression(dotPos + 1, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(return """", [])  Statement(}, [])",0,"/**
 * Returns the file extension or an empty string iff there is no
 * extension.
 */
","/**
 * Returns the file extension or an empty string iff there is no
 * extension. This method is a convenience method for obtaining the
 * extension of a url and has undefined results for other Strings.
 * @param url
 * @return The file extension of the given url.
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early and late implementations. Both versions of the method have the same logic and structure.,"Since there are no changes in the code, there is no potential for any compatibility issues."
<android.content.SyncManager.SyncQueue: void removeByKey(String)>,5,6,<android.content.SyncManager.SyncQueue: void removeByKey(String)>,<android.content.SyncManager.SyncQueue: void removeByKey(String)>,0, ,"{
    if (DEBUG_CHECK_DATA_CONSISTENCY)
        debugCheckDataStructures(true);
    SyncOperation operationToRemove = mOpsByKey.remove(operationKey);
    if (!mOpsByWhen.remove(operationToRemove)) {
        throw new IllegalStateException(""unable to find "" + operationToRemove + "" in mOpsByWhen"");
    }
    if (!mSyncStorageEngine.deleteFromPending(operationToRemove.pendingOperation)) {
        final String errorMessage = ""unable to find pending row for "" + operationToRemove;
        Log.e(TAG, errorMessage, new IllegalStateException(errorMessage));
    }
    if (DEBUG_CHECK_DATA_CONSISTENCY)
        debugCheckDataStructures(true);
}",1,"MethodDeclaration(method_body, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG_CHECK_DATA_CONSISTENCY), []), Statement(debugCheckDataStructures(true), []), AssignmentExpression(=, [VariableReference(SyncOperation operationToRemove, []), Expression(mOpsByKey.remove(operationKey), [])]), MethodCall(if (!mOpsByWhen.remove(operationToRemove)), [VariableReference(if (!mOpsByWhen, []), Expression(operationToRemove), [])]), Statement(throw new IllegalStateException(""unable to find "" + operationToRemove + "" in mOpsByWhen""), []), Statement(}, []), MethodCall(if (!mSyncStorageEngine.deleteFromPending(operationToRemove.pendingOperation)), [VariableReference(if (!mSyncStorageEngine, []), Expression(operationToRemove.pendingOperation), [])]), AssignmentExpression(=, [VariableReference(final String errorMessage, []), Expression(""unable to find pending row for "" + operationToRemove, [])]), MethodCall(Log.e(TAG, errorMessage, new IllegalStateException(errorMessage)), [VariableReference(Log, []), Expression(TAG, []), Expression(errorMessage, []), Expression(new IllegalStateException(errorMessage), [])]), Statement(}, []), Statement(if (DEBUG_CHECK_DATA_CONSISTENCY), []), Statement(debugCheckDataStructures(true), []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG_CHECK_DATA_CONSISTENCY), [])  Statement(debugCheckDataStructures(true), [])  AssignmentExpression(=, [VariableReference(SyncOperation operationToRemove, []), Expression(mOpsByKey.remove(operationKey), [])])    VariableReference(SyncOperation operationToRemove, [])    Expression(mOpsByKey.remove(operationKey), [])  MethodCall(if (!mOpsByWhen.remove(operationToRemove)), [VariableReference(if (!mOpsByWhen, []), Expression(operationToRemove), [])])    VariableReference(if (!mOpsByWhen, [])    Expression(operationToRemove), [])  Statement(throw new IllegalStateException(""unable to find "" + operationToRemove + "" in mOpsByWhen""), [])  Statement(}, [])  MethodCall(if (!mSyncStorageEngine.deleteFromPending(operationToRemove.pendingOperation)), [VariableReference(if (!mSyncStorageEngine, []), Expression(operationToRemove.pendingOperation), [])])    VariableReference(if (!mSyncStorageEngine, [])    Expression(operationToRemove.pendingOperation), [])  AssignmentExpression(=, [VariableReference(final String errorMessage, []), Expression(""unable to find pending row for "" + operationToRemove, [])])    VariableReference(final String errorMessage, [])    Expression(""unable to find pending row for "" + operationToRemove, [])  MethodCall(Log.e(TAG, errorMessage, new IllegalStateException(errorMessage)), [VariableReference(Log, []), Expression(TAG, []), Expression(errorMessage, []), Expression(new IllegalStateException(errorMessage), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(errorMessage, [])    Expression(new IllegalStateException(errorMessage), [])  Statement(}, [])  Statement(if (DEBUG_CHECK_DATA_CONSISTENCY), [])  Statement(debugCheckDataStructures(true), [])  Statement(}, [])",1,,,0,,,0,,,0,"1,2","3,4",2,"2,3,4",2,"The new implementation introduced control statements (`if`), exception handling (`throw new IllegalStateException`), and additional operations (`debugCheckDataStructures`, `mOpsByKey.remove`, `mOpsByWhen.remove`, `mSyncStorageEngine.deleteFromPending`). Therefore, the code change types are 2,3, and 4.","The new implementation potentially throws an `IllegalStateException` which could lead to different exception handling compared to the previous version where no exceptions were thrown. Thus, the CI type is 2."
"<android.provider.ContactsContract.QuickContact: void showQuickContact(Context,View,Uri,int,String[])>",5,6,"<android.provider.ContactsContract.QuickContact: void showQuickContact(Context,View,Uri,int,String[])>","<android.provider.ContactsContract.QuickContact: void showQuickContact(Context,View,Uri,int,String[])>",0,"{
    // Find location and bounds of target view
    final int[] location = new int[2];
    target.getLocationOnScreen(location);
    final Rect rect = new Rect();
    rect.left = location[0];
    rect.top = location[1];
    rect.right = rect.left + target.getWidth();
    rect.bottom = rect.top + target.getHeight();
    // Trigger with obtained rectangle
    showQuickContact(context, rect, lookupUri, mode, excludeMimes);
}","{
    // Find location and bounds of target view
    final int[] location = new int[2];
    target.getLocationOnScreen(location);
    final Rect rect = new Rect();
    rect.left = location[0];
    rect.top = location[1];
    rect.right = rect.left + target.getWidth();
    rect.bottom = rect.top + target.getHeight();
    // Trigger with obtained rectangle
    showQuickContact(context, rect, lookupUri, mode, excludeMimes);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(// Find location and bounds of target view, []), AssignmentExpression(=, [VariableReference(final int[] location, []), Expression(new int[2], [])]), MethodCall(target.getLocationOnScreen(location), [VariableReference(target, []), Expression(location, [])]), AssignmentExpression(=, [VariableReference(final Rect rect, []), Expression(new Rect(), [])]), AssignmentExpression(=, [VariableReference(rect.left, []), Expression(location[0], [])]), AssignmentExpression(=, [VariableReference(rect.top, []), Expression(location[1], [])]), AssignmentExpression(=, [VariableReference(rect.right, []), Expression(rect.left + target.getWidth(), [])]), AssignmentExpression(=, [VariableReference(rect.bottom, []), Expression(rect.top + target.getHeight(), [])]), Statement(// Trigger with obtained rectangle, []), Statement(showQuickContact(context, rect, lookupUri, mode, excludeMimes), []), Statement(}, [])])  Statement({, [])  Statement(// Find location and bounds of target view, [])  AssignmentExpression(=, [VariableReference(final int[] location, []), Expression(new int[2], [])])    VariableReference(final int[] location, [])    Expression(new int[2], [])  MethodCall(target.getLocationOnScreen(location), [VariableReference(target, []), Expression(location, [])])    VariableReference(target, [])    Expression(location, [])  AssignmentExpression(=, [VariableReference(final Rect rect, []), Expression(new Rect(), [])])    VariableReference(final Rect rect, [])    Expression(new Rect(), [])  AssignmentExpression(=, [VariableReference(rect.left, []), Expression(location[0], [])])    VariableReference(rect.left, [])    Expression(location[0], [])  AssignmentExpression(=, [VariableReference(rect.top, []), Expression(location[1], [])])    VariableReference(rect.top, [])    Expression(location[1], [])  AssignmentExpression(=, [VariableReference(rect.right, []), Expression(rect.left + target.getWidth(), [])])    VariableReference(rect.right, [])    Expression(rect.left + target.getWidth(), [])  AssignmentExpression(=, [VariableReference(rect.bottom, []), Expression(rect.top + target.getHeight(), [])])    VariableReference(rect.bottom, [])    Expression(rect.top + target.getHeight(), [])  Statement(// Trigger with obtained rectangle, [])  Statement(showQuickContact(context, rect, lookupUri, mode, excludeMimes), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// Find location and bounds of target view, []), AssignmentExpression(=, [VariableReference(final int[] location, []), Expression(new int[2], [])]), MethodCall(target.getLocationOnScreen(location), [VariableReference(target, []), Expression(location, [])]), AssignmentExpression(=, [VariableReference(final Rect rect, []), Expression(new Rect(), [])]), AssignmentExpression(=, [VariableReference(rect.left, []), Expression(location[0], [])]), AssignmentExpression(=, [VariableReference(rect.top, []), Expression(location[1], [])]), AssignmentExpression(=, [VariableReference(rect.right, []), Expression(rect.left + target.getWidth(), [])]), AssignmentExpression(=, [VariableReference(rect.bottom, []), Expression(rect.top + target.getHeight(), [])]), Statement(// Trigger with obtained rectangle, []), Statement(showQuickContact(context, rect, lookupUri, mode, excludeMimes), []), Statement(}, [])])  Statement({, [])  Statement(// Find location and bounds of target view, [])  AssignmentExpression(=, [VariableReference(final int[] location, []), Expression(new int[2], [])])    VariableReference(final int[] location, [])    Expression(new int[2], [])  MethodCall(target.getLocationOnScreen(location), [VariableReference(target, []), Expression(location, [])])    VariableReference(target, [])    Expression(location, [])  AssignmentExpression(=, [VariableReference(final Rect rect, []), Expression(new Rect(), [])])    VariableReference(final Rect rect, [])    Expression(new Rect(), [])  AssignmentExpression(=, [VariableReference(rect.left, []), Expression(location[0], [])])    VariableReference(rect.left, [])    Expression(location[0], [])  AssignmentExpression(=, [VariableReference(rect.top, []), Expression(location[1], [])])    VariableReference(rect.top, [])    Expression(location[1], [])  AssignmentExpression(=, [VariableReference(rect.right, []), Expression(rect.left + target.getWidth(), [])])    VariableReference(rect.right, [])    Expression(rect.left + target.getWidth(), [])  AssignmentExpression(=, [VariableReference(rect.bottom, []), Expression(rect.top + target.getHeight(), [])])    VariableReference(rect.bottom, [])    Expression(rect.top + target.getHeight(), [])  Statement(// Trigger with obtained rectangle, [])  Statement(showQuickContact(context, rect, lookupUri, mode, excludeMimes), [])  Statement(}, [])",0,"/**
 * Trigger a dialog that lists the various methods of interacting with
 * the requested {@link Contacts} entry. This may be based on available
 * {@link Data} rows under that contact, and may also include social
 * status and presence details.
 *
 * @param context The parent {@link Context} that may be used as the
 * parent for this dialog.
 * @param target Specific {@link View} from your layout that this dialog
 * should be centered around. In particular, if the dialog
 * has a ""callout"" arrow, it will be pointed and centered
 * around this {@link View}.
 * @param lookupUri A {@link ContactsContract.Contacts#CONTENT_LOOKUP_URI} style
 * {@link Uri} that describes a specific contact to feature
 * in this dialog.
 * @param mode Any of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or
 * {@link #MODE_LARGE}, indicating the desired dialog size,
 * when supported.
 * @param excludeMimes Optional list of {@link Data#MIMETYPE} MIME-types
 * to exclude when showing this dialog. For example, when
 * already viewing the contact details card, this can be used
 * to omit the details entry from the dialog.
 */
","/**
 * Trigger a dialog that lists the various methods of interacting with
 * the requested {@link Contacts} entry. This may be based on available
 * {@link ContactsContract.Data} rows under that contact, and may also
 * include social status and presence details.
 *
 * @param context The parent {@link Context} that may be used as the
 * parent for this dialog.
 * @param target Specific {@link View} from your layout that this dialog
 * should be centered around. In particular, if the dialog
 * has a ""callout"" arrow, it will be pointed and centered
 * around this {@link View}.
 * @param lookupUri A {@link ContactsContract.Contacts#CONTENT_LOOKUP_URI} style
 * {@link Uri} that describes a specific contact to feature
 * in this dialog.
 * @param mode Any of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or
 * {@link #MODE_LARGE}, indicating the desired dialog size,
 * when supported.
 * @param excludeMimes Optional list of {@link Data#MIMETYPE} MIME-types
 * to exclude when showing this dialog. For example, when
 * already viewing the contact details card, this can be used
 * to omit the details entry from the dialog.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the code between the early and late versions.,"Since there is no change in the code, there is no potential Compatibility Issue."
<android.webkit.WebView: void shortPressOnTextField()>,6,7,<android.webkit.WebView: void shortPressOnTextField()>,<android.webkit.WebView: void shortPressOnTextField()>,0,"{
    if (inEditingMode()) {
        View v = mWebTextView;
        int x = viewToContentX((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContentY((v.getTop() + v.getBottom()) >> 1);
        nativeTextInputMotionUp(x, y);
    }
}","{
    if (inEditingMode()) {
        View v = mWebTextView;
        int x = viewToContentX((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContentY((v.getTop() + v.getBottom()) >> 1);
        displaySoftKeyboard(true);
        nativeTextInputMotionUp(x, y);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (inEditingMode()) {, []), AssignmentExpression(=, [VariableReference(View v, []), Expression(mWebTextView, [])]), AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])]), AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])]), Statement(nativeTextInputMotionUp(x, y), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (inEditingMode()) {, [])  AssignmentExpression(=, [VariableReference(View v, []), Expression(mWebTextView, [])])    VariableReference(View v, [])    Expression(mWebTextView, [])  AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])])    VariableReference(int x, [])    Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])  AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])])    VariableReference(int y, [])    Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])  Statement(nativeTextInputMotionUp(x, y), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (inEditingMode()) {, []), AssignmentExpression(=, [VariableReference(View v, []), Expression(mWebTextView, [])]), AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])]), AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])]), Statement(displaySoftKeyboard(true), []), Statement(nativeTextInputMotionUp(x, y), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (inEditingMode()) {, [])  AssignmentExpression(=, [VariableReference(View v, []), Expression(mWebTextView, [])])    VariableReference(View v, [])    Expression(mWebTextView, [])  AssignmentExpression(=, [VariableReference(int x, []), Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])])    VariableReference(int x, [])    Expression(viewToContentX((v.getLeft() + v.getRight()) >> 1), [])  AssignmentExpression(=, [VariableReference(int y, []), Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])])    VariableReference(int y, [])    Expression(viewToContentY((v.getTop() + v.getBottom()) >> 1), [])  Statement(displaySoftKeyboard(true), [])  Statement(nativeTextInputMotionUp(x, y), [])  Statement(}, [])  Statement(}, [])",1,"/*package*/
","/*package*/
",0,,,0,,,0,2,4,0,4,0,"A new statement `displaySoftKeyboard(true)` has been added after calculating the `x` and `y` values and before calling `nativeTextInputMotionUp(x, y)`. This statement does not affect the method's return value or exception handling but does introduce an additional action. Therefore, the change type is 4.","The added statement does not alter the return values or exception handling of the API. It only adds a new action (displaying the soft keyboard), which falls under other statement changes. Thus, there is no compatibility issue. The CI type is 0."
<android.hardware.Camera.Parameters: List<Integer> getSupportedPictureFormats()>,6,7,<android.hardware.Camera.Parameters: List<Integer> getSupportedPictureFormats()>,<android.hardware.Camera.Parameters: List<Integer> getSupportedPictureFormats()>,0,"{
    String str = get(KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX);
    return splitInt(str);
}","{
    String str = get(KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX);
    ArrayList<Integer> formats = new ArrayList<Integer>();
    for (String s : split(str)) {
        int f = pixelFormatForCameraFormat(s);
        if (f == PixelFormat.UNKNOWN)
            continue;
        formats.add(f);
    }
    return formats;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String str, []), Expression(get(KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX), [])]), Statement(return splitInt(str), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String str, []), Expression(get(KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX), [])])    VariableReference(String str, [])    Expression(get(KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX), [])  Statement(return splitInt(str), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String str, []), Expression(get(KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX), [])]), AssignmentExpression(=, [VariableReference(ArrayList<Integer> formats, []), Expression(new ArrayList<Integer>(), [])]), Statement(for (String s : split(str)) {, []), AssignmentExpression(=, [VariableReference(int f, []), Expression(pixelFormatForCameraFormat(s), [])]), AssignmentExpression(=, [VariableReference(if (f, []), Expression(, [])]), Statement(continue, []), MethodCall(formats.add(f), [VariableReference(formats, []), Expression(f, [])]), Statement(}, []), Statement(return formats, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String str, []), Expression(get(KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX), [])])    VariableReference(String str, [])    Expression(get(KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX), [])  AssignmentExpression(=, [VariableReference(ArrayList<Integer> formats, []), Expression(new ArrayList<Integer>(), [])])    VariableReference(ArrayList<Integer> formats, [])    Expression(new ArrayList<Integer>(), [])  Statement(for (String s : split(str)) {, [])  AssignmentExpression(=, [VariableReference(int f, []), Expression(pixelFormatForCameraFormat(s), [])])    VariableReference(int f, [])    Expression(pixelFormatForCameraFormat(s), [])  AssignmentExpression(=, [VariableReference(if (f, []), Expression(, [])])    VariableReference(if (f, [])    Expression(, [])  Statement(continue, [])  MethodCall(formats.add(f), [VariableReference(formats, []), Expression(f, [])])    VariableReference(formats, [])    Expression(f, [])  Statement(}, [])  Statement(return formats, [])  Statement(}, [])",1,"/**
 * Gets the supported picture formats.
 *
 * @return a List of Integer objects (values are PixelFormat.XXX). null
 * if picture setting is not supported.
 */
","/**
 * Gets the supported picture formats.
 *
 * @return a List of Integer objects (values are PixelFormat.XXX). This
 * method will always return a list with at least one element.
 */
",1,,,0,,,0,"1,2","1,3,4",1,"1,3,4",1,"The return statement has changed from `return splitInt(str)` to `return formats`, and the return value is processed differently. There's a new for loop and condition checks in the late version which are not present in the early version, leading to changes in control dependency and other statements. Therefore, the change includes types 1, 3, and 4.","The changed return statement and the different processing logic indicate that the method might return different values, leading to potential different behaviors. Therefore, the CI type is 1."
<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,7,8,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,0,"{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
    }
}","{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ENDED:
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
        case TIMEUPDATE:
            {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// This executes on the UI thread., []), Statement(case PLAY:, []), Statement({, []), AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])]), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case SEEK:, []), Statement({, []), AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])]), AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])]), MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case PAUSE:, []), Statement({, []), MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case ERROR:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case LOAD_DEFAULT_POSTER:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// This executes on the UI thread., [])  Statement(case PLAY:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])])    VariableReference(String url, [])    Expression((String) msg.obj, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])])    VariableReference(VideoPlayer, [])    Expression(url, [])    Expression(mSeekPosition, [])    Expression(this, [])    Expression(client, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case SEEK:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])])    VariableReference(Integer time, [])    Expression((Integer) msg.obj, [])  AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])])    VariableReference(mSeekPosition, [])    Expression(time, [])  MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(mSeekPosition, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case PAUSE:, [])  Statement({, [])  MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case ERROR:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])])    VariableReference(client, [])    Expression(, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case LOAD_DEFAULT_POSTER:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])])    VariableReference(doSetPoster(client, [])    Expression(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// This executes on the UI thread., []), Statement(case PLAY:, []), Statement({, []), AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])]), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case SEEK:, []), Statement({, []), AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])]), AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])]), MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case PAUSE:, []), Statement({, []), MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case ENDED:, []), Statement(case ERROR:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case LOAD_DEFAULT_POSTER:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case TIMEUPDATE:, []), Statement({, []), MethodCall(if (VideoPlayer.isPlaying(this)), [VariableReference(if (VideoPlayer, []), Expression(this), [])]), Statement(sendTimeupdate(), []), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// This executes on the UI thread., [])  Statement(case PLAY:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])])    VariableReference(String url, [])    Expression((String) msg.obj, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])])    VariableReference(VideoPlayer, [])    Expression(url, [])    Expression(mSeekPosition, [])    Expression(this, [])    Expression(client, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case SEEK:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])])    VariableReference(Integer time, [])    Expression((Integer) msg.obj, [])  AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])])    VariableReference(mSeekPosition, [])    Expression(time, [])  MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(mSeekPosition, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case PAUSE:, [])  Statement({, [])  MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case ENDED:, [])  Statement(case ERROR:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])])    VariableReference(client, [])    Expression(, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case LOAD_DEFAULT_POSTER:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])])    VariableReference(doSetPoster(client, [])    Expression(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case TIMEUPDATE:, [])  Statement({, [])  MethodCall(if (VideoPlayer.isPlaying(this)), [VariableReference(if (VideoPlayer, []), Expression(this), [])])    VariableReference(if (VideoPlayer, [])    Expression(this), [])  Statement(sendTimeupdate(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"// Handler for the messages from WebCore thread to the UI thread.
","// Handler for the messages from WebCore or Timer thread to the UI thread.
",1,[@Override],[@Override],0,,,0,"1,2",3,0,"3,4",0,"The late version introduces new cases ""ENDED"" and ""TIMEUPDATE"" to the `switch(msg.what)` control structure, which changes the control flow of the method. Besides, the statements under those control statements are also modified. Therefore, the change types are 3,4.","Although the additional `switch` cases and their statements introduce new behaviors, they do not change the existing behaviors related to return values or exceptions for other cases. Hence, the CI type is 0."
<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,8,9,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,0,"{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ENDED:
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
        case TIMEUPDATE:
            {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
    }
}","{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ENDED:
            if (msg.arg1 == 1)
                VideoPlayer.isVideoSelfEnded = true;
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
        case TIMEUPDATE:
            {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// This executes on the UI thread., []), Statement(case PLAY:, []), Statement({, []), AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])]), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case SEEK:, []), Statement({, []), AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])]), AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])]), MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case PAUSE:, []), Statement({, []), MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case ENDED:, []), Statement(case ERROR:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case LOAD_DEFAULT_POSTER:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case TIMEUPDATE:, []), Statement({, []), MethodCall(if (VideoPlayer.isPlaying(this)), [VariableReference(if (VideoPlayer, []), Expression(this), [])]), Statement(sendTimeupdate(), []), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// This executes on the UI thread., [])  Statement(case PLAY:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])])    VariableReference(String url, [])    Expression((String) msg.obj, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])])    VariableReference(VideoPlayer, [])    Expression(url, [])    Expression(mSeekPosition, [])    Expression(this, [])    Expression(client, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case SEEK:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])])    VariableReference(Integer time, [])    Expression((Integer) msg.obj, [])  AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])])    VariableReference(mSeekPosition, [])    Expression(time, [])  MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(mSeekPosition, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case PAUSE:, [])  Statement({, [])  MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case ENDED:, [])  Statement(case ERROR:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])])    VariableReference(client, [])    Expression(, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case LOAD_DEFAULT_POSTER:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])])    VariableReference(doSetPoster(client, [])    Expression(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case TIMEUPDATE:, [])  Statement({, [])  MethodCall(if (VideoPlayer.isPlaying(this)), [VariableReference(if (VideoPlayer, []), Expression(this), [])])    VariableReference(if (VideoPlayer, [])    Expression(this), [])  Statement(sendTimeupdate(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// This executes on the UI thread., []), Statement(case PLAY:, []), Statement({, []), AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])]), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case SEEK:, []), Statement({, []), AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])]), AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])]), MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case PAUSE:, []), Statement({, []), MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])]), Statement(break, []), Statement(}, []), Statement(case ENDED:, []), AssignmentExpression(=, [VariableReference(if (msg.arg1, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(VideoPlayer.isVideoSelfEnded, []), Expression(true, [])]), Statement(case ERROR:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case LOAD_DEFAULT_POSTER:, []), Statement({, []), AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])]), AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])]), MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])]), Statement(}, []), Statement(break, []), Statement(}, []), Statement(case TIMEUPDATE:, []), Statement({, []), MethodCall(if (VideoPlayer.isPlaying(this)), [VariableReference(if (VideoPlayer, []), Expression(this), [])]), Statement(sendTimeupdate(), []), Statement(}, []), Statement(break, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// This executes on the UI thread., [])  Statement(case PLAY:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(String url, []), Expression((String) msg.obj, [])])    VariableReference(String url, [])    Expression((String) msg.obj, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(VideoPlayer.play(url, mSeekPosition, this, client), [VariableReference(VideoPlayer, []), Expression(url, []), Expression(mSeekPosition, []), Expression(this, []), Expression(client, [])])    VariableReference(VideoPlayer, [])    Expression(url, [])    Expression(mSeekPosition, [])    Expression(this, [])    Expression(client, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case SEEK:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(Integer time, []), Expression((Integer) msg.obj, [])])    VariableReference(Integer time, [])    Expression((Integer) msg.obj, [])  AssignmentExpression(=, [VariableReference(mSeekPosition, []), Expression(time, [])])    VariableReference(mSeekPosition, [])    Expression(time, [])  MethodCall(VideoPlayer.seek(mSeekPosition, this), [VariableReference(VideoPlayer, []), Expression(mSeekPosition, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(mSeekPosition, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case PAUSE:, [])  Statement({, [])  MethodCall(VideoPlayer.pause(this), [VariableReference(VideoPlayer, []), Expression(this, [])])    VariableReference(VideoPlayer, [])    Expression(this, [])  Statement(break, [])  Statement(}, [])  Statement(case ENDED:, [])  AssignmentExpression(=, [VariableReference(if (msg.arg1, []), Expression(, [])])    VariableReference(if (msg.arg1, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(VideoPlayer.isVideoSelfEnded, []), Expression(true, [])])    VariableReference(VideoPlayer.isVideoSelfEnded, [])    Expression(true, [])  Statement(case ERROR:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(client.onHideCustomView(), [VariableReference(client, []), Expression(, [])])    VariableReference(client, [])    Expression(, [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case LOAD_DEFAULT_POSTER:, [])  Statement({, [])  AssignmentExpression(=, [VariableReference(WebChromeClient client, []), Expression(mWebView.getWebChromeClient(), [])])    VariableReference(WebChromeClient client, [])    Expression(mWebView.getWebChromeClient(), [])  AssignmentExpression(=, [VariableReference(if (client !, []), Expression(null) {, [])])    VariableReference(if (client !, [])    Expression(null) {, [])  MethodCall(doSetPoster(client.getDefaultVideoPoster()), [VariableReference(doSetPoster(client, []), Expression(), [])])    VariableReference(doSetPoster(client, [])    Expression(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(case TIMEUPDATE:, [])  Statement({, [])  MethodCall(if (VideoPlayer.isPlaying(this)), [VariableReference(if (VideoPlayer, []), Expression(this), [])])    VariableReference(if (VideoPlayer, [])    Expression(this), [])  Statement(sendTimeupdate(), [])  Statement(}, [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"// Handler for the messages from WebCore or Timer thread to the UI thread.
","// Handler for the messages from WebCore or Timer thread to the UI thread.
",0,[@Override],[@Override],0,,,0,1,"3,4",0,3,1,"A new condition has been added to the `ENDED` case in the switch statement: `if (msg.arg1 == 1) VideoPlayer.isVideoSelfEnded = true;`. This changes the control flow, so the change type is 3.","The newly added condition and assignment in the `ENDED` case (`if (msg.arg1 == 1) VideoPlayer.isVideoSelfEnded = true;`) can lead to different behavior, such as updating a static variable `isVideoSelfEnded`, which can affect other parts of the code that rely on this state. This can potentially produce different return values or states in dependent APIs. Therefore, the CI type is 1."
"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",8,9,"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>","<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",0,"{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}","{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numValues, []), Statement(i++) {, []), Statement(insert(uri, values[i]), []), Statement(}, []), Statement(return numValues, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])])    VariableReference(int numValues, [])    Expression(values.length, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numValues, [])  Statement(i++) {, [])  Statement(insert(uri, values[i]), [])  Statement(}, [])  Statement(return numValues, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numValues, []), Statement(i++) {, []), Statement(insert(uri, values[i]), []), Statement(}, []), Statement(return numValues, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])])    VariableReference(int numValues, [])    Expression(values.length, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numValues, [])  Statement(i++) {, [])  Statement(insert(uri, values[i]), [])  Statement(}, [])  Statement(return numValues, [])  Statement(}, [])",0,"/**
 * Implement this to insert a set of new rows, or the default implementation will
 * iterate over the values and call {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple
 * threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals:
 * Processes and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * @return The number of values that were inserted.
 */
","/**
 * Override this to handle requests to insert a set of new rows, or the
 * default implementation will iterate over the values and call
 * {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals:
 * Processes and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * @return The number of values that were inserted.
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early version and the late version of the implementation.,"Since there are no changes, there is no potential for a compatibility issue."
<android.widget.ProgressBar: boolean isIndeterminate()>,8,9,<android.widget.ProgressBar: boolean isIndeterminate()>,<android.widget.ProgressBar: boolean isIndeterminate()>,0,"{
    return mIndeterminate;
}","{
    return mIndeterminate;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mIndeterminate, []), Statement(}, [])])  Statement({, [])  Statement(return mIndeterminate, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mIndeterminate, []), Statement(}, [])])  Statement({, [])  Statement(return mIndeterminate, [])  Statement(}, [])",0,"/**
 * <p>Indicate whether this progress bar is in indeterminate mode.</p>
 *
 * @return true if the progress bar is in indeterminate mode
 */
","/**
 * <p>Indicate whether this progress bar is in indeterminate mode.</p>
 *
 * @return true if the progress bar is in indeterminate mode
 */
",0,[@ViewDebug.ExportedProperty],[@ViewDebug.ExportedProperty(category = "progress")],1,,,0,0,0,0,0,0,"There is no actual code implementation change in the two versions; the only difference is in the annotation metadata, where `category = ""progress""` has been added. Therefore, the code change type is 0.","Since there is no change in the actual code implementation, no Compatibility Issue could arise, and the CI type is 0."
<android.app.Activity: void performStop()>,9,10,<android.app.Activity: void performStop()>,<android.app.Activity: void performStop()>,0,"{
    if (!mStopped) {
        if (mWindow != null) {
            mWindow.closeAllPanels();
        }
        mCalled = false;
        mInstrumentation.callActivityOnStop(this);
        if (!mCalled) {
            throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()"");
        }
        synchronized (mManagedCursors) {
            final int N = mManagedCursors.size();
            for (int i = 0; i < N; i++) {
                ManagedCursor mc = mManagedCursors.get(i);
                if (!mc.mReleased) {
                    mc.mCursor.deactivate();
                    mc.mReleased = true;
                }
            }
        }
        mStopped = true;
    }
    mResumed = false;
}","{
    if (!mStopped) {
        if (mWindow != null) {
            mWindow.closeAllPanels();
        }
        mCalled = false;
        mInstrumentation.callActivityOnStop(this);
        if (!mCalled) {
            throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()"");
        }
        synchronized (mManagedCursors) {
            final int N = mManagedCursors.size();
            for (int i = 0; i < N; i++) {
                ManagedCursor mc = mManagedCursors.get(i);
                if (!mc.mReleased) {
                    mc.mCursor.deactivate();
                    mc.mReleased = true;
                }
            }
        }
        mStopped = true;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!mStopped) {, []), AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])]), MethodCall(mWindow.closeAllPanels(), [VariableReference(mWindow, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mCalled, []), Expression(false, [])]), MethodCall(mInstrumentation.callActivityOnStop(this), [VariableReference(mInstrumentation, []), Expression(this, [])]), Statement(if (!mCalled) {, []), MethodCall(throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()""), [VariableReference(throw new SuperNotCalledException(""Activity "" + mComponent, []), Expression() + "" did not call through to super.onStop()"", [])]), Statement(}, []), Statement(synchronized (mManagedCursors) {, []), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mManagedCursors.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(ManagedCursor mc, []), Expression(mManagedCursors.get(i), [])]), AssignmentExpression(=, [VariableReference(mc.mReleased, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mStopped, []), Expression(true, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mResumed, []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  Statement(if (!mStopped) {, [])  AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])])    VariableReference(if (mWindow !, [])    Expression(null) {, [])  MethodCall(mWindow.closeAllPanels(), [VariableReference(mWindow, []), Expression(, [])])    VariableReference(mWindow, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mCalled, []), Expression(false, [])])    VariableReference(mCalled, [])    Expression(false, [])  MethodCall(mInstrumentation.callActivityOnStop(this), [VariableReference(mInstrumentation, []), Expression(this, [])])    VariableReference(mInstrumentation, [])    Expression(this, [])  Statement(if (!mCalled) {, [])  MethodCall(throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()""), [VariableReference(throw new SuperNotCalledException(""Activity "" + mComponent, []), Expression() + "" did not call through to super.onStop()"", [])])    VariableReference(throw new SuperNotCalledException(""Activity "" + mComponent, [])    Expression() + "" did not call through to super.onStop()"", [])  Statement(}, [])  Statement(synchronized (mManagedCursors) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mManagedCursors.size(), [])])    VariableReference(final int N, [])    Expression(mManagedCursors.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(ManagedCursor mc, []), Expression(mManagedCursors.get(i), [])])    VariableReference(ManagedCursor mc, [])    Expression(mManagedCursors.get(i), [])  AssignmentExpression(=, [VariableReference(mc.mReleased, []), Expression(true, [])])    VariableReference(mc.mReleased, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mStopped, []), Expression(true, [])])    VariableReference(mStopped, [])    Expression(true, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mResumed, []), Expression(false, [])])    VariableReference(mResumed, [])    Expression(false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!mStopped) {, []), AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])]), MethodCall(mWindow.closeAllPanels(), [VariableReference(mWindow, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mCalled, []), Expression(false, [])]), MethodCall(mInstrumentation.callActivityOnStop(this), [VariableReference(mInstrumentation, []), Expression(this, [])]), Statement(if (!mCalled) {, []), MethodCall(throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()""), [VariableReference(throw new SuperNotCalledException(""Activity "" + mComponent, []), Expression() + "" did not call through to super.onStop()"", [])]), Statement(}, []), Statement(synchronized (mManagedCursors) {, []), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mManagedCursors.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(ManagedCursor mc, []), Expression(mManagedCursors.get(i), [])]), AssignmentExpression(=, [VariableReference(mc.mReleased, []), Expression(true, [])]), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mStopped, []), Expression(true, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!mStopped) {, [])  AssignmentExpression(=, [VariableReference(if (mWindow !, []), Expression(null) {, [])])    VariableReference(if (mWindow !, [])    Expression(null) {, [])  MethodCall(mWindow.closeAllPanels(), [VariableReference(mWindow, []), Expression(, [])])    VariableReference(mWindow, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mCalled, []), Expression(false, [])])    VariableReference(mCalled, [])    Expression(false, [])  MethodCall(mInstrumentation.callActivityOnStop(this), [VariableReference(mInstrumentation, []), Expression(this, [])])    VariableReference(mInstrumentation, [])    Expression(this, [])  Statement(if (!mCalled) {, [])  MethodCall(throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()""), [VariableReference(throw new SuperNotCalledException(""Activity "" + mComponent, []), Expression() + "" did not call through to super.onStop()"", [])])    VariableReference(throw new SuperNotCalledException(""Activity "" + mComponent, [])    Expression() + "" did not call through to super.onStop()"", [])  Statement(}, [])  Statement(synchronized (mManagedCursors) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mManagedCursors.size(), [])])    VariableReference(final int N, [])    Expression(mManagedCursors.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(ManagedCursor mc, []), Expression(mManagedCursors.get(i), [])])    VariableReference(ManagedCursor mc, [])    Expression(mManagedCursors.get(i), [])  AssignmentExpression(=, [VariableReference(mc.mReleased, []), Expression(true, [])])    VariableReference(mc.mReleased, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mStopped, []), Expression(true, [])])    VariableReference(mStopped, [])    Expression(true, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,0,1,4,0,4,0,"The statement `mResumed = false;` has been removed from the late version. This constitutes a change that does not fall under return statements, exception handling, or control dependency changes, so it is classified as 4 (Other statement changed).","The removal of the statement `mResumed = false;` does not affect the potential return values or exception handling of the method. Therefore, no compatibility issue arises, so the CI type is 0."
"<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(String,String,ContentValues)>",9,10,"<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(String,String,ContentValues)>","<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(String,String,ContentValues)>",0,"{
    return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE);
}","{
    return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE), []), Statement(}, [])])  Statement({, [])  Statement(return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE), []), Statement(}, [])])  Statement({, [])  Statement(return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE), [])  Statement(}, [])",0,"/**
 * Convenience method for replacing a row in the database.
 *
 * @param table the table in which to replace the row
 * @param nullColumnHack SQL doesn't allow inserting a completely empty row,
 * so if initialValues is empty this row will explicitly be
 * assigned a NULL value
 * @param initialValues this map contains the initial column values for
 * the row. The key
 * @throws SQLException
 * @return the row ID of the newly inserted row, or -1 if an error occurred
 */
","/**
 * Convenience method for replacing a row in the database.
 *
 * @param table the table in which to replace the row
 * @param nullColumnHack optional; may be <code>null</code>.
 * SQL doesn't allow inserting a completely empty row without
 * naming at least one column name.  If your provided <code>initialValues</code> is
 * empty, no column names are known and an empty row can't be inserted.
 * If not set to null, the <code>nullColumnHack</code> parameter
 * provides the name of nullable column name to explicitly insert a NULL into
 * in the case where your <code>initialValues</code> is empty.
 * @param initialValues this map contains the initial column values for
 * the row. The key
 * @throws SQLException
 * @return the row ID of the newly inserted row, or -1 if an error occurred
 */
",1,,,0,,,0,0,0,0,0,0,"There are no changes between the early and late implementations for this API, so the code change type is 0.","Since there are no changes in the implementation, there is no potential for Compatibility Issues. Therefore, the CI type is 0."
<android.widget.AbsListView: void hideSelector()>,13,14,<android.widget.AbsListView: void hideSelector()>,<android.widget.AbsListView: void hideSelector()>,0,"{
    if (mSelectedPosition != INVALID_POSITION) {
        if (mLayoutMode != LAYOUT_SPECIFIC) {
            mResurrectToPosition = mSelectedPosition;
        }
        if (mNextSelectedPosition >= 0 && mNextSelectedPosition != mSelectedPosition) {
            mResurrectToPosition = mNextSelectedPosition;
        }
        setSelectedPositionInt(INVALID_POSITION);
        setNextSelectedPositionInt(INVALID_POSITION);
        mSelectedTop = 0;
        mSelectorShowing = false;
    }
}","{
    if (mSelectedPosition != INVALID_POSITION) {
        if (mLayoutMode != LAYOUT_SPECIFIC) {
            mResurrectToPosition = mSelectedPosition;
        }
        if (mNextSelectedPosition >= 0 && mNextSelectedPosition != mSelectedPosition) {
            mResurrectToPosition = mNextSelectedPosition;
        }
        setSelectedPositionInt(INVALID_POSITION);
        setNextSelectedPositionInt(INVALID_POSITION);
        mSelectedTop = 0;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mSelectedPosition !, []), Expression(INVALID_POSITION) {, [])]), AssignmentExpression(=, [VariableReference(if (mLayoutMode !, []), Expression(LAYOUT_SPECIFIC) {, [])]), AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mSelectedPosition, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mNextSelectedPosition >, []), Expression(0 && mNextSelectedPosition !, [])]), AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mNextSelectedPosition, [])]), Statement(}, []), Statement(setSelectedPositionInt(INVALID_POSITION), []), Statement(setNextSelectedPositionInt(INVALID_POSITION), []), AssignmentExpression(=, [VariableReference(mSelectedTop, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(mSelectorShowing, []), Expression(false, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mSelectedPosition !, []), Expression(INVALID_POSITION) {, [])])    VariableReference(if (mSelectedPosition !, [])    Expression(INVALID_POSITION) {, [])  AssignmentExpression(=, [VariableReference(if (mLayoutMode !, []), Expression(LAYOUT_SPECIFIC) {, [])])    VariableReference(if (mLayoutMode !, [])    Expression(LAYOUT_SPECIFIC) {, [])  AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mSelectedPosition, [])])    VariableReference(mResurrectToPosition, [])    Expression(mSelectedPosition, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mNextSelectedPosition >, []), Expression(0 && mNextSelectedPosition !, [])])    VariableReference(if (mNextSelectedPosition >, [])    Expression(0 && mNextSelectedPosition !, [])  AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mNextSelectedPosition, [])])    VariableReference(mResurrectToPosition, [])    Expression(mNextSelectedPosition, [])  Statement(}, [])  Statement(setSelectedPositionInt(INVALID_POSITION), [])  Statement(setNextSelectedPositionInt(INVALID_POSITION), [])  AssignmentExpression(=, [VariableReference(mSelectedTop, []), Expression(0, [])])    VariableReference(mSelectedTop, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(mSelectorShowing, []), Expression(false, [])])    VariableReference(mSelectorShowing, [])    Expression(false, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mSelectedPosition !, []), Expression(INVALID_POSITION) {, [])]), AssignmentExpression(=, [VariableReference(if (mLayoutMode !, []), Expression(LAYOUT_SPECIFIC) {, [])]), AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mSelectedPosition, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mNextSelectedPosition >, []), Expression(0 && mNextSelectedPosition !, [])]), AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mNextSelectedPosition, [])]), Statement(}, []), Statement(setSelectedPositionInt(INVALID_POSITION), []), Statement(setNextSelectedPositionInt(INVALID_POSITION), []), AssignmentExpression(=, [VariableReference(mSelectedTop, []), Expression(0, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mSelectedPosition !, []), Expression(INVALID_POSITION) {, [])])    VariableReference(if (mSelectedPosition !, [])    Expression(INVALID_POSITION) {, [])  AssignmentExpression(=, [VariableReference(if (mLayoutMode !, []), Expression(LAYOUT_SPECIFIC) {, [])])    VariableReference(if (mLayoutMode !, [])    Expression(LAYOUT_SPECIFIC) {, [])  AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mSelectedPosition, [])])    VariableReference(mResurrectToPosition, [])    Expression(mSelectedPosition, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mNextSelectedPosition >, []), Expression(0 && mNextSelectedPosition !, [])])    VariableReference(if (mNextSelectedPosition >, [])    Expression(0 && mNextSelectedPosition !, [])  AssignmentExpression(=, [VariableReference(mResurrectToPosition, []), Expression(mNextSelectedPosition, [])])    VariableReference(mResurrectToPosition, [])    Expression(mNextSelectedPosition, [])  Statement(}, [])  Statement(setSelectedPositionInt(INVALID_POSITION), [])  Statement(setNextSelectedPositionInt(INVALID_POSITION), [])  AssignmentExpression(=, [VariableReference(mSelectedTop, []), Expression(0, [])])    VariableReference(mSelectedTop, [])    Expression(0, [])  Statement(}, [])  Statement(}, [])",1,,,0,,,0,,,0,1,4,0,4,0,"The variable `mSelectorShowing` assignment ( `mSelectorShowing = false;` ) has been removed from the method in between the two versions. This represents a code change type 4 because it's not related to a return statement, exception handling, control dependency, or dependent API.","There are no potential Compatibility Issues caused by this change since the modification does not affect the return types, the exceptions thrown, or control the flow of the method in a way that would lead to a different behavior in how the method is used. Therefore, the CI type is 0."
"<android.database.CursorWindow: String getString(int,int)>",13,14,"<android.database.CursorWindow: String getString(int,int)>","<android.database.CursorWindow: String getString(int,int)>",0,"{
    acquireReference();
    try {
        return getString_native(row - mStartPos, col);
    } finally {
        releaseReference();
    }
}","{
    acquireReference();
    try {
        return nativeGetString(mWindowPtr, row - mStartPos, column);
    } finally {
        releaseReference();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(acquireReference(), []), Statement(try {, []), Statement(return getString_native(row - mStartPos, col), []), Statement(} finally {, []), Statement(releaseReference(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(acquireReference(), [])  Statement(try {, [])  Statement(return getString_native(row - mStartPos, col), [])  Statement(} finally {, [])  Statement(releaseReference(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(acquireReference(), []), Statement(try {, []), Statement(return nativeGetString(mWindowPtr, row - mStartPos, column), []), Statement(} finally {, []), Statement(releaseReference(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(acquireReference(), [])  Statement(try {, [])  Statement(return nativeGetString(mWindowPtr, row - mStartPos, column), [])  Statement(} finally {, [])  Statement(releaseReference(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Returns a String for the given field.
 *
 * @param row the row to read from, row - getStartPosition() being the actual row in the window
 * @param col the column to read from
 * @return a String value for the given field
 */
","/**
 * Gets the value of the field at the specified row and column index as a string.
 * <p>
 * The result is determined as follows:
 * <ul>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result
 * is <code>null</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result
 * is the string value.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result
 * is a string representation of the integer in decimal, obtained by formatting the
 * value with the <code>printf</code> family of functions using
 * format specifier <code>%lld</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result
 * is a string representation of the floating-point value in decimal, obtained by
 * formatting the value with the <code>printf</code> family of functions using
 * format specifier <code>%g</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a
 * {@link SQLiteException} is thrown.</li>
 * </ul>
 * </p>
 *
 * @param row The zero-based row index, relative to the cursor window's
 * start position ({@link #getStartPosition()}).
 * @param column The zero-based column index.
 * @return The value of the field as a string.
 */
",1,,,0,,,0,"1,2","1,5",1,"1,5",1,"The return statement has changed from `return getString_native(row - mStartPos, col)` to `return nativeGetString(mWindowPtr, row - mStartPos, column)`. Changes include the method name from `getString_native` to `nativeGetString`, and the parameters from `(row - mStartPos, col)` to `(mWindowPtr, row - mStartPos, column)`, so the code change type is 1,5.","The change of the return statement can potentially lead to different return values or types in different versions, so the CI type is 1."
<android.view.View: boolean dispatchHoverEvent(MotionEvent)>,14,15,<android.view.View: boolean dispatchHoverEvent(MotionEvent)>,<android.view.View: boolean dispatchHoverEvent(MotionEvent)>,0,"{
    // noinspection SimplifiableIfStatement
    if (mOnHoverListener != null && (mViewFlags & ENABLED_MASK) == ENABLED && mOnHoverListener.onHover(this, event)) {
        return true;
    }
    return onHoverEvent(event);
}","{
    // noinspection SimplifiableIfStatement
    ListenerInfo li = mListenerInfo;
    if (li != null && li.mOnHoverListener != null && (mViewFlags & ENABLED_MASK) == ENABLED && li.mOnHoverListener.onHover(this, event)) {
        return true;
    }
    return onHoverEvent(event);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// noinspection SimplifiableIfStatement, []), AssignmentExpression(=, [VariableReference(if (mOnHoverListener !, []), Expression(null && (mViewFlags & ENABLED_MASK), [])]), Statement(return true, []), Statement(}, []), Statement(return onHoverEvent(event), []), Statement(}, [])])  Statement({, [])  Statement(// noinspection SimplifiableIfStatement, [])  AssignmentExpression(=, [VariableReference(if (mOnHoverListener !, []), Expression(null && (mViewFlags & ENABLED_MASK), [])])    VariableReference(if (mOnHoverListener !, [])    Expression(null && (mViewFlags & ENABLED_MASK), [])  Statement(return true, [])  Statement(}, [])  Statement(return onHoverEvent(event), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// noinspection SimplifiableIfStatement, []), AssignmentExpression(=, [VariableReference(ListenerInfo li, []), Expression(mListenerInfo, [])]), AssignmentExpression(=, [VariableReference(if (li !, []), Expression(null && li.mOnHoverListener !, [])]), Statement(return true, []), Statement(}, []), Statement(return onHoverEvent(event), []), Statement(}, [])])  Statement({, [])  Statement(// noinspection SimplifiableIfStatement, [])  AssignmentExpression(=, [VariableReference(ListenerInfo li, []), Expression(mListenerInfo, [])])    VariableReference(ListenerInfo li, [])    Expression(mListenerInfo, [])  AssignmentExpression(=, [VariableReference(if (li !, []), Expression(null && li.mOnHoverListener !, [])])    VariableReference(if (li !, [])    Expression(null && li.mOnHoverListener !, [])  Statement(return true, [])  Statement(}, [])  Statement(return onHoverEvent(event), [])  Statement(}, [])",1,"/**
 * Dispatch a hover event.
 * <p>
 * Do not call this method directly.
 * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.
 * </p>
 *
 * @param event The motion event to be dispatched.
 * @return True if the event was handled by the view, false otherwise.
 */
","/**
 * Dispatch a hover event.
 * <p>
 * Do not call this method directly.
 * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.
 * </p>
 *
 * @param event The motion event to be dispatched.
 * @return True if the event was handled by the view, false otherwise.
 */
",0,,,0,,,0,1,4,1,"3, 4",0,"The conditional check inside the 'if' statement has changed from `mOnHoverListener` and `mViewFlags` to using `mListenerInfo` and `li.mOnHoverListener`, and a new initialization statement `ListenerInfo li = mListenerInfo;` has been added. This could potentially change how the event listener is accessed, hence the change types are 3 and 4.","Despite the control dependency and other statements changes, the behavior controlled by the 'if' condition and the return statements remains the same (i.e., either returning `true` or calling `onHoverEvent(event)`). Therefore, the CI type is 0."
"<android.database.CursorWindow: String getString(int,int)>",14,15,"<android.database.CursorWindow: String getString(int,int)>","<android.database.CursorWindow: String getString(int,int)>",0,"{
    acquireReference();
    try {
        return nativeGetString(mWindowPtr, row - mStartPos, column);
    } finally {
        releaseReference();
    }
}","{
    acquireReference();
    try {
        return nativeGetString(mWindowPtr, row - mStartPos, column);
    } finally {
        releaseReference();
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(acquireReference(), []), Statement(try {, []), Statement(return nativeGetString(mWindowPtr, row - mStartPos, column), []), Statement(} finally {, []), Statement(releaseReference(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(acquireReference(), [])  Statement(try {, [])  Statement(return nativeGetString(mWindowPtr, row - mStartPos, column), [])  Statement(} finally {, [])  Statement(releaseReference(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(acquireReference(), []), Statement(try {, []), Statement(return nativeGetString(mWindowPtr, row - mStartPos, column), []), Statement(} finally {, []), Statement(releaseReference(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(acquireReference(), [])  Statement(try {, [])  Statement(return nativeGetString(mWindowPtr, row - mStartPos, column), [])  Statement(} finally {, [])  Statement(releaseReference(), [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Gets the value of the field at the specified row and column index as a string.
 * <p>
 * The result is determined as follows:
 * <ul>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result
 * is <code>null</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result
 * is the string value.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result
 * is a string representation of the integer in decimal, obtained by formatting the
 * value with the <code>printf</code> family of functions using
 * format specifier <code>%lld</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result
 * is a string representation of the floating-point value in decimal, obtained by
 * formatting the value with the <code>printf</code> family of functions using
 * format specifier <code>%g</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a
 * {@link SQLiteException} is thrown.</li>
 * </ul>
 * </p>
 *
 * @param row The zero-based row index, relative to the cursor window's
 * start position ({@link #getStartPosition()}).
 * @param column The zero-based column index.
 * @return The value of the field as a string.
 */
","/**
 * Gets the value of the field at the specified row and column index as a string.
 * <p>
 * The result is determined as follows:
 * <ul>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result
 * is <code>null</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result
 * is the string value.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result
 * is a string representation of the integer in decimal, obtained by formatting the
 * value with the <code>printf</code> family of functions using
 * format specifier <code>%lld</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result
 * is a string representation of the floating-point value in decimal, obtained by
 * formatting the value with the <code>printf</code> family of functions using
 * format specifier <code>%g</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a
 * {@link SQLiteException} is thrown.</li>
 * </ul>
 * </p>
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return The value of the field as a string.
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early version and the late version. Both versions have identical implementations.,"Since there are no changes in the code, there is no possibility of a Compatibility Issue (CI)."
<android.content.AsyncTaskLoader.LoadTask: void onPostExecute(D)>,15,16,<android.content.AsyncTaskLoader.LoadTask: void onPostExecute(D)>,<android.content.AsyncTaskLoader.LoadTask: void onPostExecute(D)>,0,"{
    if (DEBUG)
        Slog.v(TAG, this + "" onPostExecute"");
    try {
        AsyncTaskLoader.this.dispatchOnLoadComplete(this, data);
    } finally {
        done.countDown();
    }
}","{
    if (DEBUG)
        Slog.v(TAG, this + "" onPostExecute"");
    try {
        AsyncTaskLoader.this.dispatchOnLoadComplete(this, data);
    } finally {
        mDone.countDown();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Slog.v(TAG, this + "" onPostExecute""), [VariableReference(Slog, []), Expression(TAG, []), Expression(this + "" onPostExecute"", [])]), Statement(try {, []), Statement(} finally {, []), MethodCall(done.countDown(), [VariableReference(done, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Slog.v(TAG, this + "" onPostExecute""), [VariableReference(Slog, []), Expression(TAG, []), Expression(this + "" onPostExecute"", [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(this + "" onPostExecute"", [])  Statement(try {, [])  Statement(} finally {, [])  MethodCall(done.countDown(), [VariableReference(done, []), Expression(, [])])    VariableReference(done, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Slog.v(TAG, this + "" onPostExecute""), [VariableReference(Slog, []), Expression(TAG, []), Expression(this + "" onPostExecute"", [])]), Statement(try {, []), Statement(} finally {, []), MethodCall(mDone.countDown(), [VariableReference(mDone, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Slog.v(TAG, this + "" onPostExecute""), [VariableReference(Slog, []), Expression(TAG, []), Expression(this + "" onPostExecute"", [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(this + "" onPostExecute"", [])  Statement(try {, [])  Statement(} finally {, [])  MethodCall(mDone.countDown(), [VariableReference(mDone, []), Expression(, [])])    VariableReference(mDone, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/* Runs on the UI thread */
","/* Runs on the UI thread */
",0,[@Override],[@Override],0,,,0,"1,2",5,0,4,0,"The only change between the early and late versions is the variable name in the ""finally"" block from `done.countDown()` to `mDone.countDown()`, so the change type is 4.","The change of the variable name from `done` to `mDone` does not affect the behaviour of the API regarding return values or exceptions since they likely refer to the same CountdownLatch object but have been renamed. Therefore, there is no Compatibility Issue."
"<android.widget.RemoteViews: void setInt(int,String,int)>",15,16,"<android.widget.RemoteViews: void setInt(int,String,int)>","<android.widget.RemoteViews: void setInt(int,String,int)>",0,"{
    addAction(new ReflectionAction(viewId, methodName, ReflectionAction.INT, value));
}","{
    addAction(new ReflectionAction(viewId, methodName, ReflectionAction.INT, value));
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * Call a method taking one int on a view in the layout for this RemoteViews.
 *
 * @param viewId The id of the view whose text should change
 * @param methodName The name of the method to call.
 * @param value The value to pass to the method.
 */
","/**
 * Call a method taking one int on a view in the layout for this RemoteViews.
 *
 * @param viewId The id of the view on which to call the method.
 * @param methodName The name of the method to call.
 * @param value The value to pass to the method.
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early version and the late version in both implementation and annotations.,"Since there are no changes in the method implementation or annotations, there is no potential compatibility issue."
<android.webkit.WebView: boolean shouldDelayChildPressedState()>,15,16,<android.webkit.WebView: boolean shouldDelayChildPressedState()>,<android.webkit.WebView: boolean shouldDelayChildPressedState()>,0,"{
    return true;
}","{
    return mProvider.getViewDelegate().shouldDelayChildPressedState();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mProvider.getViewDelegate().shouldDelayChildPressedState(), [VariableReference(return mProvider, []), Expression().shouldDelayChildPressedState(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mProvider.getViewDelegate().shouldDelayChildPressedState(), [VariableReference(return mProvider, []), Expression().shouldDelayChildPressedState(, [])])    VariableReference(return mProvider, [])    Expression().shouldDelayChildPressedState(, [])  Statement(}, [])",1,,,0,[@Override],"[@Deprecated, @Override]",1,,,0,"1,2","1,5",1,"1,5",1,"The return statement has changed from `return true` to `return mProvider.getViewDelegate().shouldDelayChildPressedState()`. This represents a change in the dependent API as the API now relies on `mProvider.getViewDelegate().shouldDelayChildPressedState()`, so the code change type is 1,5.","Since the return statement has changed and the method now relies on another API (`mProvider.getViewDelegate().shouldDelayChildPressedState()`), the return value of the API could be different. Therefore, the CI type is 1."
<android.server.search.SearchManagerService: ComponentName getWebSearchActivity()>,16,17,<android.server.search.SearchManagerService: ComponentName getWebSearchActivity()>,<android.server.search.SearchManagerService: ComponentName getWebSearchActivity()>,0,"{
    return getSearchables().getWebSearchActivity();
}","{
    return getSearchables(UserHandle.getCallingUserId()).getWebSearchActivity();
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return getSearchables().getWebSearchActivity(), [VariableReference(return getSearchables(), []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return getSearchables().getWebSearchActivity(), [VariableReference(return getSearchables(), []), Expression(, [])])    VariableReference(return getSearchables(), [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return getSearchables(UserHandle.getCallingUserId()).getWebSearchActivity(), [VariableReference(return getSearchables(UserHandle, []), Expression()).getWebSearchActivity(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return getSearchables(UserHandle.getCallingUserId()).getWebSearchActivity(), [VariableReference(return getSearchables(UserHandle, []), Expression()).getWebSearchActivity(, [])])    VariableReference(return getSearchables(UserHandle, [])    Expression()).getWebSearchActivity(, [])  Statement(}, [])",1,"/**
 * Gets the name of the web search activity.
 */
","/**
 * Gets the name of the web search activity.
 */
",0,,,0,,,0,"1,2","1,5",1,5,1,"The method call getSearchables() in the early version has been changed to getSearchables(UserHandle.getCallingUserId()) in the late version, indicating a change in the dependent API as new parameter is introduced. So the change type is 5.","The added parameter UserHandle.getCallingUserId() can potentially change the return value of the dependent method getSearchables(), which in turn can change the return value of getWebSearchActivity(). Therefore, the CI type is 1."
<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()>,16,17,<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()>,<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()>,0,"{
    if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {
        return;
    }
    addTtsApis();
    addCallbackApis();
}","{
    if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {
        return;
    }
    addTtsApis();
    addCallbackApis();
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {, []), Statement(return, []), Statement(}, []), Statement(addTtsApis(), []), Statement(addCallbackApis(), []), Statement(}, [])])  Statement({, [])  Statement(if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {, [])  Statement(return, [])  Statement(}, [])  Statement(addTtsApis(), [])  Statement(addCallbackApis(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {, []), Statement(return, []), Statement(}, []), Statement(addTtsApis(), []), Statement(addCallbackApis(), []), Statement(}, [])])  Statement({, [])  Statement(if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {, [])  Statement(return, [])  Statement(}, [])  Statement(addTtsApis(), [])  Statement(addCallbackApis(), [])  Statement(}, [])",0,"/**
 * Attempts to load scripting interfaces for accessibility.
 * <p>
 * This should be called when the window is attached.
 * </p>
 */
","/**
 * Attempts to load scripting interfaces for accessibility.
 * <p>
 * This should only be called before a page loads.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change between the early and late implementations of the method.,"Since there are no changes in the method implementation, there are no potential compatibility issues."
"<android.webkit.AccessibilityInjector.CallbackHandler: void onResult(String,String)>",16,17,"<android.webkit.AccessibilityInjector.CallbackHandler: void onResult(String,String)>","<android.webkit.AccessibilityInjector.CallbackHandler: void onResult(String,String)>",0,"{
    final long resultId;
    try {
        resultId = Long.parseLong(id);
    } catch (NumberFormatException e) {
        return;
    }
    synchronized (mResultLock) {
        if (resultId > mResultId) {
            mResult = Boolean.parseBoolean(result);
            mResultId = resultId;
        }
        mResultLock.notifyAll();
    }
}","{
    if (DEBUG) {
        Log.w(TAG, ""Saw CVOX result of '"" + result + ""' for ID "" + id);
    }
    final int resultId;
    try {
        resultId = Integer.parseInt(id);
    } catch (NumberFormatException e) {
        return;
    }
    synchronized (mResultLock) {
        if (resultId > mResultId) {
            mResult = Boolean.parseBoolean(result);
            mResultId = resultId;
        } else {
            if (DEBUG) {
                Log.w(TAG, ""Result with ID "" + resultId + "" was stale vesus "" + mResultId);
            }
        }
        mResultLock.notifyAll();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(final long resultId, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(resultId, []), Expression(Long.parseLong(id), [])]), Statement(} catch (NumberFormatException e) {, []), Statement(return, []), Statement(}, []), Statement(synchronized (mResultLock) {, []), Statement(if (resultId > mResultId) {, []), AssignmentExpression(=, [VariableReference(mResult, []), Expression(Boolean.parseBoolean(result), [])]), AssignmentExpression(=, [VariableReference(mResultId, []), Expression(resultId, [])]), Statement(}, []), MethodCall(mResultLock.notifyAll(), [VariableReference(mResultLock, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(final long resultId, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(resultId, []), Expression(Long.parseLong(id), [])])    VariableReference(resultId, [])    Expression(Long.parseLong(id), [])  Statement(} catch (NumberFormatException e) {, [])  Statement(return, [])  Statement(}, [])  Statement(synchronized (mResultLock) {, [])  Statement(if (resultId > mResultId) {, [])  AssignmentExpression(=, [VariableReference(mResult, []), Expression(Boolean.parseBoolean(result), [])])    VariableReference(mResult, [])    Expression(Boolean.parseBoolean(result), [])  AssignmentExpression(=, [VariableReference(mResultId, []), Expression(resultId, [])])    VariableReference(mResultId, [])    Expression(resultId, [])  Statement(}, [])  MethodCall(mResultLock.notifyAll(), [VariableReference(mResultLock, []), Expression(, [])])    VariableReference(mResultLock, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG) {, []), MethodCall(Log.w(TAG, ""Saw CVOX result of '"" + result + ""' for ID "" + id), [VariableReference(Log, []), Expression(TAG, []), Expression(""Saw CVOX result of '"" + result + ""' for ID "" + id, [])]), Statement(}, []), Statement(final int resultId, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(resultId, []), Expression(Integer.parseInt(id), [])]), Statement(} catch (NumberFormatException e) {, []), Statement(return, []), Statement(}, []), Statement(synchronized (mResultLock) {, []), Statement(if (resultId > mResultId) {, []), AssignmentExpression(=, [VariableReference(mResult, []), Expression(Boolean.parseBoolean(result), [])]), AssignmentExpression(=, [VariableReference(mResultId, []), Expression(resultId, [])]), Statement(} else {, []), Statement(if (DEBUG) {, []), MethodCall(Log.w(TAG, ""Result with ID "" + resultId + "" was stale vesus "" + mResultId), [VariableReference(Log, []), Expression(TAG, []), Expression(""Result with ID "" + resultId + "" was stale vesus "" + mResultId, [])]), Statement(}, []), Statement(}, []), MethodCall(mResultLock.notifyAll(), [VariableReference(mResultLock, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.w(TAG, ""Saw CVOX result of '"" + result + ""' for ID "" + id), [VariableReference(Log, []), Expression(TAG, []), Expression(""Saw CVOX result of '"" + result + ""' for ID "" + id, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Saw CVOX result of '"" + result + ""' for ID "" + id, [])  Statement(}, [])  Statement(final int resultId, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(resultId, []), Expression(Integer.parseInt(id), [])])    VariableReference(resultId, [])    Expression(Integer.parseInt(id), [])  Statement(} catch (NumberFormatException e) {, [])  Statement(return, [])  Statement(}, [])  Statement(synchronized (mResultLock) {, [])  Statement(if (resultId > mResultId) {, [])  AssignmentExpression(=, [VariableReference(mResult, []), Expression(Boolean.parseBoolean(result), [])])    VariableReference(mResult, [])    Expression(Boolean.parseBoolean(result), [])  AssignmentExpression(=, [VariableReference(mResultId, []), Expression(resultId, [])])    VariableReference(mResultId, [])    Expression(resultId, [])  Statement(} else {, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.w(TAG, ""Result with ID "" + resultId + "" was stale vesus "" + mResultId), [VariableReference(Log, []), Expression(TAG, []), Expression(""Result with ID "" + resultId + "" was stale vesus "" + mResultId, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Result with ID "" + resultId + "" was stale vesus "" + mResultId, [])  Statement(}, [])  Statement(}, [])  MethodCall(mResultLock.notifyAll(), [VariableReference(mResultLock, []), Expression(, [])])    VariableReference(mResultLock, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Callback exposed to JavaScript. Handles returning the result of a
 * request to a waiting (or potentially timed out) thread.
 *
 * @param id The result id of the request as a {@link String}.
 * @param result The result of the request as a {@link String}.
 */
","/**
 * Callback exposed to JavaScript. Handles returning the result of a
 * request to a waiting (or potentially timed out) thread.
 *
 * @param id The result id of the request as a {@link String}.
 * @param result The result of the request as a {@link String}.
 */
",0,[@SuppressWarnings("unused")],"[@JavascriptInterface, @SuppressWarnings(""unused"")]",1,,,0,"1,2","3,4,5",1,"3,4",0,"The type of `resultId` has changed from `long` to `int`, additional logging statements were added under the DEBUG condition, and an `else` block with a nested `if (DEBUG)` block for logging if `resultId` is not greater than `mResultId`. Additionally, new annotations were added. Therefore, it falls under code change categories 3 and 4.","Although there are multiple changes in the logic and introduction of new logging statements, the overall behavior in terms of return values or exceptions thrown has not changed. The additional annotations do not impact the core logic either. Thus, there is no compatibility issue."
"<android.app.Activity: boolean startNextMatchingActivity(Intent,Bundle)>",17,18,"<android.app.Activity: boolean startNextMatchingActivity(Intent,Bundle)>","<android.app.Activity: boolean startNextMatchingActivity(Intent,Bundle)>",0,"{
    if (mParent == null) {
        try {
            intent.setAllowFds(false);
            return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options);
        } catch (RemoteException e) {
        // Empty
        }
        return false;
    }
    throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity"");
}","{
    if (mParent == null) {
        try {
            intent.migrateExtraStreamToClipData();
            intent.prepareToLeaveProcess();
            return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options);
        } catch (RemoteException e) {
        // Empty
        }
        return false;
    }
    throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity"");
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])]), Statement(try {, []), MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])]), MethodCall(return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options), [VariableReference(return ActivityManagerNative, []), Expression().startNextMatchingActivity(mToken, []), Expression(intent, []), Expression(options, [])]), Statement(} catch (RemoteException e) {, []), Statement(// Empty, []), Statement(}, []), Statement(return false, []), Statement(}, []), Statement(throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity""), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])])    VariableReference(if (mParent, [])    Expression(, [])  Statement(try {, [])  MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])])    VariableReference(intent, [])    Expression(false, [])  MethodCall(return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options), [VariableReference(return ActivityManagerNative, []), Expression().startNextMatchingActivity(mToken, []), Expression(intent, []), Expression(options, [])])    VariableReference(return ActivityManagerNative, [])    Expression().startNextMatchingActivity(mToken, [])    Expression(intent, [])    Expression(options, [])  Statement(} catch (RemoteException e) {, [])  Statement(// Empty, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])  Statement(throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity""), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])]), Statement(try {, []), MethodCall(intent.migrateExtraStreamToClipData(), [VariableReference(intent, []), Expression(, [])]), MethodCall(intent.prepareToLeaveProcess(), [VariableReference(intent, []), Expression(, [])]), MethodCall(return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options), [VariableReference(return ActivityManagerNative, []), Expression().startNextMatchingActivity(mToken, []), Expression(intent, []), Expression(options, [])]), Statement(} catch (RemoteException e) {, []), Statement(// Empty, []), Statement(}, []), Statement(return false, []), Statement(}, []), Statement(throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity""), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent, []), Expression(, [])])    VariableReference(if (mParent, [])    Expression(, [])  Statement(try {, [])  MethodCall(intent.migrateExtraStreamToClipData(), [VariableReference(intent, []), Expression(, [])])    VariableReference(intent, [])    Expression(, [])  MethodCall(intent.prepareToLeaveProcess(), [VariableReference(intent, []), Expression(, [])])    VariableReference(intent, [])    Expression(, [])  MethodCall(return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options), [VariableReference(return ActivityManagerNative, []), Expression().startNextMatchingActivity(mToken, []), Expression(intent, []), Expression(options, [])])    VariableReference(return ActivityManagerNative, [])    Expression().startNextMatchingActivity(mToken, [])    Expression(intent, [])    Expression(options, [])  Statement(} catch (RemoteException e) {, [])  Statement(// Empty, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])  Statement(throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity""), [])  Statement(}, [])",1,"/**
 * Special version of starting an activity, for use when you are replacing
 * other activity components.  You can use this to hand the Intent off
 * to the next Activity that can handle it.  You typically call this in
 * {@link #onCreate} with the Intent returned by {@link #getIntent}.
 *
 * @param intent The intent to dispatch to the next activity.  For
 * correct behavior, this must be the same as the Intent that started
 * your own activity; the only changes you can make are to the extras
 * inside of it.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @return Returns a boolean indicating whether there was another Activity
 * to start: true if there was a next activity to start, false if there
 * wasn't.  In general, if true is returned you will then want to call
 * finish() on yourself.
 */
","/**
 * Special version of starting an activity, for use when you are replacing
 * other activity components.  You can use this to hand the Intent off
 * to the next Activity that can handle it.  You typically call this in
 * {@link #onCreate} with the Intent returned by {@link #getIntent}.
 *
 * @param intent The intent to dispatch to the next activity.  For
 * correct behavior, this must be the same as the Intent that started
 * your own activity; the only changes you can make are to the extras
 * inside of it.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @return Returns a boolean indicating whether there was another Activity
 * to start: true if there was a next activity to start, false if there
 * wasn't.  In general, if true is returned you will then want to call
 * finish() on yourself.
 */
",0,,,0,,,0,"1,2",5,0,"3, 4",0,"Additional method calls `intent.migrateExtraStreamToClipData()` and `intent.prepareToLeaveProcess()` have been introduced inside the `try` block before the original `return` statement, so the changes involve control dependency and other statement changes (3, 4).","The changes do not affect the return value or exception handling of the API, so no compatibility issues are expected."
"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",17,18,"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>","<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",0,"{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}","{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numValues, []), Statement(i++) {, []), Statement(insert(uri, values[i]), []), Statement(}, []), Statement(return numValues, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])])    VariableReference(int numValues, [])    Expression(values.length, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numValues, [])  Statement(i++) {, [])  Statement(insert(uri, values[i]), [])  Statement(}, [])  Statement(return numValues, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < numValues, []), Statement(i++) {, []), Statement(insert(uri, values[i]), []), Statement(}, []), Statement(return numValues, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int numValues, []), Expression(values.length, [])])    VariableReference(int numValues, [])    Expression(values.length, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < numValues, [])  Statement(i++) {, [])  Statement(insert(uri, values[i]), [])  Statement(}, [])  Statement(return numValues, [])  Statement(}, [])",0,"/**
 * Override this to handle requests to insert a set of new rows, or the
 * default implementation will iterate over the values and call
 * {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads"">Processes
 * and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * @return The number of values that were inserted.
 */
","/**
 * Override this to handle requests to insert a set of new rows, or the
 * default implementation will iterate over the values and call
 * {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads"">Processes
 * and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * This must not be {@code null}.
 * @return The number of values that were inserted.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the code between the early version and the late version.,"No compatibility issue, as there is no change in the implementation."
<android.view.Surface.CompatibleCanvas: void getMatrix(Matrix)>,17,18,<android.view.Surface.CompatibleCanvas: void getMatrix(Matrix)>,<android.view.Surface.CompatibleCanvas: void getMatrix(Matrix)>,0,"{
    super.getMatrix(m);
    if (mOrigMatrix == null) {
        mOrigMatrix = new Matrix();
    }
    mOrigMatrix.set(m);
}","{
    super.getMatrix(m);
    if (mOrigMatrix == null) {
        mOrigMatrix = new Matrix();
    }
    mOrigMatrix.set(m);
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.getMatrix(m), [VariableReference(super, []), Expression(m, [])]), AssignmentExpression(=, [VariableReference(if (mOrigMatrix, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mOrigMatrix, []), Expression(new Matrix(), [])]), Statement(}, []), MethodCall(mOrigMatrix.set(m), [VariableReference(mOrigMatrix, []), Expression(m, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.getMatrix(m), [VariableReference(super, []), Expression(m, [])])    VariableReference(super, [])    Expression(m, [])  AssignmentExpression(=, [VariableReference(if (mOrigMatrix, []), Expression(, [])])    VariableReference(if (mOrigMatrix, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mOrigMatrix, []), Expression(new Matrix(), [])])    VariableReference(mOrigMatrix, [])    Expression(new Matrix(), [])  Statement(}, [])  MethodCall(mOrigMatrix.set(m), [VariableReference(mOrigMatrix, []), Expression(m, [])])    VariableReference(mOrigMatrix, [])    Expression(m, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.getMatrix(m), [VariableReference(super, []), Expression(m, [])]), AssignmentExpression(=, [VariableReference(if (mOrigMatrix, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mOrigMatrix, []), Expression(new Matrix(), [])]), Statement(}, []), MethodCall(mOrigMatrix.set(m), [VariableReference(mOrigMatrix, []), Expression(m, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.getMatrix(m), [VariableReference(super, []), Expression(m, [])])    VariableReference(super, [])    Expression(m, [])  AssignmentExpression(=, [VariableReference(if (mOrigMatrix, []), Expression(, [])])    VariableReference(if (mOrigMatrix, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mOrigMatrix, []), Expression(new Matrix(), [])])    VariableReference(mOrigMatrix, [])    Expression(new Matrix(), [])  Statement(}, [])  MethodCall(mOrigMatrix.set(m), [VariableReference(mOrigMatrix, []), Expression(m, [])])    VariableReference(mOrigMatrix, [])    Expression(m, [])  Statement(}, [])",0,,,0,[@Override],"[@SuppressWarnings(""deprecation""), @Override]",1,,,0,0,0,0,0,0,There are no code changes between the early and late versions of the method implementation.,"Since there are no changes in the implementation, there is no potential for Compatibility Issues."
"<android.widget.TextView: boolean onKeyDown(int,KeyEvent)>",18,19,"<android.widget.TextView: boolean onKeyDown(int,KeyEvent)>","<android.widget.TextView: boolean onKeyDown(int,KeyEvent)>",0,"{
    int which = doKeyDown(keyCode, event, null);
    if (which == 0) {
        // Go through default dispatching.
        return super.onKeyDown(keyCode, event);
    }
    return true;
}","{
    int which = doKeyDown(keyCode, event, null);
    if (which == 0) {
        return super.onKeyDown(keyCode, event);
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int which, []), Expression(doKeyDown(keyCode, event, null), [])]), AssignmentExpression(=, [VariableReference(if (which, []), Expression(, [])]), Statement(// Go through default dispatching., []), MethodCall(return super.onKeyDown(keyCode, event), [VariableReference(return super, []), Expression(keyCode, []), Expression(event, [])]), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int which, []), Expression(doKeyDown(keyCode, event, null), [])])    VariableReference(int which, [])    Expression(doKeyDown(keyCode, event, null), [])  AssignmentExpression(=, [VariableReference(if (which, []), Expression(, [])])    VariableReference(if (which, [])    Expression(, [])  Statement(// Go through default dispatching., [])  MethodCall(return super.onKeyDown(keyCode, event), [VariableReference(return super, []), Expression(keyCode, []), Expression(event, [])])    VariableReference(return super, [])    Expression(keyCode, [])    Expression(event, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int which, []), Expression(doKeyDown(keyCode, event, null), [])]), AssignmentExpression(=, [VariableReference(if (which, []), Expression(, [])]), MethodCall(return super.onKeyDown(keyCode, event), [VariableReference(return super, []), Expression(keyCode, []), Expression(event, [])]), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int which, []), Expression(doKeyDown(keyCode, event, null), [])])    VariableReference(int which, [])    Expression(doKeyDown(keyCode, event, null), [])  AssignmentExpression(=, [VariableReference(if (which, []), Expression(, [])])    VariableReference(if (which, [])    Expression(, [])  MethodCall(return super.onKeyDown(keyCode, event), [VariableReference(return super, []), Expression(keyCode, []), Expression(event, [])])    VariableReference(return super, [])    Expression(keyCode, [])    Expression(event, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,0,0,0,0,4,0,"The only change is the removal of the comment (""// Go through default dispatching."") in the conditional block. There is no functional impact on the method, so the code change type is 4.","As there are no functional changes, the method's behavior remains the same. Thus, there are no Compatibility Issues, so the CI type is 0."
<android.view.View: void setSystemUiVisibility(int)>,18,19,<android.view.View: void setSystemUiVisibility(int)>,<android.view.View: void setSystemUiVisibility(int)>,0,"{
    if (visibility != mSystemUiVisibility) {
        mSystemUiVisibility = visibility;
        if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
            mParent.recomputeViewAttributes(this);
        }
    }
}","{
    if (visibility != mSystemUiVisibility) {
        mSystemUiVisibility = visibility;
        if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
            mParent.recomputeViewAttributes(this);
        }
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (visibility !, []), Expression(mSystemUiVisibility) {, [])]), AssignmentExpression(=, [VariableReference(mSystemUiVisibility, []), Expression(visibility, [])]), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null && mAttachInfo !, [])]), MethodCall(mParent.recomputeViewAttributes(this), [VariableReference(mParent, []), Expression(this, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (visibility !, []), Expression(mSystemUiVisibility) {, [])])    VariableReference(if (visibility !, [])    Expression(mSystemUiVisibility) {, [])  AssignmentExpression(=, [VariableReference(mSystemUiVisibility, []), Expression(visibility, [])])    VariableReference(mSystemUiVisibility, [])    Expression(visibility, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null && mAttachInfo !, [])])    VariableReference(if (mParent !, [])    Expression(null && mAttachInfo !, [])  MethodCall(mParent.recomputeViewAttributes(this), [VariableReference(mParent, []), Expression(this, [])])    VariableReference(mParent, [])    Expression(this, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (visibility !, []), Expression(mSystemUiVisibility) {, [])]), AssignmentExpression(=, [VariableReference(mSystemUiVisibility, []), Expression(visibility, [])]), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null && mAttachInfo !, [])]), MethodCall(mParent.recomputeViewAttributes(this), [VariableReference(mParent, []), Expression(this, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (visibility !, []), Expression(mSystemUiVisibility) {, [])])    VariableReference(if (visibility !, [])    Expression(mSystemUiVisibility) {, [])  AssignmentExpression(=, [VariableReference(mSystemUiVisibility, []), Expression(visibility, [])])    VariableReference(mSystemUiVisibility, [])    Expression(visibility, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null && mAttachInfo !, [])])    VariableReference(if (mParent !, [])    Expression(null && mAttachInfo !, [])  MethodCall(mParent.recomputeViewAttributes(this), [VariableReference(mParent, []), Expression(this, [])])    VariableReference(mParent, [])    Expression(this, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",0,"/**
 * Request that the visibility of the status bar or other screen/window
 * decorations be changed.
 *
 * <p>This method is used to put the over device UI into temporary modes
 * where the user's attention is focused more on the application content,
 * by dimming or hiding surrounding system affordances.  This is typically
 * used in conjunction with {@link Window#FEATURE_ACTION_BAR_OVERLAY
 * Window.FEATURE_ACTION_BAR_OVERLAY}, allowing the applications content
 * to be placed behind the action bar (and with these flags other system
 * affordances) so that smooth transitions between hiding and showing them
 * can be done.
 *
 * <p>Two representative examples of the use of system UI visibility is
 * implementing a content browsing application (like a magazine reader)
 * and a video playing application.
 *
 * <p>The first code shows a typical implementation of a View in a content
 * browsing application.  In this implementation, the application goes
 * into a content-oriented mode by hiding the status bar and action bar,
 * and putting the navigation elements into lights out mode.  The user can
 * then interact with content while in this mode.  Such an application should
 * provide an easy way for the user to toggle out of the mode (such as to
 * check information in the status bar or access notifications).  In the
 * implementation here, this is done simply by tapping on the content.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/ContentBrowserActivity.java
 * content}
 *
 * <p>This second code sample shows a typical implementation of a View
 * in a video playing application.  In this situation, while the video is
 * playing the application would like to go into a complete full-screen mode,
 * to use as much of the display as possible for the video.  When in this state
 * the user can not interact with the application; the system intercepts
 * touching on the screen to pop the UI out of full screen mode.  See
 * {@link #fitSystemWindows(Rect)} for a sample layout that goes with this code.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/VideoPlayerActivity.java
 * content}
 *
 * @param visibility  Bitwise-or of flags {@link #SYSTEM_UI_FLAG_LOW_PROFILE},
 * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, {@link #SYSTEM_UI_FLAG_FULLSCREEN},
 * {@link #SYSTEM_UI_FLAG_LAYOUT_STABLE}, {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION},
 * and {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
 */
","/**
 * Request that the visibility of the status bar or other screen/window
 * decorations be changed.
 *
 * <p>This method is used to put the over device UI into temporary modes
 * where the user's attention is focused more on the application content,
 * by dimming or hiding surrounding system affordances.  This is typically
 * used in conjunction with {@link Window#FEATURE_ACTION_BAR_OVERLAY
 * Window.FEATURE_ACTION_BAR_OVERLAY}, allowing the applications content
 * to be placed behind the action bar (and with these flags other system
 * affordances) so that smooth transitions between hiding and showing them
 * can be done.
 *
 * <p>Two representative examples of the use of system UI visibility is
 * implementing a content browsing application (like a magazine reader)
 * and a video playing application.
 *
 * <p>The first code shows a typical implementation of a View in a content
 * browsing application.  In this implementation, the application goes
 * into a content-oriented mode by hiding the status bar and action bar,
 * and putting the navigation elements into lights out mode.  The user can
 * then interact with content while in this mode.  Such an application should
 * provide an easy way for the user to toggle out of the mode (such as to
 * check information in the status bar or access notifications).  In the
 * implementation here, this is done simply by tapping on the content.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/ContentBrowserActivity.java
 * content}
 *
 * <p>This second code sample shows a typical implementation of a View
 * in a video playing application.  In this situation, while the video is
 * playing the application would like to go into a complete full-screen mode,
 * to use as much of the display as possible for the video.  When in this state
 * the user can not interact with the application; the system intercepts
 * touching on the screen to pop the UI out of full screen mode.  See
 * {@link #fitSystemWindows(Rect)} for a sample layout that goes with this code.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/VideoPlayerActivity.java
 * content}
 *
 * @param visibility  Bitwise-or of flags {@link #SYSTEM_UI_FLAG_LOW_PROFILE},
 * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, {@link #SYSTEM_UI_FLAG_FULLSCREEN},
 * {@link #SYSTEM_UI_FLAG_LAYOUT_STABLE}, {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION},
 * {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}, {@link #SYSTEM_UI_FLAG_IMMERSIVE},
 * and {@link #SYSTEM_UI_FLAG_IMMERSIVE_STICKY}.
 */
",1,,,0,,,0,0,0,0,0,0,"There are no changes between the early and late versions of the method. The implementations are identical in both versions, thus the code change type is 0.","As there are no changes in the implementation, there is no potential for a Compatibility Issue, thus the CI type is 0."
"<android.webkit.WebView: void onMeasure(int,int)>",18,19,"<android.webkit.WebView: void onMeasure(int,int)>","<android.webkit.WebView: void onMeasure(int,int)>",0,"{
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec);
}","{
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec);
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(super, []), Expression(widthMeasureSpec, []), Expression(heightMeasureSpec, [])]), MethodCall(mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(mProvider, []), Expression().onMeasure(widthMeasureSpec, []), Expression(heightMeasureSpec, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(super, []), Expression(widthMeasureSpec, []), Expression(heightMeasureSpec, [])])    VariableReference(super, [])    Expression(widthMeasureSpec, [])    Expression(heightMeasureSpec, [])  MethodCall(mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(mProvider, []), Expression().onMeasure(widthMeasureSpec, []), Expression(heightMeasureSpec, [])])    VariableReference(mProvider, [])    Expression().onMeasure(widthMeasureSpec, [])    Expression(heightMeasureSpec, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(super, []), Expression(widthMeasureSpec, []), Expression(heightMeasureSpec, [])]), MethodCall(mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(mProvider, []), Expression().onMeasure(widthMeasureSpec, []), Expression(heightMeasureSpec, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(super, []), Expression(widthMeasureSpec, []), Expression(heightMeasureSpec, [])])    VariableReference(super, [])    Expression(widthMeasureSpec, [])    Expression(heightMeasureSpec, [])  MethodCall(mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec), [VariableReference(mProvider, []), Expression().onMeasure(widthMeasureSpec, []), Expression(heightMeasureSpec, [])])    VariableReference(mProvider, [])    Expression().onMeasure(widthMeasureSpec, [])    Expression(heightMeasureSpec, [])  Statement(}, [])",0,,,0,"[@Deprecated, @Override]",[@Override],1,,,0,0,0,0,4,0,The only change between the early and late versions is the removal of the `@Deprecated` annotation. This falls under the category of "Other statement changed" since no changes have been made to the method implementation itself.,"Removing the `@Deprecated` annotation does not affect the method's behavior, return values, or exception handling. Therefore, there is no potential Compatibility Issue."
<android.print.PrintAttributes.MediaSize: MediaSize asPortrait()>,19,20,<android.print.PrintAttributes.MediaSize: MediaSize asPortrait()>,<android.print.PrintAttributes.MediaSize: MediaSize asPortrait()>,0,"{
    return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId);
}","{
    if (isPortrait()) {
        return this;
    }
    return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId), [VariableReference(return new MediaSize(mId, mLabel, mPackageName, Math, []), Expression(mWidthMils, []), Expression(mHeightMils), []), Expression(Math.max(mWidthMils, []), Expression(mHeightMils), []), Expression(mLabelResId, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId), [VariableReference(return new MediaSize(mId, mLabel, mPackageName, Math, []), Expression(mWidthMils, []), Expression(mHeightMils), []), Expression(Math.max(mWidthMils, []), Expression(mHeightMils), []), Expression(mLabelResId, [])])    VariableReference(return new MediaSize(mId, mLabel, mPackageName, Math, [])    Expression(mWidthMils, [])    Expression(mHeightMils), [])    Expression(Math.max(mWidthMils, [])    Expression(mHeightMils), [])    Expression(mLabelResId, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (isPortrait()) {, []), Statement(return this, []), Statement(}, []), MethodCall(return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId), [VariableReference(return new MediaSize(mId, mLabel, mPackageName, Math, []), Expression(mWidthMils, []), Expression(mHeightMils), []), Expression(Math.max(mWidthMils, []), Expression(mHeightMils), []), Expression(mLabelResId, [])]), Statement(}, [])])  Statement({, [])  Statement(if (isPortrait()) {, [])  Statement(return this, [])  Statement(}, [])  MethodCall(return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId), [VariableReference(return new MediaSize(mId, mLabel, mPackageName, Math, []), Expression(mWidthMils, []), Expression(mHeightMils), []), Expression(Math.max(mWidthMils, []), Expression(mHeightMils), []), Expression(mLabelResId, [])])    VariableReference(return new MediaSize(mId, mLabel, mPackageName, Math, [])    Expression(mWidthMils, [])    Expression(mHeightMils), [])    Expression(Math.max(mWidthMils, [])    Expression(mHeightMils), [])    Expression(mLabelResId, [])  Statement(}, [])",1,"/**
 * Returns a new media size in a portrait orientation
 * which is the height is the greater dimension.
 *
 * @return New instance in landscape orientation.
 */
","/**
 * Returns a new media size instance in a portrait orientation,
 * which is the height is the greater dimension.
 *
 * @return New instance in landscape orientation if this one
 * is in landscape, otherwise this instance.
 */
",1,,,0,,,0,"1,2","1,3",1,"1, 3",1,"An if statement has been introduced in the late version to check if the media size is already in portrait mode (`if (isPortrait()) { return this; }`). This change affects the control dependency as well as may affect which object is returned depending on the condition, so the code change type is 1, 3.","Due to the added condition, the API may return `this` when the condition `isPortrait()` is true instead of a new `MediaSize` object, potentially changing the return value based on the state of the object. Therefore, the CI type is 1."
"<android.provider.DocumentsProvider: Cursor queryRecentDocuments(String,String[])>",19,20,"<android.provider.DocumentsProvider: Cursor queryRecentDocuments(String,String[])>","<android.provider.DocumentsProvider: Cursor queryRecentDocuments(String,String[])>",0,"{
    throw new UnsupportedOperationException(""Recent not supported"");
}","{
    throw new UnsupportedOperationException(""Recent not supported"");
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""Recent not supported""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""Recent not supported""), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(""Recent not supported""), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(""Recent not supported""), [])  Statement(}, [])",0,"/**
 * Return recently modified documents under the requested root. This will
 * only be called for roots that advertise
 * {@link Root#FLAG_SUPPORTS_RECENTS}. The returned documents should be
 * sorted by {@link Document#COLUMN_LAST_MODIFIED} in descending order, and
 * limited to only return the 64 most recently modified documents.
 *
 * @param projection list of {@link Document} columns to put into the
 * cursor. If {@code null} all supported columns should be
 * included.
 * @see DocumentsContract#EXTRA_LOADING
 */
","/**
 * Return recently modified documents under the requested root. This will
 * only be called for roots that advertise
 * {@link Root#FLAG_SUPPORTS_RECENTS}. The returned documents should be
 * sorted by {@link Document#COLUMN_LAST_MODIFIED} in descending order, and
 * limited to only return the 64 most recently modified documents.
 * <p>
 * Recent documents do not support change notifications.
 *
 * @param projection list of {@link Document} columns to put into the
 * cursor. If {@code null} all supported columns should be
 * included.
 * @see DocumentsContract#EXTRA_LOADING
 */
",1,[@SuppressWarnings("unused")],[@SuppressWarnings("unused")],0,,,0,0,0,0,0,0,"There is no change in the code or the annotations between the two versions, so the code change type is 0.","Since there is no change in the implementation, no compatibility issues are introduced. Thus, the CI type is 0."
<android.app.MediaRouteActionProvider: View onCreateActionView()>,19,20,<android.app.MediaRouteActionProvider: View onCreateActionView()>,<android.app.MediaRouteActionProvider: View onCreateActionView()>,0,"{
    throw new UnsupportedOperationException(""Use onCreateActionView(MenuItem) instead."");
}","{
    throw new UnsupportedOperationException(""Use onCreateActionView(MenuItem) instead."");
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,,,0,[@Override],"[@Override, @SuppressWarnings(""deprecation"")]",1,,,0,0,0,0,0,0,There are no changes in the implementation of the method between the early and late versions.,"Since there are no changes in the method implementation, there are no compatibility issues."
<android.os.CountDownTimer: CountDownTimer start()>,20,21,<android.os.CountDownTimer: CountDownTimer start()>,<android.os.CountDownTimer: CountDownTimer start()>,0,"{
    if (mMillisInFuture <= 0) {
        onFinish();
        return this;
    }
    mStopTimeInFuture = SystemClock.elapsedRealtime() + mMillisInFuture;
    mHandler.sendMessage(mHandler.obtainMessage(MSG));
    return this;
}","{
    mCancelled = false;
    if (mMillisInFuture <= 0) {
        onFinish();
        return this;
    }
    mStopTimeInFuture = SystemClock.elapsedRealtime() + mMillisInFuture;
    mHandler.sendMessage(mHandler.obtainMessage(MSG));
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mMillisInFuture <, []), Expression(0) {, [])]), Statement(onFinish(), []), Statement(return this, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mStopTimeInFuture, []), Expression(SystemClock.elapsedRealtime() + mMillisInFuture, [])]), MethodCall(mHandler.sendMessage(mHandler.obtainMessage(MSG)), [VariableReference(mHandler, []), Expression(mHandler.obtainMessage(MSG), [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mMillisInFuture <, []), Expression(0) {, [])])    VariableReference(if (mMillisInFuture <, [])    Expression(0) {, [])  Statement(onFinish(), [])  Statement(return this, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mStopTimeInFuture, []), Expression(SystemClock.elapsedRealtime() + mMillisInFuture, [])])    VariableReference(mStopTimeInFuture, [])    Expression(SystemClock.elapsedRealtime() + mMillisInFuture, [])  MethodCall(mHandler.sendMessage(mHandler.obtainMessage(MSG)), [VariableReference(mHandler, []), Expression(mHandler.obtainMessage(MSG), [])])    VariableReference(mHandler, [])    Expression(mHandler.obtainMessage(MSG), [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mCancelled, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(if (mMillisInFuture <, []), Expression(0) {, [])]), Statement(onFinish(), []), Statement(return this, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mStopTimeInFuture, []), Expression(SystemClock.elapsedRealtime() + mMillisInFuture, [])]), MethodCall(mHandler.sendMessage(mHandler.obtainMessage(MSG)), [VariableReference(mHandler, []), Expression(mHandler.obtainMessage(MSG), [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mCancelled, []), Expression(false, [])])    VariableReference(mCancelled, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(if (mMillisInFuture <, []), Expression(0) {, [])])    VariableReference(if (mMillisInFuture <, [])    Expression(0) {, [])  Statement(onFinish(), [])  Statement(return this, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mStopTimeInFuture, []), Expression(SystemClock.elapsedRealtime() + mMillisInFuture, [])])    VariableReference(mStopTimeInFuture, [])    Expression(SystemClock.elapsedRealtime() + mMillisInFuture, [])  MethodCall(mHandler.sendMessage(mHandler.obtainMessage(MSG)), [VariableReference(mHandler, []), Expression(mHandler.obtainMessage(MSG), [])])    VariableReference(mHandler, [])    Expression(mHandler.obtainMessage(MSG), [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Start the countdown.
 */
","/**
 * Start the countdown.
 */
",0,,,0,,,0,1,4,0,4,0,"A new statement `mCancelled = false;` has been added at the start of the method, which doesn't directly affect the return value or exception handling of the API, so the code change type is 4.","The added statement initializes the `mCancelled` variable to false but it doesn't affect the return value or exception handling of the API directly, so the CI type is 0 (no compatibility issue)."
<android.service.dreams.DreamService: boolean isScreenBright()>,20,21,<android.service.dreams.DreamService: boolean isScreenBright()>,<android.service.dreams.DreamService: boolean isScreenBright()>,0,"{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}","{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * Returns whether or not this dream keeps the screen bright while dreaming. Defaults to false,
 * allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
","/**
 * Returns whether or not this dream keeps the screen bright while dreaming.
 * Defaults to false, allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early and late implementations based on the given code and AST nodes.,No potential compatibility issues as there are no code changes.
"<android.app.Activity: Dialog onCreateDialog(int,Bundle)>",20,21,"<android.app.Activity: Dialog onCreateDialog(int,Bundle)>","<android.app.Activity: Dialog onCreateDialog(int,Bundle)>",0,"{
    return onCreateDialog(id);
}","{
    return onCreateDialog(id);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return onCreateDialog(id), []), Statement(}, [])])  Statement({, [])  Statement(return onCreateDialog(id), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return onCreateDialog(id), []), Statement(}, [])])  Statement({, [])  Statement(return onCreateDialog(id), [])  Statement(}, [])",0,"/**
 * Callback for creating dialogs that are managed (saved and restored) for you
 * by the activity.  The default implementation calls through to
 * {@link #onCreateDialog(int)} for compatibility.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>If you use {@link #showDialog(int)}, the activity will call through to
 * this method the first time, and hang onto it thereafter.  Any dialog
 * that is created by this method will automatically be saved and restored
 * for you, including whether it is showing.
 *
 * <p>If you would like the activity to manage saving and restoring dialogs
 * for you, you should override this method and handle any ids that are
 * passed to {@link #showDialog}.
 *
 * <p>If you would like an opportunity to prepare your dialog before it is shown,
 * override {@link #onPrepareDialog(int, Dialog, Bundle)}.
 *
 * @param id The id of the dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @return The dialog.  If you return null, the dialog will not be created.
 *
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
","/**
 * Callback for creating dialogs that are managed (saved and restored) for you
 * by the activity.  The default implementation calls through to
 * {@link #onCreateDialog(int)} for compatibility.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>If you use {@link #showDialog(int)}, the activity will call through to
 * this method the first time, and hang onto it thereafter.  Any dialog
 * that is created by this method will automatically be saved and restored
 * for you, including whether it is showing.
 *
 * <p>If you would like the activity to manage saving and restoring dialogs
 * for you, you should override this method and handle any ids that are
 * passed to {@link #showDialog}.
 *
 * <p>If you would like an opportunity to prepare your dialog before it is shown,
 * override {@link #onPrepareDialog(int, Dialog, Bundle)}.
 *
 * @param id The id of the dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @return The dialog.  If you return null, the dialog will not be created.
 *
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
",0,[@Deprecated],"[@Nullable, @Deprecated]",1,,,0,0,0,0,4,0,"The only change is the addition of the @Nullable annotation in the late version, so the code change type is 4.","The addition of the @Nullable annotation does not affect the method's runtime behavior, so the CI type is 0."
<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,21,22,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,0,"{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            drawFrame(mSurfaceTexture, holder.width, holder.height);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}","{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])]), Statement(checkGlError(""before updateTexImage""), []), Statement(if (doTiming) {, []), Statement(beginGlTiming(), []), Statement(}, []), MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])]), AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])]), Statement(// No preview request queued, drop frame., []), AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])]), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])]), Statement(}, []), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])]), AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])]), Statement(if (doTiming) {, []), Statement(addGlTimestamp(timestamp), []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])]), Statement(for (EGLSurfaceHolder holder : mSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(try {, []), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])]), Statement(0, /*y*/, []), Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), []), Statement(checkGlError(""glReadPixels""), []), Statement(try {, []), AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])]), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])])    VariableReference(if ((mSurfaces, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])])    VariableReference(boolean doTiming, [])    Expression(targetCollector.hasPendingPreviewCaptures(), [])  Statement(checkGlError(""before updateTexImage""), [])  Statement(if (doTiming) {, [])  Statement(beginGlTiming(), [])  Statement(}, [])  MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])])    VariableReference(mSurfaceTexture, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])])    VariableReference(long timestamp, [])    Expression(mSurfaceTexture.getTimestamp(), [])  AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])])    VariableReference(Pair<RequestHolder, Long> captureHolder, [])    Expression(targetCollector.previewCaptured(timestamp), [])  Statement(// No preview request queued, drop frame., [])  AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])])    VariableReference(if (captureHolder, [])    Expression(, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Dropping preview frame."", [])  Statement(}, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])])    VariableReference(RequestHolder request, [])    Expression(captureHolder.first, [])  AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])])    VariableReference(Collection<Surface> targetSurfaces, [])    Expression(request.getHolderTargets(), [])  Statement(if (doTiming) {, [])  Statement(addGlTimestamp(timestamp), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])])    VariableReference(List<Long> targetSurfaceIds, [])    Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])  Statement(for (EGLSurfaceHolder holder : mSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(try {, [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])])    VariableReference(mPBufferPixels, [])    Expression(, [])  Statement(0, /*y*/, [])  Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), [])  Statement(checkGlError(""glReadPixels""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])])    VariableReference(int format, [])    Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(mPBufferPixels.array(), [])    Expression(holder.width, [])    Expression(holder.height, [])    Expression(format, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])])    VariableReference(targetCollector, [])    Expression(, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])]), Statement(checkGlError(""before updateTexImage""), []), Statement(if (doTiming) {, []), Statement(beginGlTiming(), []), Statement(}, []), MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])]), AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])]), Statement(// No preview request queued, drop frame., []), AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])]), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])]), Statement(}, []), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])]), AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])]), Statement(if (doTiming) {, []), Statement(addGlTimestamp(timestamp), []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])]), Statement(for (EGLSurfaceHolder holder : mSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(try {, []), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, []), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])]), Statement(0, /*y*/, []), Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), []), Statement(checkGlError(""glReadPixels""), []), Statement(try {, []), AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])]), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])]), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])])    VariableReference(if ((mSurfaces, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])])    VariableReference(boolean doTiming, [])    Expression(targetCollector.hasPendingPreviewCaptures(), [])  Statement(checkGlError(""before updateTexImage""), [])  Statement(if (doTiming) {, [])  Statement(beginGlTiming(), [])  Statement(}, [])  MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])])    VariableReference(mSurfaceTexture, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])])    VariableReference(long timestamp, [])    Expression(mSurfaceTexture.getTimestamp(), [])  AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])])    VariableReference(Pair<RequestHolder, Long> captureHolder, [])    Expression(targetCollector.previewCaptured(timestamp), [])  Statement(// No preview request queued, drop frame., [])  AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])])    VariableReference(if (captureHolder, [])    Expression(, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Dropping preview frame."", [])  Statement(}, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])])    VariableReference(RequestHolder request, [])    Expression(captureHolder.first, [])  AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])])    VariableReference(Collection<Surface> targetSurfaces, [])    Expression(request.getHolderTargets(), [])  Statement(if (doTiming) {, [])  Statement(addGlTimestamp(timestamp), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])])    VariableReference(List<Long> targetSurfaceIds, [])    Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])  Statement(for (EGLSurfaceHolder holder : mSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(try {, [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])])    VariableReference(mPBufferPixels, [])    Expression(, [])  Statement(0, /*y*/, [])  Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), [])  Statement(checkGlError(""glReadPixels""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])])    VariableReference(int format, [])    Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(mPBufferPixels.array(), [])    Expression(holder.width, [])    Expression(holder.height, [])    Expression(format, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])])    VariableReference(targetCollector, [])    Expression(, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
","/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
",0,,,0,,,0,"1,2","4,5",0,"3,5",1,"The code changes involved several control dependency modifications including additional parameters to the `drawFrame` method and the function call sequence, which may result in changes to output values. These come under type 3 and 5 changes.","The changes in control statements and dependent API (method parameters) may result in the API returning different values or rendering outputs differently, potentially causing a change in behavior. Thus, the CI type is 1."
"<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>",21,22,"<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>","<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>",0,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    return new Future2Task<Boolean>(handler, callback) {

        public void doWork() throws RemoteException {
            mService.removeAccount(mResponse, account);
        }

        public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {
            if (!bundle.containsKey(KEY_BOOLEAN_RESULT)) {
                throw new AuthenticatorException(""no result in response"");
            }
            return bundle.getBoolean(KEY_BOOLEAN_RESULT);
        }
    }.start();
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    return new Future2Task<Boolean>(handler, callback) {

        public void doWork() throws RemoteException {
            mService.removeAccount(mResponse, account, false);
        }

        public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {
            if (!bundle.containsKey(KEY_BOOLEAN_RESULT)) {
                throw new AuthenticatorException(""no result in response"");
            }
            return bundle.getBoolean(KEY_BOOLEAN_RESULT);
        }
    }.start();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), Statement(return new Future2Task<Boolean>(handler, callback) {, []), Statement(public void doWork() throws RemoteException {, []), MethodCall(mService.removeAccount(mResponse, account), [VariableReference(mService, []), Expression(mResponse, []), Expression(account, [])]), Statement(}, []), Statement(public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {, []), MethodCall(if (!bundle.containsKey(KEY_BOOLEAN_RESULT)), [VariableReference(if (!bundle, []), Expression(KEY_BOOLEAN_RESULT), [])]), Statement(throw new AuthenticatorException(""no result in response""), []), Statement(}, []), MethodCall(return bundle.getBoolean(KEY_BOOLEAN_RESULT), [VariableReference(return bundle, []), Expression(KEY_BOOLEAN_RESULT, [])]), Statement(}, []), MethodCall(}.start(), [VariableReference(}, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  Statement(return new Future2Task<Boolean>(handler, callback) {, [])  Statement(public void doWork() throws RemoteException {, [])  MethodCall(mService.removeAccount(mResponse, account), [VariableReference(mService, []), Expression(mResponse, []), Expression(account, [])])    VariableReference(mService, [])    Expression(mResponse, [])    Expression(account, [])  Statement(}, [])  Statement(public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {, [])  MethodCall(if (!bundle.containsKey(KEY_BOOLEAN_RESULT)), [VariableReference(if (!bundle, []), Expression(KEY_BOOLEAN_RESULT), [])])    VariableReference(if (!bundle, [])    Expression(KEY_BOOLEAN_RESULT), [])  Statement(throw new AuthenticatorException(""no result in response""), [])  Statement(}, [])  MethodCall(return bundle.getBoolean(KEY_BOOLEAN_RESULT), [VariableReference(return bundle, []), Expression(KEY_BOOLEAN_RESULT, [])])    VariableReference(return bundle, [])    Expression(KEY_BOOLEAN_RESULT, [])  Statement(}, [])  MethodCall(}.start(), [VariableReference(}, []), Expression(, [])])    VariableReference(}, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), Statement(return new Future2Task<Boolean>(handler, callback) {, []), Statement(public void doWork() throws RemoteException {, []), MethodCall(mService.removeAccount(mResponse, account, false), [VariableReference(mService, []), Expression(mResponse, []), Expression(account, []), Expression(false, [])]), Statement(}, []), Statement(public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {, []), MethodCall(if (!bundle.containsKey(KEY_BOOLEAN_RESULT)), [VariableReference(if (!bundle, []), Expression(KEY_BOOLEAN_RESULT), [])]), Statement(throw new AuthenticatorException(""no result in response""), []), Statement(}, []), MethodCall(return bundle.getBoolean(KEY_BOOLEAN_RESULT), [VariableReference(return bundle, []), Expression(KEY_BOOLEAN_RESULT, [])]), Statement(}, []), MethodCall(}.start(), [VariableReference(}, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  Statement(return new Future2Task<Boolean>(handler, callback) {, [])  Statement(public void doWork() throws RemoteException {, [])  MethodCall(mService.removeAccount(mResponse, account, false), [VariableReference(mService, []), Expression(mResponse, []), Expression(account, []), Expression(false, [])])    VariableReference(mService, [])    Expression(mResponse, [])    Expression(account, [])    Expression(false, [])  Statement(}, [])  Statement(public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {, [])  MethodCall(if (!bundle.containsKey(KEY_BOOLEAN_RESULT)), [VariableReference(if (!bundle, []), Expression(KEY_BOOLEAN_RESULT), [])])    VariableReference(if (!bundle, [])    Expression(KEY_BOOLEAN_RESULT), [])  Statement(throw new AuthenticatorException(""no result in response""), [])  Statement(}, [])  MethodCall(return bundle.getBoolean(KEY_BOOLEAN_RESULT), [VariableReference(return bundle, []), Expression(KEY_BOOLEAN_RESULT, [])])    VariableReference(return bundle, [])    Expression(KEY_BOOLEAN_RESULT, [])  Statement(}, [])  MethodCall(}.start(), [VariableReference(}, []), Expression(, [])])    VariableReference(}, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 */
","/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 * @deprecated use
 * {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
",1,,[@Deprecated],1,,,0,"1,2",5,0,"3,4,5",1,"In the late implementation, the `doWork` method of `Future2Task` includes an additional parameter `false` in the method call `mService.removeAccount(mResponse, account, false)`. This is a dependent API change because the method definition of `removeAccount` in `mService` is changed. Also, the annotation has changed, with the late version adding the `@Deprecated` annotation.","The addition of the `false` parameter in the `mService.removeAccount` call can lead to different behavior, potentially causing the API to return different values. Hence, the CI type is 1."
<android.widget.TextView: void setExtractedText(ExtractedText)>,22,23,<android.widget.TextView: void setExtractedText(ExtractedText)>,<android.widget.TextView: void setExtractedText(ExtractedText)>,0,"{
    Editable content = getEditableText();
    if (text.text != null) {
        if (content == null) {
            setText(text.text, TextView.BufferType.EDITABLE);
        } else if (text.partialStartOffset < 0) {
            removeParcelableSpans(content, 0, content.length());
            content.replace(0, content.length(), text.text);
        } else {
            final int N = content.length();
            int start = text.partialStartOffset;
            if (start > N)
                start = N;
            int end = text.partialEndOffset;
            if (end > N)
                end = N;
            removeParcelableSpans(content, start, end);
            content.replace(start, end, text.text);
        }
    }
    // Now set the selection position...  make sure it is in range, to
    // avoid crashes.  If this is a partial update, it is possible that
    // the underlying text may have changed, causing us problems here.
    // Also we just don't want to trust clients to do the right thing.
    Spannable sp = (Spannable) getText();
    final int N = sp.length();
    int start = text.selectionStart;
    if (start < 0)
        start = 0;
    else if (start > N)
        start = N;
    int end = text.selectionEnd;
    if (end < 0)
        end = 0;
    else if (end > N)
        end = N;
    Selection.setSelection(sp, start, end);
    // Finally, update the selection mode.
    if ((text.flags & ExtractedText.FLAG_SELECTING) != 0) {
        MetaKeyKeyListener.startSelecting(this, sp);
    } else {
        MetaKeyKeyListener.stopSelecting(this, sp);
    }
}","{
    Editable content = getEditableText();
    if (text.text != null) {
        if (content == null) {
            setText(text.text, TextView.BufferType.EDITABLE);
        } else {
            int start = 0;
            int end = content.length();
            if (text.partialStartOffset >= 0) {
                final int N = content.length();
                start = text.partialStartOffset;
                if (start > N)
                    start = N;
                end = text.partialEndOffset;
                if (end > N)
                    end = N;
            }
            removeParcelableSpans(content, start, end);
            if (TextUtils.equals(content.subSequence(start, end), text.text)) {
                if (text.text instanceof Spanned) {
                    // OK to copy spans only.
                    TextUtils.copySpansFrom((Spanned) text.text, start, end, Object.class, content, start);
                }
            } else {
                content.replace(start, end, text.text);
            }
        }
    }
    // Now set the selection position...  make sure it is in range, to
    // avoid crashes.  If this is a partial update, it is possible that
    // the underlying text may have changed, causing us problems here.
    // Also we just don't want to trust clients to do the right thing.
    Spannable sp = (Spannable) getText();
    final int N = sp.length();
    int start = text.selectionStart;
    if (start < 0)
        start = 0;
    else if (start > N)
        start = N;
    int end = text.selectionEnd;
    if (end < 0)
        end = 0;
    else if (end > N)
        end = N;
    Selection.setSelection(sp, start, end);
    // Finally, update the selection mode.
    if ((text.flags & ExtractedText.FLAG_SELECTING) != 0) {
        MetaKeyKeyListener.startSelecting(this, sp);
    } else {
        MetaKeyKeyListener.stopSelecting(this, sp);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Editable content, []), Expression(getEditableText(), [])]), AssignmentExpression(=, [VariableReference(if (text.text !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (content, []), Expression(, [])]), MethodCall(removeParcelableSpans(content, 0, content.length()), [VariableReference(removeParcelableSpans(content, 0, content, []), Expression(), [])]), MethodCall(content.replace(0, content.length(), text.text), [VariableReference(content, []), Expression(0, []), Expression(content.length(), []), Expression(text.text, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(final int N, []), Expression(content.length(), [])]), AssignmentExpression(=, [VariableReference(int start, []), Expression(text.partialStartOffset, [])]), Statement(if (start > N), []), AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(int end, []), Expression(text.partialEndOffset, [])]), Statement(if (end > N), []), AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])]), Statement(removeParcelableSpans(content, start, end), []), MethodCall(content.replace(start, end, text.text), [VariableReference(content, []), Expression(start, []), Expression(end, []), Expression(text.text, [])]), Statement(}, []), Statement(}, []), Statement(// Now set the selection position...  make sure it is in range, to, []), Statement(// avoid crashes.  If this is a partial update, it is possible that, []), Statement(// the underlying text may have changed, causing us problems here., []), Statement(// Also we just don't want to trust clients to do the right thing., []), AssignmentExpression(=, [VariableReference(Spannable sp, []), Expression((Spannable) getText(), [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(sp.length(), [])]), AssignmentExpression(=, [VariableReference(int start, []), Expression(text.selectionStart, [])]), Statement(if (start < 0), []), AssignmentExpression(=, [VariableReference(start, []), Expression(0, [])]), Statement(else if (start > N), []), AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(int end, []), Expression(text.selectionEnd, [])]), Statement(if (end < 0), []), AssignmentExpression(=, [VariableReference(end, []), Expression(0, [])]), Statement(else if (end > N), []), AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])]), MethodCall(Selection.setSelection(sp, start, end), [VariableReference(Selection, []), Expression(sp, []), Expression(start, []), Expression(end, [])]), Statement(// Finally, update the selection mode., []), AssignmentExpression(=, [VariableReference(if ((text.flags & ExtractedText.FLAG_SELECTING) !, []), Expression(0) {, [])]), MethodCall(MetaKeyKeyListener.startSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])]), Statement(} else {, []), MethodCall(MetaKeyKeyListener.stopSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Editable content, []), Expression(getEditableText(), [])])    VariableReference(Editable content, [])    Expression(getEditableText(), [])  AssignmentExpression(=, [VariableReference(if (text.text !, []), Expression(null) {, [])])    VariableReference(if (text.text !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (content, []), Expression(, [])])    VariableReference(if (content, [])    Expression(, [])  MethodCall(removeParcelableSpans(content, 0, content.length()), [VariableReference(removeParcelableSpans(content, 0, content, []), Expression(), [])])    VariableReference(removeParcelableSpans(content, 0, content, [])    Expression(), [])  MethodCall(content.replace(0, content.length(), text.text), [VariableReference(content, []), Expression(0, []), Expression(content.length(), []), Expression(text.text, [])])    VariableReference(content, [])    Expression(0, [])    Expression(content.length(), [])    Expression(text.text, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(content.length(), [])])    VariableReference(final int N, [])    Expression(content.length(), [])  AssignmentExpression(=, [VariableReference(int start, []), Expression(text.partialStartOffset, [])])    VariableReference(int start, [])    Expression(text.partialStartOffset, [])  Statement(if (start > N), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])])    VariableReference(start, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(int end, []), Expression(text.partialEndOffset, [])])    VariableReference(int end, [])    Expression(text.partialEndOffset, [])  Statement(if (end > N), [])  AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])])    VariableReference(end, [])    Expression(N, [])  Statement(removeParcelableSpans(content, start, end), [])  MethodCall(content.replace(start, end, text.text), [VariableReference(content, []), Expression(start, []), Expression(end, []), Expression(text.text, [])])    VariableReference(content, [])    Expression(start, [])    Expression(end, [])    Expression(text.text, [])  Statement(}, [])  Statement(}, [])  Statement(// Now set the selection position...  make sure it is in range, to, [])  Statement(// avoid crashes.  If this is a partial update, it is possible that, [])  Statement(// the underlying text may have changed, causing us problems here., [])  Statement(// Also we just don't want to trust clients to do the right thing., [])  AssignmentExpression(=, [VariableReference(Spannable sp, []), Expression((Spannable) getText(), [])])    VariableReference(Spannable sp, [])    Expression((Spannable) getText(), [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(sp.length(), [])])    VariableReference(final int N, [])    Expression(sp.length(), [])  AssignmentExpression(=, [VariableReference(int start, []), Expression(text.selectionStart, [])])    VariableReference(int start, [])    Expression(text.selectionStart, [])  Statement(if (start < 0), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(0, [])])    VariableReference(start, [])    Expression(0, [])  Statement(else if (start > N), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])])    VariableReference(start, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(int end, []), Expression(text.selectionEnd, [])])    VariableReference(int end, [])    Expression(text.selectionEnd, [])  Statement(if (end < 0), [])  AssignmentExpression(=, [VariableReference(end, []), Expression(0, [])])    VariableReference(end, [])    Expression(0, [])  Statement(else if (end > N), [])  AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])])    VariableReference(end, [])    Expression(N, [])  MethodCall(Selection.setSelection(sp, start, end), [VariableReference(Selection, []), Expression(sp, []), Expression(start, []), Expression(end, [])])    VariableReference(Selection, [])    Expression(sp, [])    Expression(start, [])    Expression(end, [])  Statement(// Finally, update the selection mode., [])  AssignmentExpression(=, [VariableReference(if ((text.flags & ExtractedText.FLAG_SELECTING) !, []), Expression(0) {, [])])    VariableReference(if ((text.flags & ExtractedText.FLAG_SELECTING) !, [])    Expression(0) {, [])  MethodCall(MetaKeyKeyListener.startSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])])    VariableReference(MetaKeyKeyListener, [])    Expression(this, [])    Expression(sp, [])  Statement(} else {, [])  MethodCall(MetaKeyKeyListener.stopSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])])    VariableReference(MetaKeyKeyListener, [])    Expression(this, [])    Expression(sp, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Editable content, []), Expression(getEditableText(), [])]), AssignmentExpression(=, [VariableReference(if (text.text !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (content, []), Expression(, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(int start, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(int end, []), Expression(content.length(), [])]), AssignmentExpression(=, [VariableReference(if (text.partialStartOffset >, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(content.length(), [])]), AssignmentExpression(=, [VariableReference(start, []), Expression(text.partialStartOffset, [])]), Statement(if (start > N), []), AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(end, []), Expression(text.partialEndOffset, [])]), Statement(if (end > N), []), AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])]), Statement(}, []), Statement(removeParcelableSpans(content, start, end), []), MethodCall(if (TextUtils.equals(content.subSequence(start, end), text.text)), [VariableReference(if (TextUtils, []), Expression(content.subSequence(start, []), Expression(end), []), Expression(text.text), [])]), Statement(// OK to copy spans only., []), MethodCall(TextUtils.copySpansFrom((Spanned) text.text, start, end, Object.class, content, start), [VariableReference(TextUtils, []), Expression((Spanned) text.text, []), Expression(start, []), Expression(end, []), Expression(Object.class, []), Expression(content, []), Expression(start, [])]), Statement(}, []), Statement(} else {, []), MethodCall(content.replace(start, end, text.text), [VariableReference(content, []), Expression(start, []), Expression(end, []), Expression(text.text, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(// Now set the selection position...  make sure it is in range, to, []), Statement(// avoid crashes.  If this is a partial update, it is possible that, []), Statement(// the underlying text may have changed, causing us problems here., []), Statement(// Also we just don't want to trust clients to do the right thing., []), AssignmentExpression(=, [VariableReference(Spannable sp, []), Expression((Spannable) getText(), [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(sp.length(), [])]), AssignmentExpression(=, [VariableReference(int start, []), Expression(text.selectionStart, [])]), Statement(if (start < 0), []), AssignmentExpression(=, [VariableReference(start, []), Expression(0, [])]), Statement(else if (start > N), []), AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])]), AssignmentExpression(=, [VariableReference(int end, []), Expression(text.selectionEnd, [])]), Statement(if (end < 0), []), AssignmentExpression(=, [VariableReference(end, []), Expression(0, [])]), Statement(else if (end > N), []), AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])]), MethodCall(Selection.setSelection(sp, start, end), [VariableReference(Selection, []), Expression(sp, []), Expression(start, []), Expression(end, [])]), Statement(// Finally, update the selection mode., []), AssignmentExpression(=, [VariableReference(if ((text.flags & ExtractedText.FLAG_SELECTING) !, []), Expression(0) {, [])]), MethodCall(MetaKeyKeyListener.startSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])]), Statement(} else {, []), MethodCall(MetaKeyKeyListener.stopSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Editable content, []), Expression(getEditableText(), [])])    VariableReference(Editable content, [])    Expression(getEditableText(), [])  AssignmentExpression(=, [VariableReference(if (text.text !, []), Expression(null) {, [])])    VariableReference(if (text.text !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (content, []), Expression(, [])])    VariableReference(if (content, [])    Expression(, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(int start, []), Expression(0, [])])    VariableReference(int start, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(int end, []), Expression(content.length(), [])])    VariableReference(int end, [])    Expression(content.length(), [])  AssignmentExpression(=, [VariableReference(if (text.partialStartOffset >, []), Expression(0) {, [])])    VariableReference(if (text.partialStartOffset >, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(content.length(), [])])    VariableReference(final int N, [])    Expression(content.length(), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(text.partialStartOffset, [])])    VariableReference(start, [])    Expression(text.partialStartOffset, [])  Statement(if (start > N), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])])    VariableReference(start, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(end, []), Expression(text.partialEndOffset, [])])    VariableReference(end, [])    Expression(text.partialEndOffset, [])  Statement(if (end > N), [])  AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])])    VariableReference(end, [])    Expression(N, [])  Statement(}, [])  Statement(removeParcelableSpans(content, start, end), [])  MethodCall(if (TextUtils.equals(content.subSequence(start, end), text.text)), [VariableReference(if (TextUtils, []), Expression(content.subSequence(start, []), Expression(end), []), Expression(text.text), [])])    VariableReference(if (TextUtils, [])    Expression(content.subSequence(start, [])    Expression(end), [])    Expression(text.text), [])  Statement(// OK to copy spans only., [])  MethodCall(TextUtils.copySpansFrom((Spanned) text.text, start, end, Object.class, content, start), [VariableReference(TextUtils, []), Expression((Spanned) text.text, []), Expression(start, []), Expression(end, []), Expression(Object.class, []), Expression(content, []), Expression(start, [])])    VariableReference(TextUtils, [])    Expression((Spanned) text.text, [])    Expression(start, [])    Expression(end, [])    Expression(Object.class, [])    Expression(content, [])    Expression(start, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(content.replace(start, end, text.text), [VariableReference(content, []), Expression(start, []), Expression(end, []), Expression(text.text, [])])    VariableReference(content, [])    Expression(start, [])    Expression(end, [])    Expression(text.text, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(// Now set the selection position...  make sure it is in range, to, [])  Statement(// avoid crashes.  If this is a partial update, it is possible that, [])  Statement(// the underlying text may have changed, causing us problems here., [])  Statement(// Also we just don't want to trust clients to do the right thing., [])  AssignmentExpression(=, [VariableReference(Spannable sp, []), Expression((Spannable) getText(), [])])    VariableReference(Spannable sp, [])    Expression((Spannable) getText(), [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(sp.length(), [])])    VariableReference(final int N, [])    Expression(sp.length(), [])  AssignmentExpression(=, [VariableReference(int start, []), Expression(text.selectionStart, [])])    VariableReference(int start, [])    Expression(text.selectionStart, [])  Statement(if (start < 0), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(0, [])])    VariableReference(start, [])    Expression(0, [])  Statement(else if (start > N), [])  AssignmentExpression(=, [VariableReference(start, []), Expression(N, [])])    VariableReference(start, [])    Expression(N, [])  AssignmentExpression(=, [VariableReference(int end, []), Expression(text.selectionEnd, [])])    VariableReference(int end, [])    Expression(text.selectionEnd, [])  Statement(if (end < 0), [])  AssignmentExpression(=, [VariableReference(end, []), Expression(0, [])])    VariableReference(end, [])    Expression(0, [])  Statement(else if (end > N), [])  AssignmentExpression(=, [VariableReference(end, []), Expression(N, [])])    VariableReference(end, [])    Expression(N, [])  MethodCall(Selection.setSelection(sp, start, end), [VariableReference(Selection, []), Expression(sp, []), Expression(start, []), Expression(end, [])])    VariableReference(Selection, [])    Expression(sp, [])    Expression(start, [])    Expression(end, [])  Statement(// Finally, update the selection mode., [])  AssignmentExpression(=, [VariableReference(if ((text.flags & ExtractedText.FLAG_SELECTING) !, []), Expression(0) {, [])])    VariableReference(if ((text.flags & ExtractedText.FLAG_SELECTING) !, [])    Expression(0) {, [])  MethodCall(MetaKeyKeyListener.startSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])])    VariableReference(MetaKeyKeyListener, [])    Expression(this, [])    Expression(sp, [])  Statement(} else {, [])  MethodCall(MetaKeyKeyListener.stopSelecting(this, sp), [VariableReference(MetaKeyKeyListener, []), Expression(this, []), Expression(sp, [])])    VariableReference(MetaKeyKeyListener, [])    Expression(this, [])    Expression(sp, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Apply to this text view the given extracted text, as previously
 * returned by {@link #extractText(ExtractedTextRequest, ExtractedText)}.
 */
","/**
 * Apply to this text view the given extracted text, as previously
 * returned by {@link #extractText(ExtractedTextRequest, ExtractedText)}.
 */
",0,,,0,,,0,"1,2","3,4,5",0,"3,4",0,"The implementation changed the handling of partial spans and the conditions under which text replacement occurs. In the early version, for partial updates, the code explicitly removes spans and replaces text. In the late version, it first compares the text sequences before deciding to remove spans or copy spans if the sequences match, and then replaces the text if needed. This constitutes a change in control dependency and other statements.","Despite the code changes, the final return value and functionality to set the extracted text, update the selection position, and the selection mode update do not show evidence of returning different values or throwing exceptions differently. The behaviour's change is internal and does not result in different outcomes observable from an API usage perspective. Therefore, no compatibility issue is foreseen."
<android.net.Uri: Uri normalizeScheme()>,22,23,<android.net.Uri: Uri normalizeScheme()>,<android.net.Uri: Uri normalizeScheme()>,0,"{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}","{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])]), Statement(// give up, []), AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])]), Statement(return this, []), AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])]), Statement(// no change, []), MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])]), Statement(return this, []), MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])])    VariableReference(String scheme, [])    Expression(getScheme(), [])  Statement(// give up, [])  AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])])    VariableReference(if (scheme, [])    Expression(, [])  Statement(return this, [])  AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])])    VariableReference(String lowerScheme, [])    Expression(scheme.toLowerCase(Locale.ROOT), [])  Statement(// no change, [])  MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])])    VariableReference(if (scheme, [])    Expression(lowerScheme), [])  Statement(return this, [])  MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])])    VariableReference(return buildUpon(), [])    Expression(lowerScheme).build(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])]), Statement(// give up, []), AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])]), Statement(return this, []), AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])]), Statement(// no change, []), MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])]), Statement(return this, []), MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])])    VariableReference(String scheme, [])    Expression(getScheme(), [])  Statement(// give up, [])  AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])])    VariableReference(if (scheme, [])    Expression(, [])  Statement(return this, [])  AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])])    VariableReference(String lowerScheme, [])    Expression(scheme.toLowerCase(Locale.ROOT), [])  Statement(// no change, [])  MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])])    VariableReference(if (scheme, [])    Expression(lowerScheme), [])  Statement(return this, [])  MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])])    VariableReference(return buildUpon(), [])    Expression(lowerScheme).build(, [])  Statement(}, [])",0,"/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see {@link android.content.Intent#setData}
 * @see {@link #setNormalizedData}
 */
","/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see {@link android.content.Intent#setData}
 * @see {@link android.content.Intent#setDataAndNormalize}
 */
",1,,,0,,,0,0,0,0,0,0,There is no change between the early and late implementations of the method. The method body in both versions is identical.,No compatibility issues are expected as the implementation has not changed between the two versions.
"<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>",22,23,"<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>","<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>",0,"{
    mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras);
}","{
    mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras);
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras), [VariableReference(mBase, []), Expression(intent, []), Expression(user, []), Expression(resultReceiver, []), Expression(scheduler, []), Expression(initialCode, []), Expression(initialData, []), Expression(initialExtras, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras), [VariableReference(mBase, []), Expression(intent, []), Expression(user, []), Expression(resultReceiver, []), Expression(scheduler, []), Expression(initialCode, []), Expression(initialData, []), Expression(initialExtras, [])])    VariableReference(mBase, [])    Expression(intent, [])    Expression(user, [])    Expression(resultReceiver, [])    Expression(scheduler, [])    Expression(initialCode, [])    Expression(initialData, [])    Expression(initialExtras, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras), [VariableReference(mBase, []), Expression(intent, []), Expression(user, []), Expression(resultReceiver, []), Expression(scheduler, []), Expression(initialCode, []), Expression(initialData, []), Expression(initialExtras, [])]), Statement(}, [])])  Statement({, [])  MethodCall(mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras), [VariableReference(mBase, []), Expression(intent, []), Expression(user, []), Expression(resultReceiver, []), Expression(scheduler, []), Expression(initialCode, []), Expression(initialData, []), Expression(initialExtras, [])])    VariableReference(mBase, [])    Expression(intent, [])    Expression(user, [])    Expression(resultReceiver, [])    Expression(scheduler, [])    Expression(initialCode, [])    Expression(initialData, [])    Expression(initialExtras, [])  Statement(}, [])",0,,,0,[@Override],"[@Override, @Deprecated]",1,,,0,0,0,0,4,0,"The only change between the two versions is the addition of the @Deprecated annotation in the late version, so the change type is 4.","The change does not affect the runtime behavior of the API. Therefore, no Compatibility Issues arise from this change."
<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,23,24,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,0,"{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}","{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = new ArrayList();
    try {
        targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
        Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
        request.setOutputAbandoned();
    }
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])]), Statement(checkGlError(""before updateTexImage""), []), Statement(if (doTiming) {, []), Statement(beginGlTiming(), []), Statement(}, []), MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])]), AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])]), Statement(// No preview request queued, drop frame., []), AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])]), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])]), Statement(}, []), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])]), AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])]), Statement(if (doTiming) {, []), Statement(addGlTimestamp(timestamp), []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])]), Statement(for (EGLSurfaceHolder holder : mSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(try {, []), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, []), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])]), Statement(0, /*y*/, []), Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), []), Statement(checkGlError(""glReadPixels""), []), Statement(try {, []), AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])]), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])]), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])])    VariableReference(if ((mSurfaces, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])])    VariableReference(boolean doTiming, [])    Expression(targetCollector.hasPendingPreviewCaptures(), [])  Statement(checkGlError(""before updateTexImage""), [])  Statement(if (doTiming) {, [])  Statement(beginGlTiming(), [])  Statement(}, [])  MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])])    VariableReference(mSurfaceTexture, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])])    VariableReference(long timestamp, [])    Expression(mSurfaceTexture.getTimestamp(), [])  AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])])    VariableReference(Pair<RequestHolder, Long> captureHolder, [])    Expression(targetCollector.previewCaptured(timestamp), [])  Statement(// No preview request queued, drop frame., [])  AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])])    VariableReference(if (captureHolder, [])    Expression(, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Dropping preview frame."", [])  Statement(}, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])])    VariableReference(RequestHolder request, [])    Expression(captureHolder.first, [])  AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])])    VariableReference(Collection<Surface> targetSurfaces, [])    Expression(request.getHolderTargets(), [])  Statement(if (doTiming) {, [])  Statement(addGlTimestamp(timestamp), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])])    VariableReference(List<Long> targetSurfaceIds, [])    Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])  Statement(for (EGLSurfaceHolder holder : mSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(try {, [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])])    VariableReference(mPBufferPixels, [])    Expression(, [])  Statement(0, /*y*/, [])  Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), [])  Statement(checkGlError(""glReadPixels""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])])    VariableReference(int format, [])    Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(mPBufferPixels.array(), [])    Expression(holder.width, [])    Expression(holder.height, [])    Expression(format, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])])    VariableReference(targetCollector, [])    Expression(, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])]), Statement(checkGlError(""before updateTexImage""), []), Statement(if (doTiming) {, []), Statement(beginGlTiming(), []), Statement(}, []), MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])]), AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])]), Statement(// No preview request queued, drop frame., []), AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])]), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])]), Statement(}, []), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])]), AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])]), Statement(if (doTiming) {, []), Statement(addGlTimestamp(timestamp), []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(new ArrayList(), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(try {, []), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, []), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])]), Statement(0, /*y*/, []), Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), []), Statement(checkGlError(""glReadPixels""), []), Statement(try {, []), AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])]), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])]), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])])    VariableReference(if ((mSurfaces, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])])    VariableReference(boolean doTiming, [])    Expression(targetCollector.hasPendingPreviewCaptures(), [])  Statement(checkGlError(""before updateTexImage""), [])  Statement(if (doTiming) {, [])  Statement(beginGlTiming(), [])  Statement(}, [])  MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])])    VariableReference(mSurfaceTexture, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])])    VariableReference(long timestamp, [])    Expression(mSurfaceTexture.getTimestamp(), [])  AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])])    VariableReference(Pair<RequestHolder, Long> captureHolder, [])    Expression(targetCollector.previewCaptured(timestamp), [])  Statement(// No preview request queued, drop frame., [])  AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])])    VariableReference(if (captureHolder, [])    Expression(, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Dropping preview frame."", [])  Statement(}, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])])    VariableReference(RequestHolder request, [])    Expression(captureHolder.first, [])  AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])])    VariableReference(Collection<Surface> targetSurfaces, [])    Expression(request.getHolderTargets(), [])  Statement(if (doTiming) {, [])  Statement(addGlTimestamp(timestamp), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(new ArrayList(), [])])    VariableReference(List<Long> targetSurfaceIds, [])    Expression(new ArrayList(), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])])    VariableReference(targetSurfaceIds, [])    Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(try {, [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])])    VariableReference(mPBufferPixels, [])    Expression(, [])  Statement(0, /*y*/, [])  Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), [])  Statement(checkGlError(""glReadPixels""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])])    VariableReference(int format, [])    Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(mPBufferPixels.array(), [])    Expression(holder.width, [])    Expression(holder.height, [])    Expression(format, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])])    VariableReference(targetCollector, [])    Expression(, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
","/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
",0,,,0,,,0,"1,2","2,4,5",2,3,"1,2","The control dependency has changed as the `getSurfaceIds` method call for `targetSurfaceIds` is now surrounded by a try-catch block, and new exception handling statements have been introduced in both the `try` and `catch` blocks, so the change type is 3.","The change in the control dependency along with the new exception handling statements and the added calls to `request.setOutputAbandoned()` could potentially lead to different return values and different exception handlings. Therefore, the CI type is 1,2."
<android.widget.TabWidget: void setRightStripDrawable(Drawable)>,23,24,<android.widget.TabWidget: void setRightStripDrawable(Drawable)>,<android.widget.TabWidget: void setRightStripDrawable(Drawable)>,0,"{
    mRightStrip = drawable;
    requestLayout();
    invalidate();
}","{
    mRightStrip = drawable;
    requestLayout();
    invalidate();
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mRightStrip, []), Expression(drawable, [])]), Statement(requestLayout(), []), Statement(invalidate(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mRightStrip, []), Expression(drawable, [])])    VariableReference(mRightStrip, [])    Expression(drawable, [])  Statement(requestLayout(), [])  Statement(invalidate(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mRightStrip, []), Expression(drawable, [])]), Statement(requestLayout(), []), Statement(invalidate(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mRightStrip, []), Expression(drawable, [])])    VariableReference(mRightStrip, [])    Expression(drawable, [])  Statement(requestLayout(), [])  Statement(invalidate(), [])  Statement(}, [])",0,"/**
 * Sets the drawable to use as the right part of the strip below the
 * tab indicators.
 * @param drawable the right strip drawable
 */
","/**
 * Sets the drawable to use as the right part of the strip below the tab
 * indicators.
 *
 * @param drawable the right strip drawable
 * @see #getRightStripDrawable()
 * @attr ref android.R.styleable#TabWidget_tabStripRight
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early and late implementations.,"Since there are no changes in the code, there is no potential for a compatibility issue."
<android.app.Dialog: void onActionModeStarted(ActionMode)>,23,24,<android.app.Dialog: void onActionModeStarted(ActionMode)>,<android.app.Dialog: void onActionModeStarted(ActionMode)>,0,"{
    mActionMode = mode;
}","{
    mActionMode = mode;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mActionMode, []), Expression(mode, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mActionMode, []), Expression(mode, [])])    VariableReference(mActionMode, [])    Expression(mode, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mActionMode, []), Expression(mode, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mActionMode, []), Expression(mode, [])])    VariableReference(mActionMode, [])    Expression(mode, [])  Statement(}, [])",0,"/**
 * {@inheritDoc}
 *
 * Note that if you override this method you should always call through
 * to the superclass implementation by calling super.onActionModeStarted(mode).
 */
","/**
 * {@inheritDoc}
 *
 * Note that if you override this method you should always call through
 * to the superclass implementation by calling super.onActionModeStarted(mode).
 */
",0,[@CallSuper],"[@Override, @CallSuper]",1,,,0,0,0,0,0,0,"There is no change in the method body or its implementation between the two versions. The only difference is in the annotations, which do not affect the method's behavior.","Since there is no change in the method body or its implementation, there are no potential compatibility issues."
<android.service.notification.ZenModeConfig.ZenRule: int hashCode()>,24,25,<android.service.notification.ZenModeConfig.ZenRule: int hashCode()>,<android.service.notification.ZenModeConfig.ZenRule: int hashCode()>,0,"{
    return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime);
}","{
    return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime, enabler);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime), [VariableReference(return Objects, []), Expression(enabled, []), Expression(snoozing, []), Expression(name, []), Expression(zenMode, []), Expression(conditionId, []), Expression(condition, []), Expression(component, []), Expression(id, []), Expression(creationTime, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime), [VariableReference(return Objects, []), Expression(enabled, []), Expression(snoozing, []), Expression(name, []), Expression(zenMode, []), Expression(conditionId, []), Expression(condition, []), Expression(component, []), Expression(id, []), Expression(creationTime, [])])    VariableReference(return Objects, [])    Expression(enabled, [])    Expression(snoozing, [])    Expression(name, [])    Expression(zenMode, [])    Expression(conditionId, [])    Expression(condition, [])    Expression(component, [])    Expression(id, [])    Expression(creationTime, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime, enabler), [VariableReference(return Objects, []), Expression(enabled, []), Expression(snoozing, []), Expression(name, []), Expression(zenMode, []), Expression(conditionId, []), Expression(condition, []), Expression(component, []), Expression(id, []), Expression(creationTime, []), Expression(enabler, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime, enabler), [VariableReference(return Objects, []), Expression(enabled, []), Expression(snoozing, []), Expression(name, []), Expression(zenMode, []), Expression(conditionId, []), Expression(condition, []), Expression(component, []), Expression(id, []), Expression(creationTime, []), Expression(enabler, [])])    VariableReference(return Objects, [])    Expression(enabled, [])    Expression(snoozing, [])    Expression(name, [])    Expression(zenMode, [])    Expression(conditionId, [])    Expression(condition, [])    Expression(component, [])    Expression(id, [])    Expression(creationTime, [])    Expression(enabler, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,5",1,1,1,"A new parameter `enabler` has been added to the `Objects.hash` call in the return statement, so the code change type is 1.","Because a new parameter `enabler` is added to the `Objects.hash` method, this could potentially result in a different hash value being returned. Thus, the CI type is 1."
<android.view.DragEvent: ClipDescription getClipDescription()>,24,25,<android.view.DragEvent: ClipDescription getClipDescription()>,<android.view.DragEvent: ClipDescription getClipDescription()>,0,"{
    return mClipDescription;
}","{
    return mClipDescription;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mClipDescription, []), Statement(}, [])])  Statement({, [])  Statement(return mClipDescription, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mClipDescription, []), Statement(}, [])])  Statement({, [])  Statement(return mClipDescription, [])  Statement(}, [])",0,"/**
 * Returns the {@link android.content.ClipDescription} object contained in the
 * {@link android.content.ClipData} object sent to the system as part of the call to
 * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
 * The drag handler or listener for a View can use the metadata in this object to decide if the
 * View can accept the dragged View object's data.
 * <p>
 * This method returns valid data for all event actions.
 * @return The ClipDescription that was part of the ClipData sent to the system by startDrag().
 */
","/**
 * Returns the {@link android.content.ClipDescription} object contained in the
 * {@link android.content.ClipData} object sent to the system as part of the call to
 * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
 * The drag handler or listener for a View can use the metadata in this object to decide if the
 * View can accept the dragged View object's data.
 * <p>
 * This method returns valid data for all event actions except for {@link #ACTION_DRAG_ENDED}.
 * @return The ClipDescription that was part of the ClipData sent to the system by startDrag().
 */
",1,,,0,,,0,0,0,0,0,0,There is no change between early and late implementations. Both return the same variable `mClipDescription`.,"Since there are no changes, there are no potential compatibility issues."
<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,25,26,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,0,"{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = new ArrayList();
    try {
        targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
        Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
        request.setOutputAbandoned();
    }
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}","{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = new ArrayList();
    try {
        targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
        Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
        request.setOutputAbandoned();
    }
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            try {
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                // Should never hit this.
                throw new IllegalStateException(""Surface abandoned, skipping drawFrame..."", e);
            }
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])]), Statement(checkGlError(""before updateTexImage""), []), Statement(if (doTiming) {, []), Statement(beginGlTiming(), []), Statement(}, []), MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])]), AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])]), Statement(// No preview request queued, drop frame., []), AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])]), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])]), Statement(}, []), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])]), AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])]), Statement(if (doTiming) {, []), Statement(addGlTimestamp(timestamp), []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(new ArrayList(), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(try {, []), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, []), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])]), Statement(0, /*y*/, []), Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), []), Statement(checkGlError(""glReadPixels""), []), Statement(try {, []), AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])]), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])]), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])])    VariableReference(if ((mSurfaces, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])])    VariableReference(boolean doTiming, [])    Expression(targetCollector.hasPendingPreviewCaptures(), [])  Statement(checkGlError(""before updateTexImage""), [])  Statement(if (doTiming) {, [])  Statement(beginGlTiming(), [])  Statement(}, [])  MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])])    VariableReference(mSurfaceTexture, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])])    VariableReference(long timestamp, [])    Expression(mSurfaceTexture.getTimestamp(), [])  AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])])    VariableReference(Pair<RequestHolder, Long> captureHolder, [])    Expression(targetCollector.previewCaptured(timestamp), [])  Statement(// No preview request queued, drop frame., [])  AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])])    VariableReference(if (captureHolder, [])    Expression(, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Dropping preview frame."", [])  Statement(}, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])])    VariableReference(RequestHolder request, [])    Expression(captureHolder.first, [])  AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])])    VariableReference(Collection<Surface> targetSurfaces, [])    Expression(request.getHolderTargets(), [])  Statement(if (doTiming) {, [])  Statement(addGlTimestamp(timestamp), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(new ArrayList(), [])])    VariableReference(List<Long> targetSurfaceIds, [])    Expression(new ArrayList(), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])])    VariableReference(targetSurfaceIds, [])    Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(try {, [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])])    VariableReference(mPBufferPixels, [])    Expression(, [])  Statement(0, /*y*/, [])  Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), [])  Statement(checkGlError(""glReadPixels""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])])    VariableReference(int format, [])    Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(mPBufferPixels.array(), [])    Expression(holder.width, [])    Expression(holder.height, [])    Expression(format, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])])    VariableReference(targetCollector, [])    Expression(, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])]), Statement(checkGlError(""before updateTexImage""), []), Statement(if (doTiming) {, []), Statement(beginGlTiming(), []), Statement(}, []), MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])]), AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])]), Statement(// No preview request queued, drop frame., []), AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])]), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])]), Statement(}, []), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])]), AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])]), Statement(if (doTiming) {, []), Statement(addGlTimestamp(timestamp), []), Statement(}, []), AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(new ArrayList(), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(try {, []), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, []), MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])]), Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])]), Statement(// Should never hit this., []), Statement(}, []), MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])]), Statement(0, /*y*/, []), Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), []), Statement(checkGlError(""glReadPixels""), []), Statement(try {, []), AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])]), MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])]), MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])]), MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])]), MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])]), MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])]), Statement(if (doTiming) {, []), Statement(endGlTiming(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if ((mSurfaces, []), Expression(, [])])    VariableReference(if ((mSurfaces, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean doTiming, []), Expression(targetCollector.hasPendingPreviewCaptures(), [])])    VariableReference(boolean doTiming, [])    Expression(targetCollector.hasPendingPreviewCaptures(), [])  Statement(checkGlError(""before updateTexImage""), [])  Statement(if (doTiming) {, [])  Statement(beginGlTiming(), [])  Statement(}, [])  MethodCall(mSurfaceTexture.updateTexImage(), [VariableReference(mSurfaceTexture, []), Expression(, [])])    VariableReference(mSurfaceTexture, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(long timestamp, []), Expression(mSurfaceTexture.getTimestamp(), [])])    VariableReference(long timestamp, [])    Expression(mSurfaceTexture.getTimestamp(), [])  AssignmentExpression(=, [VariableReference(Pair<RequestHolder, Long> captureHolder, []), Expression(targetCollector.previewCaptured(timestamp), [])])    VariableReference(Pair<RequestHolder, Long> captureHolder, [])    Expression(targetCollector.previewCaptured(timestamp), [])  Statement(// No preview request queued, drop frame., [])  AssignmentExpression(=, [VariableReference(if (captureHolder, []), Expression(, [])])    VariableReference(if (captureHolder, [])    Expression(, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""Dropping preview frame.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Dropping preview frame."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Dropping preview frame."", [])  Statement(}, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(RequestHolder request, []), Expression(captureHolder.first, [])])    VariableReference(RequestHolder request, [])    Expression(captureHolder.first, [])  AssignmentExpression(=, [VariableReference(Collection<Surface> targetSurfaces, []), Expression(request.getHolderTargets(), [])])    VariableReference(Collection<Surface> targetSurfaces, [])    Expression(request.getHolderTargets(), [])  Statement(if (doTiming) {, [])  Statement(addGlTimestamp(timestamp), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(List<Long> targetSurfaceIds, []), Expression(new ArrayList(), [])])    VariableReference(List<Long> targetSurfaceIds, [])    Expression(new ArrayList(), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(targetSurfaceIds, []), Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])])    VariableReference(targetSurfaceIds, [])    Expression(LegacyCameraDevice.getSurfaceIds(targetSurfaces), [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(try {, [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(for (EGLSurfaceHolder holder : mConversionSurfaces) {, [])  MethodCall(if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)), [VariableReference(if (LegacyCameraDevice, []), Expression(holder.surface, []), Expression(targetSurfaceIds), [])])    VariableReference(if (LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(targetSurfaceIds), [])  Statement(// glReadPixels reads from the bottom of the buffer, so add an extra vertical flip, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, []), Expression(, [])])    VariableReference(drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing, [])    Expression(, [])  Statement(// Should never hit this., [])  Statement(}, [])  MethodCall(mPBufferPixels.clear(), [VariableReference(mPBufferPixels, []), Expression(, [])])    VariableReference(mPBufferPixels, [])    Expression(, [])  Statement(0, /*y*/, [])  Statement(0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels), [])  Statement(checkGlError(""glReadPixels""), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(int format, []), Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])])    VariableReference(int format, [])    Expression(LegacyCameraDevice.detectSurfaceType(holder.surface), [])  MethodCall(LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(holder.width, []), Expression(holder.height, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(holder.width, [])    Expression(holder.height, [])  MethodCall(LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(captureHolder.second, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(captureHolder.second, [])  MethodCall(LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format), [VariableReference(LegacyCameraDevice, []), Expression(holder.surface, []), Expression(mPBufferPixels.array(), []), Expression(holder.width, []), Expression(holder.height, []), Expression(format, [])])    VariableReference(LegacyCameraDevice, [])    Expression(holder.surface, [])    Expression(mPBufferPixels.array(), [])    Expression(holder.width, [])    Expression(holder.height, [])    Expression(format, [])  MethodCall(Log.w(TAG, ""Surface abandoned, dropping frame. "", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Surface abandoned, []), Expression(dropping frame. "", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Surface abandoned, [])    Expression(dropping frame. "", [])    Expression(e, [])  MethodCall(request.setOutputAbandoned(), [VariableReference(request, []), Expression(, [])])    VariableReference(request, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(targetCollector.previewProduced(), [VariableReference(targetCollector, []), Expression(, [])])    VariableReference(targetCollector, [])    Expression(, [])  Statement(if (doTiming) {, [])  Statement(endGlTiming(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
","/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
",0,,,0,,,0,"1,2",2,2,"2,3",2,"A new exception handling block has been added within the second `for` loop in the late version, which throws an `IllegalStateException` when a `LegacyExceptionUtils.BufferQueueAbandonedException` occurs. This changes the control dependency and exception handling, so the code change type is 2,3.","The addition of the new exception handling block potentially introduces new exception `IllegalStateException` to the late version. This changes the way exceptions are handled and could lead to different behaviors, so the CI type is 2."
<android.net.Uri: Uri normalizeScheme()>,25,26,<android.net.Uri: Uri normalizeScheme()>,<android.net.Uri: Uri normalizeScheme()>,0,"{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}","{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])]), Statement(// give up, []), AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])]), Statement(return this, []), AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])]), Statement(// no change, []), MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])]), Statement(return this, []), MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])])    VariableReference(String scheme, [])    Expression(getScheme(), [])  Statement(// give up, [])  AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])])    VariableReference(if (scheme, [])    Expression(, [])  Statement(return this, [])  AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])])    VariableReference(String lowerScheme, [])    Expression(scheme.toLowerCase(Locale.ROOT), [])  Statement(// no change, [])  MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])])    VariableReference(if (scheme, [])    Expression(lowerScheme), [])  Statement(return this, [])  MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])])    VariableReference(return buildUpon(), [])    Expression(lowerScheme).build(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])]), Statement(// give up, []), AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])]), Statement(return this, []), AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])]), Statement(// no change, []), MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])]), Statement(return this, []), MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(getScheme(), [])])    VariableReference(String scheme, [])    Expression(getScheme(), [])  Statement(// give up, [])  AssignmentExpression(=, [VariableReference(if (scheme, []), Expression(, [])])    VariableReference(if (scheme, [])    Expression(, [])  Statement(return this, [])  AssignmentExpression(=, [VariableReference(String lowerScheme, []), Expression(scheme.toLowerCase(Locale.ROOT), [])])    VariableReference(String lowerScheme, [])    Expression(scheme.toLowerCase(Locale.ROOT), [])  Statement(// no change, [])  MethodCall(if (scheme.equals(lowerScheme)), [VariableReference(if (scheme, []), Expression(lowerScheme), [])])    VariableReference(if (scheme, [])    Expression(lowerScheme), [])  Statement(return this, [])  MethodCall(return buildUpon().scheme(lowerScheme).build(), [VariableReference(return buildUpon(), []), Expression(lowerScheme).build(, [])])    VariableReference(return buildUpon(), [])    Expression(lowerScheme).build(, [])  Statement(}, [])",0,"/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see {@link android.content.Intent#setData}
 * @see {@link android.content.Intent#setDataAndNormalize}
 */
","/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see android.content.Intent#setData
 * @see android.content.Intent#setDataAndNormalize
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early and late implementations.,"Since there are no changes in the code, there is no potential for a compatibility issue."
<android.widget.GridView: void setRemoteViewsAdapter(Intent)>,25,26,<android.widget.GridView: void setRemoteViewsAdapter(Intent)>,<android.widget.GridView: void setRemoteViewsAdapter(Intent)>,0,"{
    super.setRemoteViewsAdapter(intent);
}","{
    super.setRemoteViewsAdapter(intent);
}",0,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.setRemoteViewsAdapter(intent), [VariableReference(super, []), Expression(intent, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.setRemoteViewsAdapter(intent), [VariableReference(super, []), Expression(intent, [])])    VariableReference(super, [])    Expression(intent, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.setRemoteViewsAdapter(intent), [VariableReference(super, []), Expression(intent, [])]), Statement(}, [])])  Statement({, [])  MethodCall(super.setRemoteViewsAdapter(intent), [VariableReference(super, []), Expression(intent, [])])    VariableReference(super, [])    Expression(intent, [])  Statement(}, [])",0,"/**
 * Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService
 * through the specified intent.
 * @param intent the intent used to identify the RemoteViewsService for the adapter to connect to.
 */
","/**
 * Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService
 * through the specified intent.
 * @param intent the intent used to identify the RemoteViewsService for the adapter to connect to.
 */
",0,[@android.view.RemotableViewMethod],[@android.view.RemotableViewMethod(asyncImpl = "setRemoteViewsAdapterAsync")],1,,,0,0,0,0,4,0,"The only change between the early and late implementations is the addition of an attribute (`asyncImpl = ""setRemoteViewsAdapterAsync""`) to the `@android.view.RemotableViewMethod` annotation. This change is related to the metadata of the method and does not alter the logic or the behavior of the method implementation. Therefore, the change type is 4.","Since the implementation of the method has not changed, there is no potential compatibility issue. The added annotation attribute does not affect the method's runtime behavior, resulting in the CI type being 0."
<android.os.MemoryFile.MemoryInputStream: int available()>,26,27,<android.os.MemoryFile.MemoryInputStream: int available()>,<android.os.MemoryFile.MemoryInputStream: int available()>,0,"{
    if (mOffset >= mLength) {
        return 0;
    }
    return mLength - mOffset;
}","{
    if (mOffset >= mSharedMemory.getSize()) {
        return 0;
    }
    return mSharedMemory.getSize() - mOffset;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mLength) {, [])]), Statement(return 0, []), Statement(}, []), Statement(return mLength - mOffset, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mLength) {, [])])    VariableReference(if (mOffset >, [])    Expression(mLength) {, [])  Statement(return 0, [])  Statement(}, [])  Statement(return mLength - mOffset, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mSharedMemory.getSize()) {, [])]), Statement(return 0, []), Statement(}, []), MethodCall(return mSharedMemory.getSize(), [VariableReference(return mSharedMemory, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mSharedMemory.getSize()) {, [])])    VariableReference(if (mOffset >, [])    Expression(mSharedMemory.getSize()) {, [])  Statement(return 0, [])  Statement(}, [])  MethodCall(return mSharedMemory.getSize(), [VariableReference(return mSharedMemory, []), Expression(, [])])    VariableReference(return mSharedMemory, [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,3,4",1,"1,5",1,"The return statement has changed from `return mLength - mOffset` to `return mSharedMemory.getSize() - mOffset`, and the condition check has also changed from `if (mOffset >= mLength)` to `if (mOffset >= mSharedMemory.getSize())`. Therefore, the code change type is 1,5.","The changes in return and condition statements imply that the method could return different values based on the new `mSharedMemory.getSize()` parameter instead of `mLength`. Thus, the CI type is 1, potentially returning different values."
<android.view.textclassifier.TextClassification: String getText()>,26,27,<android.view.textclassifier.TextClassification: String getText()>,<android.view.textclassifier.TextClassification: String getText()>,0,"{
    return mText;
}","{
    return mText;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mText, []), Statement(}, [])])  Statement({, [])  Statement(return mText, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mText, []), Statement(}, [])])  Statement({, [])  Statement(return mText, [])  Statement(}, [])",0,"/**
 * Gets the classified text.
 */
","/**
 * Gets the classified text.
 */
",0,[@NonNull],[@Nullable],1,,,0,0,0,0,1,1,"The method's annotation has changed from @NonNull to @Nullable, which affects the type of value being returned by the method, so the code change type is 1.","The change in annotation indicates that the returned value's nullability has changed. In early version, it guaranteed a non-null return, while in the later version, it allows for the possibility of a null return. This could lead to different behavior within the API, so the CI type is 1."
<android.os.MemoryFile.MemoryInputStream: int available()>,26,27,<android.os.MemoryFile.MemoryInputStream: int available()>,<android.os.MemoryFile.MemoryInputStream: int available()>,0,"{
    if (mOffset >= mLength) {
        return 0;
    }
    return mLength - mOffset;
}","{
    if (mOffset >= mSharedMemory.getSize()) {
        return 0;
    }
    return mSharedMemory.getSize() - mOffset;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mLength) {, [])]), Statement(return 0, []), Statement(}, []), Statement(return mLength - mOffset, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mLength) {, [])])    VariableReference(if (mOffset >, [])    Expression(mLength) {, [])  Statement(return 0, [])  Statement(}, [])  Statement(return mLength - mOffset, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mSharedMemory.getSize()) {, [])]), Statement(return 0, []), Statement(}, []), MethodCall(return mSharedMemory.getSize(), [VariableReference(return mSharedMemory, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mSharedMemory.getSize()) {, [])])    VariableReference(if (mOffset >, [])    Expression(mSharedMemory.getSize()) {, [])  Statement(return 0, [])  Statement(}, [])  MethodCall(return mSharedMemory.getSize(), [VariableReference(return mSharedMemory, []), Expression(, [])])    VariableReference(return mSharedMemory, [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,3,4",1,"1,3,5",1,"The early version uses `mLength` while the late version uses `mSharedMemory.getSize()` for both the conditional check and the return calculation. This involves a change in the control dependency (if statement) as well as the return statement. Additionally, there may be a dependent API change because `mSharedMemory.getSize()` is called instead of using the `mLength` directly, which was not the case in the early version.","Since the condition check and the return value calculation have been changed from using `mLength` to `mSharedMemory.getSize()`, the method may return different values in the late version, causing a CI type 1."
<android.view.textclassifier.TextClassification: String getText()>,27,28,<android.view.textclassifier.TextClassification: String getText()>,<android.view.textclassifier.TextClassification: String getText()>,0,"{
    return mText;
}","{
    return mText;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mText, []), Statement(}, [])])  Statement({, [])  Statement(return mText, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mText, []), Statement(}, [])])  Statement({, [])  Statement(return mText, [])  Statement(}, [])",0,"/**
 * Gets the classified text.
 */
","/**
 * Gets the classified text.
 */
",0,[@NonNull],[@Nullable],1,,,0,0,0,0,1,1,"The annotation has changed from @NonNull to @Nullable, which implies that the method may now return null. Therefore, the code change type is 1.","The change from @NonNull to @Nullable implies that the return value could be different (null vs. non-null), which may lead to different behavior. Therefore, the CI type is 1."
"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",27,28,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>","<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",0,"{
    mEntityConfidence.setEntityType(type, confidenceScore);
    return this;
}","{
    Preconditions.checkNotNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mEntityConfidence.setEntityType(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(mEntityConfidence.setEntityType(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])])    VariableReference(mEntityConfidence, [])    Expression(type, [])    Expression(confidenceScore, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(type), [VariableReference(Preconditions, []), Expression(type, [])]), MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(type), [VariableReference(Preconditions, []), Expression(type, [])])    VariableReference(Preconditions, [])    Expression(type, [])  MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])])    VariableReference(mEntityConfidence, [])    Expression(type, [])    Expression(confidenceScore, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
","/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
",0,,[@NonNull],1,,,0,"1,2","1,4,5",1,"2,5",2,"A new exception handling statement has been introduced with `Preconditions.checkNotNull(type)`, and the method call has changed from `mEntityConfidence.setEntityType(type, confidenceScore)` to `mEntityConfidence.put(type, confidenceScore)`. So the change types are 2 and 5.","The introduction of `Preconditions.checkNotNull(type)` can throw a `NullPointerException` if `type` is null. This leads to a different exception handling compared to the early version, which can cause a CI. Hence, the CI type is 2."
"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",27,28,"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>","<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",0,"{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}","{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), []), Statement(}, [])])  Statement({, [])  Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), []), Statement(}, [])])  Statement({, [])  Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), [])  Statement(}, [])",0,"/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false)
 * or to automatically connect as soon as the remote
 * device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
","/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 *
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false) or to
 * automatically connect as soon as the remote device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes in the method implementations between the early and late versions.,"Since there are no changes in the method, there are no potential Compatibility Issues."
<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,27,28,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,0,"{
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}","{
    if (mIsUnbindIssued != null) {
        Log.e(TAG, ""bindInput must be paired with unbindInput."");
    }
    mIsUnbindIssued = new AtomicBoolean();
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// This IInputContext is guaranteed to implement all the methods., []), AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags), [])]), AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])]), MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])]), Statement(}, [])])  Statement({, [])  Statement(// This IInputContext is guaranteed to implement all the methods., [])  AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])])    VariableReference(final int missingMethodFlags, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags), [])])    VariableReference(InputConnection ic, [])    Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags), [])  AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])])    VariableReference(InputBinding nu, [])    Expression(new InputBinding(ic, binding), [])  MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])])    VariableReference(mCaller, [])    Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, [])    Expression(nu), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mIsUnbindIssued !, []), Expression(null) {, [])]), MethodCall(Log.e(TAG, ""bindInput must be paired with unbindInput.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""bindInput must be paired with unbindInput."", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mIsUnbindIssued, []), Expression(new AtomicBoolean(), [])]), Statement(// This IInputContext is guaranteed to implement all the methods., []), AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued), [])]), AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])]), MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mIsUnbindIssued !, []), Expression(null) {, [])])    VariableReference(if (mIsUnbindIssued !, [])    Expression(null) {, [])  MethodCall(Log.e(TAG, ""bindInput must be paired with unbindInput.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""bindInput must be paired with unbindInput."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""bindInput must be paired with unbindInput."", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mIsUnbindIssued, []), Expression(new AtomicBoolean(), [])])    VariableReference(mIsUnbindIssued, [])    Expression(new AtomicBoolean(), [])  Statement(// This IInputContext is guaranteed to implement all the methods., [])  AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])])    VariableReference(final int missingMethodFlags, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued), [])])    VariableReference(InputConnection ic, [])    Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued), [])  AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])])    VariableReference(InputBinding nu, [])    Expression(new InputBinding(ic, binding), [])  MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])])    VariableReference(mCaller, [])    Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, [])    Expression(nu), [])  Statement(}, [])",1,,,0,[@Override],"[@BinderThread, @Override]",1,,,0,"1,2","3,4,5",0,"2,3,4",2,"1. A new control dependency has been introduced with the `if (mIsUnbindIssued != null)` statement, hence change type is 3.",
<android.os.MemoryFile.MemoryInputStream: int available()>,28,29,<android.os.MemoryFile.MemoryInputStream: int available()>,<android.os.MemoryFile.MemoryInputStream: int available()>,0,"{
    if (mOffset >= mLength) {
        return 0;
    }
    return mLength - mOffset;
}","{
    if (mOffset >= mSharedMemory.getSize()) {
        return 0;
    }
    return mSharedMemory.getSize() - mOffset;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mLength) {, [])]), Statement(return 0, []), Statement(}, []), Statement(return mLength - mOffset, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mLength) {, [])])    VariableReference(if (mOffset >, [])    Expression(mLength) {, [])  Statement(return 0, [])  Statement(}, [])  Statement(return mLength - mOffset, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mSharedMemory.getSize()) {, [])]), Statement(return 0, []), Statement(}, []), MethodCall(return mSharedMemory.getSize(), [VariableReference(return mSharedMemory, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOffset >, []), Expression(mSharedMemory.getSize()) {, [])])    VariableReference(if (mOffset >, [])    Expression(mSharedMemory.getSize()) {, [])  Statement(return 0, [])  Statement(}, [])  MethodCall(return mSharedMemory.getSize(), [VariableReference(return mSharedMemory, []), Expression(, [])])    VariableReference(return mSharedMemory, [])    Expression(, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,3",1,"1,5",1,"The basis for comparison and subtraction has changed from `mLength` to `mSharedMemory.getSize()`. This indicates a change in dependent API calls for `getSize()`, and therefore, it belongs to change type 1,5.","The change can cause the method to potentially return different values in the late version due to different input from `mSharedMemory.getSize()`, thus resulting in CI type 1."
<android.view.textclassifier.TextClassification: String getText()>,28,29,<android.view.textclassifier.TextClassification: String getText()>,<android.view.textclassifier.TextClassification: String getText()>,0,"{
    return mText;
}","{
    return mText;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mText, []), Statement(}, [])])  Statement({, [])  Statement(return mText, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mText, []), Statement(}, [])])  Statement({, [])  Statement(return mText, [])  Statement(}, [])",0,"/**
 * Gets the classified text.
 */
","/**
 * Gets the classified text.
 */
",0,[@NonNull],[@Nullable],1,,,0,0,0,0,1,1,"The annotation has changed from @NonNull to @Nullable, which indicates that the return value can now potentially be null in the late version. This falls under code change type 1.","Since the return value can now potentially be null in the late version, this may cause compatibility issues due to different return types or values. Therefore, the CI type is 1."
"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",28,29,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>","<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",0,"{
    mEntityConfidence.setEntityType(type, confidenceScore);
    return this;
}","{
    Preconditions.checkNotNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(mEntityConfidence.setEntityType(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(mEntityConfidence.setEntityType(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])])    VariableReference(mEntityConfidence, [])    Expression(type, [])    Expression(confidenceScore, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(type), [VariableReference(Preconditions, []), Expression(type, [])]), MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(type), [VariableReference(Preconditions, []), Expression(type, [])])    VariableReference(Preconditions, [])    Expression(type, [])  MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])])    VariableReference(mEntityConfidence, [])    Expression(type, [])    Expression(confidenceScore, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
","/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
",0,,[@NonNull],1,,,0,"1,2","1,4,5",1,"2,4",2,"A new exception handling statement `Preconditions.checkNotNull(type)` was introduced, and a different method (`mEntityConfidence.put()` instead of `mEntityConfidence.setEntityType()`) is called. This change type is 2,4.","The new exception handling statement `Preconditions.checkNotNull(type)` could throw a `NullPointerException`, which the previous version did not handle. This may lead to different exception handling behaviors. Therefore, the CI type is 2."
"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",28,29,"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>","<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",0,"{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}","{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), []), Statement(}, [])])  Statement({, [])  Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), []), Statement(}, [])])  Statement({, [])  Statement(return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO)), [])  Statement(}, [])",0,"/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false)
 * or to automatically connect as soon as the remote
 * device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
","/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 *
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false) or to
 * automatically connect as soon as the remote device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
",1,,,0,,,0,0,0,0,0,0,There is no change between the early and late implementations. The method body and return statements are identical in both implementations.,No compatibility issues arise since there are no changes in the code between the two versions.
<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,28,29,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,0,"{
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}","{
    if (mIsUnbindIssued != null) {
        Log.e(TAG, ""bindInput must be paired with unbindInput."");
    }
    mIsUnbindIssued = new AtomicBoolean();
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// This IInputContext is guaranteed to implement all the methods., []), AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags), [])]), AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])]), MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])]), Statement(}, [])])  Statement({, [])  Statement(// This IInputContext is guaranteed to implement all the methods., [])  AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])])    VariableReference(final int missingMethodFlags, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags), [])])    VariableReference(InputConnection ic, [])    Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags), [])  AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])])    VariableReference(InputBinding nu, [])    Expression(new InputBinding(ic, binding), [])  MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])])    VariableReference(mCaller, [])    Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, [])    Expression(nu), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mIsUnbindIssued !, []), Expression(null) {, [])]), MethodCall(Log.e(TAG, ""bindInput must be paired with unbindInput.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""bindInput must be paired with unbindInput."", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mIsUnbindIssued, []), Expression(new AtomicBoolean(), [])]), Statement(// This IInputContext is guaranteed to implement all the methods., []), AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])]), AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued), [])]), AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])]), MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mIsUnbindIssued !, []), Expression(null) {, [])])    VariableReference(if (mIsUnbindIssued !, [])    Expression(null) {, [])  MethodCall(Log.e(TAG, ""bindInput must be paired with unbindInput.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""bindInput must be paired with unbindInput."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""bindInput must be paired with unbindInput."", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mIsUnbindIssued, []), Expression(new AtomicBoolean(), [])])    VariableReference(mIsUnbindIssued, [])    Expression(new AtomicBoolean(), [])  Statement(// This IInputContext is guaranteed to implement all the methods., [])  AssignmentExpression(=, [VariableReference(final int missingMethodFlags, []), Expression(0, [])])    VariableReference(final int missingMethodFlags, [])    Expression(0, [])  AssignmentExpression(=, [VariableReference(InputConnection ic, []), Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued), [])])    VariableReference(InputConnection ic, [])    Expression(new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued), [])  AssignmentExpression(=, [VariableReference(InputBinding nu, []), Expression(new InputBinding(ic, binding), [])])    VariableReference(InputBinding nu, [])    Expression(new InputBinding(ic, binding), [])  MethodCall(mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu)), [VariableReference(mCaller, []), Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, []), Expression(nu), [])])    VariableReference(mCaller, [])    Expression(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, [])    Expression(nu), [])  Statement(}, [])",1,,,0,[@Override],"[@BinderThread, @Override]",1,,,0,"1,2","3,4,5",0,"2,3,4","1,2","The late version adds a check for `mIsUnbindIssued` being non-null and logs an error if it is, which was not present in the early version. It also initializes `mIsUnbindIssued` with a new `AtomicBoolean` and passes this to `InputConnectionWrapper`. These changes add new control dependency logic and exception handling logic, so the change types are 2,3,4. Additionally, the added annotations are `@BinderThread`.","The new check and log statement for `mIsUnbindIssued` being non-null can result in different behavior if the condition is met (logging an error and possibly changing execution flow). The addition of `AtomicBoolean` in the `InputConnectionWrapper` constructor changes the handling and behavior of the input connection binding process. These changes could cause different exception handling flows and potentially different return behaviors, so the CI types are 1,2."
<android.widget.CheckedTextView: Mode getCheckMarkTintMode()>,28,29,<android.widget.CheckedTextView: Mode getCheckMarkTintMode()>,<android.widget.CheckedTextView: Mode getCheckMarkTintMode()>,0,"{
    return mCheckMarkTintMode;
}","{
    return mCheckMarkBlendMode != null ? BlendMode.blendModeToPorterDuffMode(mCheckMarkBlendMode) : null;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mCheckMarkTintMode, []), Statement(}, [])])  Statement({, [])  Statement(return mCheckMarkTintMode, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return mCheckMarkBlendMode !, []), Expression(null ? BlendMode.blendModeToPorterDuffMode(mCheckMarkBlendMode) : null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return mCheckMarkBlendMode !, []), Expression(null ? BlendMode.blendModeToPorterDuffMode(mCheckMarkBlendMode) : null, [])])    VariableReference(return mCheckMarkBlendMode !, [])    Expression(null ? BlendMode.blendModeToPorterDuffMode(mCheckMarkBlendMode) : null, [])  Statement(}, [])",1,"/**
 * Returns the blending mode used to apply the tint to the check mark
 * drawable, if specified.
 *
 * @return the blending mode used to apply the tint to the check mark
 * drawable
 * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode
 * @see #setCheckMarkTintMode(PorterDuff.Mode)
 */
","/**
 * Returns the blending mode used to apply the tint to the check mark
 * drawable, if specified.
 *
 * @return the blending mode used to apply the tint to the check mark
 * drawable
 * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode
 * @see #setCheckMarkTintMode(PorterDuff.Mode)
 */
",0,[@Nullable],"[@InspectableProperty, @Nullable]",1,,,0,"1,2","1,4",1,"1,3",1,"The return statement has changed from returning `mCheckMarkTintMode` to returning a conditional expression `mCheckMarkBlendMode != null ? BlendMode.blendModeToPorterDuffMode(mCheckMarkBlendMode) : null`, which introduces a control dependency change as well. Therefore, the code change type is 1,3.","The change in the return statement and the introduction of a control dependency could potentially lead to different return values. Thus, the CI type is 1."
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>,28,29,<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>,<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>,0,"{
    final IAccessibilityServiceConnection connection = AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId);
    if (connection != null) {
        try {
            return connection.setSoftKeyboardShowMode(showMode);
        } catch (RemoteException re) {
            Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re);
            re.rethrowFromSystemServer();
        }
    }
    return false;
}","{
    final IAccessibilityServiceConnection connection = AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId);
    if (connection != null) {
        try {
            return connection.setSoftKeyboardShowMode(showMode);
        } catch (RemoteException re) {
            Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re);
            re.rethrowFromSystemServer();
        }
    }
    return false;
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final IAccessibilityServiceConnection connection, []), Expression(AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId), [])]), AssignmentExpression(=, [VariableReference(if (connection !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(return connection.setSoftKeyboardShowMode(showMode), [VariableReference(return connection, []), Expression(showMode, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Failed to set soft keyboard behavior"", []), Expression(re, [])]), MethodCall(re.rethrowFromSystemServer(), [VariableReference(re, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final IAccessibilityServiceConnection connection, []), Expression(AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId), [])])    VariableReference(final IAccessibilityServiceConnection connection, [])    Expression(AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId), [])  AssignmentExpression(=, [VariableReference(if (connection !, []), Expression(null) {, [])])    VariableReference(if (connection !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(return connection.setSoftKeyboardShowMode(showMode), [VariableReference(return connection, []), Expression(showMode, [])])    VariableReference(return connection, [])    Expression(showMode, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Failed to set soft keyboard behavior"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Failed to set soft keyboard behavior"", [])    Expression(re, [])  MethodCall(re.rethrowFromSystemServer(), [VariableReference(re, []), Expression(, [])])    VariableReference(re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final IAccessibilityServiceConnection connection, []), Expression(AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId), [])]), AssignmentExpression(=, [VariableReference(if (connection !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(return connection.setSoftKeyboardShowMode(showMode), [VariableReference(return connection, []), Expression(showMode, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Failed to set soft keyboard behavior"", []), Expression(re, [])]), MethodCall(re.rethrowFromSystemServer(), [VariableReference(re, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final IAccessibilityServiceConnection connection, []), Expression(AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId), [])])    VariableReference(final IAccessibilityServiceConnection connection, [])    Expression(AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId), [])  AssignmentExpression(=, [VariableReference(if (connection !, []), Expression(null) {, [])])    VariableReference(if (connection !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(return connection.setSoftKeyboardShowMode(showMode), [VariableReference(return connection, []), Expression(showMode, [])])    VariableReference(return connection, [])    Expression(showMode, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Failed to set soft keyboard behavior"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Failed to set soft keyboard behavior"", [])    Expression(re, [])  MethodCall(re.rethrowFromSystemServer(), [VariableReference(re, []), Expression(, [])])    VariableReference(re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])",0,"/**
 * Sets the soft keyboard show mode. The default show mode is
 * {@code SHOW_MODE_AUTO}, where the soft keyboard is shown when a text input field is
 * focused. An AccessibilityService can also request the show mode
 * {@code SHOW_MODE_HIDDEN}, where the soft keyboard is never shown. The
 * The lastto this method will be honored, regardless of any previous calls (including those
 * made by other AccessibilityServices).
 * <p>
 * <strong>Note:</strong> If the service is not yet connected (e.g.
 * {@link AccessibilityService#onServiceConnected()} has not yet been called) or the
 * service has been disconnected, this method will have no effect and return {@code false}.
 *
 * @param showMode the new show mode for the soft keyboard
 * @return {@code true} on success
 */
","/**
 * Sets the soft keyboard show mode.
 * <p>
 * <strong>Note:</strong> If the service is not yet connected (e.g.
 * {@link AccessibilityService#onServiceConnected()} has not yet been called) or the
 * service has been disconnected, this method will have no effect and return {@code false}.
 *
 * @param showMode the new show mode for the soft keyboard
 * @return {@code true} on success
 *
 * @see AccessibilityService#SHOW_MODE_AUTO
 * @see AccessibilityService#SHOW_MODE_HIDDEN
 * @see AccessibilityService#SHOW_MODE_IGNORE_HARD_KEYBOARD
 */
",1,,,0,,,0,0,0,0,0,0,"There is no change between the early and late implementations. Therefore, the code change type is 0.","Since there is no change between the early and late versions, no potential Compatibility Issue arises. Therefore, the CI type is 0."
"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",29,30,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>","<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",0,"{
    Preconditions.checkNotNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}","{
    Objects.requireNonNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(type), [VariableReference(Preconditions, []), Expression(type, [])]), MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(type), [VariableReference(Preconditions, []), Expression(type, [])])    VariableReference(Preconditions, [])    Expression(type, [])  MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])])    VariableReference(mEntityConfidence, [])    Expression(type, [])    Expression(confidenceScore, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Objects.requireNonNull(type), [VariableReference(Objects, []), Expression(type, [])]), MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(Objects.requireNonNull(type), [VariableReference(Objects, []), Expression(type, [])])    VariableReference(Objects, [])    Expression(type, [])  MethodCall(mEntityConfidence.put(type, confidenceScore), [VariableReference(mEntityConfidence, []), Expression(type, []), Expression(confidenceScore, [])])    VariableReference(mEntityConfidence, [])    Expression(type, [])    Expression(confidenceScore, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
","/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
",0,[@NonNull],[@NonNull],0,,,0,"1,2",5,0,5,0,"The change involves switching from `Preconditions.checkNotNull(type)` to `Objects.requireNonNull(type)`. This is a change in the dependent API used for null-checking the `type` parameter, so the code change type is 5.","The functionality and behavior of `Preconditions.checkNotNull` and `Objects.requireNonNull` are equivalent for null-checks. This change does not introduce any difference in return values or exceptions thrown, so the CI type is 0."
"<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(Network,LinkProperties)>",29,30,"<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(Network,LinkProperties)>","<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(Network,LinkProperties)>",0,"{
}","{
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * Called when the network the framework connected to for this request
 * changes {@link LinkProperties}.
 *
 * @param network The {@link Network} whose link properties have changed.
 * @param linkProperties The new {@link LinkProperties} for this network.
 */
","/**
 * Called when the network corresponding to this request changes {@link LinkProperties}.
 *
 * <p>Starting with {@link android.os.Build.VERSION_CODES#O} this method is guaranteed
 * to be called immediately after {@link #onAvailable}.
 *
 * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or other synchronous
 * ConnectivityManager methods in this callback as this is prone to race conditions :
 * calling these methods while in a callback may return an outdated or even a null object.
 *
 * @param network The {@link Network} whose link properties have changed.
 * @param linkProperties The new {@link LinkProperties} for this network.
 */
",1,,,0,,,0,0,0,0,0,0,There are no statement changes between the early and late versions; both implementations are empty.,"Since there are no changes in the implementation of the method between the two versions, there is no potential for compatibility issues."
<android.hardware.radio.RadioManager.ModuleProperties: String toString()>,29,30,<android.hardware.radio.RadioManager.ModuleProperties: String toString()>,<android.hardware.radio.RadioManager.ModuleProperties: String toString()>,0,"{
    return ""ModuleProperties [mId="" + mId + "", mServiceName="" + mServiceName + "", mClassId="" + mClassId + "", mImplementor="" + mImplementor + "", mProduct="" + mProduct + "", mVersion="" + mVersion + "", mSerial="" + mSerial + "", mNumTuners="" + mNumTuners + "", mNumAudioSources="" + mNumAudioSources + "", mIsInitializationRequired="" + mIsInitializationRequired + "", mIsCaptureSupported="" + mIsCaptureSupported + "", mIsBgScanSupported="" + mIsBgScanSupported + "", mBands="" + Arrays.toString(mBands) + ""]"";
}","{
    return ""ModuleProperties [mId="" + mId + "", mServiceName="" + mServiceName + "", mClassId="" + mClassId + "", mImplementor="" + mImplementor + "", mProduct="" + mProduct + "", mVersion="" + mVersion + "", mSerial="" + mSerial + "", mNumTuners="" + mNumTuners + "", mNumAudioSources="" + mNumAudioSources + "", mIsInitializationRequired="" + mIsInitializationRequired + "", mIsCaptureSupported="" + mIsCaptureSupported + "", mIsBgScanSupported="" + mIsBgScanSupported + "", mBands="" + Arrays.toString(mBands) + ""]"";
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""ModuleProperties [mId, []), Expression("" + mId + "", mServiceName, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""ModuleProperties [mId, []), Expression("" + mId + "", mServiceName, [])])    VariableReference(return ""ModuleProperties [mId, [])    Expression("" + mId + "", mServiceName, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return ""ModuleProperties [mId, []), Expression("" + mId + "", mServiceName, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return ""ModuleProperties [mId, []), Expression("" + mId + "", mServiceName, [])])    VariableReference(return ""ModuleProperties [mId, [])    Expression("" + mId + "", mServiceName, [])  Statement(}, [])",0,,,0,[@Override],"[@NonNull, @Override]",1,,,0,0,0,0,0,0,The method implementations in both versions are identical. There is no change in the method body or return statement.,"As there is no change in the method implementations that can affect the return value or behavior, no compatibility issue arises."
"<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>",30,31,"<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>","<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>",0,"{
}","{
    if (LOCAL_LOGV) {
        Log.v(TAG, getClass().getName() + "".onUserSwitched() on user "" + context.getUserId());
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (LOCAL_LOGV) {, []), MethodCall(Log.v(TAG, getClass().getName() + "".onUserSwitched() on user "" + context.getUserId()), [VariableReference(Log, []), Expression(TAG, []), Expression(getClass().getName() + "".onUserSwitched() on user "" + context.getUserId(), [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (LOCAL_LOGV) {, [])  MethodCall(Log.v(TAG, getClass().getName() + "".onUserSwitched() on user "" + context.getUserId()), [VariableReference(Log, []), Expression(TAG, []), Expression(getClass().getName() + "".onUserSwitched() on user "" + context.getUserId(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(getClass().getName() + "".onUserSwitched() on user "" + context.getUserId(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Called when a user or profile is switched to.
 *
 * <p>This callback is only applicable to device owners.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 * @param switchedUser The {@link UserHandle} of the user that has just been switched to.
 */
","/**
 * Called when a user or profile is switched to.
 *
 * <p>This callback is only applicable to device owners.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 * @param switchedUser The {@link UserHandle} of the user that has just been switched to.
 */
",0,,,0,,,0,"1,2","3,4",0,"3,4",0,"A new control dependency (`if (LOCAL_LOGV) { ... }`) and a logging statement (`Log.v(TAG, getClass().getName() + "".onUserSwitched() on user "" + context.getUserId())`) have been added, so the code change type is 3,4.","The added statements would only affect logging and do not change the return value or throwable exceptions. Therefore, there is no potential Compatibility Issue and the CI type is 0."
<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()>,30,31,<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()>,<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()>,0,"{
    return mServices;
}","{
    return mServices;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(return mServices, []), Statement(}, [])])  Statement({, [])  Statement(return mServices, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mServices, []), Statement(}, [])])  Statement({, [])  Statement(return mServices, [])  Statement(}, [])",0,"/**
 * Returns a list of GATT services offered by this device.
 *
 * <p>An application must call {@link #addService} to add a serice to the
 * list of services offered by this device.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @return List of services. Returns an empty list if no services have been added yet.
 */
","/**
 * Returns a list of GATT services offered by this device.
 *
 * <p>An application must call {@link #addService} to add a serice to the
 * list of services offered by this device.
 *
 * @return List of services. Returns an empty list if no services have been added yet.
 */
",1,,"[@RequiresLegacyBluetoothPermission, @RequiresNoPermission]",1,,,0,0,0,0,"2,4",2,"The code implementation has not changed but two new annotations (@RequiresLegacyBluetoothPermission and @RequiresNoPermission) have been added. Hence, the change type is 2,4.","The addition of these annotations can change the behavior related to permission handling when invoking the method, potentially leading to different exceptions being thrown if the required permissions are not available. Therefore, the CI type is 2."
<android.app.Application: void dispatchActivityPostStarted(Activity)>,30,31,<android.app.Application: void dispatchActivityPostStarted(Activity)>,<android.app.Application: void dispatchActivityPostStarted(Activity)>,0,"{
    Object[] callbacks = collectActivityLifecycleCallbacks();
    if (callbacks != null) {
        for (int i = 0; i < callbacks.length; i++) {
            ((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity);
        }
    }
}","{
    Object[] callbacks = collectActivityLifecycleCallbacks();
    if (callbacks != null) {
        for (int i = 0; i < callbacks.length; i++) {
            ((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity);
        }
    }
}",0,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Object[] callbacks, []), Expression(collectActivityLifecycleCallbacks(), [])]), AssignmentExpression(=, [VariableReference(if (callbacks !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < callbacks.length, []), Statement(i++) {, []), MethodCall(((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity), [VariableReference(((ActivityLifecycleCallbacks) callbacks[i]), []), Expression(activity, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Object[] callbacks, []), Expression(collectActivityLifecycleCallbacks(), [])])    VariableReference(Object[] callbacks, [])    Expression(collectActivityLifecycleCallbacks(), [])  AssignmentExpression(=, [VariableReference(if (callbacks !, []), Expression(null) {, [])])    VariableReference(if (callbacks !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < callbacks.length, [])  Statement(i++) {, [])  MethodCall(((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity), [VariableReference(((ActivityLifecycleCallbacks) callbacks[i]), []), Expression(activity, [])])    VariableReference(((ActivityLifecycleCallbacks) callbacks[i]), [])    Expression(activity, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Object[] callbacks, []), Expression(collectActivityLifecycleCallbacks(), [])]), AssignmentExpression(=, [VariableReference(if (callbacks !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < callbacks.length, []), Statement(i++) {, []), MethodCall(((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity), [VariableReference(((ActivityLifecycleCallbacks) callbacks[i]), []), Expression(activity, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Object[] callbacks, []), Expression(collectActivityLifecycleCallbacks(), [])])    VariableReference(Object[] callbacks, [])    Expression(collectActivityLifecycleCallbacks(), [])  AssignmentExpression(=, [VariableReference(if (callbacks !, []), Expression(null) {, [])])    VariableReference(if (callbacks !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < callbacks.length, [])  Statement(i++) {, [])  MethodCall(((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity), [VariableReference(((ActivityLifecycleCallbacks) callbacks[i]), []), Expression(activity, [])])    VariableReference(((ActivityLifecycleCallbacks) callbacks[i]), [])    Expression(activity, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",0,,,0,[@UnsupportedAppUsage],"[@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)]",1,,,0,0,0,0,4,0,"The only change between the two versions is the addition of parameters to the @UnsupportedAppUsage annotation. Since this does not alter the method's logic, behavior, or output, it falls under the ""Other statement changed"" category.","The change to the annotation does not affect the method's runtime behavior or output in any way, so there is no potential for a compatibility issue."
"<android.hardware.camera2.impl.CameraMetadataNative: void set(Key<T>,T)>",31,32,"<android.hardware.camera2.impl.CameraMetadataNative: void set(Key<T>,T)>","<android.hardware.camera2.impl.CameraMetadataNative: void set(Key<T>,T)>",0,"{
    set(key.getNativeKey(), value);
}","{
    SetCommand s = sSetCommandMap.get(key);
    if (s != null) {
        s.setValue(this, value);
        return;
    }
    setBase(key, value);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(set(key.getNativeKey(), value), [VariableReference(set(key, []), Expression(), []), Expression(value, [])]), Statement(}, [])])  Statement({, [])  MethodCall(set(key.getNativeKey(), value), [VariableReference(set(key, []), Expression(), []), Expression(value, [])])    VariableReference(set(key, [])    Expression(), [])    Expression(value, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(SetCommand s, []), Expression(sSetCommandMap.get(key), [])]), AssignmentExpression(=, [VariableReference(if (s !, []), Expression(null) {, [])]), MethodCall(s.setValue(this, value), [VariableReference(s, []), Expression(this, []), Expression(value, [])]), Statement(return, []), Statement(}, []), Statement(setBase(key, value), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(SetCommand s, []), Expression(sSetCommandMap.get(key), [])])    VariableReference(SetCommand s, [])    Expression(sSetCommandMap.get(key), [])  AssignmentExpression(=, [VariableReference(if (s !, []), Expression(null) {, [])])    VariableReference(if (s !, [])    Expression(null) {, [])  MethodCall(s.setValue(this, value), [VariableReference(s, []), Expression(this, []), Expression(value, [])])    VariableReference(s, [])    Expression(this, [])    Expression(value, [])  Statement(return, [])  Statement(}, [])  Statement(setBase(key, value), [])  Statement(}, [])",1,,"/**
 * Set a camera metadata field to a value. The field definitions can be
 * found in {@link CameraCharacteristics}, {@link CaptureResult}, and
 * {@link CaptureRequest}.
 *
 * @param key The metadata field to write.
 * @param value The value to set the field to, which must be of a matching
 * type to the key.
 */
",1,,,0,,,0,"1,2","1,3,4,5",1,"3,4",0,"The control dependencies and the statements within the method have changed significantly in the late version. Specifically, an if condition is introduced, and calls to `s.setValue(this, value)` and `setBase(key, value)` replace the old direct call to `set(key.getNativeKey(), value)`. Therefore, the code change type is 3,4.","The changes in control flow and internal method calls may alter how the method sets the value, but there is no evidence to suggest that it will cause different return types/values or different exceptions. Thus, there is no compatibility issue."
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>,31,32,<android.view.accessibility.AccessibilityEvent: void setEventType(int)>,<android.view.accessibility.AccessibilityEvent: void setEventType(int)>,0,"{
    enforceNotSealed();
    mEventType = eventType;
}","{
    enforceNotSealed();
    mEventType = eventType;
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(enforceNotSealed(), []), AssignmentExpression(=, [VariableReference(mEventType, []), Expression(eventType, [])]), Statement(}, [])])  Statement({, [])  Statement(enforceNotSealed(), [])  AssignmentExpression(=, [VariableReference(mEventType, []), Expression(eventType, [])])    VariableReference(mEventType, [])    Expression(eventType, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(enforceNotSealed(), []), AssignmentExpression(=, [VariableReference(mEventType, []), Expression(eventType, [])]), Statement(}, [])])  Statement({, [])  Statement(enforceNotSealed(), [])  AssignmentExpression(=, [VariableReference(mEventType, []), Expression(eventType, [])])    VariableReference(mEventType, [])    Expression(eventType, [])  Statement(}, [])",0,"/**
 * Sets the event type.
 *
 * @param eventType The event type.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
","/**
 * Sets the event type.
 *
 * <b>Note: An event must represent a single event type.</b>
 * @param eventType The event type.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
",1,,,0,,,0,0,0,0,0,0,There are no changes between the early and late implementations for the method `setEventType(int)`.,No compatibility issues could arise as there are no changes in the implementation.
<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,31,32,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,0,"{
    final Context context = super.createDisplayContext(display);
    final int displayId = display.getDisplayId();
    setDefaultTokenInternal(context, displayId);
    return context;
}","{
    return new AccessibilityContext(super.createDisplayContext(display), mConnectionId);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Context context, []), Expression(super.createDisplayContext(display), [])]), AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(display.getDisplayId(), [])]), Statement(setDefaultTokenInternal(context, displayId), []), Statement(return context, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Context context, []), Expression(super.createDisplayContext(display), [])])    VariableReference(final Context context, [])    Expression(super.createDisplayContext(display), [])  AssignmentExpression(=, [VariableReference(final int displayId, []), Expression(display.getDisplayId(), [])])    VariableReference(final int displayId, [])    Expression(display.getDisplayId(), [])  Statement(setDefaultTokenInternal(context, displayId), [])  Statement(return context, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return new AccessibilityContext(super.createDisplayContext(display), mConnectionId), [VariableReference(return new AccessibilityContext(super, []), Expression(display), []), Expression(mConnectionId, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return new AccessibilityContext(super.createDisplayContext(display), mConnectionId), [VariableReference(return new AccessibilityContext(super, []), Expression(display), []), Expression(mConnectionId, [])])    VariableReference(return new AccessibilityContext(super, [])    Expression(display), [])    Expression(mConnectionId, [])  Statement(}, [])",1,,,0,[@Override],"[@NonNull, @Override]",1,,,0,"1,2","1,4",1,"1,3,4",1,"The return statement has changed from `context` to `new AccessibilityContext(super.createDisplayContext(display), mConnectionId)`. Additionally, some control dependency has changed and other statement changes (removing the setDefaultTokenInternal() and final int displayId assignment).","As the return statement has changed, the API could potentially return a different variable value or type, which causes a Compatibility Issue, so the CI type is 1."
<android.os.UserManager: Bundle getUserRestrictions()>,32,33,<android.os.UserManager: Bundle getUserRestrictions()>,<android.os.UserManager: Bundle getUserRestrictions()>,0,"{
    return getUserRestrictions(Process.myUserHandle());
}","{
    try {
        return mService.getUserRestrictions(getContextUserIfAppropriate());
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return getUserRestrictions(Process.myUserHandle()), [VariableReference(return getUserRestrictions(Process, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return getUserRestrictions(Process.myUserHandle()), [VariableReference(return getUserRestrictions(Process, []), Expression(), [])])    VariableReference(return getUserRestrictions(Process, [])    Expression(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.getUserRestrictions(getContextUserIfAppropriate()), [VariableReference(return mService, []), Expression(getContextUserIfAppropriate(), [])]), Statement(} catch (RemoteException re) {, []), MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.getUserRestrictions(getContextUserIfAppropriate()), [VariableReference(return mService, []), Expression(getContextUserIfAppropriate(), [])])    VariableReference(return mService, [])    Expression(getContextUserIfAppropriate(), [])  Statement(} catch (RemoteException re) {, [])  MethodCall(throw re.rethrowFromSystemServer(), [VariableReference(throw re, []), Expression(, [])])    VariableReference(throw re, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Returns the user-wide restrictions imposed on this user.
 * @return a Bundle containing all the restrictions.
 */
","/**
 * Returns the user-wide restrictions imposed on the context user.
 * @return a Bundle containing all the restrictions.
 */
",1,,"[@UserHandleAware(enabledSinceTargetSdkVersion = Build.VERSION_CODES.TIRAMISU, requiresAnyOfPermissionsIfNotCallerProfileGroup = { android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.INTERACT_ACROSS_USERS })]",1,,,0,"1,2","1,2,5","1,2","1,2,5","1,2","The return statement has changed from `getUserRestrictions(Process.myUserHandle())` to `mService.getUserRestrictions(getContextUserIfAppropriate())`. Additionally, the exception handling statement has been introduced, catching `RemoteException` and rethrowing it using `re.rethrowFromSystemServer()`.",
<android.service.dreams.DreamService: boolean isScreenBright()>,32,33,<android.service.dreams.DreamService: boolean isScreenBright()>,<android.service.dreams.DreamService: boolean isScreenBright()>,0,"{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}","{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}",0,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",0,"/**
 * Returns whether or not this dream keeps the screen bright while dreaming.
 * Defaults to false, allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
","/**
 * Returns whether this dream keeps the screen bright while dreaming.
 * Defaults to false, allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the implementation as both early and late versions of the method return the same value and have the same structure. ,"Since no actual code changes exist between the two versions, there are no compatibility issues."
<android.os.Parcel: Parcelable[] readParcelableArray(ClassLoader)>,32,33,<android.os.Parcel: Parcelable[] readParcelableArray(ClassLoader)>,<android.os.Parcel: Parcelable[] readParcelableArray(ClassLoader)>,0,"{
    int N = readInt();
    if (N < 0) {
        return null;
    }
    Parcelable[] p = new Parcelable[N];
    for (int i = 0; i < N; i++) {
        p[i] = readParcelable(loader);
    }
    return p;
}","{
    return readParcelableArrayInternal(loader, /* clazz */
    null);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int N, []), Expression(readInt(), [])]), Statement(if (N < 0) {, []), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Parcelable[] p, []), Expression(new Parcelable[N], [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(p[i], []), Expression(readParcelable(loader), [])]), Statement(}, []), Statement(return p, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int N, []), Expression(readInt(), [])])    VariableReference(int N, [])    Expression(readInt(), [])  Statement(if (N < 0) {, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Parcelable[] p, []), Expression(new Parcelable[N], [])])    VariableReference(Parcelable[] p, [])    Expression(new Parcelable[N], [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(p[i], []), Expression(readParcelable(loader), [])])    VariableReference(p[i], [])    Expression(readParcelable(loader), [])  Statement(}, [])  Statement(return p, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return readParcelableArrayInternal(loader, /* clazz */, []), Statement(null), []), Statement(}, [])])  Statement({, [])  Statement(return readParcelableArrayInternal(loader, /* clazz */, [])  Statement(null), [])  Statement(}, [])",1,"/**
 * Read and return a new Parcelable array from the parcel.
 * The given class loader will be used to load any enclosed
 * Parcelables.
 * @return the Parcelable array, or null if the array is null
 */
","/**
 * Read and return a new Parcelable array from the parcel.
 * The given class loader will be used to load any enclosed
 * Parcelables.
 * @return the Parcelable array, or null if the array is null
 *
 * @deprecated Use the type-safer version {@link #readParcelableArray(ClassLoader, Class)}
 * starting from Android {@link Build.VERSION_CODES#TIRAMISU}. Also consider changing the
 * format to use {@link #createTypedArray(Parcelable.Creator)} if possible (eg. if the
 * items' class is final) since this is also more performant. Note that changing to the
 * latter also requires changing the writes.
 */
",1,[@Nullable],"[@Deprecated, @Nullable]",1,,,0,"1,2","1,2,5","1,2","1, 5",1,"The method's implementation has changed to a call to a different method `readParcelableArrayInternal(loader, null)`, replacing the original logic of reading an integer, checking if it's less than 0, and filling a `Parcelable` array. Changes include replacing the control flow and dependent API used, so both 1 and 5 apply.","The change affects the return value of the method due to the complete change in the underlying logic and dependent API used in the late version. This can lead to the API returning different values, so the CI type is 1."
"<android.os.image.DynamicSystemClient.DynSystemServiceConnection: void onServiceConnected(ComponentName,IBinder)>",30,31,"<android.os.image.DynamicSystemClient.DynSystemServiceConnection: void onServiceConnected(ComponentName,IBinder)>","<android.os.image.DynamicSystemClient.DynSystemServiceConnection: void onServiceConnected(ComponentName,IBinder)>",0,"{
    Slog.v(TAG, ""DynSystemService connected"");
    mService = new Messenger(service);
    try {
        Message msg = Message.obtain(null, MSG_REGISTER_LISTENER);
        msg.replyTo = mMessenger;
        mService.send(msg);
    } catch (RemoteException e) {
        Slog.e(TAG, ""Unable to get status from installation service"");
        if (mExecutor != null) {
            mExecutor.execute(() -> {
                mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e);
            });
        } else {
            mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e);
        }
    }
}","{
    Slog.v(TAG, ""onServiceConnected: "" + className);
    mService = new Messenger(service);
    try {
        Message msg = Message.obtain(null, MSG_REGISTER_LISTENER);
        msg.replyTo = mMessenger;
        mService.send(msg);
    } catch (RemoteException e) {
        Slog.e(TAG, ""Unable to get status from installation service"");
        notifyOnStatusChangedListener(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Slog.v(TAG, ""DynSystemService connected""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""DynSystemService connected"", [])]), AssignmentExpression(=, [VariableReference(mService, []), Expression(new Messenger(service), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(null, MSG_REGISTER_LISTENER), [])]), AssignmentExpression(=, [VariableReference(msg.replyTo, []), Expression(mMessenger, [])]), MethodCall(mService.send(msg), [VariableReference(mService, []), Expression(msg, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Slog.e(TAG, ""Unable to get status from installation service""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""Unable to get status from installation service"", [])]), AssignmentExpression(=, [VariableReference(if (mExecutor !, []), Expression(null) {, [])]), MethodCall(mExecutor.execute((), [VariableReference(mExecutor, []), Expression((, [])]), MethodCall(mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e), [VariableReference(mListener, []), Expression(STATUS_UNKNOWN, []), Expression(CAUSE_ERROR_IPC, []), Expression(0, []), Expression(e, [])]), Statement(}), []), Statement(} else {, []), MethodCall(mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e), [VariableReference(mListener, []), Expression(STATUS_UNKNOWN, []), Expression(CAUSE_ERROR_IPC, []), Expression(0, []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Slog.v(TAG, ""DynSystemService connected""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""DynSystemService connected"", [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""DynSystemService connected"", [])  AssignmentExpression(=, [VariableReference(mService, []), Expression(new Messenger(service), [])])    VariableReference(mService, [])    Expression(new Messenger(service), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(null, MSG_REGISTER_LISTENER), [])])    VariableReference(Message msg, [])    Expression(Message.obtain(null, MSG_REGISTER_LISTENER), [])  AssignmentExpression(=, [VariableReference(msg.replyTo, []), Expression(mMessenger, [])])    VariableReference(msg.replyTo, [])    Expression(mMessenger, [])  MethodCall(mService.send(msg), [VariableReference(mService, []), Expression(msg, [])])    VariableReference(mService, [])    Expression(msg, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Slog.e(TAG, ""Unable to get status from installation service""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""Unable to get status from installation service"", [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""Unable to get status from installation service"", [])  AssignmentExpression(=, [VariableReference(if (mExecutor !, []), Expression(null) {, [])])    VariableReference(if (mExecutor !, [])    Expression(null) {, [])  MethodCall(mExecutor.execute((), [VariableReference(mExecutor, []), Expression((, [])])    VariableReference(mExecutor, [])    Expression((, [])  MethodCall(mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e), [VariableReference(mListener, []), Expression(STATUS_UNKNOWN, []), Expression(CAUSE_ERROR_IPC, []), Expression(0, []), Expression(e, [])])    VariableReference(mListener, [])    Expression(STATUS_UNKNOWN, [])    Expression(CAUSE_ERROR_IPC, [])    Expression(0, [])    Expression(e, [])  Statement(}), [])  Statement(} else {, [])  MethodCall(mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e), [VariableReference(mListener, []), Expression(STATUS_UNKNOWN, []), Expression(CAUSE_ERROR_IPC, []), Expression(0, []), Expression(e, [])])    VariableReference(mListener, [])    Expression(STATUS_UNKNOWN, [])    Expression(CAUSE_ERROR_IPC, [])    Expression(0, [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Slog.v(TAG, ""onServiceConnected: "" + className), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onServiceConnected: "" + className, [])]), AssignmentExpression(=, [VariableReference(mService, []), Expression(new Messenger(service), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(null, MSG_REGISTER_LISTENER), [])]), AssignmentExpression(=, [VariableReference(msg.replyTo, []), Expression(mMessenger, [])]), MethodCall(mService.send(msg), [VariableReference(mService, []), Expression(msg, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Slog.e(TAG, ""Unable to get status from installation service""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""Unable to get status from installation service"", [])]), Statement(notifyOnStatusChangedListener(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Slog.v(TAG, ""onServiceConnected: "" + className), [VariableReference(Slog, []), Expression(TAG, []), Expression(""onServiceConnected: "" + className, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""onServiceConnected: "" + className, [])  AssignmentExpression(=, [VariableReference(mService, []), Expression(new Messenger(service), [])])    VariableReference(mService, [])    Expression(new Messenger(service), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(null, MSG_REGISTER_LISTENER), [])])    VariableReference(Message msg, [])    Expression(Message.obtain(null, MSG_REGISTER_LISTENER), [])  AssignmentExpression(=, [VariableReference(msg.replyTo, []), Expression(mMessenger, [])])    VariableReference(msg.replyTo, [])    Expression(mMessenger, [])  MethodCall(mService.send(msg), [VariableReference(mService, []), Expression(msg, [])])    VariableReference(mService, [])    Expression(msg, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Slog.e(TAG, ""Unable to get status from installation service""), [VariableReference(Slog, []), Expression(TAG, []), Expression(""Unable to get status from installation service"", [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""Unable to get status from installation service"", [])  Statement(notifyOnStatusChangedListener(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e), [])  Statement(}, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"2,3,4",0,"2,4",2,"In the late version, the exception handling behavior has changed from calling `mListener.onStatusChanged` (with conditions based on `mExecutor`) to calling `notifyOnStatusChangedListener` unconditionally. Additionally, the log statement has been slightly modified to include `className`, which qualifies as an other statement change. Therefore, the code change types are 2,4.","Since the new exception handling behavior calls a different method (`notifyOnStatusChangedListener`) rather than `mListener.onStatusChanged`, the exception handling mechanism has changed. This could potentially lead to different behaviors or outcomes, resulting in a CI of type 2."
<android.hardware.display.DisplayManagerInternal.DisplayPowerRequest: boolean equals(DisplayPowerRequest)>,29,30,<android.hardware.display.DisplayManagerInternal.DisplayPowerRequest: boolean equals(DisplayPowerRequest)>,<android.hardware.display.DisplayManagerInternal.DisplayPowerRequest: boolean equals(DisplayPowerRequest)>,0,"{
    return other != null && policy == other.policy && useProximitySensor == other.useProximitySensor && screenBrightnessOverride == other.screenBrightnessOverride && useAutoBrightness == other.useAutoBrightness && floatEquals(screenAutoBrightnessAdjustmentOverride, other.screenAutoBrightnessAdjustmentOverride) && screenLowPowerBrightnessFactor == other.screenLowPowerBrightnessFactor && blockScreenOn == other.blockScreenOn && lowPowerMode == other.lowPowerMode && boostScreenBrightness == other.boostScreenBrightness && dozeScreenBrightness == other.dozeScreenBrightness && dozeScreenState == other.dozeScreenState;
}","{
    return other != null && policy == other.policy && useProximitySensor == other.useProximitySensor && floatEquals(screenBrightnessOverride, other.screenBrightnessOverride) && useAutoBrightness == other.useAutoBrightness && floatEquals(screenAutoBrightnessAdjustmentOverride, other.screenAutoBrightnessAdjustmentOverride) && screenLowPowerBrightnessFactor == other.screenLowPowerBrightnessFactor && blockScreenOn == other.blockScreenOn && lowPowerMode == other.lowPowerMode && boostScreenBrightness == other.boostScreenBrightness && floatEquals(dozeScreenBrightness, other.dozeScreenBrightness) && dozeScreenState == other.dozeScreenState;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return other !, []), Expression(null && policy, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return other !, []), Expression(null && policy, [])])    VariableReference(return other !, [])    Expression(null && policy, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return other !, []), Expression(null && policy, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return other !, []), Expression(null && policy, [])])    VariableReference(return other !, [])    Expression(null && policy, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"1,4",0,"1,3,4",1,"The condition in the return statement has been modified. Specifically, `screenBrightnessOverride == other.screenBrightnessOverride` was replaced by `floatEquals(screenBrightnessOverride, other.screenBrightnessOverride)`, and `dozeScreenBrightness == other.dozeScreenBrightness` was replaced by `floatEquals(dozeScreenBrightness, other.dozeScreenBrightness)`. Additionally, the control dependency has changed as the conditions in the return statement are part of a complex boolean expression. Therefore, the code change types are 1,3,4.","The change in the condition for comparing the screen brightness values and the use of `floatEquals` method could potentially lead to different comparisons and thus different return values, making the CI type 1."
<android.text.TextUtils: int getLayoutDirectionFromLocale(Locale)>,18,19,<android.text.TextUtils: int getLayoutDirectionFromLocale(Locale)>,<android.text.TextUtils: int getLayoutDirectionFromLocale(Locale)>,0,"{
    if (locale != null && !locale.equals(Locale.ROOT)) {
        final String scriptSubtag = ICU.getScript(ICU.addLikelySubtags(locale.toString()));
        if (scriptSubtag == null)
            return getLayoutDirectionFromFirstChar(locale);
        if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)) {
            return View.LAYOUT_DIRECTION_RTL;
        }
    }
    return View.LAYOUT_DIRECTION_LTR;
}","{
    if (locale != null && !locale.equals(Locale.ROOT)) {
        final String scriptSubtag = ICU.getScript(ICU.addLikelySubtags(locale.toString()));
        if (scriptSubtag == null)
            return getLayoutDirectionFromFirstChar(locale);
        if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)) {
            return View.LAYOUT_DIRECTION_RTL;
        }
    }
    // If forcing into RTL layout mode, return RTL as default, else LTR
    return SystemProperties.getBoolean(Settings.Global.DEVELOPMENT_FORCE_RTL, false) ? View.LAYOUT_DIRECTION_RTL : View.LAYOUT_DIRECTION_LTR;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (locale !, []), Expression(null && !locale.equals(Locale.ROOT)) {, [])]), AssignmentExpression(=, [VariableReference(final String scriptSubtag, []), Expression(ICU.getScript(ICU.addLikelySubtags(locale.toString())), [])]), AssignmentExpression(=, [VariableReference(if (scriptSubtag, []), Expression(, [])]), Statement(return getLayoutDirectionFromFirstChar(locale), []), MethodCall(if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)), [VariableReference(if (scriptSubtag, []), Expression(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG), [])]), Statement(return View.LAYOUT_DIRECTION_RTL, []), Statement(}, []), Statement(}, []), Statement(return View.LAYOUT_DIRECTION_LTR, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (locale !, []), Expression(null && !locale.equals(Locale.ROOT)) {, [])])    VariableReference(if (locale !, [])    Expression(null && !locale.equals(Locale.ROOT)) {, [])  AssignmentExpression(=, [VariableReference(final String scriptSubtag, []), Expression(ICU.getScript(ICU.addLikelySubtags(locale.toString())), [])])    VariableReference(final String scriptSubtag, [])    Expression(ICU.getScript(ICU.addLikelySubtags(locale.toString())), [])  AssignmentExpression(=, [VariableReference(if (scriptSubtag, []), Expression(, [])])    VariableReference(if (scriptSubtag, [])    Expression(, [])  Statement(return getLayoutDirectionFromFirstChar(locale), [])  MethodCall(if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)), [VariableReference(if (scriptSubtag, []), Expression(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG), [])])    VariableReference(if (scriptSubtag, [])    Expression(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG), [])  Statement(return View.LAYOUT_DIRECTION_RTL, [])  Statement(}, [])  Statement(}, [])  Statement(return View.LAYOUT_DIRECTION_LTR, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (locale !, []), Expression(null && !locale.equals(Locale.ROOT)) {, [])]), AssignmentExpression(=, [VariableReference(final String scriptSubtag, []), Expression(ICU.getScript(ICU.addLikelySubtags(locale.toString())), [])]), AssignmentExpression(=, [VariableReference(if (scriptSubtag, []), Expression(, [])]), Statement(return getLayoutDirectionFromFirstChar(locale), []), MethodCall(if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)), [VariableReference(if (scriptSubtag, []), Expression(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG), [])]), Statement(return View.LAYOUT_DIRECTION_RTL, []), Statement(}, []), Statement(}, []), Statement(// If forcing into RTL layout mode, return RTL as default, else LTR, []), MethodCall(return SystemProperties.getBoolean(Settings.Global.DEVELOPMENT_FORCE_RTL, false), [VariableReference(return SystemProperties, []), Expression(Settings.Global.DEVELOPMENT_FORCE_RTL, []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (locale !, []), Expression(null && !locale.equals(Locale.ROOT)) {, [])])    VariableReference(if (locale !, [])    Expression(null && !locale.equals(Locale.ROOT)) {, [])  AssignmentExpression(=, [VariableReference(final String scriptSubtag, []), Expression(ICU.getScript(ICU.addLikelySubtags(locale.toString())), [])])    VariableReference(final String scriptSubtag, [])    Expression(ICU.getScript(ICU.addLikelySubtags(locale.toString())), [])  AssignmentExpression(=, [VariableReference(if (scriptSubtag, []), Expression(, [])])    VariableReference(if (scriptSubtag, [])    Expression(, [])  Statement(return getLayoutDirectionFromFirstChar(locale), [])  MethodCall(if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)), [VariableReference(if (scriptSubtag, []), Expression(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG), [])])    VariableReference(if (scriptSubtag, [])    Expression(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG), [])  Statement(return View.LAYOUT_DIRECTION_RTL, [])  Statement(}, [])  Statement(}, [])  Statement(// If forcing into RTL layout mode, return RTL as default, else LTR, [])  MethodCall(return SystemProperties.getBoolean(Settings.Global.DEVELOPMENT_FORCE_RTL, false), [VariableReference(return SystemProperties, []), Expression(Settings.Global.DEVELOPMENT_FORCE_RTL, []), Expression(false, [])])    VariableReference(return SystemProperties, [])    Expression(Settings.Global.DEVELOPMENT_FORCE_RTL, [])    Expression(false, [])  Statement(}, [])",1,"/**
 * Return the layout direction for a given Locale
 *
 * @param locale the Locale for which we want the layout direction. Can be null.
 * @return the layout direction. This may be one of:
 * {@link android.view.View#LAYOUT_DIRECTION_LTR} or
 * {@link android.view.View#LAYOUT_DIRECTION_RTL}.
 *
 * Be careful: this code will need to be updated when vertical scripts will be supported
 */
","/**
 * Return the layout direction for a given Locale
 *
 * @param locale the Locale for which we want the layout direction. Can be null.
 * @return the layout direction. This may be one of:
 * {@link android.view.View#LAYOUT_DIRECTION_LTR} or
 * {@link android.view.View#LAYOUT_DIRECTION_RTL}.
 *
 * Be careful: this code will need to be updated when vertical scripts will be supported
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,3,1,"A new control dependency is introduced in the late implementation: `return SystemProperties.getBoolean(Settings.Global.DEVELOPMENT_FORCE_RTL, false) ? View.LAYOUT_DIRECTION_RTL : View.LAYOUT_DIRECTION_LTR;`. The new addition creates a change in the control flow of the method, so the code change type is 3.","The newly introduced control dependency could lead to different return values depending on the system property `Settings.Global.DEVELOPMENT_FORCE_RTL`. Therefore, the CI type is 1."
"<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(List<Surface>,StateCallback,Handler)>",25,26,"<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(List<Surface>,StateCallback,Handler)>","<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(List<Surface>,StateCallback,Handler)>",0,"{
    if (outputs == null || outputs.size() == 0 || outputs.size() > 2) {
        throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2"");
    }
    StreamConfigurationMap config = getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
    SurfaceUtils.checkConstrainedHighSpeedSurfaces(outputs, /*fpsRange*/
    null, config);
    List<OutputConfiguration> outConfigurations = new ArrayList<>(outputs.size());
    for (Surface surface : outputs) {
        outConfigurations.add(new OutputConfiguration(surface));
    }
    createCaptureSessionInternal(null, outConfigurations, callback, handler, /*isConstrainedHighSpeed*/
    true);
}","{
    if (outputs == null || outputs.size() == 0 || outputs.size() > 2) {
        throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2"");
    }
    StreamConfigurationMap config = getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
    SurfaceUtils.checkConstrainedHighSpeedSurfaces(outputs, /*fpsRange*/
    null, config);
    List<OutputConfiguration> outConfigurations = new ArrayList<>(outputs.size());
    for (Surface surface : outputs) {
        outConfigurations.add(new OutputConfiguration(surface));
    }
    createCaptureSessionInternal(null, outConfigurations, callback, handler, /*operatingMode*/
    ICameraDeviceUser.CONSTRAINED_HIGH_SPEED_MODE);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (outputs, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(StreamConfigurationMap config, []), Expression(getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP), [])]), Statement(null, config), []), AssignmentExpression(=, [VariableReference(List<OutputConfiguration> outConfigurations, []), Expression(new ArrayList<>(outputs.size()), [])]), Statement(for (Surface surface : outputs) {, []), MethodCall(outConfigurations.add(new OutputConfiguration(surface)), [VariableReference(outConfigurations, []), Expression(new OutputConfiguration(surface), [])]), Statement(}, []), Statement(createCaptureSessionInternal(null, outConfigurations, callback, handler, /*isConstrainedHighSpeed*/, []), Statement(true), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (outputs, []), Expression(, [])])    VariableReference(if (outputs, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(StreamConfigurationMap config, []), Expression(getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP), [])])    VariableReference(StreamConfigurationMap config, [])    Expression(getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP), [])  Statement(null, config), [])  AssignmentExpression(=, [VariableReference(List<OutputConfiguration> outConfigurations, []), Expression(new ArrayList<>(outputs.size()), [])])    VariableReference(List<OutputConfiguration> outConfigurations, [])    Expression(new ArrayList<>(outputs.size()), [])  Statement(for (Surface surface : outputs) {, [])  MethodCall(outConfigurations.add(new OutputConfiguration(surface)), [VariableReference(outConfigurations, []), Expression(new OutputConfiguration(surface), [])])    VariableReference(outConfigurations, [])    Expression(new OutputConfiguration(surface), [])  Statement(}, [])  Statement(createCaptureSessionInternal(null, outConfigurations, callback, handler, /*isConstrainedHighSpeed*/, [])  Statement(true), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (outputs, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(StreamConfigurationMap config, []), Expression(getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP), [])]), Statement(null, config), []), AssignmentExpression(=, [VariableReference(List<OutputConfiguration> outConfigurations, []), Expression(new ArrayList<>(outputs.size()), [])]), Statement(for (Surface surface : outputs) {, []), MethodCall(outConfigurations.add(new OutputConfiguration(surface)), [VariableReference(outConfigurations, []), Expression(new OutputConfiguration(surface), [])]), Statement(}, []), Statement(createCaptureSessionInternal(null, outConfigurations, callback, handler, /*operatingMode*/, []), Statement(ICameraDeviceUser.CONSTRAINED_HIGH_SPEED_MODE), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (outputs, []), Expression(, [])])    VariableReference(if (outputs, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(StreamConfigurationMap config, []), Expression(getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP), [])])    VariableReference(StreamConfigurationMap config, [])    Expression(getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP), [])  Statement(null, config), [])  AssignmentExpression(=, [VariableReference(List<OutputConfiguration> outConfigurations, []), Expression(new ArrayList<>(outputs.size()), [])])    VariableReference(List<OutputConfiguration> outConfigurations, [])    Expression(new ArrayList<>(outputs.size()), [])  Statement(for (Surface surface : outputs) {, [])  MethodCall(outConfigurations.add(new OutputConfiguration(surface)), [VariableReference(outConfigurations, []), Expression(new OutputConfiguration(surface), [])])    VariableReference(outConfigurations, [])    Expression(new OutputConfiguration(surface), [])  Statement(}, [])  Statement(createCaptureSessionInternal(null, outConfigurations, callback, handler, /*operatingMode*/, [])  Statement(ICameraDeviceUser.CONSTRAINED_HIGH_SPEED_MODE), [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,4,1,4,0,"The parameter of the method call within 'createCaptureSessionInternal' has changed from `true` (a boolean literal) to `ICameraDeviceUser.CONSTRAINED_HIGH_SPEED_MODE` (a constant). This does not change the return value or the exception handling but changes other statements, thus falling under the category 4.","Since the change does not impact the return value or exception handling, there lies no potential compatibility issue. Therefore, the CI type is 0."
<android.content.ContentValues: Long getAsLong(String)>,28,29,<android.content.ContentValues: Long getAsLong(String)>,<android.content.ContentValues: Long getAsLong(String)>,0,"{
    Object value = mValues.get(key);
    try {
        return value != null ? ((Number) value).longValue() : null;
    } catch (ClassCastException e) {
        if (value instanceof CharSequence) {
            try {
                return Long.valueOf(value.toString());
            } catch (NumberFormatException e2) {
                Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key);
                return null;
            }
        } else {
            Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e);
            return null;
        }
    }
}","{
    Object value = mMap.get(key);
    try {
        return value != null ? ((Number) value).longValue() : null;
    } catch (ClassCastException e) {
        if (value instanceof CharSequence) {
            try {
                return Long.valueOf(value.toString());
            } catch (NumberFormatException e2) {
                Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key);
                return null;
            }
        } else {
            Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e);
            return null;
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Object value, []), Expression(mValues.get(key), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(return value !, []), Expression(null ? ((Number) value).longValue() : null, [])]), Statement(} catch (ClassCastException e) {, []), Statement(if (value instanceof CharSequence) {, []), Statement(try {, []), MethodCall(return Long.valueOf(value.toString()), [VariableReference(return Long, []), Expression(value.toString(), [])]), Statement(} catch (NumberFormatException e2) {, []), MethodCall(Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot parse Long value for "" + value + "" at key "" + key, [])]), Statement(return null, []), Statement(}, []), Statement(} else {, []), MethodCall(Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot cast value for "" + key + "" to a Long: "" + value, []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Object value, []), Expression(mValues.get(key), [])])    VariableReference(Object value, [])    Expression(mValues.get(key), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(return value !, []), Expression(null ? ((Number) value).longValue() : null, [])])    VariableReference(return value !, [])    Expression(null ? ((Number) value).longValue() : null, [])  Statement(} catch (ClassCastException e) {, [])  Statement(if (value instanceof CharSequence) {, [])  Statement(try {, [])  MethodCall(return Long.valueOf(value.toString()), [VariableReference(return Long, []), Expression(value.toString(), [])])    VariableReference(return Long, [])    Expression(value.toString(), [])  Statement(} catch (NumberFormatException e2) {, [])  MethodCall(Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot parse Long value for "" + value + "" at key "" + key, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot parse Long value for "" + value + "" at key "" + key, [])  Statement(return null, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot cast value for "" + key + "" to a Long: "" + value, []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot cast value for "" + key + "" to a Long: "" + value, [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Object value, []), Expression(mMap.get(key), [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(return value !, []), Expression(null ? ((Number) value).longValue() : null, [])]), Statement(} catch (ClassCastException e) {, []), Statement(if (value instanceof CharSequence) {, []), Statement(try {, []), MethodCall(return Long.valueOf(value.toString()), [VariableReference(return Long, []), Expression(value.toString(), [])]), Statement(} catch (NumberFormatException e2) {, []), MethodCall(Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot parse Long value for "" + value + "" at key "" + key, [])]), Statement(return null, []), Statement(}, []), Statement(} else {, []), MethodCall(Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot cast value for "" + key + "" to a Long: "" + value, []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Object value, []), Expression(mMap.get(key), [])])    VariableReference(Object value, [])    Expression(mMap.get(key), [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(return value !, []), Expression(null ? ((Number) value).longValue() : null, [])])    VariableReference(return value !, [])    Expression(null ? ((Number) value).longValue() : null, [])  Statement(} catch (ClassCastException e) {, [])  Statement(if (value instanceof CharSequence) {, [])  Statement(try {, [])  MethodCall(return Long.valueOf(value.toString()), [VariableReference(return Long, []), Expression(value.toString(), [])])    VariableReference(return Long, [])    Expression(value.toString(), [])  Statement(} catch (NumberFormatException e2) {, [])  MethodCall(Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot parse Long value for "" + value + "" at key "" + key, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot parse Long value for "" + value + "" at key "" + key, [])  Statement(return null, [])  Statement(}, [])  Statement(} else {, [])  MethodCall(Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot cast value for "" + key + "" to a Long: "" + value, []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot cast value for "" + key + "" to a Long: "" + value, [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Gets a value and converts it to a Long.
 *
 * @param key the value to get
 * @return the Long value, or {@code null} if the value is missing or cannot be converted
 */
","/**
 * Gets a value and converts it to a Long.
 *
 * @param key the value to get
 * @return the Long value, or {@code null} if the value is missing or cannot be converted
 */
",-1,,,-1,-1,-1,-1,-1,4,0,"4,5",0,"The code has changed from `mValues.get(key)` to `mMap.get(key)`, indicating a potential change in the underlying data structure being accessed.","Since the change only involves accessing the data structure and the rest of the code logic remains the same, it doesn't directly result in different return values or exception handling behaviors."
<android.widget.RemoteViews.AsyncApplyTask: ViewTree doInBackground(Void)>,30,31,<android.widget.RemoteViews.AsyncApplyTask: ViewTree doInBackground(Void)>,<android.widget.RemoteViews.AsyncApplyTask: ViewTree doInBackground(Void)>,0,"{
    try {
        if (mResult == null) {
            mResult = inflateView(mContext, mRV, mParent);
        }
        mTree = new ViewTree(mResult);
        if (mRV.mActions != null) {
            int count = mRV.mActions.size();
            mActions = new Action[count];
            for (int i = 0; i < count && !isCancelled(); i++) {
                // TODO: check if isCancelled in nested views.
                mActions[i] = mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler);
            }
        } else {
            mActions = null;
        }
        return mTree;
    } catch (Exception e) {
        mError = e;
        return null;
    }
}","{
    try {
        if (mResult == null) {
            mResult = inflateView(mContext, mRV, mParent, 0, mColorResources);
        }
        mTree = new ViewTree(mResult);
        if (mRV.mActions != null) {
            int count = mRV.mActions.size();
            mActions = new Action[count];
            for (int i = 0; i < count && !isCancelled(); i++) {
                // TODO: check if isCancelled in nested views.
                mActions[i] = mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler, mColorResources);
            }
        } else {
            mActions = null;
        }
        return mTree;
    } catch (Exception e) {
        mError = e;
        return null;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mResult, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mResult, []), Expression(inflateView(mContext, mRV, mParent), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mTree, []), Expression(new ViewTree(mResult), [])]), AssignmentExpression(=, [VariableReference(if (mRV.mActions !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(int count, []), Expression(mRV.mActions.size(), [])]), AssignmentExpression(=, [VariableReference(mActions, []), Expression(new Action[count], [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < count && !isCancelled(), []), Statement(i++) {, []), Statement(// TODO: check if isCancelled in nested views., []), AssignmentExpression(=, [VariableReference(mActions[i], []), Expression(mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler), [])]), Statement(}, []), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mActions, []), Expression(null, [])]), Statement(}, []), Statement(return mTree, []), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(mError, []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mResult, []), Expression(, [])])    VariableReference(if (mResult, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mResult, []), Expression(inflateView(mContext, mRV, mParent), [])])    VariableReference(mResult, [])    Expression(inflateView(mContext, mRV, mParent), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mTree, []), Expression(new ViewTree(mResult), [])])    VariableReference(mTree, [])    Expression(new ViewTree(mResult), [])  AssignmentExpression(=, [VariableReference(if (mRV.mActions !, []), Expression(null) {, [])])    VariableReference(if (mRV.mActions !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(int count, []), Expression(mRV.mActions.size(), [])])    VariableReference(int count, [])    Expression(mRV.mActions.size(), [])  AssignmentExpression(=, [VariableReference(mActions, []), Expression(new Action[count], [])])    VariableReference(mActions, [])    Expression(new Action[count], [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < count && !isCancelled(), [])  Statement(i++) {, [])  Statement(// TODO: check if isCancelled in nested views., [])  AssignmentExpression(=, [VariableReference(mActions[i], []), Expression(mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler), [])])    VariableReference(mActions[i], [])    Expression(mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler), [])  Statement(}, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mActions, []), Expression(null, [])])    VariableReference(mActions, [])    Expression(null, [])  Statement(}, [])  Statement(return mTree, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(mError, []), Expression(e, [])])    VariableReference(mError, [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(if (mResult, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mResult, []), Expression(inflateView(mContext, mRV, mParent, 0, mColorResources), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mTree, []), Expression(new ViewTree(mResult), [])]), AssignmentExpression(=, [VariableReference(if (mRV.mActions !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(int count, []), Expression(mRV.mActions.size(), [])]), AssignmentExpression(=, [VariableReference(mActions, []), Expression(new Action[count], [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < count && !isCancelled(), []), Statement(i++) {, []), Statement(// TODO: check if isCancelled in nested views., []), AssignmentExpression(=, [VariableReference(mActions[i], []), Expression(mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler, mColorResources), [])]), Statement(}, []), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mActions, []), Expression(null, [])]), Statement(}, []), Statement(return mTree, []), Statement(} catch (Exception e) {, []), AssignmentExpression(=, [VariableReference(mError, []), Expression(e, [])]), Statement(return null, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(if (mResult, []), Expression(, [])])    VariableReference(if (mResult, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mResult, []), Expression(inflateView(mContext, mRV, mParent, 0, mColorResources), [])])    VariableReference(mResult, [])    Expression(inflateView(mContext, mRV, mParent, 0, mColorResources), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mTree, []), Expression(new ViewTree(mResult), [])])    VariableReference(mTree, [])    Expression(new ViewTree(mResult), [])  AssignmentExpression(=, [VariableReference(if (mRV.mActions !, []), Expression(null) {, [])])    VariableReference(if (mRV.mActions !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(int count, []), Expression(mRV.mActions.size(), [])])    VariableReference(int count, [])    Expression(mRV.mActions.size(), [])  AssignmentExpression(=, [VariableReference(mActions, []), Expression(new Action[count], [])])    VariableReference(mActions, [])    Expression(new Action[count], [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < count && !isCancelled(), [])  Statement(i++) {, [])  Statement(// TODO: check if isCancelled in nested views., [])  AssignmentExpression(=, [VariableReference(mActions[i], []), Expression(mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler, mColorResources), [])])    VariableReference(mActions[i], [])    Expression(mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler, mColorResources), [])  Statement(}, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mActions, []), Expression(null, [])])    VariableReference(mActions, [])    Expression(null, [])  Statement(}, [])  Statement(return mTree, [])  Statement(} catch (Exception e) {, [])  AssignmentExpression(=, [VariableReference(mError, []), Expression(e, [])])    VariableReference(mError, [])    Expression(e, [])  Statement(return null, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],"[@Nullable, @Override]",-1,-1,-1,-1,-1,5,0,"3,5",1,"The `inflateView` method call and the `initActionAsync` method call in the `for` loop have modified parameters (i.e., `mColorResources` was added to their parameters). Additionally, `inflateView` and `initActionAsync` methods have introduced changes in their parameter list, so this falls under control dependency changed and dependent API changed.","With the change in parameters of `inflateView` and `initActionAsync` methods, the `mResult` and `mActions` variables could be different, potentially affecting the return value of the method. This leads to a potential CI caused by different return values (CI type 1)."
<android.hardware.camera2.impl.CameraDeviceImpl: void createExtensionSession(ExtensionSessionConfiguration)>,32,33,,,,"{
    try {
        if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()) {
            mCurrentAdvancedExtensionSession = CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration);
        } else {
            mCurrentExtensionSession = CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration);
        }
    } catch (RemoteException e) {
        throw new CameraAccessException(CameraAccessException.CAMERA_ERROR);
    }
}","{
    try {
        if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()) {
            mCurrentAdvancedExtensionSession = CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++);
        } else {
            mCurrentExtensionSession = CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++);
        }
    } catch (RemoteException e) {
        throw new CameraAccessException(CameraAccessException.CAMERA_ERROR);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()), [VariableReference(if (CameraExtensionCharacteristics, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(mCurrentAdvancedExtensionSession, []), Expression(CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mCurrentExtensionSession, []), Expression(CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration), [])]), Statement(}, []), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()), [VariableReference(if (CameraExtensionCharacteristics, []), Expression(), [])])    VariableReference(if (CameraExtensionCharacteristics, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(mCurrentAdvancedExtensionSession, []), Expression(CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration), [])])    VariableReference(mCurrentAdvancedExtensionSession, [])    Expression(CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mCurrentExtensionSession, []), Expression(CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration), [])])    VariableReference(mCurrentExtensionSession, [])    Expression(CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration), [])  Statement(}, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()), [VariableReference(if (CameraExtensionCharacteristics, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(mCurrentAdvancedExtensionSession, []), Expression(CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mCurrentExtensionSession, []), Expression(CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++), [])]), Statement(}, []), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()), [VariableReference(if (CameraExtensionCharacteristics, []), Expression(), [])])    VariableReference(if (CameraExtensionCharacteristics, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(mCurrentAdvancedExtensionSession, []), Expression(CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++), [])])    VariableReference(mCurrentAdvancedExtensionSession, [])    Expression(CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mCurrentExtensionSession, []), Expression(CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++), [])])    VariableReference(mCurrentExtensionSession, [])    Expression(CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++), [])  Statement(}, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])",1,,,0,[@Override],[@Override],0,,,,,5,0,"4,5",0,"The change involves updating the method call to include an additional parameter, `mNextSessionId++`, in both branches of the if-else condition. This means that the dependent APIs `CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession` and `CameraExtensionSessionImpl.createCameraExtensionSession` have likely changed to accept this new parameter. Thus, the change involves ""Other statement changed"" (4) and ""Dependent API changed"" (5).","Given that the dependent APIs now accept an additional parameter but the overall control flow and exception handling logic remain unchanged, there is no indication that this change will lead to different return values or exception handling. Therefore, there is no compatibility issue (0)."
<android.webkit.WebView: void onDraw(Canvas)>,6,7,<android.webkit.WebView: void onDraw(Canvas)>,<android.webkit.WebView: void onDraw(Canvas)>,0,"{
    // if mNativeClass is 0, the WebView has been destroyed. Do nothing.
    if (mNativeClass == 0) {
        return;
    }
    int saveCount = canvas.save();
    if (mTitleBar != null) {
        canvas.translate(0, (int) mTitleBar.getHeight());
    }
    // Update the buttons in the picture, so when we draw the picture
    // to the screen, they are in the correct state.
    // Tell the native side if user is a) touching the screen,
    // b) pressing the trackball down, or c) pressing the enter key
    // If the cursor is on a button, we need to draw it in the pressed
    // state.
    // If mNativeClass is 0, we should not reach here, so we do not
    // need to check it again.
    nativeRecordButtons(hasFocus() && hasWindowFocus(), mTouchMode == TOUCH_SHORTPRESS_START_MODE || mTrackballDown || mGotCenterDown, false);
    drawCoreAndCursorRing(canvas, mBackgroundColor, mDrawCursorRing);
    canvas.restoreToCount(saveCount);
    // Now draw the shadow.
    if (mTitleBar != null) {
        int y = mScrollY + getVisibleTitleHeight();
        int height = (int) (5f * getContext().getResources().getDisplayMetrics().density);
        mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height);
        mTitleShadow.draw(canvas);
    }
    if (AUTO_REDRAW_HACK && mAutoRedraw) {
        invalidate();
    }
}","{
    // if mNativeClass is 0, the WebView has been destroyed. Do nothing.
    if (mNativeClass == 0) {
        return;
    }
    int saveCount = canvas.save();
    if (mTitleBar != null) {
        canvas.translate(0, (int) mTitleBar.getHeight());
    }
    if (mDragTrackerHandler == null || !mDragTrackerHandler.draw(canvas)) {
        drawContent(canvas);
    }
    canvas.restoreToCount(saveCount);
    // Now draw the shadow.
    if (mTitleBar != null) {
        int y = mScrollY + getVisibleTitleHeight();
        int height = (int) (5f * getContext().getResources().getDisplayMetrics().density);
        mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height);
        mTitleShadow.draw(canvas);
    }
    if (AUTO_REDRAW_HACK && mAutoRedraw) {
        invalidate();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// if mNativeClass is 0, the WebView has been destroyed. Do nothing., []), AssignmentExpression(=, [VariableReference(if (mNativeClass, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(int saveCount, []), Expression(canvas.save(), [])]), AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])]), MethodCall(canvas.translate(0, (int) mTitleBar.getHeight()), [VariableReference(canvas, []), Expression(0, []), Expression((int) mTitleBar.getHeight(), [])]), Statement(}, []), Statement(// Update the buttons in the picture, so when we draw the picture, []), Statement(// to the screen, they are in the correct state., []), Statement(// Tell the native side if user is a) touching the screen,, []), Statement(// b) pressing the trackball down, or c) pressing the enter key, []), Statement(// If the cursor is on a button, we need to draw it in the pressed, []), Statement(// state., []), Statement(// If mNativeClass is 0, we should not reach here, so we do not, []), Statement(// need to check it again., []), AssignmentExpression(=, [VariableReference(nativeRecordButtons(hasFocus() && hasWindowFocus(), mTouchMode, []), Expression(, [])]), Statement(drawCoreAndCursorRing(canvas, mBackgroundColor, mDrawCursorRing), []), MethodCall(canvas.restoreToCount(saveCount), [VariableReference(canvas, []), Expression(saveCount, [])]), Statement(// Now draw the shadow., []), AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(int y, []), Expression(mScrollY + getVisibleTitleHeight(), [])]), AssignmentExpression(=, [VariableReference(int height, []), Expression((int) (5f * getContext().getResources().getDisplayMetrics().density), [])]), MethodCall(mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height), [VariableReference(mTitleShadow, []), Expression(mScrollX, []), Expression(y, []), Expression(mScrollX + getWidth(), []), Expression(y + height, [])]), MethodCall(mTitleShadow.draw(canvas), [VariableReference(mTitleShadow, []), Expression(canvas, [])]), Statement(}, []), Statement(if (AUTO_REDRAW_HACK && mAutoRedraw) {, []), Statement(invalidate(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// if mNativeClass is 0, the WebView has been destroyed. Do nothing., [])  AssignmentExpression(=, [VariableReference(if (mNativeClass, []), Expression(, [])])    VariableReference(if (mNativeClass, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int saveCount, []), Expression(canvas.save(), [])])    VariableReference(int saveCount, [])    Expression(canvas.save(), [])  AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])])    VariableReference(if (mTitleBar !, [])    Expression(null) {, [])  MethodCall(canvas.translate(0, (int) mTitleBar.getHeight()), [VariableReference(canvas, []), Expression(0, []), Expression((int) mTitleBar.getHeight(), [])])    VariableReference(canvas, [])    Expression(0, [])    Expression((int) mTitleBar.getHeight(), [])  Statement(}, [])  Statement(// Update the buttons in the picture, so when we draw the picture, [])  Statement(// to the screen, they are in the correct state., [])  Statement(// Tell the native side if user is a) touching the screen,, [])  Statement(// b) pressing the trackball down, or c) pressing the enter key, [])  Statement(// If the cursor is on a button, we need to draw it in the pressed, [])  Statement(// state., [])  Statement(// If mNativeClass is 0, we should not reach here, so we do not, [])  Statement(// need to check it again., [])  AssignmentExpression(=, [VariableReference(nativeRecordButtons(hasFocus() && hasWindowFocus(), mTouchMode, []), Expression(, [])])    VariableReference(nativeRecordButtons(hasFocus() && hasWindowFocus(), mTouchMode, [])    Expression(, [])  Statement(drawCoreAndCursorRing(canvas, mBackgroundColor, mDrawCursorRing), [])  MethodCall(canvas.restoreToCount(saveCount), [VariableReference(canvas, []), Expression(saveCount, [])])    VariableReference(canvas, [])    Expression(saveCount, [])  Statement(// Now draw the shadow., [])  AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])])    VariableReference(if (mTitleBar !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(int y, []), Expression(mScrollY + getVisibleTitleHeight(), [])])    VariableReference(int y, [])    Expression(mScrollY + getVisibleTitleHeight(), [])  AssignmentExpression(=, [VariableReference(int height, []), Expression((int) (5f * getContext().getResources().getDisplayMetrics().density), [])])    VariableReference(int height, [])    Expression((int) (5f * getContext().getResources().getDisplayMetrics().density), [])  MethodCall(mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height), [VariableReference(mTitleShadow, []), Expression(mScrollX, []), Expression(y, []), Expression(mScrollX + getWidth(), []), Expression(y + height, [])])    VariableReference(mTitleShadow, [])    Expression(mScrollX, [])    Expression(y, [])    Expression(mScrollX + getWidth(), [])    Expression(y + height, [])  MethodCall(mTitleShadow.draw(canvas), [VariableReference(mTitleShadow, []), Expression(canvas, [])])    VariableReference(mTitleShadow, [])    Expression(canvas, [])  Statement(}, [])  Statement(if (AUTO_REDRAW_HACK && mAutoRedraw) {, [])  Statement(invalidate(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// if mNativeClass is 0, the WebView has been destroyed. Do nothing., []), AssignmentExpression(=, [VariableReference(if (mNativeClass, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(int saveCount, []), Expression(canvas.save(), [])]), AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])]), MethodCall(canvas.translate(0, (int) mTitleBar.getHeight()), [VariableReference(canvas, []), Expression(0, []), Expression((int) mTitleBar.getHeight(), [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mDragTrackerHandler, []), Expression(, [])]), Statement(drawContent(canvas), []), Statement(}, []), MethodCall(canvas.restoreToCount(saveCount), [VariableReference(canvas, []), Expression(saveCount, [])]), Statement(// Now draw the shadow., []), AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(int y, []), Expression(mScrollY + getVisibleTitleHeight(), [])]), AssignmentExpression(=, [VariableReference(int height, []), Expression((int) (5f * getContext().getResources().getDisplayMetrics().density), [])]), MethodCall(mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height), [VariableReference(mTitleShadow, []), Expression(mScrollX, []), Expression(y, []), Expression(mScrollX + getWidth(), []), Expression(y + height, [])]), MethodCall(mTitleShadow.draw(canvas), [VariableReference(mTitleShadow, []), Expression(canvas, [])]), Statement(}, []), Statement(if (AUTO_REDRAW_HACK && mAutoRedraw) {, []), Statement(invalidate(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// if mNativeClass is 0, the WebView has been destroyed. Do nothing., [])  AssignmentExpression(=, [VariableReference(if (mNativeClass, []), Expression(, [])])    VariableReference(if (mNativeClass, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int saveCount, []), Expression(canvas.save(), [])])    VariableReference(int saveCount, [])    Expression(canvas.save(), [])  AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])])    VariableReference(if (mTitleBar !, [])    Expression(null) {, [])  MethodCall(canvas.translate(0, (int) mTitleBar.getHeight()), [VariableReference(canvas, []), Expression(0, []), Expression((int) mTitleBar.getHeight(), [])])    VariableReference(canvas, [])    Expression(0, [])    Expression((int) mTitleBar.getHeight(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mDragTrackerHandler, []), Expression(, [])])    VariableReference(if (mDragTrackerHandler, [])    Expression(, [])  Statement(drawContent(canvas), [])  Statement(}, [])  MethodCall(canvas.restoreToCount(saveCount), [VariableReference(canvas, []), Expression(saveCount, [])])    VariableReference(canvas, [])    Expression(saveCount, [])  Statement(// Now draw the shadow., [])  AssignmentExpression(=, [VariableReference(if (mTitleBar !, []), Expression(null) {, [])])    VariableReference(if (mTitleBar !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(int y, []), Expression(mScrollY + getVisibleTitleHeight(), [])])    VariableReference(int y, [])    Expression(mScrollY + getVisibleTitleHeight(), [])  AssignmentExpression(=, [VariableReference(int height, []), Expression((int) (5f * getContext().getResources().getDisplayMetrics().density), [])])    VariableReference(int height, [])    Expression((int) (5f * getContext().getResources().getDisplayMetrics().density), [])  MethodCall(mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height), [VariableReference(mTitleShadow, []), Expression(mScrollX, []), Expression(y, []), Expression(mScrollX + getWidth(), []), Expression(y + height, [])])    VariableReference(mTitleShadow, [])    Expression(mScrollX, [])    Expression(y, [])    Expression(mScrollX + getWidth(), [])    Expression(y + height, [])  MethodCall(mTitleShadow.draw(canvas), [VariableReference(mTitleShadow, []), Expression(canvas, [])])    VariableReference(mTitleShadow, [])    Expression(canvas, [])  Statement(}, [])  Statement(if (AUTO_REDRAW_HACK && mAutoRedraw) {, [])  Statement(invalidate(), [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"1,3",1,"The control dependency has changed with the introduction of the condition for `mDragTrackerHandler` and its `draw` method. Additionally, the previously used methods `nativeRecordButtons` and `drawCoreAndCursorRing` have been removed and replaced with `drawContent`, causing a change in the statements, hence the change type is 1,3.","The changes in control flow and the introduction of new methods could lead to different drawing behaviors of the `WebView`, potentially affecting the returned results or their states. Thus, the Compatibility Issue type is 1."
<android.app.ActivityThread.PackageInfo: ClassLoader getClassLoader()>,7,8,<android.app.ActivityThread.PackageInfo: ClassLoader getClassLoader()>,<android.app.ActivityThread.PackageInfo: ClassLoader getClassLoader()>,0,"{
    synchronized (this) {
        if (mClassLoader != null) {
            return mClassLoader;
        }
        if (mIncludeCode && !mPackageName.equals(""android"")) {
            String zip = mAppDir;
            /*
                     * The following is a bit of a hack to inject
                     * instrumentation into the system: If the app
                     * being started matches one of the instrumentation names,
                     * then we combine both the ""instrumentation"" and
                     * ""instrumented"" app into the path, along with the
                     * concatenation of both apps' shared library lists.
                     */
            String instrumentationAppDir = mActivityThread.mInstrumentationAppDir;
            String instrumentationAppPackage = mActivityThread.mInstrumentationAppPackage;
            String instrumentedAppDir = mActivityThread.mInstrumentedAppDir;
            String[] instrumentationLibs = null;
            if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
                zip = instrumentationAppDir + "":"" + instrumentedAppDir;
                if (!instrumentedAppDir.equals(instrumentationAppDir)) {
                    instrumentationLibs = getLibrariesFor(instrumentationAppPackage);
                }
            }
            if ((mSharedLibraries != null) || (instrumentationLibs != null)) {
                zip = combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip;
            }
            if (localLOGV)
                Log.v(TAG, ""Class path: "" + zip);
            mClassLoader = ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader);
        } else {
            if (mBaseClassLoader == null) {
                mClassLoader = ClassLoader.getSystemClassLoader();
            } else {
                mClassLoader = mBaseClassLoader;
            }
        }
        return mClassLoader;
    }
}","{
    synchronized (this) {
        if (mClassLoader != null) {
            return mClassLoader;
        }
        if (mIncludeCode && !mPackageName.equals(""android"")) {
            String zip = mAppDir;
            /*
                     * The following is a bit of a hack to inject
                     * instrumentation into the system: If the app
                     * being started matches one of the instrumentation names,
                     * then we combine both the ""instrumentation"" and
                     * ""instrumented"" app into the path, along with the
                     * concatenation of both apps' shared library lists.
                     */
            String instrumentationAppDir = mActivityThread.mInstrumentationAppDir;
            String instrumentationAppPackage = mActivityThread.mInstrumentationAppPackage;
            String instrumentedAppDir = mActivityThread.mInstrumentedAppDir;
            String[] instrumentationLibs = null;
            if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
                zip = instrumentationAppDir + "":"" + instrumentedAppDir;
                if (!instrumentedAppDir.equals(instrumentationAppDir)) {
                    instrumentationLibs = getLibrariesFor(instrumentationAppPackage);
                }
            }
            if ((mSharedLibraries != null) || (instrumentationLibs != null)) {
                zip = combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip;
            }
            if (localLOGV)
                Slog.v(TAG, ""Class path: "" + zip);
            mClassLoader = ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader);
            initializeJavaContextClassLoader();
        } else {
            if (mBaseClassLoader == null) {
                mClassLoader = ClassLoader.getSystemClassLoader();
            } else {
                mClassLoader = mBaseClassLoader;
            }
        }
        return mClassLoader;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), AssignmentExpression(=, [VariableReference(if (mClassLoader !, []), Expression(null) {, [])]), Statement(return mClassLoader, []), Statement(}, []), MethodCall(if (mIncludeCode && !mPackageName.equals(""android"")), [VariableReference(if (mIncludeCode && !mPackageName, []), Expression(""android""), [])]), AssignmentExpression(=, [VariableReference(String zip, []), Expression(mAppDir, [])]), Statement(/*, []), Statement(* The following is a bit of a hack to inject, []), Statement(* instrumentation into the system: If the app, []), Statement(* being started matches one of the instrumentation names,, []), Statement(* then we combine both the ""instrumentation"" and, []), Statement(* ""instrumented"" app into the path, along with the, []), Statement(* concatenation of both apps' shared library lists., []), Statement(*/, []), AssignmentExpression(=, [VariableReference(String instrumentationAppDir, []), Expression(mActivityThread.mInstrumentationAppDir, [])]), AssignmentExpression(=, [VariableReference(String instrumentationAppPackage, []), Expression(mActivityThread.mInstrumentationAppPackage, [])]), AssignmentExpression(=, [VariableReference(String instrumentedAppDir, []), Expression(mActivityThread.mInstrumentedAppDir, [])]), AssignmentExpression(=, [VariableReference(String[] instrumentationLibs, []), Expression(null, [])]), MethodCall(if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)), [VariableReference(if (mAppDir, []), Expression(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir), [])]), AssignmentExpression(=, [VariableReference(zip, []), Expression(instrumentationAppDir + "":"" + instrumentedAppDir, [])]), MethodCall(if (!instrumentedAppDir.equals(instrumentationAppDir)), [VariableReference(if (!instrumentedAppDir, []), Expression(instrumentationAppDir), [])]), AssignmentExpression(=, [VariableReference(instrumentationLibs, []), Expression(getLibrariesFor(instrumentationAppPackage), [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if ((mSharedLibraries !, []), Expression(null) || (instrumentationLibs !, [])]), AssignmentExpression(=, [VariableReference(zip, []), Expression(combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip, [])]), Statement(}, []), Statement(if (localLOGV), []), MethodCall(Log.v(TAG, ""Class path: "" + zip), [VariableReference(Log, []), Expression(TAG, []), Expression(""Class path: "" + zip, [])]), AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(if (mBaseClassLoader, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ClassLoader.getSystemClassLoader(), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(mBaseClassLoader, [])]), Statement(}, []), Statement(}, []), Statement(return mClassLoader, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  AssignmentExpression(=, [VariableReference(if (mClassLoader !, []), Expression(null) {, [])])    VariableReference(if (mClassLoader !, [])    Expression(null) {, [])  Statement(return mClassLoader, [])  Statement(}, [])  MethodCall(if (mIncludeCode && !mPackageName.equals(""android"")), [VariableReference(if (mIncludeCode && !mPackageName, []), Expression(""android""), [])])    VariableReference(if (mIncludeCode && !mPackageName, [])    Expression(""android""), [])  AssignmentExpression(=, [VariableReference(String zip, []), Expression(mAppDir, [])])    VariableReference(String zip, [])    Expression(mAppDir, [])  Statement(/*, [])  Statement(* The following is a bit of a hack to inject, [])  Statement(* instrumentation into the system: If the app, [])  Statement(* being started matches one of the instrumentation names,, [])  Statement(* then we combine both the ""instrumentation"" and, [])  Statement(* ""instrumented"" app into the path, along with the, [])  Statement(* concatenation of both apps' shared library lists., [])  Statement(*/, [])  AssignmentExpression(=, [VariableReference(String instrumentationAppDir, []), Expression(mActivityThread.mInstrumentationAppDir, [])])    VariableReference(String instrumentationAppDir, [])    Expression(mActivityThread.mInstrumentationAppDir, [])  AssignmentExpression(=, [VariableReference(String instrumentationAppPackage, []), Expression(mActivityThread.mInstrumentationAppPackage, [])])    VariableReference(String instrumentationAppPackage, [])    Expression(mActivityThread.mInstrumentationAppPackage, [])  AssignmentExpression(=, [VariableReference(String instrumentedAppDir, []), Expression(mActivityThread.mInstrumentedAppDir, [])])    VariableReference(String instrumentedAppDir, [])    Expression(mActivityThread.mInstrumentedAppDir, [])  AssignmentExpression(=, [VariableReference(String[] instrumentationLibs, []), Expression(null, [])])    VariableReference(String[] instrumentationLibs, [])    Expression(null, [])  MethodCall(if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)), [VariableReference(if (mAppDir, []), Expression(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir), [])])    VariableReference(if (mAppDir, [])    Expression(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir), [])  AssignmentExpression(=, [VariableReference(zip, []), Expression(instrumentationAppDir + "":"" + instrumentedAppDir, [])])    VariableReference(zip, [])    Expression(instrumentationAppDir + "":"" + instrumentedAppDir, [])  MethodCall(if (!instrumentedAppDir.equals(instrumentationAppDir)), [VariableReference(if (!instrumentedAppDir, []), Expression(instrumentationAppDir), [])])    VariableReference(if (!instrumentedAppDir, [])    Expression(instrumentationAppDir), [])  AssignmentExpression(=, [VariableReference(instrumentationLibs, []), Expression(getLibrariesFor(instrumentationAppPackage), [])])    VariableReference(instrumentationLibs, [])    Expression(getLibrariesFor(instrumentationAppPackage), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if ((mSharedLibraries !, []), Expression(null) || (instrumentationLibs !, [])])    VariableReference(if ((mSharedLibraries !, [])    Expression(null) || (instrumentationLibs !, [])  AssignmentExpression(=, [VariableReference(zip, []), Expression(combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip, [])])    VariableReference(zip, [])    Expression(combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip, [])  Statement(}, [])  Statement(if (localLOGV), [])  MethodCall(Log.v(TAG, ""Class path: "" + zip), [VariableReference(Log, []), Expression(TAG, []), Expression(""Class path: "" + zip, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Class path: "" + zip, [])  AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader), [])])    VariableReference(mClassLoader, [])    Expression(ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(if (mBaseClassLoader, []), Expression(, [])])    VariableReference(if (mBaseClassLoader, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ClassLoader.getSystemClassLoader(), [])])    VariableReference(mClassLoader, [])    Expression(ClassLoader.getSystemClassLoader(), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(mBaseClassLoader, [])])    VariableReference(mClassLoader, [])    Expression(mBaseClassLoader, [])  Statement(}, [])  Statement(}, [])  Statement(return mClassLoader, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), AssignmentExpression(=, [VariableReference(if (mClassLoader !, []), Expression(null) {, [])]), Statement(return mClassLoader, []), Statement(}, []), MethodCall(if (mIncludeCode && !mPackageName.equals(""android"")), [VariableReference(if (mIncludeCode && !mPackageName, []), Expression(""android""), [])]), AssignmentExpression(=, [VariableReference(String zip, []), Expression(mAppDir, [])]), Statement(/*, []), Statement(* The following is a bit of a hack to inject, []), Statement(* instrumentation into the system: If the app, []), Statement(* being started matches one of the instrumentation names,, []), Statement(* then we combine both the ""instrumentation"" and, []), Statement(* ""instrumented"" app into the path, along with the, []), Statement(* concatenation of both apps' shared library lists., []), Statement(*/, []), AssignmentExpression(=, [VariableReference(String instrumentationAppDir, []), Expression(mActivityThread.mInstrumentationAppDir, [])]), AssignmentExpression(=, [VariableReference(String instrumentationAppPackage, []), Expression(mActivityThread.mInstrumentationAppPackage, [])]), AssignmentExpression(=, [VariableReference(String instrumentedAppDir, []), Expression(mActivityThread.mInstrumentedAppDir, [])]), AssignmentExpression(=, [VariableReference(String[] instrumentationLibs, []), Expression(null, [])]), MethodCall(if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)), [VariableReference(if (mAppDir, []), Expression(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir), [])]), AssignmentExpression(=, [VariableReference(zip, []), Expression(instrumentationAppDir + "":"" + instrumentedAppDir, [])]), MethodCall(if (!instrumentedAppDir.equals(instrumentationAppDir)), [VariableReference(if (!instrumentedAppDir, []), Expression(instrumentationAppDir), [])]), AssignmentExpression(=, [VariableReference(instrumentationLibs, []), Expression(getLibrariesFor(instrumentationAppPackage), [])]), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if ((mSharedLibraries !, []), Expression(null) || (instrumentationLibs !, [])]), AssignmentExpression(=, [VariableReference(zip, []), Expression(combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip, [])]), Statement(}, []), Statement(if (localLOGV), []), MethodCall(Slog.v(TAG, ""Class path: "" + zip), [VariableReference(Slog, []), Expression(TAG, []), Expression(""Class path: "" + zip, [])]), AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader), [])]), Statement(initializeJavaContextClassLoader(), []), Statement(} else {, []), AssignmentExpression(=, [VariableReference(if (mBaseClassLoader, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ClassLoader.getSystemClassLoader(), [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(mBaseClassLoader, [])]), Statement(}, []), Statement(}, []), Statement(return mClassLoader, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  AssignmentExpression(=, [VariableReference(if (mClassLoader !, []), Expression(null) {, [])])    VariableReference(if (mClassLoader !, [])    Expression(null) {, [])  Statement(return mClassLoader, [])  Statement(}, [])  MethodCall(if (mIncludeCode && !mPackageName.equals(""android"")), [VariableReference(if (mIncludeCode && !mPackageName, []), Expression(""android""), [])])    VariableReference(if (mIncludeCode && !mPackageName, [])    Expression(""android""), [])  AssignmentExpression(=, [VariableReference(String zip, []), Expression(mAppDir, [])])    VariableReference(String zip, [])    Expression(mAppDir, [])  Statement(/*, [])  Statement(* The following is a bit of a hack to inject, [])  Statement(* instrumentation into the system: If the app, [])  Statement(* being started matches one of the instrumentation names,, [])  Statement(* then we combine both the ""instrumentation"" and, [])  Statement(* ""instrumented"" app into the path, along with the, [])  Statement(* concatenation of both apps' shared library lists., [])  Statement(*/, [])  AssignmentExpression(=, [VariableReference(String instrumentationAppDir, []), Expression(mActivityThread.mInstrumentationAppDir, [])])    VariableReference(String instrumentationAppDir, [])    Expression(mActivityThread.mInstrumentationAppDir, [])  AssignmentExpression(=, [VariableReference(String instrumentationAppPackage, []), Expression(mActivityThread.mInstrumentationAppPackage, [])])    VariableReference(String instrumentationAppPackage, [])    Expression(mActivityThread.mInstrumentationAppPackage, [])  AssignmentExpression(=, [VariableReference(String instrumentedAppDir, []), Expression(mActivityThread.mInstrumentedAppDir, [])])    VariableReference(String instrumentedAppDir, [])    Expression(mActivityThread.mInstrumentedAppDir, [])  AssignmentExpression(=, [VariableReference(String[] instrumentationLibs, []), Expression(null, [])])    VariableReference(String[] instrumentationLibs, [])    Expression(null, [])  MethodCall(if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)), [VariableReference(if (mAppDir, []), Expression(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir), [])])    VariableReference(if (mAppDir, [])    Expression(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir), [])  AssignmentExpression(=, [VariableReference(zip, []), Expression(instrumentationAppDir + "":"" + instrumentedAppDir, [])])    VariableReference(zip, [])    Expression(instrumentationAppDir + "":"" + instrumentedAppDir, [])  MethodCall(if (!instrumentedAppDir.equals(instrumentationAppDir)), [VariableReference(if (!instrumentedAppDir, []), Expression(instrumentationAppDir), [])])    VariableReference(if (!instrumentedAppDir, [])    Expression(instrumentationAppDir), [])  AssignmentExpression(=, [VariableReference(instrumentationLibs, []), Expression(getLibrariesFor(instrumentationAppPackage), [])])    VariableReference(instrumentationLibs, [])    Expression(getLibrariesFor(instrumentationAppPackage), [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if ((mSharedLibraries !, []), Expression(null) || (instrumentationLibs !, [])])    VariableReference(if ((mSharedLibraries !, [])    Expression(null) || (instrumentationLibs !, [])  AssignmentExpression(=, [VariableReference(zip, []), Expression(combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip, [])])    VariableReference(zip, [])    Expression(combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip, [])  Statement(}, [])  Statement(if (localLOGV), [])  MethodCall(Slog.v(TAG, ""Class path: "" + zip), [VariableReference(Slog, []), Expression(TAG, []), Expression(""Class path: "" + zip, [])])    VariableReference(Slog, [])    Expression(TAG, [])    Expression(""Class path: "" + zip, [])  AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader), [])])    VariableReference(mClassLoader, [])    Expression(ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader), [])  Statement(initializeJavaContextClassLoader(), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(if (mBaseClassLoader, []), Expression(, [])])    VariableReference(if (mBaseClassLoader, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(ClassLoader.getSystemClassLoader(), [])])    VariableReference(mClassLoader, [])    Expression(ClassLoader.getSystemClassLoader(), [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mClassLoader, []), Expression(mBaseClassLoader, [])])    VariableReference(mClassLoader, [])    Expression(mBaseClassLoader, [])  Statement(}, [])  Statement(}, [])  Statement(return mClassLoader, [])  Statement(}, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,4,1,"3, 4",0,"There is a control dependency change with the statement `if (localLOGV) Log.v(TAG, ""Class path: "" + zip);` being replaced by `if (localLOGV) Slog.v(TAG, ""Class path: "" + zip);`. In addition, a new statement `initializeJavaContextClassLoader();` has been added. Therefore, the code change type is 3, 4.","Despite the changes in control dependency and the addition of a new statement, these changes do not seem to alter the return value or any exception handling behavior. Therefore, there is no compatibility issue (CI type is 0)."
<android.animation.AnimatorSet: void setStartDelay(long)>,25,26,<android.animation.AnimatorSet: void setStartDelay(long)>,<android.animation.AnimatorSet: void setStartDelay(long)>,0,"{
    // Clamp start delay to non-negative range.
    if (startDelay < 0) {
        Log.w(TAG, ""Start delay should always be non-negative"");
        startDelay = 0;
    }
    long delta = startDelay - mStartDelay;
    if (delta == 0) {
        return;
    }
    mStartDelay = startDelay;
    if (mStartDelay > 0) {
        mReversible = false;
    }
    if (!mDependencyDirty) {
        // Dependency graph already constructed, update all the nodes' start/end time
        int size = mNodes.size();
        for (int i = 0; i < size; i++) {
            Node node = mNodes.get(i);
            if (node == mRootNode) {
                node.mEndTime = mStartDelay;
            } else {
                node.mStartTime = node.mStartTime == DURATION_INFINITE ? DURATION_INFINITE : node.mStartTime + delta;
                node.mEndTime = node.mEndTime == DURATION_INFINITE ? DURATION_INFINITE : node.mEndTime + delta;
            }
        }
        // Update total duration, if necessary.
        if (mTotalDuration != DURATION_INFINITE) {
            mTotalDuration += delta;
        }
    }
}","{
    // Clamp start delay to non-negative range.
    if (startDelay < 0) {
        Log.w(TAG, ""Start delay should always be non-negative"");
        startDelay = 0;
    }
    long delta = startDelay - mStartDelay;
    if (delta == 0) {
        return;
    }
    mStartDelay = startDelay;
    if (!mDependencyDirty) {
        // Dependency graph already constructed, update all the nodes' start/end time
        int size = mNodes.size();
        for (int i = 0; i < size; i++) {
            Node node = mNodes.get(i);
            if (node == mRootNode) {
                node.mEndTime = mStartDelay;
            } else {
                node.mStartTime = node.mStartTime == DURATION_INFINITE ? DURATION_INFINITE : node.mStartTime + delta;
                node.mEndTime = node.mEndTime == DURATION_INFINITE ? DURATION_INFINITE : node.mEndTime + delta;
            }
        }
        // Update total duration, if necessary.
        if (mTotalDuration != DURATION_INFINITE) {
            mTotalDuration += delta;
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// Clamp start delay to non-negative range., []), Statement(if (startDelay < 0) {, []), MethodCall(Log.w(TAG, ""Start delay should always be non-negative""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start delay should always be non-negative"", [])]), AssignmentExpression(=, [VariableReference(startDelay, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(long delta, []), Expression(startDelay - mStartDelay, [])]), AssignmentExpression(=, [VariableReference(if (delta, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mStartDelay, []), Expression(startDelay, [])]), Statement(if (mStartDelay > 0) {, []), AssignmentExpression(=, [VariableReference(mReversible, []), Expression(false, [])]), Statement(}, []), Statement(if (!mDependencyDirty) {, []), Statement(// Dependency graph already constructed, update all the nodes' start/end time, []), AssignmentExpression(=, [VariableReference(int size, []), Expression(mNodes.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < size, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(Node node, []), Expression(mNodes.get(i), [])]), AssignmentExpression(=, [VariableReference(if (node, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(mStartDelay, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(node.mStartTime, []), Expression(node.mStartTime, [])]), AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(node.mEndTime, [])]), Statement(}, []), Statement(}, []), Statement(// Update total duration, if necessary., []), AssignmentExpression(=, [VariableReference(if (mTotalDuration !, []), Expression(DURATION_INFINITE) {, [])]), AssignmentExpression(=, [VariableReference(mTotalDuration +, []), Expression(delta, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// Clamp start delay to non-negative range., [])  Statement(if (startDelay < 0) {, [])  MethodCall(Log.w(TAG, ""Start delay should always be non-negative""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start delay should always be non-negative"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Start delay should always be non-negative"", [])  AssignmentExpression(=, [VariableReference(startDelay, []), Expression(0, [])])    VariableReference(startDelay, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(long delta, []), Expression(startDelay - mStartDelay, [])])    VariableReference(long delta, [])    Expression(startDelay - mStartDelay, [])  AssignmentExpression(=, [VariableReference(if (delta, []), Expression(, [])])    VariableReference(if (delta, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mStartDelay, []), Expression(startDelay, [])])    VariableReference(mStartDelay, [])    Expression(startDelay, [])  Statement(if (mStartDelay > 0) {, [])  AssignmentExpression(=, [VariableReference(mReversible, []), Expression(false, [])])    VariableReference(mReversible, [])    Expression(false, [])  Statement(}, [])  Statement(if (!mDependencyDirty) {, [])  Statement(// Dependency graph already constructed, update all the nodes' start/end time, [])  AssignmentExpression(=, [VariableReference(int size, []), Expression(mNodes.size(), [])])    VariableReference(int size, [])    Expression(mNodes.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < size, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(Node node, []), Expression(mNodes.get(i), [])])    VariableReference(Node node, [])    Expression(mNodes.get(i), [])  AssignmentExpression(=, [VariableReference(if (node, []), Expression(, [])])    VariableReference(if (node, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(mStartDelay, [])])    VariableReference(node.mEndTime, [])    Expression(mStartDelay, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(node.mStartTime, []), Expression(node.mStartTime, [])])    VariableReference(node.mStartTime, [])    Expression(node.mStartTime, [])  AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(node.mEndTime, [])])    VariableReference(node.mEndTime, [])    Expression(node.mEndTime, [])  Statement(}, [])  Statement(}, [])  Statement(// Update total duration, if necessary., [])  AssignmentExpression(=, [VariableReference(if (mTotalDuration !, []), Expression(DURATION_INFINITE) {, [])])    VariableReference(if (mTotalDuration !, [])    Expression(DURATION_INFINITE) {, [])  AssignmentExpression(=, [VariableReference(mTotalDuration +, []), Expression(delta, [])])    VariableReference(mTotalDuration +, [])    Expression(delta, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// Clamp start delay to non-negative range., []), Statement(if (startDelay < 0) {, []), MethodCall(Log.w(TAG, ""Start delay should always be non-negative""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start delay should always be non-negative"", [])]), AssignmentExpression(=, [VariableReference(startDelay, []), Expression(0, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(long delta, []), Expression(startDelay - mStartDelay, [])]), AssignmentExpression(=, [VariableReference(if (delta, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mStartDelay, []), Expression(startDelay, [])]), Statement(if (!mDependencyDirty) {, []), Statement(// Dependency graph already constructed, update all the nodes' start/end time, []), AssignmentExpression(=, [VariableReference(int size, []), Expression(mNodes.size(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < size, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(Node node, []), Expression(mNodes.get(i), [])]), AssignmentExpression(=, [VariableReference(if (node, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(mStartDelay, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(node.mStartTime, []), Expression(node.mStartTime, [])]), AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(node.mEndTime, [])]), Statement(}, []), Statement(}, []), Statement(// Update total duration, if necessary., []), AssignmentExpression(=, [VariableReference(if (mTotalDuration !, []), Expression(DURATION_INFINITE) {, [])]), AssignmentExpression(=, [VariableReference(mTotalDuration +, []), Expression(delta, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// Clamp start delay to non-negative range., [])  Statement(if (startDelay < 0) {, [])  MethodCall(Log.w(TAG, ""Start delay should always be non-negative""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start delay should always be non-negative"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Start delay should always be non-negative"", [])  AssignmentExpression(=, [VariableReference(startDelay, []), Expression(0, [])])    VariableReference(startDelay, [])    Expression(0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(long delta, []), Expression(startDelay - mStartDelay, [])])    VariableReference(long delta, [])    Expression(startDelay - mStartDelay, [])  AssignmentExpression(=, [VariableReference(if (delta, []), Expression(, [])])    VariableReference(if (delta, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mStartDelay, []), Expression(startDelay, [])])    VariableReference(mStartDelay, [])    Expression(startDelay, [])  Statement(if (!mDependencyDirty) {, [])  Statement(// Dependency graph already constructed, update all the nodes' start/end time, [])  AssignmentExpression(=, [VariableReference(int size, []), Expression(mNodes.size(), [])])    VariableReference(int size, [])    Expression(mNodes.size(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < size, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(Node node, []), Expression(mNodes.get(i), [])])    VariableReference(Node node, [])    Expression(mNodes.get(i), [])  AssignmentExpression(=, [VariableReference(if (node, []), Expression(, [])])    VariableReference(if (node, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(mStartDelay, [])])    VariableReference(node.mEndTime, [])    Expression(mStartDelay, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(node.mStartTime, []), Expression(node.mStartTime, [])])    VariableReference(node.mStartTime, [])    Expression(node.mStartTime, [])  AssignmentExpression(=, [VariableReference(node.mEndTime, []), Expression(node.mEndTime, [])])    VariableReference(node.mEndTime, [])    Expression(node.mEndTime, [])  Statement(}, [])  Statement(}, [])  Statement(// Update total duration, if necessary., [])  AssignmentExpression(=, [VariableReference(if (mTotalDuration !, []), Expression(DURATION_INFINITE) {, [])])    VariableReference(if (mTotalDuration !, [])    Expression(DURATION_INFINITE) {, [])  AssignmentExpression(=, [VariableReference(mTotalDuration +, []), Expression(delta, [])])    VariableReference(mTotalDuration +, [])    Expression(delta, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * The amount of time, in milliseconds, to delay starting the animation after
 * {@link #start()} is called. Note that the start delay should always be non-negative. Any
 * negative start delay will be clamped to 0 on N and above.
 *
 * @param startDelay The amount of the delay, in milliseconds
 */
","/**
 * The amount of time, in milliseconds, to delay starting the animation after
 * {@link #start()} is called. Note that the start delay should always be non-negative. Any
 * negative start delay will be clamped to 0 on N and above.
 *
 * @param startDelay The amount of the delay, in milliseconds
 */
",-1,[@Override],[@Override],-1,-1,-1,-1,-1,3,0,4,0,"The only change is the removal of a condition that checked if `mStartDelay > 0` and set `mReversible` to `false` when true. This else block was removed, resulting in a change type of 4.","The removed else block containing the condition `if (mStartDelay > 0) { mReversible = false; }` does not affect the return type, values, or exception handling; therefore, no Compatibility Issue arises."
<android.pim.vcard.VCardComposer.HandlerForOutputStream: boolean onInit(Context)>,8,9,<android.pim.vcard.VCardComposer.HandlerForOutputStream: boolean onInit(Context)>,<android.pim.vcard.VCardComposer.HandlerForOutputStream: boolean onInit(Context)>,0,"{
    try {
        mWriter = new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharsetString));
    } catch (UnsupportedEncodingException e1) {
        Log.e(LOG_TAG, ""Unsupported charset: "" + mCharsetString);
        mErrorReason = ""Encoding is not supported (usually this does not happen!): "" + mCharsetString;
        return false;
    }
    if (mIsDoCoMo) {
        try {
            // Create one empty entry.
            mWriter.write(createOneEntryInternal(""-1"", null));
        } catch (VCardException e) {
            Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage());
            return false;
        } catch (IOException e) {
            Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage());
            mErrorReason = ""IOException occurred: "" + e.getMessage();
            return false;
        }
    }
    return true;
}","{
    try {
        mWriter = new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharset));
    } catch (UnsupportedEncodingException e1) {
        Log.e(LOG_TAG, ""Unsupported charset: "" + mCharset);
        mErrorReason = ""Encoding is not supported (usually this does not happen!): "" + mCharset;
        return false;
    }
    if (mIsDoCoMo) {
        try {
            // Create one empty entry.
            mWriter.write(createOneEntryInternal(""-1"", null));
        } catch (VCardException e) {
            Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage());
            return false;
        } catch (IOException e) {
            Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage());
            mErrorReason = ""IOException occurred: "" + e.getMessage();
            return false;
        }
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(mWriter, []), Expression(new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharsetString)), [])]), Statement(} catch (UnsupportedEncodingException e1) {, []), MethodCall(Log.e(LOG_TAG, ""Unsupported charset: "" + mCharsetString), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Unsupported charset: "" + mCharsetString, [])]), AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""Encoding is not supported (usually this does not happen!): "" + mCharsetString, [])]), Statement(return false, []), Statement(}, []), Statement(if (mIsDoCoMo) {, []), Statement(try {, []), Statement(// Create one empty entry., []), MethodCall(mWriter.write(createOneEntryInternal(""-1"", null)), [VariableReference(mWriter, []), Expression(createOneEntryInternal(""-1"", []), Expression(null), [])]), Statement(} catch (VCardException e) {, []), MethodCall(Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""VCardException has been thrown during on Init(): "" + e.getMessage(), [])]), Statement(return false, []), Statement(} catch (IOException e) {, []), MethodCall(Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""IOException occurred during exportOneContactData: "" + e.getMessage(), [])]), AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""IOException occurred: "" + e.getMessage(), [])]), Statement(return false, []), Statement(}, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(mWriter, []), Expression(new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharsetString)), [])])    VariableReference(mWriter, [])    Expression(new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharsetString)), [])  Statement(} catch (UnsupportedEncodingException e1) {, [])  MethodCall(Log.e(LOG_TAG, ""Unsupported charset: "" + mCharsetString), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Unsupported charset: "" + mCharsetString, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Unsupported charset: "" + mCharsetString, [])  AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""Encoding is not supported (usually this does not happen!): "" + mCharsetString, [])])    VariableReference(mErrorReason, [])    Expression(""Encoding is not supported (usually this does not happen!): "" + mCharsetString, [])  Statement(return false, [])  Statement(}, [])  Statement(if (mIsDoCoMo) {, [])  Statement(try {, [])  Statement(// Create one empty entry., [])  MethodCall(mWriter.write(createOneEntryInternal(""-1"", null)), [VariableReference(mWriter, []), Expression(createOneEntryInternal(""-1"", []), Expression(null), [])])    VariableReference(mWriter, [])    Expression(createOneEntryInternal(""-1"", [])    Expression(null), [])  Statement(} catch (VCardException e) {, [])  MethodCall(Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""VCardException has been thrown during on Init(): "" + e.getMessage(), [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""VCardException has been thrown during on Init(): "" + e.getMessage(), [])  Statement(return false, [])  Statement(} catch (IOException e) {, [])  MethodCall(Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""IOException occurred during exportOneContactData: "" + e.getMessage(), [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""IOException occurred during exportOneContactData: "" + e.getMessage(), [])  AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""IOException occurred: "" + e.getMessage(), [])])    VariableReference(mErrorReason, [])    Expression(""IOException occurred: "" + e.getMessage(), [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(mWriter, []), Expression(new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharset)), [])]), Statement(} catch (UnsupportedEncodingException e1) {, []), MethodCall(Log.e(LOG_TAG, ""Unsupported charset: "" + mCharset), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Unsupported charset: "" + mCharset, [])]), AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""Encoding is not supported (usually this does not happen!): "" + mCharset, [])]), Statement(return false, []), Statement(}, []), Statement(if (mIsDoCoMo) {, []), Statement(try {, []), Statement(// Create one empty entry., []), MethodCall(mWriter.write(createOneEntryInternal(""-1"", null)), [VariableReference(mWriter, []), Expression(createOneEntryInternal(""-1"", []), Expression(null), [])]), Statement(} catch (VCardException e) {, []), MethodCall(Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""VCardException has been thrown during on Init(): "" + e.getMessage(), [])]), Statement(return false, []), Statement(} catch (IOException e) {, []), MethodCall(Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""IOException occurred during exportOneContactData: "" + e.getMessage(), [])]), AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""IOException occurred: "" + e.getMessage(), [])]), Statement(return false, []), Statement(}, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(mWriter, []), Expression(new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharset)), [])])    VariableReference(mWriter, [])    Expression(new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharset)), [])  Statement(} catch (UnsupportedEncodingException e1) {, [])  MethodCall(Log.e(LOG_TAG, ""Unsupported charset: "" + mCharset), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Unsupported charset: "" + mCharset, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Unsupported charset: "" + mCharset, [])  AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""Encoding is not supported (usually this does not happen!): "" + mCharset, [])])    VariableReference(mErrorReason, [])    Expression(""Encoding is not supported (usually this does not happen!): "" + mCharset, [])  Statement(return false, [])  Statement(}, [])  Statement(if (mIsDoCoMo) {, [])  Statement(try {, [])  Statement(// Create one empty entry., [])  MethodCall(mWriter.write(createOneEntryInternal(""-1"", null)), [VariableReference(mWriter, []), Expression(createOneEntryInternal(""-1"", []), Expression(null), [])])    VariableReference(mWriter, [])    Expression(createOneEntryInternal(""-1"", [])    Expression(null), [])  Statement(} catch (VCardException e) {, [])  MethodCall(Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""VCardException has been thrown during on Init(): "" + e.getMessage(), [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""VCardException has been thrown during on Init(): "" + e.getMessage(), [])  Statement(return false, [])  Statement(} catch (IOException e) {, [])  MethodCall(Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage()), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""IOException occurred during exportOneContactData: "" + e.getMessage(), [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""IOException occurred during exportOneContactData: "" + e.getMessage(), [])  AssignmentExpression(=, [VariableReference(mErrorReason, []), Expression(""IOException occurred: "" + e.getMessage(), [])])    VariableReference(mErrorReason, [])    Expression(""IOException occurred: "" + e.getMessage(), [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,4,0,4,0,"The only change is the replacement of `mCharsetString` with `mCharset`, so this type of change falls under category 4 (Other statement changed).","The change of the variable name does not affect the functionality or behavior of the method concerning return values or exception handling, so there are no potential Compatibility Issues, CI type is 0."
"<android.inputmethodservice.InputMethodService: void doStartInput(InputConnection,EditorInfo,boolean)>",29,30,"<android.inputmethodservice.InputMethodService: void doStartInput(InputConnection,EditorInfo,boolean)>","<android.inputmethodservice.InputMethodService: void doStartInput(InputConnection,EditorInfo,boolean)>",0,"{
    if (!restarting) {
        doFinishInput();
    }
    mInputStarted = true;
    mStartedInputConnection = ic;
    mInputEditorInfo = attribute;
    initialize();
    if (DEBUG)
        Log.v(TAG, ""CALL: onStartInput"");
    onStartInput(attribute, restarting);
    if (mDecorViewVisible) {
        if (mShowInputRequested) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartInputView"");
            mInputViewStarted = true;
            onStartInputView(mInputEditorInfo, restarting);
            startExtractingText(true);
        } else if (mCandidatesVisibility == View.VISIBLE) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartCandidatesView"");
            mCandidatesViewStarted = true;
            onStartCandidatesView(mInputEditorInfo, restarting);
        }
    } else if (mCanPreRender && mInputEditorInfo != null && mStartedInputConnection != null) {
        // pre-render IME window and keep it invisible.
        if (DEBUG)
            Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName);
        if (mInShowWindow) {
            Log.w(TAG, ""Re-entrance in to showWindow"");
            return;
        }
        mDecorViewWasVisible = mDecorViewVisible;
        mInShowWindow = true;
        startViews(prepareWindow(true));
        // compute visibility
        mIsPreRendered = true;
        onPreRenderedWindowVisibilityChanged(false);
        // When IME is not pre-rendered, this will actually show the IME.
        if (DEBUG)
            Log.v(TAG, ""showWindow: draw decorView!"");
        mWindow.show();
        maybeNotifyPreRendered();
        mDecorViewWasVisible = true;
        mInShowWindow = false;
    } else {
        mIsPreRendered = false;
    }
}","{
    if (!restarting) {
        doFinishInput();
    }
    mInputStarted = true;
    mStartedInputConnection = ic;
    mInputEditorInfo = attribute;
    initialize();
    mInlineSuggestionSessionController.notifyOnStartInput(attribute == null ? null : attribute.packageName, attribute == null ? null : attribute.autofillId);
    if (DEBUG)
        Log.v(TAG, ""CALL: onStartInput"");
    onStartInput(attribute, restarting);
    if (mDecorViewVisible) {
        if (mShowInputRequested) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartInputView"");
            mInputViewStarted = true;
            mInlineSuggestionSessionController.notifyOnStartInputView();
            onStartInputView(mInputEditorInfo, restarting);
            startExtractingText(true);
        } else if (mCandidatesVisibility == View.VISIBLE) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartCandidatesView"");
            mCandidatesViewStarted = true;
            onStartCandidatesView(mInputEditorInfo, restarting);
        }
    } else if (mCanPreRender && mInputEditorInfo != null && mStartedInputConnection != null) {
        // pre-render IME window and keep it invisible.
        if (DEBUG)
            Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName);
        if (mInShowWindow) {
            Log.w(TAG, ""Re-entrance in to showWindow"");
            return;
        }
        mDecorViewWasVisible = mDecorViewVisible;
        mInShowWindow = true;
        startViews(prepareWindow(true));
        // compute visibility
        mIsPreRendered = true;
        onPreRenderedWindowVisibilityChanged(false);
        // When IME is not pre-rendered, this will actually show the IME.
        if (DEBUG)
            Log.v(TAG, ""showWindow: draw decorView!"");
        mWindow.show();
        maybeNotifyPreRendered();
        mDecorViewWasVisible = true;
        mInShowWindow = false;
    } else {
        mIsPreRendered = false;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (!restarting) {, []), Statement(doFinishInput(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mInputStarted, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mStartedInputConnection, []), Expression(ic, [])]), AssignmentExpression(=, [VariableReference(mInputEditorInfo, []), Expression(attribute, [])]), Statement(initialize(), []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""CALL: onStartInput""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInput"", [])]), Statement(onStartInput(attribute, restarting), []), Statement(if (mDecorViewVisible) {, []), Statement(if (mShowInputRequested) {, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""CALL: onStartInputView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInputView"", [])]), AssignmentExpression(=, [VariableReference(mInputViewStarted, []), Expression(true, [])]), Statement(onStartInputView(mInputEditorInfo, restarting), []), Statement(startExtractingText(true), []), AssignmentExpression(=, [VariableReference(} else if (mCandidatesVisibility, []), Expression(, [])]), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""CALL: onStartCandidatesView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartCandidatesView"", [])]), AssignmentExpression(=, [VariableReference(mCandidatesViewStarted, []), Expression(true, [])]), Statement(onStartCandidatesView(mInputEditorInfo, restarting), []), Statement(}, []), AssignmentExpression(=, [VariableReference(} else if (mCanPreRender && mInputEditorInfo !, []), Expression(null && mStartedInputConnection !, [])]), Statement(// pre-render IME window and keep it invisible., []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName), [VariableReference(Log, []), Expression(TAG, []), Expression(""Pre-Render IME for "" + mInputEditorInfo.fieldName, [])]), Statement(if (mInShowWindow) {, []), MethodCall(Log.w(TAG, ""Re-entrance in to showWindow""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Re-entrance in to showWindow"", [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(mDecorViewVisible, [])]), AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(true, [])]), Statement(startViews(prepareWindow(true)), []), Statement(// compute visibility, []), AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(true, [])]), Statement(onPreRenderedWindowVisibilityChanged(false), []), Statement(// When IME is not pre-rendered, this will actually show the IME., []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""showWindow: draw decorView!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""showWindow: draw decorView!"", [])]), MethodCall(mWindow.show(), [VariableReference(mWindow, []), Expression(, [])]), Statement(maybeNotifyPreRendered(), []), AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(false, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(false, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!restarting) {, [])  Statement(doFinishInput(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mInputStarted, []), Expression(true, [])])    VariableReference(mInputStarted, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mStartedInputConnection, []), Expression(ic, [])])    VariableReference(mStartedInputConnection, [])    Expression(ic, [])  AssignmentExpression(=, [VariableReference(mInputEditorInfo, []), Expression(attribute, [])])    VariableReference(mInputEditorInfo, [])    Expression(attribute, [])  Statement(initialize(), [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""CALL: onStartInput""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInput"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""CALL: onStartInput"", [])  Statement(onStartInput(attribute, restarting), [])  Statement(if (mDecorViewVisible) {, [])  Statement(if (mShowInputRequested) {, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""CALL: onStartInputView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInputView"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""CALL: onStartInputView"", [])  AssignmentExpression(=, [VariableReference(mInputViewStarted, []), Expression(true, [])])    VariableReference(mInputViewStarted, [])    Expression(true, [])  Statement(onStartInputView(mInputEditorInfo, restarting), [])  Statement(startExtractingText(true), [])  AssignmentExpression(=, [VariableReference(} else if (mCandidatesVisibility, []), Expression(, [])])    VariableReference(} else if (mCandidatesVisibility, [])    Expression(, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""CALL: onStartCandidatesView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartCandidatesView"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""CALL: onStartCandidatesView"", [])  AssignmentExpression(=, [VariableReference(mCandidatesViewStarted, []), Expression(true, [])])    VariableReference(mCandidatesViewStarted, [])    Expression(true, [])  Statement(onStartCandidatesView(mInputEditorInfo, restarting), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(} else if (mCanPreRender && mInputEditorInfo !, []), Expression(null && mStartedInputConnection !, [])])    VariableReference(} else if (mCanPreRender && mInputEditorInfo !, [])    Expression(null && mStartedInputConnection !, [])  Statement(// pre-render IME window and keep it invisible., [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName), [VariableReference(Log, []), Expression(TAG, []), Expression(""Pre-Render IME for "" + mInputEditorInfo.fieldName, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Pre-Render IME for "" + mInputEditorInfo.fieldName, [])  Statement(if (mInShowWindow) {, [])  MethodCall(Log.w(TAG, ""Re-entrance in to showWindow""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Re-entrance in to showWindow"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Re-entrance in to showWindow"", [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(mDecorViewVisible, [])])    VariableReference(mDecorViewWasVisible, [])    Expression(mDecorViewVisible, [])  AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(true, [])])    VariableReference(mInShowWindow, [])    Expression(true, [])  Statement(startViews(prepareWindow(true)), [])  Statement(// compute visibility, [])  AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(true, [])])    VariableReference(mIsPreRendered, [])    Expression(true, [])  Statement(onPreRenderedWindowVisibilityChanged(false), [])  Statement(// When IME is not pre-rendered, this will actually show the IME., [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""showWindow: draw decorView!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""showWindow: draw decorView!"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""showWindow: draw decorView!"", [])  MethodCall(mWindow.show(), [VariableReference(mWindow, []), Expression(, [])])    VariableReference(mWindow, [])    Expression(, [])  Statement(maybeNotifyPreRendered(), [])  AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(true, [])])    VariableReference(mDecorViewWasVisible, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(false, [])])    VariableReference(mInShowWindow, [])    Expression(false, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(false, [])])    VariableReference(mIsPreRendered, [])    Expression(false, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!restarting) {, []), Statement(doFinishInput(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mInputStarted, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mStartedInputConnection, []), Expression(ic, [])]), AssignmentExpression(=, [VariableReference(mInputEditorInfo, []), Expression(attribute, [])]), Statement(initialize(), []), AssignmentExpression(=, [VariableReference(mInlineSuggestionSessionController.notifyOnStartInput(attribute, []), Expression(, [])]), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""CALL: onStartInput""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInput"", [])]), Statement(onStartInput(attribute, restarting), []), Statement(if (mDecorViewVisible) {, []), Statement(if (mShowInputRequested) {, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""CALL: onStartInputView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInputView"", [])]), AssignmentExpression(=, [VariableReference(mInputViewStarted, []), Expression(true, [])]), MethodCall(mInlineSuggestionSessionController.notifyOnStartInputView(), [VariableReference(mInlineSuggestionSessionController, []), Expression(, [])]), Statement(onStartInputView(mInputEditorInfo, restarting), []), Statement(startExtractingText(true), []), AssignmentExpression(=, [VariableReference(} else if (mCandidatesVisibility, []), Expression(, [])]), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""CALL: onStartCandidatesView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartCandidatesView"", [])]), AssignmentExpression(=, [VariableReference(mCandidatesViewStarted, []), Expression(true, [])]), Statement(onStartCandidatesView(mInputEditorInfo, restarting), []), Statement(}, []), AssignmentExpression(=, [VariableReference(} else if (mCanPreRender && mInputEditorInfo !, []), Expression(null && mStartedInputConnection !, [])]), Statement(// pre-render IME window and keep it invisible., []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName), [VariableReference(Log, []), Expression(TAG, []), Expression(""Pre-Render IME for "" + mInputEditorInfo.fieldName, [])]), Statement(if (mInShowWindow) {, []), MethodCall(Log.w(TAG, ""Re-entrance in to showWindow""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Re-entrance in to showWindow"", [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(mDecorViewVisible, [])]), AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(true, [])]), Statement(startViews(prepareWindow(true)), []), Statement(// compute visibility, []), AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(true, [])]), Statement(onPreRenderedWindowVisibilityChanged(false), []), Statement(// When IME is not pre-rendered, this will actually show the IME., []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""showWindow: draw decorView!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""showWindow: draw decorView!"", [])]), MethodCall(mWindow.show(), [VariableReference(mWindow, []), Expression(, [])]), Statement(maybeNotifyPreRendered(), []), AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(true, [])]), AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(false, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(false, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!restarting) {, [])  Statement(doFinishInput(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mInputStarted, []), Expression(true, [])])    VariableReference(mInputStarted, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mStartedInputConnection, []), Expression(ic, [])])    VariableReference(mStartedInputConnection, [])    Expression(ic, [])  AssignmentExpression(=, [VariableReference(mInputEditorInfo, []), Expression(attribute, [])])    VariableReference(mInputEditorInfo, [])    Expression(attribute, [])  Statement(initialize(), [])  AssignmentExpression(=, [VariableReference(mInlineSuggestionSessionController.notifyOnStartInput(attribute, []), Expression(, [])])    VariableReference(mInlineSuggestionSessionController.notifyOnStartInput(attribute, [])    Expression(, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""CALL: onStartInput""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInput"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""CALL: onStartInput"", [])  Statement(onStartInput(attribute, restarting), [])  Statement(if (mDecorViewVisible) {, [])  Statement(if (mShowInputRequested) {, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""CALL: onStartInputView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartInputView"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""CALL: onStartInputView"", [])  AssignmentExpression(=, [VariableReference(mInputViewStarted, []), Expression(true, [])])    VariableReference(mInputViewStarted, [])    Expression(true, [])  MethodCall(mInlineSuggestionSessionController.notifyOnStartInputView(), [VariableReference(mInlineSuggestionSessionController, []), Expression(, [])])    VariableReference(mInlineSuggestionSessionController, [])    Expression(, [])  Statement(onStartInputView(mInputEditorInfo, restarting), [])  Statement(startExtractingText(true), [])  AssignmentExpression(=, [VariableReference(} else if (mCandidatesVisibility, []), Expression(, [])])    VariableReference(} else if (mCandidatesVisibility, [])    Expression(, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""CALL: onStartCandidatesView""), [VariableReference(Log, []), Expression(TAG, []), Expression(""CALL: onStartCandidatesView"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""CALL: onStartCandidatesView"", [])  AssignmentExpression(=, [VariableReference(mCandidatesViewStarted, []), Expression(true, [])])    VariableReference(mCandidatesViewStarted, [])    Expression(true, [])  Statement(onStartCandidatesView(mInputEditorInfo, restarting), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(} else if (mCanPreRender && mInputEditorInfo !, []), Expression(null && mStartedInputConnection !, [])])    VariableReference(} else if (mCanPreRender && mInputEditorInfo !, [])    Expression(null && mStartedInputConnection !, [])  Statement(// pre-render IME window and keep it invisible., [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName), [VariableReference(Log, []), Expression(TAG, []), Expression(""Pre-Render IME for "" + mInputEditorInfo.fieldName, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Pre-Render IME for "" + mInputEditorInfo.fieldName, [])  Statement(if (mInShowWindow) {, [])  MethodCall(Log.w(TAG, ""Re-entrance in to showWindow""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Re-entrance in to showWindow"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Re-entrance in to showWindow"", [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(mDecorViewVisible, [])])    VariableReference(mDecorViewWasVisible, [])    Expression(mDecorViewVisible, [])  AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(true, [])])    VariableReference(mInShowWindow, [])    Expression(true, [])  Statement(startViews(prepareWindow(true)), [])  Statement(// compute visibility, [])  AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(true, [])])    VariableReference(mIsPreRendered, [])    Expression(true, [])  Statement(onPreRenderedWindowVisibilityChanged(false), [])  Statement(// When IME is not pre-rendered, this will actually show the IME., [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""showWindow: draw decorView!""), [VariableReference(Log, []), Expression(TAG, []), Expression(""showWindow: draw decorView!"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""showWindow: draw decorView!"", [])  MethodCall(mWindow.show(), [VariableReference(mWindow, []), Expression(, [])])    VariableReference(mWindow, [])    Expression(, [])  Statement(maybeNotifyPreRendered(), [])  AssignmentExpression(=, [VariableReference(mDecorViewWasVisible, []), Expression(true, [])])    VariableReference(mDecorViewWasVisible, [])    Expression(true, [])  AssignmentExpression(=, [VariableReference(mInShowWindow, []), Expression(false, [])])    VariableReference(mInShowWindow, [])    Expression(false, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mIsPreRendered, []), Expression(false, [])])    VariableReference(mIsPreRendered, [])    Expression(false, [])  Statement(}, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,4,0,"2,4,5",2,The following changes have occurred in the late version:,"So, the code change type is 4,5 since these are additional statements and dependent API changes respectively."
<android.animation.Keyframe.FloatKeyframe: FloatKeyframe clone()>,20,21,<android.animation.Keyframe.FloatKeyframe: FloatKeyframe clone()>,<android.animation.Keyframe.FloatKeyframe: FloatKeyframe clone()>,0,"{
    FloatKeyframe kfClone = mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction());
    kfClone.setInterpolator(getInterpolator());
    return kfClone;
}","{
    FloatKeyframe kfClone = mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction());
    kfClone.setInterpolator(getInterpolator());
    kfClone.mValueWasSetOnStart = mValueWasSetOnStart;
    return kfClone;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(FloatKeyframe kfClone, []), Expression(mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction()), [])]), MethodCall(kfClone.setInterpolator(getInterpolator()), [VariableReference(kfClone, []), Expression(getInterpolator(), [])]), Statement(return kfClone, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(FloatKeyframe kfClone, []), Expression(mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction()), [])])    VariableReference(FloatKeyframe kfClone, [])    Expression(mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction()), [])  MethodCall(kfClone.setInterpolator(getInterpolator()), [VariableReference(kfClone, []), Expression(getInterpolator(), [])])    VariableReference(kfClone, [])    Expression(getInterpolator(), [])  Statement(return kfClone, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(FloatKeyframe kfClone, []), Expression(mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction()), [])]), MethodCall(kfClone.setInterpolator(getInterpolator()), [VariableReference(kfClone, []), Expression(getInterpolator(), [])]), AssignmentExpression(=, [VariableReference(kfClone.mValueWasSetOnStart, []), Expression(mValueWasSetOnStart, [])]), Statement(return kfClone, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(FloatKeyframe kfClone, []), Expression(mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction()), [])])    VariableReference(FloatKeyframe kfClone, [])    Expression(mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction()), [])  MethodCall(kfClone.setInterpolator(getInterpolator()), [VariableReference(kfClone, []), Expression(getInterpolator(), [])])    VariableReference(kfClone, [])    Expression(getInterpolator(), [])  AssignmentExpression(=, [VariableReference(kfClone.mValueWasSetOnStart, []), Expression(mValueWasSetOnStart, [])])    VariableReference(kfClone.mValueWasSetOnStart, [])    Expression(mValueWasSetOnStart, [])  Statement(return kfClone, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,4,0,"3,4",0,A new assignment statement for `kfClone.mValueWasSetOnStart` has been introduced in the late implementation. This change falls under the categories of control dependency change and other statement change.,"The added assignment statement does not affect the return type or throw any new exceptions. Hence, no Compatibility Issue arises."
<android.webkit.WebView: void requestImageRef(Message)>,15,16,<android.webkit.WebView: void requestImageRef(Message)>,<android.webkit.WebView: void requestImageRef(Message)>,0,"{
    checkThread();
    // client isn't initialized
    if (0 == mNativeClass)
        return;
    int contentX = viewToContentX(mLastTouchX + mScrollX);
    int contentY = viewToContentY(mLastTouchY + mScrollY);
    String ref = nativeImageURI(contentX, contentY);
    Bundle data = msg.getData();
    data.putString(""url"", ref);
    msg.setData(data);
    msg.sendToTarget();
}","{
    checkThread();
    mProvider.requestImageRef(msg);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), Statement(// client isn't initialized, []), AssignmentExpression(=, [VariableReference(if (0, []), Expression(, [])]), Statement(return, []), AssignmentExpression(=, [VariableReference(int contentX, []), Expression(viewToContentX(mLastTouchX + mScrollX), [])]), AssignmentExpression(=, [VariableReference(int contentY, []), Expression(viewToContentY(mLastTouchY + mScrollY), [])]), AssignmentExpression(=, [VariableReference(String ref, []), Expression(nativeImageURI(contentX, contentY), [])]), AssignmentExpression(=, [VariableReference(Bundle data, []), Expression(msg.getData(), [])]), MethodCall(data.putString(""url"", ref), [VariableReference(data, []), Expression(""url"", []), Expression(ref, [])]), MethodCall(msg.setData(data), [VariableReference(msg, []), Expression(data, [])]), MethodCall(msg.sendToTarget(), [VariableReference(msg, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  Statement(// client isn't initialized, [])  AssignmentExpression(=, [VariableReference(if (0, []), Expression(, [])])    VariableReference(if (0, [])    Expression(, [])  Statement(return, [])  AssignmentExpression(=, [VariableReference(int contentX, []), Expression(viewToContentX(mLastTouchX + mScrollX), [])])    VariableReference(int contentX, [])    Expression(viewToContentX(mLastTouchX + mScrollX), [])  AssignmentExpression(=, [VariableReference(int contentY, []), Expression(viewToContentY(mLastTouchY + mScrollY), [])])    VariableReference(int contentY, [])    Expression(viewToContentY(mLastTouchY + mScrollY), [])  AssignmentExpression(=, [VariableReference(String ref, []), Expression(nativeImageURI(contentX, contentY), [])])    VariableReference(String ref, [])    Expression(nativeImageURI(contentX, contentY), [])  AssignmentExpression(=, [VariableReference(Bundle data, []), Expression(msg.getData(), [])])    VariableReference(Bundle data, [])    Expression(msg.getData(), [])  MethodCall(data.putString(""url"", ref), [VariableReference(data, []), Expression(""url"", []), Expression(ref, [])])    VariableReference(data, [])    Expression(""url"", [])    Expression(ref, [])  MethodCall(msg.setData(data), [VariableReference(msg, []), Expression(data, [])])    VariableReference(msg, [])    Expression(data, [])  MethodCall(msg.sendToTarget(), [VariableReference(msg, []), Expression(, [])])    VariableReference(msg, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkThread(), []), MethodCall(mProvider.requestImageRef(msg), [VariableReference(mProvider, []), Expression(msg, [])]), Statement(}, [])])  Statement({, [])  Statement(checkThread(), [])  MethodCall(mProvider.requestImageRef(msg), [VariableReference(mProvider, []), Expression(msg, [])])    VariableReference(mProvider, [])    Expression(msg, [])  Statement(}, [])",1,"/**
 * Request the url of the image last touched by the user. msg will be sent
 * to its target with a String representing the url as its object.
 *
 * @param msg This message will be dispatched with the result of the request
 * as the data member with ""url"" as key. The result can be null.
 */
","/**
 * Requests the URL of the image last touched by the user. msg will be sent
 * to its target with a String representing the URL as its object.
 *
 * @param msg the message to be dispatched with the result of the request
 * as the data member with ""url"" as key. The result can be null.
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"3,5",1,"The implementation of the method has changed significantly. In the early version, a series of calculations and method calls are performed to determine an image URI and send a message. In the late version, a method call to `mProvider.requestImageRef(msg)` has replaced all these steps. The control dependency has changed, and the method is now dependent on `mProvider.requestImageRef(msg)`, so the change type is 3,5.","The change in control dependency and the dependency on the `mProvider.requestImageRef(msg)` method may lead to different return behavior and potentially different internal processing, which can lead to different outcomes, hence the CI type is 1."
<android.app.ActivityManager: int getLockTaskModeState()>,23,24,<android.app.ActivityManager: int getLockTaskModeState()>,<android.app.ActivityManager: int getLockTaskModeState()>,0,"{
    try {
        return ActivityManagerNative.getDefault().getLockTaskModeState();
    } catch (RemoteException e) {
        return ActivityManager.LOCK_TASK_MODE_NONE;
    }
}","{
    try {
        return ActivityManagerNative.getDefault().getLockTaskModeState();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return ActivityManagerNative.getDefault().getLockTaskModeState(), [VariableReference(return ActivityManagerNative, []), Expression().getLockTaskModeState(, [])]), Statement(} catch (RemoteException e) {, []), Statement(return ActivityManager.LOCK_TASK_MODE_NONE, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return ActivityManagerNative.getDefault().getLockTaskModeState(), [VariableReference(return ActivityManagerNative, []), Expression().getLockTaskModeState(, [])])    VariableReference(return ActivityManagerNative, [])    Expression().getLockTaskModeState(, [])  Statement(} catch (RemoteException e) {, [])  Statement(return ActivityManager.LOCK_TASK_MODE_NONE, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return ActivityManagerNative.getDefault().getLockTaskModeState(), [VariableReference(return ActivityManagerNative, []), Expression().getLockTaskModeState(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return ActivityManagerNative.getDefault().getLockTaskModeState(), [VariableReference(return ActivityManagerNative, []), Expression().getLockTaskModeState(, [])])    VariableReference(return ActivityManagerNative, [])    Expression().getLockTaskModeState(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Return the current state of task locking. The three possible outcomes
 * are {@link #LOCK_TASK_MODE_NONE}, {@link #LOCK_TASK_MODE_LOCKED}
 * and {@link #LOCK_TASK_MODE_PINNED}.
 *
 * @see Activity#startLockTask()
 */
","/**
 * Return the current state of task locking. The three possible outcomes
 * are {@link #LOCK_TASK_MODE_NONE}, {@link #LOCK_TASK_MODE_LOCKED}
 * and {@link #LOCK_TASK_MODE_PINNED}.
 *
 * @see Activity#startLockTask()
 */
",-1,,,-1,-1,-1,-1,-1,"1,2",2,"1,2","1,2","The return statement has been deleted and replaced by a new exception handling statement (throw e.rethrowFromSystemServer()), so the change type is 1,2.","The removed return statement and introduced exception handling could cause the method to have different behaviors when exceptions occur, leading to potential different return values and exception handling, so the CI type is 1,2."
"<android.app.admin.DevicePolicyManager: void setCameraDisabled(ComponentName,boolean)>",23,24,"<android.app.admin.DevicePolicyManager: void setCameraDisabled(ComponentName,boolean)>","<android.app.admin.DevicePolicyManager: void setCameraDisabled(ComponentName,boolean)>",0,"{
    if (mService != null) {
        try {
            mService.setCameraDisabled(admin, disabled);
        } catch (RemoteException e) {
            Log.w(TAG, ""Failed talking with device policy service"", e);
        }
    }
}","{
    throwIfParentInstance(""setCameraDisabled"");
    if (mService != null) {
        try {
            mService.setCameraDisabled(admin, disabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(mService.setCameraDisabled(admin, disabled), [VariableReference(mService, []), Expression(admin, []), Expression(disabled, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.w(TAG, ""Failed talking with device policy service"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed talking with device policy service"", []), Expression(e, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(mService.setCameraDisabled(admin, disabled), [VariableReference(mService, []), Expression(admin, []), Expression(disabled, [])])    VariableReference(mService, [])    Expression(admin, [])    Expression(disabled, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.w(TAG, ""Failed talking with device policy service"", e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed talking with device policy service"", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed talking with device policy service"", [])    Expression(e, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""setCameraDisabled""), []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(mService.setCameraDisabled(admin, disabled), [VariableReference(mService, []), Expression(admin, []), Expression(disabled, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""setCameraDisabled""), [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(mService.setCameraDisabled(admin, disabled), [VariableReference(mService, []), Expression(admin, []), Expression(disabled, [])])    VariableReference(mService, [])    Expression(admin, [])    Expression(disabled, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Called by an application that is administering the device to disable all cameras
 * on the device, for this user. After setting this, no applications running as this user
 * will be able to access any cameras on the device.
 *
 * <p>The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call
 * this method; if it has not, a security exception will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param disabled Whether or not the camera should be disabled.
 */
","/**
 * Called by an application that is administering the device to disable all cameras on the
 * device, for this user. After setting this, no applications running as this user will be able
 * to access any cameras on the device.
 * <p>
 * If the caller is device owner, then the restriction will be applied to all users.
 * <p>
 * The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call this method; if it has
 * not, a security exception will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param disabled Whether or not the camera should be disabled.
 * @throws SecurityException if {@code admin} is not an active administrator or does not use
 * {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA}.
 */
",-1,,,-1,-1,-1,-1,-1,"2,4",2,"2,3,4",2,There are multiple changes in the later version:,"These changes fall under types 2 (Exception handling statement changed), 3 (Control dependency changed for the new method call), and 4 (Other statement changed for the new method call)."
"<android.content.ContentResolver: void requestSync(Account,String,Bundle)>",18,19,"<android.content.ContentResolver: void requestSync(Account,String,Bundle)>","<android.content.ContentResolver: void requestSync(Account,String,Bundle)>",0,"{
    validateSyncExtrasBundle(extras);
    try {
        getContentService().requestSync(account, authority, extras);
    } catch (RemoteException e) {
    }
}","{
    if (extras == null) {
        throw new IllegalArgumentException(""Must specify extras."");
    }
    SyncRequest request = new SyncRequest.Builder().setSyncAdapter(account, authority).setExtras(extras).syncOnce().build();
    requestSync(request);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(validateSyncExtrasBundle(extras), []), Statement(try {, []), MethodCall(getContentService().requestSync(account, authority, extras), [VariableReference(getContentService(), []), Expression(account, []), Expression(authority, []), Expression(extras, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(validateSyncExtrasBundle(extras), [])  Statement(try {, [])  MethodCall(getContentService().requestSync(account, authority, extras), [VariableReference(getContentService(), []), Expression(account, []), Expression(authority, []), Expression(extras, [])])    VariableReference(getContentService(), [])    Expression(account, [])    Expression(authority, [])    Expression(extras, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (extras, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(SyncRequest request, []), Expression(new SyncRequest.Builder().setSyncAdapter(account, authority).setExtras(extras).syncOnce().build(), [])]), Statement(requestSync(request), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (extras, []), Expression(, [])])    VariableReference(if (extras, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SyncRequest request, []), Expression(new SyncRequest.Builder().setSyncAdapter(account, authority).setExtras(extras).syncOnce().build(), [])])    VariableReference(SyncRequest request, [])    Expression(new SyncRequest.Builder().setSyncAdapter(account, authority).setExtras(extras).syncOnce().build(), [])  Statement(requestSync(request), [])  Statement(}, [])",1,"/**
 * Start an asynchronous sync operation. If you want to monitor the progress
 * of the sync you may register a SyncObserver. Only values of the following
 * types may be used in the extras bundle:
 * <ul>
 * <li>Integer</li>
 * <li>Long</li>
 * <li>Boolean</li>
 * <li>Float</li>
 * <li>Double</li>
 * <li>String</li>
 * </ul>
 *
 * @param account which account should be synced
 * @param authority which authority should be synced
 * @param extras any extras to pass to the SyncAdapter.
 */
","/**
 * Start an asynchronous sync operation. If you want to monitor the progress
 * of the sync you may register a SyncObserver. Only values of the following
 * types may be used in the extras bundle:
 * <ul>
 * <li>Integer</li>
 * <li>Long</li>
 * <li>Boolean</li>
 * <li>Float</li>
 * <li>Double</li>
 * <li>String</li>
 * <li>Account</li>
 * <li>null</li>
 * </ul>
 *
 * @param account which account should be synced
 * @param authority which authority should be synced
 * @param extras any extras to pass to the SyncAdapter.
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,"2,3,4,5","1,2","1. The early version includes a try-catch block for handling `RemoteException`, which has been removed in the late version.","Thus, the code change types are 2, 3, 4, 5."
"<android.view.Choreographer.FrameDisplayEventReceiver: void onVsync(long,int,int)>",20,21,"<android.view.Choreographer.FrameDisplayEventReceiver: void onVsync(long,int,int)>","<android.view.Choreographer.FrameDisplayEventReceiver: void onVsync(long,int,int)>",0,"{
    // that we need to fix this.
    if (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {
        Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."");
        scheduleVsync();
        return;
    }
    // Post the vsync event to the Handler.
    // The idea is to prevent incoming vsync events from completely starving
    // the message queue.  If there are no messages in the queue with timestamps
    // earlier than the frame time, then the vsync event will be processed immediately.
    // Otherwise, messages that predate the vsync event will be handled first.
    long now = System.nanoTime();
    if (timestampNanos > now) {
        Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."");
        timestampNanos = now;
    }
    if (mHavePendingVsync) {
        Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time."");
    } else {
        mHavePendingVsync = true;
    }
    mTimestampNanos = timestampNanos;
    mFrame = frame;
    Message msg = Message.obtain(mHandler, this);
    msg.setAsynchronous(true);
    mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS);
}","{
    // that we need to fix this.
    if (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {
        Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."");
        scheduleVsync();
        return;
    }
    // Post the vsync event to the Handler.
    // The idea is to prevent incoming vsync events from completely starving
    // the message queue.  If there are no messages in the queue with timestamps
    // earlier than the frame time, then the vsync event will be processed immediately.
    // Otherwise, messages that predate the vsync event will be handled first.
    long now = System.nanoTime();
    if (timestampNanos > now) {
        Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."");
        timestampNanos = now;
    }
    if (mHavePendingVsync) {
        Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time."");
    } else {
        mHavePendingVsync = true;
    }
    mTimestampNanos = timestampNanos;
    mFrame = frame;
    Message msg = Message.obtain(mHandler, this);
    msg.setAsynchronous(true);
    mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// that we need to fix this., []), AssignmentExpression(=, [VariableReference(if (builtInDisplayId !, []), Expression(SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {, [])]), MethodCall(Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Received vsync from secondary display, []), Expression(but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."", [])]), Statement(scheduleVsync(), []), Statement(return, []), Statement(}, []), Statement(// Post the vsync event to the Handler., []), Statement(// The idea is to prevent incoming vsync events from completely starving, []), Statement(// the message queue.  If there are no messages in the queue with timestamps, []), Statement(// earlier than the frame time, then the vsync event will be processed immediately., []), Statement(// Otherwise, messages that predate the vsync event will be handled first., []), AssignmentExpression(=, [VariableReference(long now, []), Expression(System.nanoTime(), [])]), Statement(if (timestampNanos > now) {, []), MethodCall(Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."", [])]), AssignmentExpression(=, [VariableReference(timestampNanos, []), Expression(now, [])]), Statement(}, []), Statement(if (mHavePendingVsync) {, []), MethodCall(Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Already have a pending vsync event.  There should only be "" + ""one at a time."", [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mHavePendingVsync, []), Expression(true, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mTimestampNanos, []), Expression(timestampNanos, [])]), AssignmentExpression(=, [VariableReference(mFrame, []), Expression(frame, [])]), AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(mHandler, this), [])]), MethodCall(msg.setAsynchronous(true), [VariableReference(msg, []), Expression(true, [])]), MethodCall(mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS), [VariableReference(mHandler, []), Expression(msg, []), Expression(timestampNanos / NANOS_PER_MS, [])]), Statement(}, [])])  Statement({, [])  Statement(// that we need to fix this., [])  AssignmentExpression(=, [VariableReference(if (builtInDisplayId !, []), Expression(SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {, [])])    VariableReference(if (builtInDisplayId !, [])    Expression(SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {, [])  MethodCall(Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Received vsync from secondary display, []), Expression(but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Received vsync from secondary display, [])    Expression(but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."", [])  Statement(scheduleVsync(), [])  Statement(return, [])  Statement(}, [])  Statement(// Post the vsync event to the Handler., [])  Statement(// The idea is to prevent incoming vsync events from completely starving, [])  Statement(// the message queue.  If there are no messages in the queue with timestamps, [])  Statement(// earlier than the frame time, then the vsync event will be processed immediately., [])  Statement(// Otherwise, messages that predate the vsync event will be handled first., [])  AssignmentExpression(=, [VariableReference(long now, []), Expression(System.nanoTime(), [])])    VariableReference(long now, [])    Expression(System.nanoTime(), [])  Statement(if (timestampNanos > now) {, [])  MethodCall(Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."", [])  AssignmentExpression(=, [VariableReference(timestampNanos, []), Expression(now, [])])    VariableReference(timestampNanos, [])    Expression(now, [])  Statement(}, [])  Statement(if (mHavePendingVsync) {, [])  MethodCall(Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Already have a pending vsync event.  There should only be "" + ""one at a time."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Already have a pending vsync event.  There should only be "" + ""one at a time."", [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mHavePendingVsync, []), Expression(true, [])])    VariableReference(mHavePendingVsync, [])    Expression(true, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mTimestampNanos, []), Expression(timestampNanos, [])])    VariableReference(mTimestampNanos, [])    Expression(timestampNanos, [])  AssignmentExpression(=, [VariableReference(mFrame, []), Expression(frame, [])])    VariableReference(mFrame, [])    Expression(frame, [])  AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(mHandler, this), [])])    VariableReference(Message msg, [])    Expression(Message.obtain(mHandler, this), [])  MethodCall(msg.setAsynchronous(true), [VariableReference(msg, []), Expression(true, [])])    VariableReference(msg, [])    Expression(true, [])  MethodCall(mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS), [VariableReference(mHandler, []), Expression(msg, []), Expression(timestampNanos / NANOS_PER_MS, [])])    VariableReference(mHandler, [])    Expression(msg, [])    Expression(timestampNanos / NANOS_PER_MS, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// that we need to fix this., []), AssignmentExpression(=, [VariableReference(if (builtInDisplayId !, []), Expression(SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {, [])]), MethodCall(Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Received vsync from secondary display, []), Expression(but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."", [])]), Statement(scheduleVsync(), []), Statement(return, []), Statement(}, []), Statement(// Post the vsync event to the Handler., []), Statement(// The idea is to prevent incoming vsync events from completely starving, []), Statement(// the message queue.  If there are no messages in the queue with timestamps, []), Statement(// earlier than the frame time, then the vsync event will be processed immediately., []), Statement(// Otherwise, messages that predate the vsync event will be handled first., []), AssignmentExpression(=, [VariableReference(long now, []), Expression(System.nanoTime(), [])]), Statement(if (timestampNanos > now) {, []), MethodCall(Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."", [])]), AssignmentExpression(=, [VariableReference(timestampNanos, []), Expression(now, [])]), Statement(}, []), Statement(if (mHavePendingVsync) {, []), MethodCall(Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Already have a pending vsync event.  There should only be "" + ""one at a time."", [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mHavePendingVsync, []), Expression(true, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(mTimestampNanos, []), Expression(timestampNanos, [])]), AssignmentExpression(=, [VariableReference(mFrame, []), Expression(frame, [])]), AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(mHandler, this), [])]), MethodCall(msg.setAsynchronous(true), [VariableReference(msg, []), Expression(true, [])]), MethodCall(mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS), [VariableReference(mHandler, []), Expression(msg, []), Expression(timestampNanos / TimeUtils.NANOS_PER_MS, [])]), Statement(}, [])])  Statement({, [])  Statement(// that we need to fix this., [])  AssignmentExpression(=, [VariableReference(if (builtInDisplayId !, []), Expression(SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {, [])])    VariableReference(if (builtInDisplayId !, [])    Expression(SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {, [])  MethodCall(Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Received vsync from secondary display, []), Expression(but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Received vsync from secondary display, [])    Expression(but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."", [])  Statement(scheduleVsync(), [])  Statement(return, [])  Statement(}, [])  Statement(// Post the vsync event to the Handler., [])  Statement(// The idea is to prevent incoming vsync events from completely starving, [])  Statement(// the message queue.  If there are no messages in the queue with timestamps, [])  Statement(// earlier than the frame time, then the vsync event will be processed immediately., [])  Statement(// Otherwise, messages that predate the vsync event will be handled first., [])  AssignmentExpression(=, [VariableReference(long now, []), Expression(System.nanoTime(), [])])    VariableReference(long now, [])    Expression(System.nanoTime(), [])  Statement(if (timestampNanos > now) {, [])  MethodCall(Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."", [])  AssignmentExpression(=, [VariableReference(timestampNanos, []), Expression(now, [])])    VariableReference(timestampNanos, [])    Expression(now, [])  Statement(}, [])  Statement(if (mHavePendingVsync) {, [])  MethodCall(Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Already have a pending vsync event.  There should only be "" + ""one at a time."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Already have a pending vsync event.  There should only be "" + ""one at a time."", [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mHavePendingVsync, []), Expression(true, [])])    VariableReference(mHavePendingVsync, [])    Expression(true, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mTimestampNanos, []), Expression(timestampNanos, [])])    VariableReference(mTimestampNanos, [])    Expression(timestampNanos, [])  AssignmentExpression(=, [VariableReference(mFrame, []), Expression(frame, [])])    VariableReference(mFrame, [])    Expression(frame, [])  AssignmentExpression(=, [VariableReference(Message msg, []), Expression(Message.obtain(mHandler, this), [])])    VariableReference(Message msg, [])    Expression(Message.obtain(mHandler, this), [])  MethodCall(msg.setAsynchronous(true), [VariableReference(msg, []), Expression(true, [])])    VariableReference(msg, [])    Expression(true, [])  MethodCall(mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS), [VariableReference(mHandler, []), Expression(msg, []), Expression(timestampNanos / TimeUtils.NANOS_PER_MS, [])])    VariableReference(mHandler, [])    Expression(msg, [])    Expression(timestampNanos / TimeUtils.NANOS_PER_MS, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,5,0,5,1,"The dependent API `sendMessageAtTime` has its second parameter changed from `NANOS_PER_MS` to `TimeUtils.NANOS_PER_MS`, so the code change type is 5.","This change may result in different behavior for the method as it relies on the constant value defined in the `TimeUtils` class, potentially leading to different return values. Hence, the CI type is 1."
<android.view.View: AccessibilityNodeInfo createAccessibilityNodeInfo()>,17,18,<android.view.View: AccessibilityNodeInfo createAccessibilityNodeInfo()>,<android.view.View: AccessibilityNodeInfo createAccessibilityNodeInfo()>,0,"{
    AccessibilityNodeProvider provider = getAccessibilityNodeProvider();
    if (provider != null) {
        return provider.createAccessibilityNodeInfo(View.NO_ID);
    } else {
        AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain(this);
        onInitializeAccessibilityNodeInfo(info);
        return info;
    }
}","{
    if (mAccessibilityDelegate != null) {
        return mAccessibilityDelegate.createAccessibilityNodeInfo(this);
    } else {
        return createAccessibilityNodeInfoInternal();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(AccessibilityNodeProvider provider, []), Expression(getAccessibilityNodeProvider(), [])]), AssignmentExpression(=, [VariableReference(if (provider !, []), Expression(null) {, [])]), MethodCall(return provider.createAccessibilityNodeInfo(View.NO_ID), [VariableReference(return provider, []), Expression(View.NO_ID, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(AccessibilityNodeInfo info, []), Expression(AccessibilityNodeInfo.obtain(this), [])]), Statement(onInitializeAccessibilityNodeInfo(info), []), Statement(return info, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(AccessibilityNodeProvider provider, []), Expression(getAccessibilityNodeProvider(), [])])    VariableReference(AccessibilityNodeProvider provider, [])    Expression(getAccessibilityNodeProvider(), [])  AssignmentExpression(=, [VariableReference(if (provider !, []), Expression(null) {, [])])    VariableReference(if (provider !, [])    Expression(null) {, [])  MethodCall(return provider.createAccessibilityNodeInfo(View.NO_ID), [VariableReference(return provider, []), Expression(View.NO_ID, [])])    VariableReference(return provider, [])    Expression(View.NO_ID, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(AccessibilityNodeInfo info, []), Expression(AccessibilityNodeInfo.obtain(this), [])])    VariableReference(AccessibilityNodeInfo info, [])    Expression(AccessibilityNodeInfo.obtain(this), [])  Statement(onInitializeAccessibilityNodeInfo(info), [])  Statement(return info, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mAccessibilityDelegate !, []), Expression(null) {, [])]), MethodCall(return mAccessibilityDelegate.createAccessibilityNodeInfo(this), [VariableReference(return mAccessibilityDelegate, []), Expression(this, [])]), Statement(} else {, []), Statement(return createAccessibilityNodeInfoInternal(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mAccessibilityDelegate !, []), Expression(null) {, [])])    VariableReference(if (mAccessibilityDelegate !, [])    Expression(null) {, [])  MethodCall(return mAccessibilityDelegate.createAccessibilityNodeInfo(this), [VariableReference(return mAccessibilityDelegate, []), Expression(this, [])])    VariableReference(return mAccessibilityDelegate, [])    Expression(this, [])  Statement(} else {, [])  Statement(return createAccessibilityNodeInfoInternal(), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Returns an {@link AccessibilityNodeInfo} representing this view from the
 * point of view of an {@link android.accessibilityservice.AccessibilityService}.
 * This method is responsible for obtaining an accessibility node info from a
 * pool of reusable instances and calling
 * {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on this view to
 * initialize the former.
 * <p>
 * Note: The client is responsible for recycling the obtained instance by calling
 * {@link AccessibilityNodeInfo#recycle()} to minimize object creation.
 * </p>
 *
 * @return A populated {@link AccessibilityNodeInfo}.
 *
 * @see AccessibilityNodeInfo
 */
","/**
 * Returns an {@link AccessibilityNodeInfo} representing this view from the
 * point of view of an {@link android.accessibilityservice.AccessibilityService}.
 * This method is responsible for obtaining an accessibility node info from a
 * pool of reusable instances and calling
 * {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on this view to
 * initialize the former.
 * <p>
 * Note: The client is responsible for recycling the obtained instance by calling
 * {@link AccessibilityNodeInfo#recycle()} to minimize object creation.
 * </p>
 *
 * @return A populated {@link AccessibilityNodeInfo}.
 *
 * @see AccessibilityNodeInfo
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4,5",1,"1,3,5",1,"There are significant changes in the control flow, return statements, and dependent API. The early version directly calls methods on `AccessibilityNodeProvider`, while the late version uses `mAccessibilityDelegate` and `createAccessibilityNodeInfoInternal`. Conditional checks and dependent APIs have been changed. Thus, change types are 1, 3, and 5.","Since the return values and control flow have changed substantially, potentially returning different instances of `AccessibilityNodeInfo`, this could lead to different return values or types, leading to CI type 1."
<android.app.WallpaperManager: Drawable peekDrawable()>,23,24,<android.app.WallpaperManager: Drawable peekDrawable()>,<android.app.WallpaperManager: Drawable peekDrawable()>,0,"{
    Bitmap bm = sGlobals.peekWallpaperBitmap(mContext, false);
    if (bm != null) {
        Drawable dr = new BitmapDrawable(mContext.getResources(), bm);
        dr.setDither(false);
        return dr;
    }
    return null;
}","{
    Bitmap bm = sGlobals.peekWallpaperBitmap(mContext, false, FLAG_SYSTEM);
    if (bm != null) {
        Drawable dr = new BitmapDrawable(mContext.getResources(), bm);
        dr.setDither(false);
        return dr;
    }
    return null;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Bitmap bm, []), Expression(sGlobals.peekWallpaperBitmap(mContext, false), [])]), AssignmentExpression(=, [VariableReference(if (bm !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(new BitmapDrawable(mContext.getResources(), bm), [])]), MethodCall(dr.setDither(false), [VariableReference(dr, []), Expression(false, [])]), Statement(return dr, []), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Bitmap bm, []), Expression(sGlobals.peekWallpaperBitmap(mContext, false), [])])    VariableReference(Bitmap bm, [])    Expression(sGlobals.peekWallpaperBitmap(mContext, false), [])  AssignmentExpression(=, [VariableReference(if (bm !, []), Expression(null) {, [])])    VariableReference(if (bm !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(new BitmapDrawable(mContext.getResources(), bm), [])])    VariableReference(Drawable dr, [])    Expression(new BitmapDrawable(mContext.getResources(), bm), [])  MethodCall(dr.setDither(false), [VariableReference(dr, []), Expression(false, [])])    VariableReference(dr, [])    Expression(false, [])  Statement(return dr, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(Bitmap bm, []), Expression(sGlobals.peekWallpaperBitmap(mContext, false, FLAG_SYSTEM), [])]), AssignmentExpression(=, [VariableReference(if (bm !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(new BitmapDrawable(mContext.getResources(), bm), [])]), MethodCall(dr.setDither(false), [VariableReference(dr, []), Expression(false, [])]), Statement(return dr, []), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(Bitmap bm, []), Expression(sGlobals.peekWallpaperBitmap(mContext, false, FLAG_SYSTEM), [])])    VariableReference(Bitmap bm, [])    Expression(sGlobals.peekWallpaperBitmap(mContext, false, FLAG_SYSTEM), [])  AssignmentExpression(=, [VariableReference(if (bm !, []), Expression(null) {, [])])    VariableReference(if (bm !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(Drawable dr, []), Expression(new BitmapDrawable(mContext.getResources(), bm), [])])    VariableReference(Drawable dr, [])    Expression(new BitmapDrawable(mContext.getResources(), bm), [])  MethodCall(dr.setDither(false), [VariableReference(dr, []), Expression(false, [])])    VariableReference(dr, [])    Expression(false, [])  Statement(return dr, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])",1,"/**
 * Retrieve the current system wallpaper; if there is no wallpaper set,
 * a null pointer is returned. This is returned as an
 * abstract Drawable that you can install in a View to display whatever
 * wallpaper the user has currently set.
 *
 * @return Returns a Drawable object that will draw the wallpaper or a
 * null pointer if these is none.
 */
","/**
 * Retrieve the current system wallpaper; if there is no wallpaper set,
 * a null pointer is returned. This is returned as an
 * abstract Drawable that you can install in a View to display whatever
 * wallpaper the user has currently set.
 *
 * @return Returns a Drawable object that will draw the wallpaper or a
 * null pointer if these is none.
 */
",-1,,,-1,-1,-1,-1,-1,5,0,5,1,"The method call `sGlobals.peekWallpaperBitmap` in the early version has two parameters, while in the late version it has three parameters. Hence, the code change type is 5.","Since the third parameter `FLAG_SYSTEM` has been added, the result of the method call `sGlobals.peekWallpaperBitmap` could potentially be different, which may lead to different return values. Therefore, the CI type is 1."
<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>,29,30,<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>,<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>,0,"{
    Preconditions.checkNotNull(callback);
    if (isDestroyed()) {
        Log.w(TAG, ""Cannot interact with a destroyed voice interactor"");
        return false;
    }
    return mOnDestroyCallbacks.remove(callback) != null;
}","{
    Objects.requireNonNull(callback);
    if (isDestroyed()) {
        Log.w(TAG, ""Cannot interact with a destroyed voice interactor"");
        return false;
    }
    return mOnDestroyCallbacks.remove(callback) != null;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(callback), [VariableReference(Preconditions, []), Expression(callback, [])]), Statement(if (isDestroyed()) {, []), MethodCall(Log.w(TAG, ""Cannot interact with a destroyed voice interactor""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot interact with a destroyed voice interactor"", [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(return mOnDestroyCallbacks.remove(callback) !, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(callback), [VariableReference(Preconditions, []), Expression(callback, [])])    VariableReference(Preconditions, [])    Expression(callback, [])  Statement(if (isDestroyed()) {, [])  MethodCall(Log.w(TAG, ""Cannot interact with a destroyed voice interactor""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot interact with a destroyed voice interactor"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot interact with a destroyed voice interactor"", [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(return mOnDestroyCallbacks.remove(callback) !, []), Expression(null, [])])    VariableReference(return mOnDestroyCallbacks.remove(callback) !, [])    Expression(null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Objects.requireNonNull(callback), [VariableReference(Objects, []), Expression(callback, [])]), Statement(if (isDestroyed()) {, []), MethodCall(Log.w(TAG, ""Cannot interact with a destroyed voice interactor""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot interact with a destroyed voice interactor"", [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(return mOnDestroyCallbacks.remove(callback) !, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  MethodCall(Objects.requireNonNull(callback), [VariableReference(Objects, []), Expression(callback, [])])    VariableReference(Objects, [])    Expression(callback, [])  Statement(if (isDestroyed()) {, [])  MethodCall(Log.w(TAG, ""Cannot interact with a destroyed voice interactor""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot interact with a destroyed voice interactor"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot interact with a destroyed voice interactor"", [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(return mOnDestroyCallbacks.remove(callback) !, []), Expression(null, [])])    VariableReference(return mOnDestroyCallbacks.remove(callback) !, [])    Expression(null, [])  Statement(}, [])",1,"/**
 * Unregisters a previously registered onDestroy callback
 *
 * @param callback The callback to remove.
 * @return whether the callback was unregistered.
 */
","/**
 * Unregisters a previously registered onDestroy callback
 *
 * @param callback The callback to remove.
 * @return whether the callback was unregistered.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,0,"The statement `Preconditions.checkNotNull(callback)` was changed to `Objects.requireNonNull(callback)`, representing a change in the library method used to check for null, so the change type is 4.","The change in the null-check method does not affect the API's behavior as both methods serve the same purpose, so there is no Compatibility Issue."
"<android.hardware.display.DisplayManager: VirtualDisplay createVirtualDisplay(String,int,int,int,Surface,int)>",20,21,"<android.hardware.display.DisplayManager: VirtualDisplay createVirtualDisplay(String,int,int,int,Surface,int)>","<android.hardware.display.DisplayManager: VirtualDisplay createVirtualDisplay(String,int,int,int,Surface,int)>",0,"{
    return mGlobal.createVirtualDisplay(mContext, name, width, height, densityDpi, surface, flags);
}","{
    return createVirtualDisplay(name, width, height, densityDpi, surface, flags, null, null);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return mGlobal.createVirtualDisplay(mContext, name, width, height, densityDpi, surface, flags), [VariableReference(return mGlobal, []), Expression(mContext, []), Expression(name, []), Expression(width, []), Expression(height, []), Expression(densityDpi, []), Expression(surface, []), Expression(flags, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mGlobal.createVirtualDisplay(mContext, name, width, height, densityDpi, surface, flags), [VariableReference(return mGlobal, []), Expression(mContext, []), Expression(name, []), Expression(width, []), Expression(height, []), Expression(densityDpi, []), Expression(surface, []), Expression(flags, [])])    VariableReference(return mGlobal, [])    Expression(mContext, [])    Expression(name, [])    Expression(width, [])    Expression(height, [])    Expression(densityDpi, [])    Expression(surface, [])    Expression(flags, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return createVirtualDisplay(name, width, height, densityDpi, surface, flags, null, null), []), Statement(}, [])])  Statement({, [])  Statement(return createVirtualDisplay(name, width, height, densityDpi, surface, flags, null, null), [])  Statement(}, [])",1,"/**
 * Creates a virtual display.
 * <p>
 * The content of a virtual display is rendered to a {@link Surface} provided
 * by the application.
 * </p><p>
 * The virtual display should be {@link VirtualDisplay#release released}
 * when no longer needed.  Because a virtual display renders to a surface
 * provided by the application, it will be released automatically when the
 * process terminates and all remaining windows on it will be forcibly removed.
 * </p><p>
 * The behavior of the virtual display depends on the flags that are provided
 * to this method.  By default, virtual displays are created to be private,
 * non-presentation and unsecure.  Permissions may be required to use certain flags.
 * </p>
 *
 * @param name The name of the virtual display, must be non-empty.
 * @param width The width of the virtual display in pixels, must be greater than 0.
 * @param height The height of the virtual display in pixels, must be greater than 0.
 * @param densityDpi The density of the virtual display in dpi, must be greater than 0.
 * @param surface The surface to which the content of the virtual display should
 * be rendered, must be non-null.
 * @param flags A combination of virtual display flags:
 * {@link #VIRTUAL_DISPLAY_FLAG_PUBLIC}, {@link #VIRTUAL_DISPLAY_FLAG_PRESENTATION}
 * or {@link #VIRTUAL_DISPLAY_FLAG_SECURE}.
 * @return The newly created virtual display, or null if the application could
 * not create the virtual display.
 *
 * @throws SecurityException if the caller does not have permission to create
 * a virtual display with the specified flags.
 */
","/**
 * Creates a virtual display.
 *
 * @see #createVirtualDisplay(String, int, int, int, Surface, int, VirtualDisplay.Callback)
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,"1,5",1,"The return statement has been modified from calling 'mGlobal.createVirtualDisplay' to 'createVirtualDisplay' with a different parameter signature (additional null parameters), indicating both Return statement changed and Dependent API changed, so the change type is 1,5.","The change in the return statement with a different method signature and parameter types could lead to different values being returned by the API, thus resulting in the CI type 1."
<android.view.View: boolean hasFocusable()>,20,21,<android.view.View: boolean hasFocusable()>,<android.view.View: boolean hasFocusable()>,0,"{
    return (mViewFlags & VISIBILITY_MASK) == VISIBLE && isFocusable();
}","{
    if (!isFocusableInTouchMode()) {
        for (ViewParent p = mParent; p instanceof ViewGroup; p = p.getParent()) {
            final ViewGroup g = (ViewGroup) p;
            if (g.shouldBlockFocusForTouchscreen()) {
                return false;
            }
        }
    }
    return (mViewFlags & VISIBILITY_MASK) == VISIBLE && isFocusable();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return (mViewFlags & VISIBILITY_MASK), []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return (mViewFlags & VISIBILITY_MASK), []), Expression(, [])])    VariableReference(return (mViewFlags & VISIBILITY_MASK), [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!isFocusableInTouchMode()) {, []), AssignmentExpression(=, [VariableReference(for (ViewParent p, []), Expression(mParent, [])]), Statement(p instanceof ViewGroup, []), AssignmentExpression(=, [VariableReference(p, []), Expression(p.getParent()) {, [])]), AssignmentExpression(=, [VariableReference(final ViewGroup g, []), Expression((ViewGroup) p, [])]), MethodCall(if (g.shouldBlockFocusForTouchscreen()), [VariableReference(if (g, []), Expression(), [])]), Statement(return false, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(return (mViewFlags & VISIBILITY_MASK), []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (!isFocusableInTouchMode()) {, [])  AssignmentExpression(=, [VariableReference(for (ViewParent p, []), Expression(mParent, [])])    VariableReference(for (ViewParent p, [])    Expression(mParent, [])  Statement(p instanceof ViewGroup, [])  AssignmentExpression(=, [VariableReference(p, []), Expression(p.getParent()) {, [])])    VariableReference(p, [])    Expression(p.getParent()) {, [])  AssignmentExpression(=, [VariableReference(final ViewGroup g, []), Expression((ViewGroup) p, [])])    VariableReference(final ViewGroup g, [])    Expression((ViewGroup) p, [])  MethodCall(if (g.shouldBlockFocusForTouchscreen()), [VariableReference(if (g, []), Expression(), [])])    VariableReference(if (g, [])    Expression(), [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(return (mViewFlags & VISIBILITY_MASK), []), Expression(, [])])    VariableReference(return (mViewFlags & VISIBILITY_MASK), [])    Expression(, [])  Statement(}, [])",1,"/**
 * Returns true if this view is focusable or if it contains a reachable View
 * for which {@link #hasFocusable()} returns true. A ""reachable hasFocusable()""
 * is a View whose parents do not block descendants focus.
 *
 * Only {@link #VISIBLE} views are considered focusable.
 *
 * @return True if the view is focusable or if the view contains a focusable
 * View, false otherwise.
 *
 * @see ViewGroup#FOCUS_BLOCK_DESCENDANTS
 */
","/**
 * Returns true if this view is focusable or if it contains a reachable View
 * for which {@link #hasFocusable()} returns true. A ""reachable hasFocusable()""
 * is a View whose parents do not block descendants focus.
 *
 * Only {@link #VISIBLE} views are considered focusable.
 *
 * @return True if the view is focusable or if the view contains a focusable
 * View, false otherwise.
 *
 * @see ViewGroup#FOCUS_BLOCK_DESCENDANTS
 * @see ViewGroup#getTouchscreenBlocksFocus()
 */
",-1,,,-1,-1,-1,-1,-1,"1,3",1,3,1,"A new conditional check involving the method `isFocusableInTouchMode()` and a loop structure has been introduced. This modifies the control dependency, making the code change type 3.","The introduction of the new conditional check and loop structure can potentially make the method return `false` under circumstances that it did not previously account for. This means the API can potentially return different values in the two versions, leading to a CI type of 1."
<android.preference.PreferenceActivity: void switchToHeader(Header)>,20,21,<android.preference.PreferenceActivity: void switchToHeader(Header)>,<android.preference.PreferenceActivity: void switchToHeader(Header)>,0,"{
    if (mCurHeader == header) {
        // This is the header we are currently displaying.  Just make sure
        // to pop the stack up to its root state.
        getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE);
    } else {
        if (header.fragment == null) {
            throw new IllegalStateException(""can't switch to header that has no fragment"");
        }
        int direction = mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader);
        switchToHeaderInner(header.fragment, header.fragmentArguments, direction);
        setSelectedHeader(header);
    }
}","{
    if (mCurHeader == header) {
        // This is the header we are currently displaying.  Just make sure
        // to pop the stack up to its root state.
        getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE);
    } else {
        if (header.fragment == null) {
            throw new IllegalStateException(""can't switch to header that has no fragment"");
        }
        switchToHeaderInner(header.fragment, header.fragmentArguments);
        setSelectedHeader(header);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mCurHeader, []), Expression(, [])]), Statement(// This is the header we are currently displaying.  Just make sure, []), Statement(// to pop the stack up to its root state., []), MethodCall(getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE), [VariableReference(getFragmentManager(), []), Expression(BACK_STACK_PREFS, []), Expression(FragmentManager.POP_BACK_STACK_INCLUSIVE, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(if (header.fragment, []), Expression(, [])]), Statement(throw new IllegalStateException(""can't switch to header that has no fragment""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(int direction, []), Expression(mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader), [])]), Statement(setSelectedHeader(header), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mCurHeader, []), Expression(, [])])    VariableReference(if (mCurHeader, [])    Expression(, [])  Statement(// This is the header we are currently displaying.  Just make sure, [])  Statement(// to pop the stack up to its root state., [])  MethodCall(getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE), [VariableReference(getFragmentManager(), []), Expression(BACK_STACK_PREFS, []), Expression(FragmentManager.POP_BACK_STACK_INCLUSIVE, [])])    VariableReference(getFragmentManager(), [])    Expression(BACK_STACK_PREFS, [])    Expression(FragmentManager.POP_BACK_STACK_INCLUSIVE, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(if (header.fragment, []), Expression(, [])])    VariableReference(if (header.fragment, [])    Expression(, [])  Statement(throw new IllegalStateException(""can't switch to header that has no fragment""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int direction, []), Expression(mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader), [])])    VariableReference(int direction, [])    Expression(mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader), [])  Statement(setSelectedHeader(header), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mCurHeader, []), Expression(, [])]), Statement(// This is the header we are currently displaying.  Just make sure, []), Statement(// to pop the stack up to its root state., []), MethodCall(getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE), [VariableReference(getFragmentManager(), []), Expression(BACK_STACK_PREFS, []), Expression(FragmentManager.POP_BACK_STACK_INCLUSIVE, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(if (header.fragment, []), Expression(, [])]), Statement(throw new IllegalStateException(""can't switch to header that has no fragment""), []), Statement(}, []), Statement(setSelectedHeader(header), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mCurHeader, []), Expression(, [])])    VariableReference(if (mCurHeader, [])    Expression(, [])  Statement(// This is the header we are currently displaying.  Just make sure, [])  Statement(// to pop the stack up to its root state., [])  MethodCall(getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE), [VariableReference(getFragmentManager(), []), Expression(BACK_STACK_PREFS, []), Expression(FragmentManager.POP_BACK_STACK_INCLUSIVE, [])])    VariableReference(getFragmentManager(), [])    Expression(BACK_STACK_PREFS, [])    Expression(FragmentManager.POP_BACK_STACK_INCLUSIVE, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(if (header.fragment, []), Expression(, [])])    VariableReference(if (header.fragment, [])    Expression(, [])  Statement(throw new IllegalStateException(""can't switch to header that has no fragment""), [])  Statement(}, [])  Statement(setSelectedHeader(header), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * When in two-pane mode, switch to the fragment pane to show the given
 * preference fragment.
 *
 * @param header The new header to display.
 */
","/**
 * When in two-pane mode, switch to the fragment pane to show the given
 * preference fragment.
 *
 * @param header The new header to display.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,3,1,The control dependency change occurred in removing the calculation of the `direction` variable and its parameter passing in the `switchToHeaderInner` method.,"Changes made to the control flow, specifically the removal of the `direction` parameter, could lead to different potential executions and behaviors of the method, so the CI type is 1."
<android.view.View: void setAutofillId(AutofillId)>,28,29,<android.view.View: void setAutofillId(AutofillId)>,<android.view.View: void setAutofillId(AutofillId)>,0,"{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (android.view.autofill.Helper.sVerbose) {
        Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && id.isVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}","{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)) {
        Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && !id.isNonVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, []), MethodCall(Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])]), Statement(}, []), Statement(if (isAttachedToWindow()) {, []), Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && id.isVirtual()) {, [])]), Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])]), Statement(// Ignore reset because it was never explicitly set before., []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])]), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, [])  MethodCall(Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(VIEW_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])])    VariableReference(Log, [])    Expression(VIEW_LOG_TAG, [])    Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])  Statement(}, [])  Statement(if (isAttachedToWindow()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && id.isVirtual()) {, [])])    VariableReference(if (id !, [])    Expression(null && id.isVirtual()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])])    VariableReference(if (id, [])    Expression(, [])  Statement(// Ignore reset because it was never explicitly set before., [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])])    VariableReference(mAutofillId, [])    Expression(id, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])])    VariableReference(if (id !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])])    VariableReference(mAutofillViewId, [])    Expression(id.getViewId(), [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 |, [])    Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])])    VariableReference(mAutofillViewId, [])    Expression(NO_ID, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 &, [])    Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, []), MethodCall(if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)), [VariableReference(if (Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(Log.VERBOSE), [])]), MethodCall(Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])]), Statement(}, []), Statement(if (isAttachedToWindow()) {, []), Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && !id.isNonVirtual()) {, [])]), Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])]), Statement(// Ignore reset because it was never explicitly set before., []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])]), AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(} else {, []), AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// TODO(b/37566627): add unit / CTS test for all possible combinations below, [])  MethodCall(if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)), [VariableReference(if (Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(Log.VERBOSE), [])])    VariableReference(if (Log, [])    Expression(AUTOFILL_LOG_TAG, [])    Expression(Log.VERBOSE), [])  MethodCall(Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id), [VariableReference(Log, []), Expression(AUTOFILL_LOG_TAG, []), Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])])    VariableReference(Log, [])    Expression(AUTOFILL_LOG_TAG, [])    Expression(""setAutofill(): from "" + mAutofillId + "" to "" + id, [])  Statement(}, [])  Statement(if (isAttachedToWindow()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id when view is attached""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null && !id.isNonVirtual()) {, [])])    VariableReference(if (id !, [])    Expression(null && !id.isNonVirtual()) {, [])  Statement(throw new IllegalStateException(""Cannot set autofill id assigned to virtual views""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (id, []), Expression(, [])])    VariableReference(if (id, [])    Expression(, [])  Statement(// Ignore reset because it was never explicitly set before., [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mAutofillId, []), Expression(id, [])])    VariableReference(mAutofillId, [])    Expression(id, [])  AssignmentExpression(=, [VariableReference(if (id !, []), Expression(null) {, [])])    VariableReference(if (id !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(id.getViewId(), [])])    VariableReference(mAutofillViewId, [])    Expression(id.getViewId(), [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 |, []), Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 |, [])    Expression(PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(} else {, [])  AssignmentExpression(=, [VariableReference(mAutofillViewId, []), Expression(NO_ID, [])])    VariableReference(mAutofillViewId, [])    Expression(NO_ID, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags3 &, []), Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])])    VariableReference(mPrivateFlags3 &, [])    Expression(~PFLAG3_AUTOFILLID_EXPLICITLY_SET, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */
","/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,"2,4",2,"The code in the logging statement has changed, and the condition `id.isVirtual()` was replaced by `!id.isNonVirtual()`. These changes fall under the categories of other statement changes and exception handling changes, respectively. So, the code change type is 2,4.","The change in the exception handling statement potentially results in the method throwing an `IllegalStateException` under different conditions. Therefore, the CI type is 2."
"<android.app.ContextImpl: void sendOrderedBroadcast(Intent,String)>",16,17,"<android.app.ContextImpl: void sendOrderedBroadcast(Intent,String)>","<android.app.ContextImpl: void sendOrderedBroadcast(Intent,String)>",0,"{
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.setAllowFds(false);
        ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, Binder.getOrigCallingUser());
    } catch (RemoteException e) {
    }
}","{
    warnIfCallingFromSystemProcess();
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.setAllowFds(false);
        ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, getUserId());
    } catch (RemoteException e) {
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])]), Statement(try {, []), MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])]), MethodCall(ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, Binder.getOrigCallingUser()), [VariableReference(ActivityManagerNative, []), Expression().broadcastIntent(mMainThread.getApplicationThread(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(receiverPermission, []), Expression(true, []), Expression(false, []), Expression(Binder.getOrigCallingUser(), [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])])    VariableReference(String resolvedType, [])    Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])  Statement(try {, [])  MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])])    VariableReference(intent, [])    Expression(false, [])  MethodCall(ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, Binder.getOrigCallingUser()), [VariableReference(ActivityManagerNative, []), Expression().broadcastIntent(mMainThread.getApplicationThread(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(receiverPermission, []), Expression(true, []), Expression(false, []), Expression(Binder.getOrigCallingUser(), [])])    VariableReference(ActivityManagerNative, [])    Expression().broadcastIntent(mMainThread.getApplicationThread(), [])    Expression(intent, [])    Expression(resolvedType, [])    Expression(null, [])    Expression(Activity.RESULT_OK, [])    Expression(null, [])    Expression(null, [])    Expression(receiverPermission, [])    Expression(true, [])    Expression(false, [])    Expression(Binder.getOrigCallingUser(), [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(warnIfCallingFromSystemProcess(), []), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])]), Statement(try {, []), MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])]), MethodCall(ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, getUserId()), [VariableReference(ActivityManagerNative, []), Expression().broadcastIntent(mMainThread.getApplicationThread(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(receiverPermission, []), Expression(true, []), Expression(false, []), Expression(getUserId(), [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(warnIfCallingFromSystemProcess(), [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])])    VariableReference(String resolvedType, [])    Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])  Statement(try {, [])  MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])])    VariableReference(intent, [])    Expression(false, [])  MethodCall(ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, getUserId()), [VariableReference(ActivityManagerNative, []), Expression().broadcastIntent(mMainThread.getApplicationThread(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(receiverPermission, []), Expression(true, []), Expression(false, []), Expression(getUserId(), [])])    VariableReference(ActivityManagerNative, [])    Expression().broadcastIntent(mMainThread.getApplicationThread(), [])    Expression(intent, [])    Expression(resolvedType, [])    Expression(null, [])    Expression(Activity.RESULT_OK, [])    Expression(null, [])    Expression(null, [])    Expression(receiverPermission, [])    Expression(true, [])    Expression(false, [])    Expression(getUserId(), [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"4,5",1,"3,4,5",0,Several changes are present between the early and late versions:,"So the change types are 3,4,5."
<android.widget.AdapterView: int getPositionForView(View)>,22,23,<android.widget.AdapterView: int getPositionForView(View)>,<android.widget.AdapterView: int getPositionForView(View)>,0,"{
    View listItem = view;
    try {
        View v;
        while (!(v = (View) listItem.getParent()).equals(this)) {
            listItem = v;
        }
    } catch (ClassCastException e) {
        // We made it up to the window without find this list view
        return INVALID_POSITION;
    }
    // Search the children for the list item
    final int childCount = getChildCount();
    for (int i = 0; i < childCount; i++) {
        if (getChildAt(i).equals(listItem)) {
            return mFirstPosition + i;
        }
    }
    // Child not found!
    return INVALID_POSITION;
}","{
    View listItem = view;
    try {
        View v;
        while ((v = (View) listItem.getParent()) != null && !v.equals(this)) {
            listItem = v;
        }
    } catch (ClassCastException e) {
        // We made it up to the window without find this list view
        return INVALID_POSITION;
    }
    if (listItem != null) {
        // Search the children for the list item
        final int childCount = getChildCount();
        for (int i = 0; i < childCount; i++) {
            if (getChildAt(i).equals(listItem)) {
                return mFirstPosition + i;
            }
        }
    }
    // Child not found!
    return INVALID_POSITION;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(View listItem, []), Expression(view, [])]), Statement(try {, []), Statement(View v, []), AssignmentExpression(=, [VariableReference(while (!(v, []), Expression((View) listItem.getParent()).equals(this)) {, [])]), AssignmentExpression(=, [VariableReference(listItem, []), Expression(v, [])]), Statement(}, []), Statement(} catch (ClassCastException e) {, []), Statement(// We made it up to the window without find this list view, []), Statement(return INVALID_POSITION, []), Statement(}, []), Statement(// Search the children for the list item, []), AssignmentExpression(=, [VariableReference(final int childCount, []), Expression(getChildCount(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < childCount, []), Statement(i++) {, []), MethodCall(if (getChildAt(i).equals(listItem)), [VariableReference(if (getChildAt(i), []), Expression(listItem), [])]), Statement(return mFirstPosition + i, []), Statement(}, []), Statement(}, []), Statement(// Child not found!, []), Statement(return INVALID_POSITION, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(View listItem, []), Expression(view, [])])    VariableReference(View listItem, [])    Expression(view, [])  Statement(try {, [])  Statement(View v, [])  AssignmentExpression(=, [VariableReference(while (!(v, []), Expression((View) listItem.getParent()).equals(this)) {, [])])    VariableReference(while (!(v, [])    Expression((View) listItem.getParent()).equals(this)) {, [])  AssignmentExpression(=, [VariableReference(listItem, []), Expression(v, [])])    VariableReference(listItem, [])    Expression(v, [])  Statement(}, [])  Statement(} catch (ClassCastException e) {, [])  Statement(// We made it up to the window without find this list view, [])  Statement(return INVALID_POSITION, [])  Statement(}, [])  Statement(// Search the children for the list item, [])  AssignmentExpression(=, [VariableReference(final int childCount, []), Expression(getChildCount(), [])])    VariableReference(final int childCount, [])    Expression(getChildCount(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < childCount, [])  Statement(i++) {, [])  MethodCall(if (getChildAt(i).equals(listItem)), [VariableReference(if (getChildAt(i), []), Expression(listItem), [])])    VariableReference(if (getChildAt(i), [])    Expression(listItem), [])  Statement(return mFirstPosition + i, [])  Statement(}, [])  Statement(}, [])  Statement(// Child not found!, [])  Statement(return INVALID_POSITION, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(View listItem, []), Expression(view, [])]), Statement(try {, []), Statement(View v, []), AssignmentExpression(=, [VariableReference(while ((v, []), Expression((View) listItem.getParent()) !, [])]), AssignmentExpression(=, [VariableReference(listItem, []), Expression(v, [])]), Statement(}, []), Statement(} catch (ClassCastException e) {, []), Statement(// We made it up to the window without find this list view, []), Statement(return INVALID_POSITION, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (listItem !, []), Expression(null) {, [])]), Statement(// Search the children for the list item, []), AssignmentExpression(=, [VariableReference(final int childCount, []), Expression(getChildCount(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < childCount, []), Statement(i++) {, []), MethodCall(if (getChildAt(i).equals(listItem)), [VariableReference(if (getChildAt(i), []), Expression(listItem), [])]), Statement(return mFirstPosition + i, []), Statement(}, []), Statement(}, []), Statement(}, []), Statement(// Child not found!, []), Statement(return INVALID_POSITION, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(View listItem, []), Expression(view, [])])    VariableReference(View listItem, [])    Expression(view, [])  Statement(try {, [])  Statement(View v, [])  AssignmentExpression(=, [VariableReference(while ((v, []), Expression((View) listItem.getParent()) !, [])])    VariableReference(while ((v, [])    Expression((View) listItem.getParent()) !, [])  AssignmentExpression(=, [VariableReference(listItem, []), Expression(v, [])])    VariableReference(listItem, [])    Expression(v, [])  Statement(}, [])  Statement(} catch (ClassCastException e) {, [])  Statement(// We made it up to the window without find this list view, [])  Statement(return INVALID_POSITION, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (listItem !, []), Expression(null) {, [])])    VariableReference(if (listItem !, [])    Expression(null) {, [])  Statement(// Search the children for the list item, [])  AssignmentExpression(=, [VariableReference(final int childCount, []), Expression(getChildCount(), [])])    VariableReference(final int childCount, [])    Expression(getChildCount(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < childCount, [])  Statement(i++) {, [])  MethodCall(if (getChildAt(i).equals(listItem)), [VariableReference(if (getChildAt(i), []), Expression(listItem), [])])    VariableReference(if (getChildAt(i), [])    Expression(listItem), [])  Statement(return mFirstPosition + i, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(// Child not found!, [])  Statement(return INVALID_POSITION, [])  Statement(}, [])",1,"/**
 * Get the position within the adapter's data set for the view, where view is a an adapter item
 * or a descendant of an adapter item.
 *
 * @param view an adapter item, or a descendant of an adapter item. This must be visible in this
 * AdapterView at the time of the call.
 * @return the position within the adapter's data set of the view, or {@link #INVALID_POSITION}
 * if the view does not correspond to a list item (or it is not currently visible).
 */
","/**
 * Get the position within the adapter's data set for the view, where view is a an adapter item
 * or a descendant of an adapter item.
 *
 * @param view an adapter item, or a descendant of an adapter item. This must be visible in this
 * AdapterView at the time of the call.
 * @return the position within the adapter's data set of the view, or {@link #INVALID_POSITION}
 * if the view does not correspond to a list item (or it is not currently visible).
 */
",-1,,,-1,-1,-1,-1,-1,3,1,"2,3","1,2","There are changes in the control dependency, specifically the condition within the ""while"" loop and the addition of an ""if (listItem != null)"" check before searching the children for the list item. Additionally, the exception handling behavior within the ""catch"" block for `ClassCastException` has changed.","The changes in control dependency and exception handling may lead to the API returning different values or throwing exceptions differently. Therefore, the CI types are 1 and 2."
<android.app.DialogFragment: void onActivityCreated(Bundle)>,23,24,<android.app.DialogFragment: void onActivityCreated(Bundle)>,<android.app.DialogFragment: void onActivityCreated(Bundle)>,0,"{
    super.onActivityCreated(savedInstanceState);
    if (!mShowsDialog) {
        return;
    }
    View view = getView();
    if (view != null) {
        if (view.getParent() != null) {
            throw new IllegalStateException(""DialogFragment can not be attached to a container view"");
        }
        mDialog.setContentView(view);
    }
    mDialog.setOwnerActivity(getActivity());
    mDialog.setCancelable(mCancelable);
    if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)) {
        throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener"");
    }
    if (savedInstanceState != null) {
        Bundle dialogState = savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG);
        if (dialogState != null) {
            mDialog.onRestoreInstanceState(dialogState);
        }
    }
}","{
    super.onActivityCreated(savedInstanceState);
    if (!mShowsDialog) {
        return;
    }
    View view = getView();
    if (view != null) {
        if (view.getParent() != null) {
            throw new IllegalStateException(""DialogFragment can not be attached to a container view"");
        }
        mDialog.setContentView(view);
    }
    final Activity activity = getActivity();
    if (activity != null) {
        mDialog.setOwnerActivity(activity);
    }
    mDialog.setCancelable(mCancelable);
    if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)) {
        throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener"");
    }
    if (savedInstanceState != null) {
        Bundle dialogState = savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG);
        if (dialogState != null) {
            mDialog.onRestoreInstanceState(dialogState);
        }
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onActivityCreated(savedInstanceState), [VariableReference(super, []), Expression(savedInstanceState, [])]), Statement(if (!mShowsDialog) {, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(View view, []), Expression(getView(), [])]), AssignmentExpression(=, [VariableReference(if (view !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (view.getParent() !, []), Expression(null) {, [])]), Statement(throw new IllegalStateException(""DialogFragment can not be attached to a container view""), []), Statement(}, []), MethodCall(mDialog.setContentView(view), [VariableReference(mDialog, []), Expression(view, [])]), Statement(}, []), MethodCall(mDialog.setOwnerActivity(getActivity()), [VariableReference(mDialog, []), Expression(getActivity(), [])]), MethodCall(mDialog.setCancelable(mCancelable), [VariableReference(mDialog, []), Expression(mCancelable, [])]), MethodCall(if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)), [VariableReference(if (!mDialog, []), Expression(""DialogFragment"", []), Expression(this, []), Expression(this), [])]), Statement(throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (savedInstanceState !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(Bundle dialogState, []), Expression(savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG), [])]), AssignmentExpression(=, [VariableReference(if (dialogState !, []), Expression(null) {, [])]), MethodCall(mDialog.onRestoreInstanceState(dialogState), [VariableReference(mDialog, []), Expression(dialogState, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.onActivityCreated(savedInstanceState), [VariableReference(super, []), Expression(savedInstanceState, [])])    VariableReference(super, [])    Expression(savedInstanceState, [])  Statement(if (!mShowsDialog) {, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(View view, []), Expression(getView(), [])])    VariableReference(View view, [])    Expression(getView(), [])  AssignmentExpression(=, [VariableReference(if (view !, []), Expression(null) {, [])])    VariableReference(if (view !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (view.getParent() !, []), Expression(null) {, [])])    VariableReference(if (view.getParent() !, [])    Expression(null) {, [])  Statement(throw new IllegalStateException(""DialogFragment can not be attached to a container view""), [])  Statement(}, [])  MethodCall(mDialog.setContentView(view), [VariableReference(mDialog, []), Expression(view, [])])    VariableReference(mDialog, [])    Expression(view, [])  Statement(}, [])  MethodCall(mDialog.setOwnerActivity(getActivity()), [VariableReference(mDialog, []), Expression(getActivity(), [])])    VariableReference(mDialog, [])    Expression(getActivity(), [])  MethodCall(mDialog.setCancelable(mCancelable), [VariableReference(mDialog, []), Expression(mCancelable, [])])    VariableReference(mDialog, [])    Expression(mCancelable, [])  MethodCall(if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)), [VariableReference(if (!mDialog, []), Expression(""DialogFragment"", []), Expression(this, []), Expression(this), [])])    VariableReference(if (!mDialog, [])    Expression(""DialogFragment"", [])    Expression(this, [])    Expression(this), [])  Statement(throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (savedInstanceState !, []), Expression(null) {, [])])    VariableReference(if (savedInstanceState !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(Bundle dialogState, []), Expression(savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG), [])])    VariableReference(Bundle dialogState, [])    Expression(savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG), [])  AssignmentExpression(=, [VariableReference(if (dialogState !, []), Expression(null) {, [])])    VariableReference(if (dialogState !, [])    Expression(null) {, [])  MethodCall(mDialog.onRestoreInstanceState(dialogState), [VariableReference(mDialog, []), Expression(dialogState, [])])    VariableReference(mDialog, [])    Expression(dialogState, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(super.onActivityCreated(savedInstanceState), [VariableReference(super, []), Expression(savedInstanceState, [])]), Statement(if (!mShowsDialog) {, []), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(View view, []), Expression(getView(), [])]), AssignmentExpression(=, [VariableReference(if (view !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(if (view.getParent() !, []), Expression(null) {, [])]), Statement(throw new IllegalStateException(""DialogFragment can not be attached to a container view""), []), Statement(}, []), MethodCall(mDialog.setContentView(view), [VariableReference(mDialog, []), Expression(view, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(final Activity activity, []), Expression(getActivity(), [])]), AssignmentExpression(=, [VariableReference(if (activity !, []), Expression(null) {, [])]), MethodCall(mDialog.setOwnerActivity(activity), [VariableReference(mDialog, []), Expression(activity, [])]), Statement(}, []), MethodCall(mDialog.setCancelable(mCancelable), [VariableReference(mDialog, []), Expression(mCancelable, [])]), MethodCall(if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)), [VariableReference(if (!mDialog, []), Expression(""DialogFragment"", []), Expression(this, []), Expression(this), [])]), Statement(throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (savedInstanceState !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(Bundle dialogState, []), Expression(savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG), [])]), AssignmentExpression(=, [VariableReference(if (dialogState !, []), Expression(null) {, [])]), MethodCall(mDialog.onRestoreInstanceState(dialogState), [VariableReference(mDialog, []), Expression(dialogState, [])]), Statement(}, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(super.onActivityCreated(savedInstanceState), [VariableReference(super, []), Expression(savedInstanceState, [])])    VariableReference(super, [])    Expression(savedInstanceState, [])  Statement(if (!mShowsDialog) {, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(View view, []), Expression(getView(), [])])    VariableReference(View view, [])    Expression(getView(), [])  AssignmentExpression(=, [VariableReference(if (view !, []), Expression(null) {, [])])    VariableReference(if (view !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(if (view.getParent() !, []), Expression(null) {, [])])    VariableReference(if (view.getParent() !, [])    Expression(null) {, [])  Statement(throw new IllegalStateException(""DialogFragment can not be attached to a container view""), [])  Statement(}, [])  MethodCall(mDialog.setContentView(view), [VariableReference(mDialog, []), Expression(view, [])])    VariableReference(mDialog, [])    Expression(view, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final Activity activity, []), Expression(getActivity(), [])])    VariableReference(final Activity activity, [])    Expression(getActivity(), [])  AssignmentExpression(=, [VariableReference(if (activity !, []), Expression(null) {, [])])    VariableReference(if (activity !, [])    Expression(null) {, [])  MethodCall(mDialog.setOwnerActivity(activity), [VariableReference(mDialog, []), Expression(activity, [])])    VariableReference(mDialog, [])    Expression(activity, [])  Statement(}, [])  MethodCall(mDialog.setCancelable(mCancelable), [VariableReference(mDialog, []), Expression(mCancelable, [])])    VariableReference(mDialog, [])    Expression(mCancelable, [])  MethodCall(if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)), [VariableReference(if (!mDialog, []), Expression(""DialogFragment"", []), Expression(this, []), Expression(this), [])])    VariableReference(if (!mDialog, [])    Expression(""DialogFragment"", [])    Expression(this, [])    Expression(this), [])  Statement(throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (savedInstanceState !, []), Expression(null) {, [])])    VariableReference(if (savedInstanceState !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(Bundle dialogState, []), Expression(savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG), [])])    VariableReference(Bundle dialogState, [])    Expression(savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG), [])  AssignmentExpression(=, [VariableReference(if (dialogState !, []), Expression(null) {, [])])    VariableReference(if (dialogState !, [])    Expression(null) {, [])  MethodCall(mDialog.onRestoreInstanceState(dialogState), [VariableReference(mDialog, []), Expression(dialogState, [])])    VariableReference(mDialog, [])    Expression(dialogState, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"3,4",0,"In the late version, a new conditional check is introduced to ensure that the result of `getActivity()` is non-null (`if (activity != null)`) before calling `mDialog.setOwnerActivity(activity)`. This leads to control dependency changes (category 3). Also, the introduction of `final Activity activity = getActivity();` is classified as an other statement change (category 4).","There are no potential compatibility issues (CI) arising from the changes made between the two versions, as the primary behavior of the API (setting the owner activity if it is non-null) remains the same but is now conditionally executed. Thus, the CI type is 0."
<android.hardware.radio.RadioManager.ProgramInfo: boolean equals(Object)>,27,28,<android.hardware.radio.RadioManager.ProgramInfo: boolean equals(Object)>,<android.hardware.radio.RadioManager.ProgramInfo: boolean equals(Object)>,0,"{
    if (this == obj)
        return true;
    if (!(obj instanceof ProgramInfo))
        return false;
    ProgramInfo other = (ProgramInfo) obj;
    if (!mSelector.equals(other.getSelector()))
        return false;
    if (mTuned != other.isTuned())
        return false;
    if (mStereo != other.isStereo())
        return false;
    if (mDigital != other.isDigital())
        return false;
    if (mFlags != other.mFlags)
        return false;
    if (mSignalStrength != other.getSignalStrength())
        return false;
    if (mMetadata == null) {
        if (other.getMetadata() != null)
            return false;
    } else if (!mMetadata.equals(other.getMetadata()))
        return false;
    if (!mVendorInfo.equals(other.mVendorInfo))
        return false;
    return true;
}","{
    if (this == obj)
        return true;
    if (!(obj instanceof ProgramInfo))
        return false;
    ProgramInfo other = (ProgramInfo) obj;
    if (!Objects.equals(mSelector, other.mSelector))
        return false;
    if (!Objects.equals(mLogicallyTunedTo, other.mLogicallyTunedTo))
        return false;
    if (!Objects.equals(mPhysicallyTunedTo, other.mPhysicallyTunedTo))
        return false;
    if (!Objects.equals(mRelatedContent, other.mRelatedContent))
        return false;
    if (mInfoFlags != other.mInfoFlags)
        return false;
    if (mSignalQuality != other.mSignalQuality)
        return false;
    if (!Objects.equals(mMetadata, other.mMetadata))
        return false;
    if (!Objects.equals(mVendorInfo, other.mVendorInfo))
        return false;
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (this, []), Expression(, [])]), Statement(return true, []), Statement(if (!(obj instanceof ProgramInfo)), []), Statement(return false, []), AssignmentExpression(=, [VariableReference(ProgramInfo other, []), Expression((ProgramInfo) obj, [])]), MethodCall(if (!mSelector.equals(other.getSelector())), [VariableReference(if (!mSelector, []), Expression(other.getSelector()), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mTuned !, []), Expression(other.isTuned()), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mStereo !, []), Expression(other.isStereo()), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mDigital !, []), Expression(other.isDigital()), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mFlags !, []), Expression(other.mFlags), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mSignalStrength !, []), Expression(other.getSignalStrength()), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mMetadata, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (other.getMetadata() !, []), Expression(null), [])]), Statement(return false, []), MethodCall(} else if (!mMetadata.equals(other.getMetadata())), [VariableReference(} else if (!mMetadata, []), Expression(other.getMetadata()), [])]), Statement(return false, []), MethodCall(if (!mVendorInfo.equals(other.mVendorInfo)), [VariableReference(if (!mVendorInfo, []), Expression(other.mVendorInfo), [])]), Statement(return false, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (this, []), Expression(, [])])    VariableReference(if (this, [])    Expression(, [])  Statement(return true, [])  Statement(if (!(obj instanceof ProgramInfo)), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(ProgramInfo other, []), Expression((ProgramInfo) obj, [])])    VariableReference(ProgramInfo other, [])    Expression((ProgramInfo) obj, [])  MethodCall(if (!mSelector.equals(other.getSelector())), [VariableReference(if (!mSelector, []), Expression(other.getSelector()), [])])    VariableReference(if (!mSelector, [])    Expression(other.getSelector()), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mTuned !, []), Expression(other.isTuned()), [])])    VariableReference(if (mTuned !, [])    Expression(other.isTuned()), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mStereo !, []), Expression(other.isStereo()), [])])    VariableReference(if (mStereo !, [])    Expression(other.isStereo()), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mDigital !, []), Expression(other.isDigital()), [])])    VariableReference(if (mDigital !, [])    Expression(other.isDigital()), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mFlags !, []), Expression(other.mFlags), [])])    VariableReference(if (mFlags !, [])    Expression(other.mFlags), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mSignalStrength !, []), Expression(other.getSignalStrength()), [])])    VariableReference(if (mSignalStrength !, [])    Expression(other.getSignalStrength()), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mMetadata, []), Expression(, [])])    VariableReference(if (mMetadata, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (other.getMetadata() !, []), Expression(null), [])])    VariableReference(if (other.getMetadata() !, [])    Expression(null), [])  Statement(return false, [])  MethodCall(} else if (!mMetadata.equals(other.getMetadata())), [VariableReference(} else if (!mMetadata, []), Expression(other.getMetadata()), [])])    VariableReference(} else if (!mMetadata, [])    Expression(other.getMetadata()), [])  Statement(return false, [])  MethodCall(if (!mVendorInfo.equals(other.mVendorInfo)), [VariableReference(if (!mVendorInfo, []), Expression(other.mVendorInfo), [])])    VariableReference(if (!mVendorInfo, [])    Expression(other.mVendorInfo), [])  Statement(return false, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (this, []), Expression(, [])]), Statement(return true, []), Statement(if (!(obj instanceof ProgramInfo)), []), Statement(return false, []), AssignmentExpression(=, [VariableReference(ProgramInfo other, []), Expression((ProgramInfo) obj, [])]), MethodCall(if (!Objects.equals(mSelector, other.mSelector)), [VariableReference(if (!Objects, []), Expression(mSelector, []), Expression(other.mSelector), [])]), Statement(return false, []), MethodCall(if (!Objects.equals(mLogicallyTunedTo, other.mLogicallyTunedTo)), [VariableReference(if (!Objects, []), Expression(mLogicallyTunedTo, []), Expression(other.mLogicallyTunedTo), [])]), Statement(return false, []), MethodCall(if (!Objects.equals(mPhysicallyTunedTo, other.mPhysicallyTunedTo)), [VariableReference(if (!Objects, []), Expression(mPhysicallyTunedTo, []), Expression(other.mPhysicallyTunedTo), [])]), Statement(return false, []), MethodCall(if (!Objects.equals(mRelatedContent, other.mRelatedContent)), [VariableReference(if (!Objects, []), Expression(mRelatedContent, []), Expression(other.mRelatedContent), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mInfoFlags !, []), Expression(other.mInfoFlags), [])]), Statement(return false, []), AssignmentExpression(=, [VariableReference(if (mSignalQuality !, []), Expression(other.mSignalQuality), [])]), Statement(return false, []), MethodCall(if (!Objects.equals(mMetadata, other.mMetadata)), [VariableReference(if (!Objects, []), Expression(mMetadata, []), Expression(other.mMetadata), [])]), Statement(return false, []), MethodCall(if (!Objects.equals(mVendorInfo, other.mVendorInfo)), [VariableReference(if (!Objects, []), Expression(mVendorInfo, []), Expression(other.mVendorInfo), [])]), Statement(return false, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (this, []), Expression(, [])])    VariableReference(if (this, [])    Expression(, [])  Statement(return true, [])  Statement(if (!(obj instanceof ProgramInfo)), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(ProgramInfo other, []), Expression((ProgramInfo) obj, [])])    VariableReference(ProgramInfo other, [])    Expression((ProgramInfo) obj, [])  MethodCall(if (!Objects.equals(mSelector, other.mSelector)), [VariableReference(if (!Objects, []), Expression(mSelector, []), Expression(other.mSelector), [])])    VariableReference(if (!Objects, [])    Expression(mSelector, [])    Expression(other.mSelector), [])  Statement(return false, [])  MethodCall(if (!Objects.equals(mLogicallyTunedTo, other.mLogicallyTunedTo)), [VariableReference(if (!Objects, []), Expression(mLogicallyTunedTo, []), Expression(other.mLogicallyTunedTo), [])])    VariableReference(if (!Objects, [])    Expression(mLogicallyTunedTo, [])    Expression(other.mLogicallyTunedTo), [])  Statement(return false, [])  MethodCall(if (!Objects.equals(mPhysicallyTunedTo, other.mPhysicallyTunedTo)), [VariableReference(if (!Objects, []), Expression(mPhysicallyTunedTo, []), Expression(other.mPhysicallyTunedTo), [])])    VariableReference(if (!Objects, [])    Expression(mPhysicallyTunedTo, [])    Expression(other.mPhysicallyTunedTo), [])  Statement(return false, [])  MethodCall(if (!Objects.equals(mRelatedContent, other.mRelatedContent)), [VariableReference(if (!Objects, []), Expression(mRelatedContent, []), Expression(other.mRelatedContent), [])])    VariableReference(if (!Objects, [])    Expression(mRelatedContent, [])    Expression(other.mRelatedContent), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mInfoFlags !, []), Expression(other.mInfoFlags), [])])    VariableReference(if (mInfoFlags !, [])    Expression(other.mInfoFlags), [])  Statement(return false, [])  AssignmentExpression(=, [VariableReference(if (mSignalQuality !, []), Expression(other.mSignalQuality), [])])    VariableReference(if (mSignalQuality !, [])    Expression(other.mSignalQuality), [])  Statement(return false, [])  MethodCall(if (!Objects.equals(mMetadata, other.mMetadata)), [VariableReference(if (!Objects, []), Expression(mMetadata, []), Expression(other.mMetadata), [])])    VariableReference(if (!Objects, [])    Expression(mMetadata, [])    Expression(other.mMetadata), [])  Statement(return false, [])  MethodCall(if (!Objects.equals(mVendorInfo, other.mVendorInfo)), [VariableReference(if (!Objects, []), Expression(mVendorInfo, []), Expression(other.mVendorInfo), [])])    VariableReference(if (!Objects, [])    Expression(mVendorInfo, [])    Expression(other.mVendorInfo), [])  Statement(return false, [])  Statement(return true, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3,4",1,"1,4",1,"The implementation has switched from directly calling methods on member variables to using `Objects.equals()` for comparison. Additionally, the checked fields and member variables have slightly changed.","Changes in the member variables and their comparison methods can lead to different returns from the method, causing the method to behave differently regarding object equality. Thus, the CI type is 1."
<android.app.ContextImpl: int checkSelfPermission(String)>,30,31,<android.app.ContextImpl: int checkSelfPermission(String)>,<android.app.ContextImpl: int checkSelfPermission(String)>,0,"{
    if (permission == null) {
        throw new IllegalArgumentException(""permission is null"");
    }
    return checkPermission(permission, Process.myPid(), Process.myUid());
}","{
    if (permission == null) {
        throw new IllegalArgumentException(""permission is null"");
    }
    if (mParams.isRenouncedPermission(permission)) {
        Log.v(TAG, ""Treating renounced permission "" + permission + "" as denied"");
        return PERMISSION_DENIED;
    }
    return checkPermission(permission, Process.myPid(), Process.myUid());
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (permission, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""permission is null""), []), Statement(}, []), MethodCall(return checkPermission(permission, Process.myPid(), Process.myUid()), [VariableReference(return checkPermission(permission, Process, []), Expression(), []), Expression(Process.myUid(), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (permission, []), Expression(, [])])    VariableReference(if (permission, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""permission is null""), [])  Statement(}, [])  MethodCall(return checkPermission(permission, Process.myPid(), Process.myUid()), [VariableReference(return checkPermission(permission, Process, []), Expression(), []), Expression(Process.myUid(), [])])    VariableReference(return checkPermission(permission, Process, [])    Expression(), [])    Expression(Process.myUid(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (permission, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""permission is null""), []), Statement(}, []), MethodCall(if (mParams.isRenouncedPermission(permission)), [VariableReference(if (mParams, []), Expression(permission), [])]), MethodCall(Log.v(TAG, ""Treating renounced permission "" + permission + "" as denied""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Treating renounced permission "" + permission + "" as denied"", [])]), Statement(return PERMISSION_DENIED, []), Statement(}, []), MethodCall(return checkPermission(permission, Process.myPid(), Process.myUid()), [VariableReference(return checkPermission(permission, Process, []), Expression(), []), Expression(Process.myUid(), [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (permission, []), Expression(, [])])    VariableReference(if (permission, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""permission is null""), [])  Statement(}, [])  MethodCall(if (mParams.isRenouncedPermission(permission)), [VariableReference(if (mParams, []), Expression(permission), [])])    VariableReference(if (mParams, [])    Expression(permission), [])  MethodCall(Log.v(TAG, ""Treating renounced permission "" + permission + "" as denied""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Treating renounced permission "" + permission + "" as denied"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Treating renounced permission "" + permission + "" as denied"", [])  Statement(return PERMISSION_DENIED, [])  Statement(}, [])  MethodCall(return checkPermission(permission, Process.myPid(), Process.myUid()), [VariableReference(return checkPermission(permission, Process, []), Expression(), []), Expression(Process.myUid(), [])])    VariableReference(return checkPermission(permission, Process, [])    Expression(), [])    Expression(Process.myUid(), [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3,4",1,"3,4",1,"The additional conditional check `if (mParams.isRenouncedPermission(permission))` and the corresponding statements (logging and returning PERMISSION_DENIED) are introduced in the late version. Therefore, the change type is 3 and also involves other supplementary statements, so it is 4 as well.","The added condition can cause the method to return `PERMISSION_DENIED` if `mParams.isRenouncedPermission(permission)` returns true, which introduces a different return behavior. Therefore, the CI type is 1."
"<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>",25,26,"<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>","<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>",0,"{
    vibrate(Process.myUid(), mPackageName, pattern, repeat, attributes);
}","{
    // exceptions for compatibility purposes
    if (repeat < -1 || repeat >= pattern.length) {
        Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length="" + pattern.length + "", index="" + repeat + "")"");
        throw new ArrayIndexOutOfBoundsException();
    }
    try {
        vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes);
    } catch (IllegalArgumentException iae) {
        Log.e(TAG, ""Failed to create VibrationEffect"", iae);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(vibrate(Process.myUid(), mPackageName, pattern, repeat, attributes), [VariableReference(vibrate(Process, []), Expression(), []), Expression(mPackageName, []), Expression(pattern, []), Expression(repeat, []), Expression(attributes, [])]), Statement(}, [])])  Statement({, [])  MethodCall(vibrate(Process.myUid(), mPackageName, pattern, repeat, attributes), [VariableReference(vibrate(Process, []), Expression(), []), Expression(mPackageName, []), Expression(pattern, []), Expression(repeat, []), Expression(attributes, [])])    VariableReference(vibrate(Process, [])    Expression(), [])    Expression(mPackageName, [])    Expression(pattern, [])    Expression(repeat, [])    Expression(attributes, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// exceptions for compatibility purposes, []), AssignmentExpression(=, [VariableReference(if (repeat < -1 || repeat >, []), Expression(pattern.length) {, [])]), AssignmentExpression(=, [VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, []), Expression("" + pattern.length + "", index, [])]), Statement(throw new ArrayIndexOutOfBoundsException(), []), Statement(}, []), Statement(try {, []), MethodCall(vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes), [VariableReference(vibrate(VibrationEffect, []), Expression(pattern, []), Expression(repeat), []), Expression(attributes, [])]), Statement(} catch (IllegalArgumentException iae) {, []), MethodCall(Log.e(TAG, ""Failed to create VibrationEffect"", iae), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to create VibrationEffect"", []), Expression(iae, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(// exceptions for compatibility purposes, [])  AssignmentExpression(=, [VariableReference(if (repeat < -1 || repeat >, []), Expression(pattern.length) {, [])])    VariableReference(if (repeat < -1 || repeat >, [])    Expression(pattern.length) {, [])  AssignmentExpression(=, [VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, []), Expression("" + pattern.length + "", index, [])])    VariableReference(Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length, [])    Expression("" + pattern.length + "", index, [])  Statement(throw new ArrayIndexOutOfBoundsException(), [])  Statement(}, [])  Statement(try {, [])  MethodCall(vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes), [VariableReference(vibrate(VibrationEffect, []), Expression(pattern, []), Expression(repeat), []), Expression(attributes, [])])    VariableReference(vibrate(VibrationEffect, [])    Expression(pattern, [])    Expression(repeat), [])    Expression(attributes, [])  Statement(} catch (IllegalArgumentException iae) {, [])  MethodCall(Log.e(TAG, ""Failed to create VibrationEffect"", iae), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to create VibrationEffect"", []), Expression(iae, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed to create VibrationEffect"", [])    Expression(iae, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#VIBRATE}.
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 */
","/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
",-1,,"[@Deprecated, @RequiresPermission(android.Manifest.permission.VIBRATE)]",-1,-1,-1,-1,-1,"2,3,4,5",2,"2,3,5","1,2","The late version introduces a check (control dependency change) for the `repeat` index and throws a new `ArrayIndexOutOfBoundsException` if the index is out of bounds. Additionally, the call to `vibrate()` has changed its parameters, and exceptions are handled differently (catching `IllegalArgumentException`). The dependent API `vibrate` is changed as well. Thus, the code change types are 2, 3, 5.","The late version may throw new exceptions (`ArrayIndexOutOfBoundsException` and `IllegalArgumentException`) and the return value of the dependent `vibrate` API might be different due to the parameter changes. Therefore, the CI types are 1, 2."
<android.app.UiAutomation: void setRunAsMonkey(boolean)>,30,31,<android.app.UiAutomation: void setRunAsMonkey(boolean)>,<android.app.UiAutomation: void setRunAsMonkey(boolean)>,0,"{
    synchronized (mLock) {
        throwIfNotConnectedLocked();
    }
    try {
        ActivityManager.getService().setUserIsMonkey(enable);
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error while setting run as monkey!"", re);
    }
}","{
    try {
        ActivityManager.getService().setUserIsMonkey(enable);
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error while setting run as monkey!"", re);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mLock) {, []), Statement(throwIfNotConnectedLocked(), []), Statement(}, []), Statement(try {, []), MethodCall(ActivityManager.getService().setUserIsMonkey(enable), [VariableReference(ActivityManager, []), Expression().setUserIsMonkey(enable, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.e(LOG_TAG, ""Error while setting run as monkey!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error while setting run as monkey!"", []), Expression(re, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mLock) {, [])  Statement(throwIfNotConnectedLocked(), [])  Statement(}, [])  Statement(try {, [])  MethodCall(ActivityManager.getService().setUserIsMonkey(enable), [VariableReference(ActivityManager, []), Expression().setUserIsMonkey(enable, [])])    VariableReference(ActivityManager, [])    Expression().setUserIsMonkey(enable, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.e(LOG_TAG, ""Error while setting run as monkey!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error while setting run as monkey!"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Error while setting run as monkey!"", [])    Expression(re, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManager.getService().setUserIsMonkey(enable), [VariableReference(ActivityManager, []), Expression().setUserIsMonkey(enable, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.e(LOG_TAG, ""Error while setting run as monkey!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error while setting run as monkey!"", []), Expression(re, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManager.getService().setUserIsMonkey(enable), [VariableReference(ActivityManager, []), Expression().setUserIsMonkey(enable, [])])    VariableReference(ActivityManager, [])    Expression().setUserIsMonkey(enable, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.e(LOG_TAG, ""Error while setting run as monkey!"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error while setting run as monkey!"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Error while setting run as monkey!"", [])    Expression(re, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Sets whether this UiAutomation to run in a ""monkey"" mode. Applications can query whether
 * they are executed in a ""monkey"" mode, i.e. run by a test framework, and avoid doing
 * potentially undesirable actions such as calling 911 or posting on public forums etc.
 *
 * @param enable whether to run in a ""monkey"" mode or not. Default is not.
 * @see ActivityManager#isUserAMonkey()
 */
","/**
 * Sets whether this UiAutomation to run in a ""monkey"" mode. Applications can query whether
 * they are executed in a ""monkey"" mode, i.e. run by a test framework, and avoid doing
 * potentially undesirable actions such as calling 911 or posting on public forums etc.
 *
 * @param enable whether to run in a ""monkey"" mode or not. Default is not.
 * @see ActivityManager#isUserAMonkey()
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,0,"The `synchronized` block that calls `throwIfNotConnectedLocked()` was removed. However, this does not potentially affect the return value or exception handling directly in the `setRunAsMonkey` method itself, so the code change type is 4.","The removal of the `synchronized` block does not cause an immediate potential for different return values or exceptions thrown by the `setRunAsMonkey` method; thus, no compatibility issue arises, so the CI type is 0."
<android.os.PowerManager: boolean isPowerSaveMode()>,29,30,<android.os.PowerManager: boolean isPowerSaveMode()>,<android.os.PowerManager: boolean isPowerSaveMode()>,0,"{
    try {
        return mService.isPowerSaveMode();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return mPowerSaveModeCache.query(null);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.isPowerSaveMode(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.isPowerSaveMode(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mPowerSaveModeCache.query(null), [VariableReference(return mPowerSaveModeCache, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mPowerSaveModeCache.query(null), [VariableReference(return mPowerSaveModeCache, []), Expression(null, [])])    VariableReference(return mPowerSaveModeCache, [])    Expression(null, [])  Statement(}, [])",1,"/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
","/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
",-1,,,-1,-1,-1,-1,-1,"1,2,4","1,2","1,5",1,"The return statement has changed from `return mService.isPowerSaveMode();` to `return mPowerSaveModeCache.query(null);`. Additionally, the dependent API has changed from `mService.isPowerSaveMode()` to `mPowerSaveModeCache.query(null)`, which means the code change type is 1,5.","Because the return statement and the dependent API have changed, this could potentially cause the API to return a different value. Therefore, the CI type is 1."
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>,15,16,<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>,<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>,0,"{
    mUseWebViewBackgroundForOverscroll = view;
}","{
    throw new MustOverrideException();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mUseWebViewBackgroundForOverscroll, []), Expression(view, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mUseWebViewBackgroundForOverscroll, []), Expression(view, [])])    VariableReference(mUseWebViewBackgroundForOverscroll, [])    Expression(view, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new MustOverrideException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new MustOverrideException(), [])  Statement(}, [])",1,"/**
 * Set whether the WebView uses its background for over scroll background.
 * If true, it will use the WebView's background. If false, it will use an
 * internal pattern. Default is true.
 * @deprecated This method is now obsolete.
 */
","/**
 * Sets whether the WebView uses its background for over scroll background.
 * If true, it will use the WebView's background. If false, it will use an
 * internal pattern. Default is true.
 *
 * @deprecated This method is now obsolete.
 */
",-1,[@Deprecated],[@Deprecated],-1,-1,-1,-1,-1,2,2,2,2,"The late implementation introduces a new exception by throwing `MustOverrideException`. Therefore, the code change type is 2.","The introduction of `MustOverrideException` in the late implementation could lead to different exception handling behavior when invoking this method, thus the CI type is 2."
<android.text.StaticLayout: int getLineDescent(int)>,23,24,<android.text.StaticLayout: int getLineDescent(int)>,<android.text.StaticLayout: int getLineDescent(int)>,0,"{
    int descent = mLines[mColumns * line + DESCENT];
    if (// -1 intended
    mMaximumVisibleLineCount > 0 && line >= mMaximumVisibleLineCount - 1 && line != mLineCount) {
        descent += getBottomPadding();
    }
    return descent;
}","{
    return mLines[mColumns * line + DESCENT];
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int descent, []), Expression(mLines[mColumns * line + DESCENT], [])]), Statement(if (// -1 intended, []), AssignmentExpression(=, [VariableReference(mMaximumVisibleLineCount > 0 && line >, []), Expression(mMaximumVisibleLineCount - 1 && line !, [])]), AssignmentExpression(=, [VariableReference(descent +, []), Expression(getBottomPadding(), [])]), Statement(}, []), Statement(return descent, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int descent, []), Expression(mLines[mColumns * line + DESCENT], [])])    VariableReference(int descent, [])    Expression(mLines[mColumns * line + DESCENT], [])  Statement(if (// -1 intended, [])  AssignmentExpression(=, [VariableReference(mMaximumVisibleLineCount > 0 && line >, []), Expression(mMaximumVisibleLineCount - 1 && line !, [])])    VariableReference(mMaximumVisibleLineCount > 0 && line >, [])    Expression(mMaximumVisibleLineCount - 1 && line !, [])  AssignmentExpression(=, [VariableReference(descent +, []), Expression(getBottomPadding(), [])])    VariableReference(descent +, [])    Expression(getBottomPadding(), [])  Statement(}, [])  Statement(return descent, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mLines[mColumns * line + DESCENT], []), Statement(}, [])])  Statement({, [])  Statement(return mLines[mColumns * line + DESCENT], [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3",1,"1,3,4",1,"The early version's implementation had an if-statement checking specific conditions and potentially modifying the value of `descent`, which was then returned. In the late version, only the return statement remains, effectively removing the condition, assignment, and return of the potentially modified `descent`. This is a change in the return statement (1), a control dependency change (3), and other statement changes due to the removal of the if statement logic (4).","The change in the implementation can lead to different return values since the condition and the potential modification of the `descent` value have been removed. Therefore, the CI type is 1."
<android.app.ContextImpl: void sendBroadcast(Intent)>,30,31,<android.app.ContextImpl: void sendBroadcast(Intent)>,<android.app.ContextImpl: void sendBroadcast(Intent)>,0,"{
    warnIfCallingFromSystemProcess();
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false, getUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    warnIfCallingFromSystemProcess();
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, null, /*excludedPermissions=*/
        AppOpsManager.OP_NONE, null, false, false, getUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(warnIfCallingFromSystemProcess(), []), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])]), Statement(try {, []), MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])]), MethodCall(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false, getUserId()), [VariableReference(ActivityManager, []), Expression().broadcastIntentWithFeature(mMainThread.getApplicationThread(), []), Expression(getAttributionTag(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(null, []), Expression(AppOpsManager.OP_NONE, []), Expression(null, []), Expression(false, []), Expression(false, []), Expression(getUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(warnIfCallingFromSystemProcess(), [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])])    VariableReference(String resolvedType, [])    Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])  Statement(try {, [])  MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])])    VariableReference(intent, [])    Expression(this, [])  MethodCall(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false, getUserId()), [VariableReference(ActivityManager, []), Expression().broadcastIntentWithFeature(mMainThread.getApplicationThread(), []), Expression(getAttributionTag(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(null, []), Expression(AppOpsManager.OP_NONE, []), Expression(null, []), Expression(false, []), Expression(false, []), Expression(getUserId(), [])])    VariableReference(ActivityManager, [])    Expression().broadcastIntentWithFeature(mMainThread.getApplicationThread(), [])    Expression(getAttributionTag(), [])    Expression(intent, [])    Expression(resolvedType, [])    Expression(null, [])    Expression(Activity.RESULT_OK, [])    Expression(null, [])    Expression(null, [])    Expression(null, [])    Expression(AppOpsManager.OP_NONE, [])    Expression(null, [])    Expression(false, [])    Expression(false, [])    Expression(getUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(warnIfCallingFromSystemProcess(), []), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])]), Statement(try {, []), MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])]), AssignmentExpression(=, [VariableReference(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, null, /*excludedPermissions, []), Expression(*/, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(warnIfCallingFromSystemProcess(), [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])])    VariableReference(String resolvedType, [])    Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])  Statement(try {, [])  MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])])    VariableReference(intent, [])    Expression(this, [])  AssignmentExpression(=, [VariableReference(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, null, /*excludedPermissions, []), Expression(*/, [])])    VariableReference(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, null, /*excludedPermissions, [])    Expression(*/, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,5,0,4,0,"The change mainly involves the addition of a parameter comment `/*excludedPermissions=*/` within the `broadcastIntentWithFeature` method call, which does not affect the runtime behavior of the method, so the code change type is 4.","The code change does not potentially lead to any different return values or different exception handlings, hence there is no compatibility issue."
<android.widget.TimePicker: void setIs24HourView(Boolean)>,18,19,<android.widget.TimePicker: void setIs24HourView(Boolean)>,<android.widget.TimePicker: void setIs24HourView(Boolean)>,0,"{
    if (mIs24HourView == is24HourView) {
        return;
    }
    mIs24HourView = is24HourView;
    // cache the current hour since spinner range changes
    int currentHour = getCurrentHour();
    updateHourControl();
    // set value after spinner range is updated
    setCurrentHour(currentHour);
    updateAmPmControl();
}","{
    if (mIs24HourView == is24HourView) {
        return;
    }
    // cache the current hour since spinner range changes and BEFORE changing mIs24HourView!!
    int currentHour = getCurrentHour();
    // Order is important here.
    mIs24HourView = is24HourView;
    getHourFormatData();
    updateHourControl();
    // set value after spinner range is updated - be aware that because mIs24HourView has
    // changed then getCurrentHour() is not equal to the currentHour we cached before so
    // explicitly ask for *not* propagating any onTimeChanged()
    setCurrentHour(currentHour, false);
    updateMinuteControl();
    updateAmPmControl();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mIs24HourView, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mIs24HourView, []), Expression(is24HourView, [])]), Statement(// cache the current hour since spinner range changes, []), AssignmentExpression(=, [VariableReference(int currentHour, []), Expression(getCurrentHour(), [])]), Statement(updateHourControl(), []), Statement(// set value after spinner range is updated, []), Statement(setCurrentHour(currentHour), []), Statement(updateAmPmControl(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mIs24HourView, []), Expression(, [])])    VariableReference(if (mIs24HourView, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mIs24HourView, []), Expression(is24HourView, [])])    VariableReference(mIs24HourView, [])    Expression(is24HourView, [])  Statement(// cache the current hour since spinner range changes, [])  AssignmentExpression(=, [VariableReference(int currentHour, []), Expression(getCurrentHour(), [])])    VariableReference(int currentHour, [])    Expression(getCurrentHour(), [])  Statement(updateHourControl(), [])  Statement(// set value after spinner range is updated, [])  Statement(setCurrentHour(currentHour), [])  Statement(updateAmPmControl(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mIs24HourView, []), Expression(, [])]), Statement(return, []), Statement(}, []), Statement(// cache the current hour since spinner range changes and BEFORE changing mIs24HourView!!, []), AssignmentExpression(=, [VariableReference(int currentHour, []), Expression(getCurrentHour(), [])]), Statement(// Order is important here., []), AssignmentExpression(=, [VariableReference(mIs24HourView, []), Expression(is24HourView, [])]), Statement(getHourFormatData(), []), Statement(updateHourControl(), []), Statement(// set value after spinner range is updated - be aware that because mIs24HourView has, []), Statement(// changed then getCurrentHour() is not equal to the currentHour we cached before so, []), Statement(// explicitly ask for *not* propagating any onTimeChanged(), []), Statement(setCurrentHour(currentHour, false), []), Statement(updateMinuteControl(), []), Statement(updateAmPmControl(), []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mIs24HourView, []), Expression(, [])])    VariableReference(if (mIs24HourView, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  Statement(// cache the current hour since spinner range changes and BEFORE changing mIs24HourView!!, [])  AssignmentExpression(=, [VariableReference(int currentHour, []), Expression(getCurrentHour(), [])])    VariableReference(int currentHour, [])    Expression(getCurrentHour(), [])  Statement(// Order is important here., [])  AssignmentExpression(=, [VariableReference(mIs24HourView, []), Expression(is24HourView, [])])    VariableReference(mIs24HourView, [])    Expression(is24HourView, [])  Statement(getHourFormatData(), [])  Statement(updateHourControl(), [])  Statement(// set value after spinner range is updated - be aware that because mIs24HourView has, [])  Statement(// changed then getCurrentHour() is not equal to the currentHour we cached before so, [])  Statement(// explicitly ask for *not* propagating any onTimeChanged(), [])  Statement(setCurrentHour(currentHour, false), [])  Statement(updateMinuteControl(), [])  Statement(updateAmPmControl(), [])  Statement(}, [])",1,"/**
 * Set whether in 24 hour or AM/PM mode.
 *
 * @param is24HourView True = 24 hour mode. False = AM/PM.
 */
","/**
 * Set whether in 24 hour or AM/PM mode.
 *
 * @param is24HourView True = 24 hour mode. False = AM/PM.
 */
",-1,,,-1,-1,-1,-1,-1,"4,5",0,"1,3,4,5",1,Several changes have been made:,3. The call to `setCurrentHour(currentHour)` now includes an additional parameter `(false)`.
"<android.provider.Settings.NameValueCache: boolean putStringForUser(ContentResolver,String,String,int)>",17,18,"<android.provider.Settings.NameValueCache: boolean putStringForUser(ContentResolver,String,String,int)>","<android.provider.Settings.NameValueCache: boolean putStringForUser(ContentResolver,String,String,int)>",0,"{
    try {
        Bundle arg = new Bundle();
        arg.putString(Settings.NameValueTable.VALUE, value);
        arg.putInt(CALL_METHOD_USER_KEY, userHandle);
        IContentProvider cp = lazyGetProvider(cr);
        cp.call(mCallSetCommand, name, arg);
    } catch (RemoteException e) {
        Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e);
        return false;
    }
    return true;
}","{
    try {
        Bundle arg = new Bundle();
        arg.putString(Settings.NameValueTable.VALUE, value);
        arg.putInt(CALL_METHOD_USER_KEY, userHandle);
        IContentProvider cp = lazyGetProvider(cr);
        cp.call(cr.getPackageName(), mCallSetCommand, name, arg);
    } catch (RemoteException e) {
        Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e);
        return false;
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(Bundle arg, []), Expression(new Bundle(), [])]), MethodCall(arg.putString(Settings.NameValueTable.VALUE, value), [VariableReference(arg, []), Expression(Settings.NameValueTable.VALUE, []), Expression(value, [])]), MethodCall(arg.putInt(CALL_METHOD_USER_KEY, userHandle), [VariableReference(arg, []), Expression(CALL_METHOD_USER_KEY, []), Expression(userHandle, [])]), AssignmentExpression(=, [VariableReference(IContentProvider cp, []), Expression(lazyGetProvider(cr), [])]), MethodCall(cp.call(mCallSetCommand, name, arg), [VariableReference(cp, []), Expression(mCallSetCommand, []), Expression(name, []), Expression(arg, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Can't set key "" + name + "" in "" + mUri, []), Expression(e, [])]), Statement(return false, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Bundle arg, []), Expression(new Bundle(), [])])    VariableReference(Bundle arg, [])    Expression(new Bundle(), [])  MethodCall(arg.putString(Settings.NameValueTable.VALUE, value), [VariableReference(arg, []), Expression(Settings.NameValueTable.VALUE, []), Expression(value, [])])    VariableReference(arg, [])    Expression(Settings.NameValueTable.VALUE, [])    Expression(value, [])  MethodCall(arg.putInt(CALL_METHOD_USER_KEY, userHandle), [VariableReference(arg, []), Expression(CALL_METHOD_USER_KEY, []), Expression(userHandle, [])])    VariableReference(arg, [])    Expression(CALL_METHOD_USER_KEY, [])    Expression(userHandle, [])  AssignmentExpression(=, [VariableReference(IContentProvider cp, []), Expression(lazyGetProvider(cr), [])])    VariableReference(IContentProvider cp, [])    Expression(lazyGetProvider(cr), [])  MethodCall(cp.call(mCallSetCommand, name, arg), [VariableReference(cp, []), Expression(mCallSetCommand, []), Expression(name, []), Expression(arg, [])])    VariableReference(cp, [])    Expression(mCallSetCommand, [])    Expression(name, [])    Expression(arg, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Can't set key "" + name + "" in "" + mUri, []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Can't set key "" + name + "" in "" + mUri, [])    Expression(e, [])  Statement(return false, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(Bundle arg, []), Expression(new Bundle(), [])]), MethodCall(arg.putString(Settings.NameValueTable.VALUE, value), [VariableReference(arg, []), Expression(Settings.NameValueTable.VALUE, []), Expression(value, [])]), MethodCall(arg.putInt(CALL_METHOD_USER_KEY, userHandle), [VariableReference(arg, []), Expression(CALL_METHOD_USER_KEY, []), Expression(userHandle, [])]), AssignmentExpression(=, [VariableReference(IContentProvider cp, []), Expression(lazyGetProvider(cr), [])]), MethodCall(cp.call(cr.getPackageName(), mCallSetCommand, name, arg), [VariableReference(cp, []), Expression(cr.getPackageName(), []), Expression(mCallSetCommand, []), Expression(name, []), Expression(arg, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Can't set key "" + name + "" in "" + mUri, []), Expression(e, [])]), Statement(return false, []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Bundle arg, []), Expression(new Bundle(), [])])    VariableReference(Bundle arg, [])    Expression(new Bundle(), [])  MethodCall(arg.putString(Settings.NameValueTable.VALUE, value), [VariableReference(arg, []), Expression(Settings.NameValueTable.VALUE, []), Expression(value, [])])    VariableReference(arg, [])    Expression(Settings.NameValueTable.VALUE, [])    Expression(value, [])  MethodCall(arg.putInt(CALL_METHOD_USER_KEY, userHandle), [VariableReference(arg, []), Expression(CALL_METHOD_USER_KEY, []), Expression(userHandle, [])])    VariableReference(arg, [])    Expression(CALL_METHOD_USER_KEY, [])    Expression(userHandle, [])  AssignmentExpression(=, [VariableReference(IContentProvider cp, []), Expression(lazyGetProvider(cr), [])])    VariableReference(IContentProvider cp, [])    Expression(lazyGetProvider(cr), [])  MethodCall(cp.call(cr.getPackageName(), mCallSetCommand, name, arg), [VariableReference(cp, []), Expression(cr.getPackageName(), []), Expression(mCallSetCommand, []), Expression(name, []), Expression(arg, [])])    VariableReference(cp, [])    Expression(cr.getPackageName(), [])    Expression(mCallSetCommand, [])    Expression(name, [])    Expression(arg, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e), [VariableReference(Log, []), Expression(TAG, []), Expression(""Can't set key "" + name + "" in "" + mUri, []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Can't set key "" + name + "" in "" + mUri, [])    Expression(e, [])  Statement(return false, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"4,5",0,4,0,"The method call in the 'cp.call(...)' expression has been changed. Instead of calling `cp.call(mCallSetCommand, name, arg)`, it now calls `cp.call(cr.getPackageName(), mCallSetCommand, name, arg)`. This is an alteration in how the method is invoked, which falls under the category of 'Other statement changed'.","The change in the method call parameter does not seem to lead to different return values or exceptions being thrown, as the general flow and return conditions (true/false) remain unaffected. Therefore, the CI type is 0."
<android.hardware.camera2.CameraManager: CameraCharacteristics getCameraCharacteristics(String)>,29,30,<android.hardware.camera2.CameraManager: CameraCharacteristics getCameraCharacteristics(String)>,<android.hardware.camera2.CameraManager: CameraCharacteristics getCameraCharacteristics(String)>,0,"{
    CameraCharacteristics characteristics = null;
    if (CameraManagerGlobal.sCameraServiceDisabled) {
        throw new IllegalArgumentException(""No cameras available on device"");
    }
    synchronized (mLock) {
        /*
             * Get the camera characteristics from the camera service directly if it supports it,
             * otherwise get them from the legacy shim instead.
             */
        ICameraService cameraService = CameraManagerGlobal.get().getCameraService();
        if (cameraService == null) {
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"");
        }
        try {
            Size displaySize = getDisplaySize();
            // exception in case cameraId is a hidden physical camera.
            if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {
                // Legacy backwards compatibility path; build static info from the camera
                // parameters
                int id = Integer.parseInt(cameraId);
                String parameters = cameraService.getLegacyParameters(id);
                CameraInfo info = cameraService.getCameraInfo(id);
                characteristics = LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize);
            } else {
                // Normal path: Get the camera characteristics directly from the camera service
                CameraMetadataNative info = cameraService.getCameraCharacteristics(cameraId);
                try {
                    info.setCameraId(Integer.parseInt(cameraId));
                } catch (NumberFormatException e) {
                    Log.e(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer"");
                }
                info.setDisplaySize(displaySize);
                characteristics = new CameraCharacteristics(info);
            }
        } catch (ServiceSpecificException e) {
            throwAsPublicException(e);
        } catch (RemoteException e) {
            // Camera service died - act as if the camera was disconnected
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"", e);
        }
    }
    return characteristics;
}","{
    CameraCharacteristics characteristics = null;
    if (CameraManagerGlobal.sCameraServiceDisabled) {
        throw new IllegalArgumentException(""No cameras available on device"");
    }
    synchronized (mLock) {
        /*
             * Get the camera characteristics from the camera service directly if it supports it,
             * otherwise get them from the legacy shim instead.
             */
        ICameraService cameraService = CameraManagerGlobal.get().getCameraService();
        if (cameraService == null) {
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"");
        }
        try {
            Size displaySize = getDisplaySize();
            // exception in case cameraId is a hidden physical camera.
            if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {
                // Legacy backwards compatibility path; build static info from the camera
                // parameters
                int id = Integer.parseInt(cameraId);
                String parameters = cameraService.getLegacyParameters(id);
                CameraInfo info = cameraService.getCameraInfo(id);
                characteristics = LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize);
            } else {
                // Normal path: Get the camera characteristics directly from the camera service
                CameraMetadataNative info = cameraService.getCameraCharacteristics(cameraId);
                try {
                    info.setCameraId(Integer.parseInt(cameraId));
                } catch (NumberFormatException e) {
                    // For external camera, reaching here is expected.
                    Log.v(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer"");
                }
                boolean hasConcurrentStreams = CameraManagerGlobal.get().cameraIdHasConcurrentStreamsLocked(cameraId);
                info.setHasMandatoryConcurrentStreams(hasConcurrentStreams);
                info.setDisplaySize(displaySize);
                characteristics = new CameraCharacteristics(info);
            }
        } catch (ServiceSpecificException e) {
            throwAsPublicException(e);
        } catch (RemoteException e) {
            // Camera service died - act as if the camera was disconnected
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"", e);
        }
    }
    return characteristics;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(CameraCharacteristics characteristics, []), Expression(null, [])]), Statement(throw new IllegalArgumentException(""No cameras available on device""), []), Statement(}, []), Statement(synchronized (mLock) {, []), Statement(/*, []), Statement(* Get the camera characteristics from the camera service directly if it supports it,, []), Statement(* otherwise get them from the legacy shim instead., []), Statement(*/, []), AssignmentExpression(=, [VariableReference(ICameraService cameraService, []), Expression(CameraManagerGlobal.get().getCameraService(), [])]), AssignmentExpression(=, [VariableReference(if (cameraService, []), Expression(, [])]), Statement(}, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(Size displaySize, []), Expression(getDisplaySize(), [])]), Statement(// exception in case cameraId is a hidden physical camera., []), Statement(if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {, []), Statement(// Legacy backwards compatibility path, []), Statement(build static info from the camera, []), Statement(// parameters, []), AssignmentExpression(=, [VariableReference(int id, []), Expression(Integer.parseInt(cameraId), [])]), AssignmentExpression(=, [VariableReference(String parameters, []), Expression(cameraService.getLegacyParameters(id), [])]), AssignmentExpression(=, [VariableReference(CameraInfo info, []), Expression(cameraService.getCameraInfo(id), [])]), AssignmentExpression(=, [VariableReference(characteristics, []), Expression(LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize), [])]), Statement(} else {, []), Statement(// Normal path: Get the camera characteristics directly from the camera service, []), AssignmentExpression(=, [VariableReference(CameraMetadataNative info, []), Expression(cameraService.getCameraCharacteristics(cameraId), [])]), Statement(try {, []), MethodCall(info.setCameraId(Integer.parseInt(cameraId)), [VariableReference(info, []), Expression(Integer.parseInt(cameraId), [])]), Statement(} catch (NumberFormatException e) {, []), MethodCall(Log.e(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to parse camera Id "" + cameraId + "" to integer"", [])]), Statement(}, []), MethodCall(info.setDisplaySize(displaySize), [VariableReference(info, []), Expression(displaySize, [])]), AssignmentExpression(=, [VariableReference(characteristics, []), Expression(new CameraCharacteristics(info), [])]), Statement(}, []), Statement(} catch (ServiceSpecificException e) {, []), Statement(throwAsPublicException(e), []), Statement(} catch (RemoteException e) {, []), Statement(// Camera service died - act as if the camera was disconnected, []), Statement(}, []), Statement(}, []), Statement(return characteristics, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(CameraCharacteristics characteristics, []), Expression(null, [])])    VariableReference(CameraCharacteristics characteristics, [])    Expression(null, [])  Statement(throw new IllegalArgumentException(""No cameras available on device""), [])  Statement(}, [])  Statement(synchronized (mLock) {, [])  Statement(/*, [])  Statement(* Get the camera characteristics from the camera service directly if it supports it,, [])  Statement(* otherwise get them from the legacy shim instead., [])  Statement(*/, [])  AssignmentExpression(=, [VariableReference(ICameraService cameraService, []), Expression(CameraManagerGlobal.get().getCameraService(), [])])    VariableReference(ICameraService cameraService, [])    Expression(CameraManagerGlobal.get().getCameraService(), [])  AssignmentExpression(=, [VariableReference(if (cameraService, []), Expression(, [])])    VariableReference(if (cameraService, [])    Expression(, [])  Statement(}, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Size displaySize, []), Expression(getDisplaySize(), [])])    VariableReference(Size displaySize, [])    Expression(getDisplaySize(), [])  Statement(// exception in case cameraId is a hidden physical camera., [])  Statement(if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {, [])  Statement(// Legacy backwards compatibility path, [])  Statement(build static info from the camera, [])  Statement(// parameters, [])  AssignmentExpression(=, [VariableReference(int id, []), Expression(Integer.parseInt(cameraId), [])])    VariableReference(int id, [])    Expression(Integer.parseInt(cameraId), [])  AssignmentExpression(=, [VariableReference(String parameters, []), Expression(cameraService.getLegacyParameters(id), [])])    VariableReference(String parameters, [])    Expression(cameraService.getLegacyParameters(id), [])  AssignmentExpression(=, [VariableReference(CameraInfo info, []), Expression(cameraService.getCameraInfo(id), [])])    VariableReference(CameraInfo info, [])    Expression(cameraService.getCameraInfo(id), [])  AssignmentExpression(=, [VariableReference(characteristics, []), Expression(LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize), [])])    VariableReference(characteristics, [])    Expression(LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize), [])  Statement(} else {, [])  Statement(// Normal path: Get the camera characteristics directly from the camera service, [])  AssignmentExpression(=, [VariableReference(CameraMetadataNative info, []), Expression(cameraService.getCameraCharacteristics(cameraId), [])])    VariableReference(CameraMetadataNative info, [])    Expression(cameraService.getCameraCharacteristics(cameraId), [])  Statement(try {, [])  MethodCall(info.setCameraId(Integer.parseInt(cameraId)), [VariableReference(info, []), Expression(Integer.parseInt(cameraId), [])])    VariableReference(info, [])    Expression(Integer.parseInt(cameraId), [])  Statement(} catch (NumberFormatException e) {, [])  MethodCall(Log.e(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to parse camera Id "" + cameraId + "" to integer"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed to parse camera Id "" + cameraId + "" to integer"", [])  Statement(}, [])  MethodCall(info.setDisplaySize(displaySize), [VariableReference(info, []), Expression(displaySize, [])])    VariableReference(info, [])    Expression(displaySize, [])  AssignmentExpression(=, [VariableReference(characteristics, []), Expression(new CameraCharacteristics(info), [])])    VariableReference(characteristics, [])    Expression(new CameraCharacteristics(info), [])  Statement(}, [])  Statement(} catch (ServiceSpecificException e) {, [])  Statement(throwAsPublicException(e), [])  Statement(} catch (RemoteException e) {, [])  Statement(// Camera service died - act as if the camera was disconnected, [])  Statement(}, [])  Statement(}, [])  Statement(return characteristics, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(CameraCharacteristics characteristics, []), Expression(null, [])]), Statement(throw new IllegalArgumentException(""No cameras available on device""), []), Statement(}, []), Statement(synchronized (mLock) {, []), Statement(/*, []), Statement(* Get the camera characteristics from the camera service directly if it supports it,, []), Statement(* otherwise get them from the legacy shim instead., []), Statement(*/, []), AssignmentExpression(=, [VariableReference(ICameraService cameraService, []), Expression(CameraManagerGlobal.get().getCameraService(), [])]), AssignmentExpression(=, [VariableReference(if (cameraService, []), Expression(, [])]), Statement(}, []), Statement(try {, []), AssignmentExpression(=, [VariableReference(Size displaySize, []), Expression(getDisplaySize(), [])]), Statement(// exception in case cameraId is a hidden physical camera., []), Statement(if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {, []), Statement(// Legacy backwards compatibility path, []), Statement(build static info from the camera, []), Statement(// parameters, []), AssignmentExpression(=, [VariableReference(int id, []), Expression(Integer.parseInt(cameraId), [])]), AssignmentExpression(=, [VariableReference(String parameters, []), Expression(cameraService.getLegacyParameters(id), [])]), AssignmentExpression(=, [VariableReference(CameraInfo info, []), Expression(cameraService.getCameraInfo(id), [])]), AssignmentExpression(=, [VariableReference(characteristics, []), Expression(LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize), [])]), Statement(} else {, []), Statement(// Normal path: Get the camera characteristics directly from the camera service, []), AssignmentExpression(=, [VariableReference(CameraMetadataNative info, []), Expression(cameraService.getCameraCharacteristics(cameraId), [])]), Statement(try {, []), MethodCall(info.setCameraId(Integer.parseInt(cameraId)), [VariableReference(info, []), Expression(Integer.parseInt(cameraId), [])]), Statement(} catch (NumberFormatException e) {, []), Statement(// For external camera, reaching here is expected., []), MethodCall(Log.v(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to parse camera Id "" + cameraId + "" to integer"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(boolean hasConcurrentStreams, []), Expression(CameraManagerGlobal.get().cameraIdHasConcurrentStreamsLocked(cameraId), [])]), MethodCall(info.setHasMandatoryConcurrentStreams(hasConcurrentStreams), [VariableReference(info, []), Expression(hasConcurrentStreams, [])]), MethodCall(info.setDisplaySize(displaySize), [VariableReference(info, []), Expression(displaySize, [])]), AssignmentExpression(=, [VariableReference(characteristics, []), Expression(new CameraCharacteristics(info), [])]), Statement(}, []), Statement(} catch (ServiceSpecificException e) {, []), Statement(throwAsPublicException(e), []), Statement(} catch (RemoteException e) {, []), Statement(// Camera service died - act as if the camera was disconnected, []), Statement(}, []), Statement(}, []), Statement(return characteristics, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(CameraCharacteristics characteristics, []), Expression(null, [])])    VariableReference(CameraCharacteristics characteristics, [])    Expression(null, [])  Statement(throw new IllegalArgumentException(""No cameras available on device""), [])  Statement(}, [])  Statement(synchronized (mLock) {, [])  Statement(/*, [])  Statement(* Get the camera characteristics from the camera service directly if it supports it,, [])  Statement(* otherwise get them from the legacy shim instead., [])  Statement(*/, [])  AssignmentExpression(=, [VariableReference(ICameraService cameraService, []), Expression(CameraManagerGlobal.get().getCameraService(), [])])    VariableReference(ICameraService cameraService, [])    Expression(CameraManagerGlobal.get().getCameraService(), [])  AssignmentExpression(=, [VariableReference(if (cameraService, []), Expression(, [])])    VariableReference(if (cameraService, [])    Expression(, [])  Statement(}, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(Size displaySize, []), Expression(getDisplaySize(), [])])    VariableReference(Size displaySize, [])    Expression(getDisplaySize(), [])  Statement(// exception in case cameraId is a hidden physical camera., [])  Statement(if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {, [])  Statement(// Legacy backwards compatibility path, [])  Statement(build static info from the camera, [])  Statement(// parameters, [])  AssignmentExpression(=, [VariableReference(int id, []), Expression(Integer.parseInt(cameraId), [])])    VariableReference(int id, [])    Expression(Integer.parseInt(cameraId), [])  AssignmentExpression(=, [VariableReference(String parameters, []), Expression(cameraService.getLegacyParameters(id), [])])    VariableReference(String parameters, [])    Expression(cameraService.getLegacyParameters(id), [])  AssignmentExpression(=, [VariableReference(CameraInfo info, []), Expression(cameraService.getCameraInfo(id), [])])    VariableReference(CameraInfo info, [])    Expression(cameraService.getCameraInfo(id), [])  AssignmentExpression(=, [VariableReference(characteristics, []), Expression(LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize), [])])    VariableReference(characteristics, [])    Expression(LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize), [])  Statement(} else {, [])  Statement(// Normal path: Get the camera characteristics directly from the camera service, [])  AssignmentExpression(=, [VariableReference(CameraMetadataNative info, []), Expression(cameraService.getCameraCharacteristics(cameraId), [])])    VariableReference(CameraMetadataNative info, [])    Expression(cameraService.getCameraCharacteristics(cameraId), [])  Statement(try {, [])  MethodCall(info.setCameraId(Integer.parseInt(cameraId)), [VariableReference(info, []), Expression(Integer.parseInt(cameraId), [])])    VariableReference(info, [])    Expression(Integer.parseInt(cameraId), [])  Statement(} catch (NumberFormatException e) {, [])  Statement(// For external camera, reaching here is expected., [])  MethodCall(Log.v(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Failed to parse camera Id "" + cameraId + "" to integer"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Failed to parse camera Id "" + cameraId + "" to integer"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(boolean hasConcurrentStreams, []), Expression(CameraManagerGlobal.get().cameraIdHasConcurrentStreamsLocked(cameraId), [])])    VariableReference(boolean hasConcurrentStreams, [])    Expression(CameraManagerGlobal.get().cameraIdHasConcurrentStreamsLocked(cameraId), [])  MethodCall(info.setHasMandatoryConcurrentStreams(hasConcurrentStreams), [VariableReference(info, []), Expression(hasConcurrentStreams, [])])    VariableReference(info, [])    Expression(hasConcurrentStreams, [])  MethodCall(info.setDisplaySize(displaySize), [VariableReference(info, []), Expression(displaySize, [])])    VariableReference(info, [])    Expression(displaySize, [])  AssignmentExpression(=, [VariableReference(characteristics, []), Expression(new CameraCharacteristics(info), [])])    VariableReference(characteristics, [])    Expression(new CameraCharacteristics(info), [])  Statement(}, [])  Statement(} catch (ServiceSpecificException e) {, [])  Statement(throwAsPublicException(e), [])  Statement(} catch (RemoteException e) {, [])  Statement(// Camera service died - act as if the camera was disconnected, [])  Statement(}, [])  Statement(}, [])  Statement(return characteristics, [])  Statement(}, [])",1,"/**
 * <p>Query the capabilities of a camera device. These capabilities are
 * immutable for a given camera.</p>
 *
 * <p>From API level 29, this function can also be used to query the capabilities of physical
 * cameras that can only be used as part of logical multi-camera. These cameras cannot be
 * opened directly via {@link #openCamera}</p>
 *
 * @param cameraId The id of the camera device to query. This could be either a standalone
 * camera ID which can be directly opened by {@link #openCamera}, or a physical camera ID that
 * can only used as part of a logical multi-camera.
 * @return The properties of the given camera
 *
 * @throws IllegalArgumentException if the cameraId does not match any
 * known camera device.
 * @throws CameraAccessException if the camera device has been disconnected.
 *
 * @see #getCameraIdList
 * @see android.app.admin.DevicePolicyManager#setCameraDisabled
 */
","/**
 * <p>Query the capabilities of a camera device. These capabilities are
 * immutable for a given camera.</p>
 *
 * <p>From API level 29, this function can also be used to query the capabilities of physical
 * cameras that can only be used as part of logical multi-camera. These cameras cannot be
 * opened directly via {@link #openCamera}</p>
 *
 * <p>Also starting with API level 29, while most basic camera information is still available
 * even without the CAMERA permission, some values are not available to apps that do not hold
 * that permission. The keys not available are listed by
 * {@link CameraCharacteristics#getKeysNeedingPermission}.</p>
 *
 * @param cameraId The id of the camera device to query. This could be either a standalone
 * camera ID which can be directly opened by {@link #openCamera}, or a physical camera ID that
 * can only used as part of a logical multi-camera.
 * @return The properties of the given camera
 *
 * @throws IllegalArgumentException if the cameraId does not match any
 * known camera device.
 * @throws CameraAccessException if the camera device has been disconnected.
 *
 * @see #getCameraIdList
 * @see android.app.admin.DevicePolicyManager#setCameraDisabled
 */
",-1,[@NonNull],[@NonNull],-1,-1,-1,-1,-1,4,0,"3,4",1,"The condition under which log statement is logged in the catch block for `NumberFormatException` has been changed. In addition, new statements have been introduced to check for concurrent stream support with `cameraIdHasConcurrentStreamsLocked(cameraId)` and set this value with `setHasMandatoryConcurrentStreams(hasConcurrentStreams)`. Therefore, the code change type is 3,4.","The introduction of new checks for concurrent streams and the `setHasMandatoryConcurrentStreams` method call change the internal state and potentially the behavior of the API. This could result in different return values or characteristics for the same input under different versions, leading to CI type 1."
<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,29,30,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,0,"{
    try {
        return mService.getAuthenticatorTypes(UserHandle.getCallingUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return getAuthenticatorTypesAsUser(mContext.getUserId());
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.getAuthenticatorTypes(UserHandle.getCallingUserId()), [VariableReference(return mService, []), Expression(UserHandle.getCallingUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.getAuthenticatorTypes(UserHandle.getCallingUserId()), [VariableReference(return mService, []), Expression(UserHandle.getCallingUserId(), [])])    VariableReference(return mService, [])    Expression(UserHandle.getCallingUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return getAuthenticatorTypesAsUser(mContext.getUserId()), [VariableReference(return getAuthenticatorTypesAsUser(mContext, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return getAuthenticatorTypesAsUser(mContext.getUserId()), [VariableReference(return getAuthenticatorTypesAsUser(mContext, []), Expression(), [])])    VariableReference(return getAuthenticatorTypesAsUser(mContext, [])    Expression(), [])  Statement(}, [])",1,"/**
 * Lists the currently registered authenticators.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>No permission is required to call this method.
 *
 * @return An array of {@link AuthenticatorDescription} for every
 * authenticator known to the AccountManager service.  Empty (never
 * null) if no authenticators are known.
 */
","/**
 * Lists the currently registered authenticators.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>No permission is required to call this method.
 *
 * @return An array of {@link AuthenticatorDescription} for every
 * authenticator known to the AccountManager service.  Empty (never
 * null) if no authenticators are known.
 */
",-1,,[@UserHandleAware],-1,-1,-1,-1,-1,"1,2,4,5","1,2","1,2","1,2","The return statement has changed from `mService.getAuthenticatorTypes(UserHandle.getCallingUserId())` to `getAuthenticatorTypesAsUser(mContext.getUserId())`, indicating the method now calls a different dependent API. Additionally, the exception handling has been removed in the new version, thus the code change type is 1,2.","Due to the change in the return statement, the API might return different values in the new version, and the removal of the exception handling might lead to different exceptions being thrown or handled differently. Thus, the CI type is 1,2."
<android.widget.TextView: int getImeActionId()>,15,16,<android.widget.TextView: int getImeActionId()>,<android.widget.TextView: int getImeActionId()>,0,"{
    return mInputContentType != null ? mInputContentType.imeActionId : 0;
}","{
    return mEditor != null && mEditor.mInputContentType != null ? mEditor.mInputContentType.imeActionId : 0;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return mInputContentType !, []), Expression(null ? mInputContentType.imeActionId : 0, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return mInputContentType !, []), Expression(null ? mInputContentType.imeActionId : 0, [])])    VariableReference(return mInputContentType !, [])    Expression(null ? mInputContentType.imeActionId : 0, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(return mEditor !, []), Expression(null && mEditor.mInputContentType !, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(return mEditor !, []), Expression(null && mEditor.mInputContentType !, [])])    VariableReference(return mEditor !, [])    Expression(null && mEditor.mInputContentType !, [])  Statement(}, [])",1,"/**
 * Get the IME action ID previous set with {@link #setImeActionLabel}.
 *
 * @see #setImeActionLabel
 * @see android.view.inputmethod.EditorInfo
 */
","/**
 * Get the IME action ID previous set with {@link #setImeActionLabel}.
 *
 * @see #setImeActionLabel
 * @see android.view.inputmethod.EditorInfo
 */
",-1,,,-1,-1,-1,-1,-1,"1,3",1,3,1,"The control flow condition of the return statement has changed from `mInputContentType != null ? mInputContentType.imeActionId : 0` to `mEditor != null && mEditor.mInputContentType != null ? mEditor.mInputContentType.imeActionId : 0`, making the code change type to 3.","The modified control flow condition could lead to different return values based on whether `mEditor` or `mEditor.mInputContentType` is null, which might not have been considered in the earlier version. Thus, the CI type is 1."
<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>,29,30,<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>,<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>,0,"{
    return mTargetSdk;
}","{
    return mSplitPermissionInfoParcelable.getTargetSdk();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mTargetSdk, []), Statement(}, [])])  Statement({, [])  Statement(return mTargetSdk, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mSplitPermissionInfoParcelable.getTargetSdk(), [VariableReference(return mSplitPermissionInfoParcelable, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mSplitPermissionInfoParcelable.getTargetSdk(), [VariableReference(return mSplitPermissionInfoParcelable, []), Expression(, [])])    VariableReference(return mSplitPermissionInfoParcelable, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Get the target API level when the permission was split.
 */
","/**
 * Get the target API level when the permission was split.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,"1,5",1,"The return statement has changed from returning `mTargetSdk` directly to calling another method `mSplitPermissionInfoParcelable.getTargetSdk()` to obtain the return value. This indicates changes in the return sources and hence the code change type is 1,5.","Because the return value now depends on the method `mSplitPermissionInfoParcelable.getTargetSdk()`, the API potentially may return a different value compared to the early version. Therefore, the CI type is 1."
<android.bluetooth.BluetoothAdapter: String getName()>,16,17,<android.bluetooth.BluetoothAdapter: String getName()>,<android.bluetooth.BluetoothAdapter: String getName()>,0,"{
    try {
        return mService.getName();
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
    }
    return null;
}","{
    try {
        return mManagerService.getName();
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
    }
    return null;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.getName(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])]), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.getName(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression("""", [])    Expression(e, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mManagerService.getName(), [VariableReference(return mManagerService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])]), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mManagerService.getName(), [VariableReference(return mManagerService, []), Expression(, [])])    VariableReference(return mManagerService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, """", e), [VariableReference(Log, []), Expression(TAG, []), Expression("""", []), Expression(e, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression("""", [])    Expression(e, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])",1,"/**
 * Get the friendly Bluetooth name of the local Bluetooth adapter.
 * <p>This name is visible to remote Bluetooth devices.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 *
 * @return the Bluetooth name, or null on error
 */
","/**
 * Get the friendly Bluetooth name of the local Bluetooth adapter.
 * <p>This name is visible to remote Bluetooth devices.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 *
 * @return the Bluetooth name, or null on error
 */
",-1,,,-1,-1,-1,-1,-1,"1,5",1,5,0,"The change in the dependent API from `mService.getName()` to `mManagerService.getName()` indicates that the implementation now relies on a different service object, so the code change type is 5.","The functional outcome of the method, which aims to get the Bluetooth name, remains the same despite the change in the dependent service. Therefore, there is no anticipated Compatibility Issue, and the CI type is 0."
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(ComponentName)>,23,24,<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(ComponentName)>,<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(ComponentName)>,0,"{
    return getCameraDisabled(admin, UserHandle.myUserId());
}","{
    throwIfParentInstance(""getCameraDisabled"");
    return getCameraDisabled(admin, myUserId());
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return getCameraDisabled(admin, UserHandle.myUserId()), [VariableReference(return getCameraDisabled(admin, UserHandle, []), Expression(), [])]), Statement(}, [])])  Statement({, [])  MethodCall(return getCameraDisabled(admin, UserHandle.myUserId()), [VariableReference(return getCameraDisabled(admin, UserHandle, []), Expression(), [])])    VariableReference(return getCameraDisabled(admin, UserHandle, [])    Expression(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throwIfParentInstance(""getCameraDisabled""), []), Statement(return getCameraDisabled(admin, myUserId()), []), Statement(}, [])])  Statement({, [])  Statement(throwIfParentInstance(""getCameraDisabled""), [])  Statement(return getCameraDisabled(admin, myUserId()), [])  Statement(}, [])",1,"/**
 * Determine whether or not the device's cameras have been disabled for this user,
 * either by the current admin, if specified, or all admins.
 * @param admin The name of the admin component to check, or {@code null} to check whether any admins
 * have disabled the camera
 */
","/**
 * Determine whether or not the device's cameras have been disabled for this user,
 * either by the calling admin, if specified, or all admins.
 * @param admin The name of the admin component to check, or {@code null} to check whether any admins
 * have disabled the camera
 */
",-1,,,-1,-1,-1,-1,-1,"2,4,5",2,"2,4,5",2,"The late version introduces an additional method call (throwIfParentInstance(""getCameraDisabled"")), which is not present in the early version, and the parameter of the method call (getCameraDisabled()) has changed from UserHandle.myUserId() to myUserId(). Hence, the code change type is 2,4,5.","The introduction of a new exception handling method (throwIfParentInstance(""getCameraDisabled"")) could potentially lead to different exception handlings in the late version. Thus, the CI type is 2."
"<android.app.ContextImpl: void revokeUriPermission(Uri,int)>",23,24,"<android.app.ContextImpl: void revokeUriPermission(Uri,int)>","<android.app.ContextImpl: void revokeUriPermission(Uri,int)>",0,"{
    try {
        ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri));
    } catch (RemoteException e) {
    }
}","{
    try {
        ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri));
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri)), [VariableReference(ActivityManagerNative, []), Expression().revokeUriPermission(mMainThread.getApplicationThread(), []), Expression(ContentProvider.getUriWithoutUserId(uri), []), Expression(modeFlags, []), Expression(resolveUserId(uri), [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri)), [VariableReference(ActivityManagerNative, []), Expression().revokeUriPermission(mMainThread.getApplicationThread(), []), Expression(ContentProvider.getUriWithoutUserId(uri), []), Expression(modeFlags, []), Expression(resolveUserId(uri), [])])    VariableReference(ActivityManagerNative, [])    Expression().revokeUriPermission(mMainThread.getApplicationThread(), [])    Expression(ContentProvider.getUriWithoutUserId(uri), [])    Expression(modeFlags, [])    Expression(resolveUserId(uri), [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri)), [VariableReference(ActivityManagerNative, []), Expression().revokeUriPermission(mMainThread.getApplicationThread(), []), Expression(ContentProvider.getUriWithoutUserId(uri), []), Expression(modeFlags, []), Expression(resolveUserId(uri), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri)), [VariableReference(ActivityManagerNative, []), Expression().revokeUriPermission(mMainThread.getApplicationThread(), []), Expression(ContentProvider.getUriWithoutUserId(uri), []), Expression(modeFlags, []), Expression(resolveUserId(uri), [])])    VariableReference(ActivityManagerNative, [])    Expression().revokeUriPermission(mMainThread.getApplicationThread(), [])    Expression(ContentProvider.getUriWithoutUserId(uri), [])    Expression(modeFlags, [])    Expression(resolveUserId(uri), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,2,2,2,2,"A new exception handling statement (throw e.rethrowFromSystemServer()) has been introduced in late implementation, so the code change type is 2.","The newly introduced exception handling can cause the method to throw a different exception than before, leading to a potential compatibility issue. Hence, the CI type is 2."
<android.webkit.LoadListener: boolean handleSslErrorRequest(SslError)>,4,5,<android.webkit.LoadListener: boolean handleSslErrorRequest(SslError)>,<android.webkit.LoadListener: boolean handleSslErrorRequest(SslError)>,0,"{
    if (WebView.LOGV_ENABLED) {
        Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate());
    }
    sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error));
    // to unblock the network thread.
    if (!mCancelled) {
        mSslErrorRequestHandle = mRequestHandle;
    }
    return !mCancelled;
}","{
    if (DebugFlags.LOAD_LISTENER) {
        Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate());
    }
    // will prevent waiting for an already available answer.
    if (Network.getInstance(mContext).checkSslPrefTable(this, error)) {
        return true;
    }
    // deadlock. Just bail on the request.
    if (isSynchronous()) {
        mRequestHandle.handleSslErrorResponse(false);
        return true;
    }
    sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error));
    // to unblock the network thread.
    if (!mCancelled) {
        mSslErrorRequestHandle = mRequestHandle;
    }
    return !mCancelled;
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate()), [VariableReference(Log, []), Expression(LOGTAG, []), Expression(""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate(), [])]), Statement(}, []), Statement(sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error)), []), Statement(// to unblock the network thread., []), Statement(if (!mCancelled) {, []), AssignmentExpression(=, [VariableReference(mSslErrorRequestHandle, []), Expression(mRequestHandle, [])]), Statement(}, []), Statement(return !mCancelled, []), Statement(}, [])])  Statement({, [])  MethodCall(Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate()), [VariableReference(Log, []), Expression(LOGTAG, []), Expression(""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate(), [])])    VariableReference(Log, [])    Expression(LOGTAG, [])    Expression(""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate(), [])  Statement(}, [])  Statement(sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error)), [])  Statement(// to unblock the network thread., [])  Statement(if (!mCancelled) {, [])  AssignmentExpression(=, [VariableReference(mSslErrorRequestHandle, []), Expression(mRequestHandle, [])])    VariableReference(mSslErrorRequestHandle, [])    Expression(mRequestHandle, [])  Statement(}, [])  Statement(return !mCancelled, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate()), [VariableReference(Log, []), Expression(LOGTAG, []), Expression(""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate(), [])]), Statement(}, []), Statement(// will prevent waiting for an already available answer., []), MethodCall(if (Network.getInstance(mContext).checkSslPrefTable(this, error)), [VariableReference(if (Network, []), Expression(mContext).checkSslPrefTable(this, []), Expression(error), [])]), Statement(return true, []), Statement(}, []), Statement(// deadlock. Just bail on the request., []), Statement(if (isSynchronous()) {, []), MethodCall(mRequestHandle.handleSslErrorResponse(false), [VariableReference(mRequestHandle, []), Expression(false, [])]), Statement(return true, []), Statement(}, []), Statement(sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error)), []), Statement(// to unblock the network thread., []), Statement(if (!mCancelled) {, []), AssignmentExpression(=, [VariableReference(mSslErrorRequestHandle, []), Expression(mRequestHandle, [])]), Statement(}, []), Statement(return !mCancelled, []), Statement(}, [])])  Statement({, [])  MethodCall(Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate()), [VariableReference(Log, []), Expression(LOGTAG, []), Expression(""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate(), [])])    VariableReference(Log, [])    Expression(LOGTAG, [])    Expression(""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate(), [])  Statement(}, [])  Statement(// will prevent waiting for an already available answer., [])  MethodCall(if (Network.getInstance(mContext).checkSslPrefTable(this, error)), [VariableReference(if (Network, []), Expression(mContext).checkSslPrefTable(this, []), Expression(error), [])])    VariableReference(if (Network, [])    Expression(mContext).checkSslPrefTable(this, [])    Expression(error), [])  Statement(return true, [])  Statement(}, [])  Statement(// deadlock. Just bail on the request., [])  Statement(if (isSynchronous()) {, [])  MethodCall(mRequestHandle.handleSslErrorResponse(false), [VariableReference(mRequestHandle, []), Expression(false, [])])    VariableReference(mRequestHandle, [])    Expression(false, [])  Statement(return true, [])  Statement(}, [])  Statement(sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error)), [])  Statement(// to unblock the network thread., [])  Statement(if (!mCancelled) {, [])  AssignmentExpression(=, [VariableReference(mSslErrorRequestHandle, []), Expression(mRequestHandle, [])])    VariableReference(mSslErrorRequestHandle, [])    Expression(mRequestHandle, [])  Statement(}, [])  Statement(return !mCancelled, [])  Statement(}, [])",1,"/**
 * SSL certificate error callback. Handles SSL error(s) on the way up
 * to the user.
 * IMPORTANT: as this is called from network thread, can't call native
 * directly
 */
","/**
 * SSL certificate error callback. Handles SSL error(s) on the way up
 * to the user.
 * IMPORTANT: as this is called from network thread, can't call native
 * directly
 */
",-1,,,-1,-1,-1,-1,-1,"3,4",1,"1,3,4,5","1,2",There are multiple changes:,3. Introduction of another new control dependency statement `if (isSynchronous())` and its corresponding statements including `mRequestHandle.handleSslErrorResponse(false)` and `return true`.
"<android.pim.vcard.VCardUtils: String constructNameFromElements(int,String,String,String,String,String)>",7,8,"<android.pim.vcard.VCardUtils: String constructNameFromElements(int,String,String,String,String,String)>","<android.pim.vcard.VCardUtils: String constructNameFromElements(int,String,String,String,String,String)>",0,"{
    StringBuilder builder = new StringBuilder();
    String[] nameList = sortNameElements(nameOrderType, familyName, middleName, givenName);
    boolean first = true;
    if (!TextUtils.isEmpty(prefix)) {
        first = false;
        builder.append(prefix);
    }
    for (String namePart : nameList) {
        if (!TextUtils.isEmpty(namePart)) {
            if (first) {
                first = false;
            } else {
                builder.append(' ');
            }
            builder.append(namePart);
        }
    }
    if (!TextUtils.isEmpty(suffix)) {
        if (!first) {
            builder.append(' ');
        }
        builder.append(suffix);
    }
    return builder.toString();
}","{
    final StringBuilder builder = new StringBuilder();
    final String[] nameList = sortNameElements(vcardType, familyName, middleName, givenName);
    boolean first = true;
    if (!TextUtils.isEmpty(prefix)) {
        first = false;
        builder.append(prefix);
    }
    for (final String namePart : nameList) {
        if (!TextUtils.isEmpty(namePart)) {
            if (first) {
                first = false;
            } else {
                builder.append(' ');
            }
            builder.append(namePart);
        }
    }
    if (!TextUtils.isEmpty(suffix)) {
        if (!first) {
            builder.append(' ');
        }
        builder.append(suffix);
    }
    return builder.toString();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(StringBuilder builder, []), Expression(new StringBuilder(), [])]), AssignmentExpression(=, [VariableReference(String[] nameList, []), Expression(sortNameElements(nameOrderType, familyName, middleName, givenName), [])]), AssignmentExpression(=, [VariableReference(boolean first, []), Expression(true, [])]), MethodCall(if (!TextUtils.isEmpty(prefix)), [VariableReference(if (!TextUtils, []), Expression(prefix), [])]), AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])]), MethodCall(builder.append(prefix), [VariableReference(builder, []), Expression(prefix, [])]), Statement(}, []), Statement(for (String namePart : nameList) {, []), MethodCall(if (!TextUtils.isEmpty(namePart)), [VariableReference(if (!TextUtils, []), Expression(namePart), [])]), Statement(if (first) {, []), AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])]), Statement(} else {, []), MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])]), Statement(}, []), MethodCall(builder.append(namePart), [VariableReference(builder, []), Expression(namePart, [])]), Statement(}, []), Statement(}, []), MethodCall(if (!TextUtils.isEmpty(suffix)), [VariableReference(if (!TextUtils, []), Expression(suffix), [])]), Statement(if (!first) {, []), MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])]), Statement(}, []), MethodCall(builder.append(suffix), [VariableReference(builder, []), Expression(suffix, [])]), Statement(}, []), MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(StringBuilder builder, []), Expression(new StringBuilder(), [])])    VariableReference(StringBuilder builder, [])    Expression(new StringBuilder(), [])  AssignmentExpression(=, [VariableReference(String[] nameList, []), Expression(sortNameElements(nameOrderType, familyName, middleName, givenName), [])])    VariableReference(String[] nameList, [])    Expression(sortNameElements(nameOrderType, familyName, middleName, givenName), [])  AssignmentExpression(=, [VariableReference(boolean first, []), Expression(true, [])])    VariableReference(boolean first, [])    Expression(true, [])  MethodCall(if (!TextUtils.isEmpty(prefix)), [VariableReference(if (!TextUtils, []), Expression(prefix), [])])    VariableReference(if (!TextUtils, [])    Expression(prefix), [])  AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])])    VariableReference(first, [])    Expression(false, [])  MethodCall(builder.append(prefix), [VariableReference(builder, []), Expression(prefix, [])])    VariableReference(builder, [])    Expression(prefix, [])  Statement(}, [])  Statement(for (String namePart : nameList) {, [])  MethodCall(if (!TextUtils.isEmpty(namePart)), [VariableReference(if (!TextUtils, []), Expression(namePart), [])])    VariableReference(if (!TextUtils, [])    Expression(namePart), [])  Statement(if (first) {, [])  AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])])    VariableReference(first, [])    Expression(false, [])  Statement(} else {, [])  MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])])    VariableReference(builder, [])    Expression(' ', [])  Statement(}, [])  MethodCall(builder.append(namePart), [VariableReference(builder, []), Expression(namePart, [])])    VariableReference(builder, [])    Expression(namePart, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (!TextUtils.isEmpty(suffix)), [VariableReference(if (!TextUtils, []), Expression(suffix), [])])    VariableReference(if (!TextUtils, [])    Expression(suffix), [])  Statement(if (!first) {, [])  MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])])    VariableReference(builder, [])    Expression(' ', [])  Statement(}, [])  MethodCall(builder.append(suffix), [VariableReference(builder, []), Expression(suffix, [])])    VariableReference(builder, [])    Expression(suffix, [])  Statement(}, [])  MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])])    VariableReference(return builder, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final StringBuilder builder, []), Expression(new StringBuilder(), [])]), AssignmentExpression(=, [VariableReference(final String[] nameList, []), Expression(sortNameElements(vcardType, familyName, middleName, givenName), [])]), AssignmentExpression(=, [VariableReference(boolean first, []), Expression(true, [])]), MethodCall(if (!TextUtils.isEmpty(prefix)), [VariableReference(if (!TextUtils, []), Expression(prefix), [])]), AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])]), MethodCall(builder.append(prefix), [VariableReference(builder, []), Expression(prefix, [])]), Statement(}, []), Statement(for (final String namePart : nameList) {, []), MethodCall(if (!TextUtils.isEmpty(namePart)), [VariableReference(if (!TextUtils, []), Expression(namePart), [])]), Statement(if (first) {, []), AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])]), Statement(} else {, []), MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])]), Statement(}, []), MethodCall(builder.append(namePart), [VariableReference(builder, []), Expression(namePart, [])]), Statement(}, []), Statement(}, []), MethodCall(if (!TextUtils.isEmpty(suffix)), [VariableReference(if (!TextUtils, []), Expression(suffix), [])]), Statement(if (!first) {, []), MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])]), Statement(}, []), MethodCall(builder.append(suffix), [VariableReference(builder, []), Expression(suffix, [])]), Statement(}, []), MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final StringBuilder builder, []), Expression(new StringBuilder(), [])])    VariableReference(final StringBuilder builder, [])    Expression(new StringBuilder(), [])  AssignmentExpression(=, [VariableReference(final String[] nameList, []), Expression(sortNameElements(vcardType, familyName, middleName, givenName), [])])    VariableReference(final String[] nameList, [])    Expression(sortNameElements(vcardType, familyName, middleName, givenName), [])  AssignmentExpression(=, [VariableReference(boolean first, []), Expression(true, [])])    VariableReference(boolean first, [])    Expression(true, [])  MethodCall(if (!TextUtils.isEmpty(prefix)), [VariableReference(if (!TextUtils, []), Expression(prefix), [])])    VariableReference(if (!TextUtils, [])    Expression(prefix), [])  AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])])    VariableReference(first, [])    Expression(false, [])  MethodCall(builder.append(prefix), [VariableReference(builder, []), Expression(prefix, [])])    VariableReference(builder, [])    Expression(prefix, [])  Statement(}, [])  Statement(for (final String namePart : nameList) {, [])  MethodCall(if (!TextUtils.isEmpty(namePart)), [VariableReference(if (!TextUtils, []), Expression(namePart), [])])    VariableReference(if (!TextUtils, [])    Expression(namePart), [])  Statement(if (first) {, [])  AssignmentExpression(=, [VariableReference(first, []), Expression(false, [])])    VariableReference(first, [])    Expression(false, [])  Statement(} else {, [])  MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])])    VariableReference(builder, [])    Expression(' ', [])  Statement(}, [])  MethodCall(builder.append(namePart), [VariableReference(builder, []), Expression(namePart, [])])    VariableReference(builder, [])    Expression(namePart, [])  Statement(}, [])  Statement(}, [])  MethodCall(if (!TextUtils.isEmpty(suffix)), [VariableReference(if (!TextUtils, []), Expression(suffix), [])])    VariableReference(if (!TextUtils, [])    Expression(suffix), [])  Statement(if (!first) {, [])  MethodCall(builder.append(' '), [VariableReference(builder, []), Expression(' ', [])])    VariableReference(builder, [])    Expression(' ', [])  Statement(}, [])  MethodCall(builder.append(suffix), [VariableReference(builder, []), Expression(suffix, [])])    VariableReference(builder, [])    Expression(suffix, [])  Statement(}, [])  MethodCall(return builder.toString(), [VariableReference(return builder, []), Expression(, [])])    VariableReference(return builder, [])    Expression(, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"4,5",1,"4,5",0,"The parameter `nameOrderType` was renamed to `vcardType` in the method call to `sortNameElements`, and final keyword and other modifiers were added to some variables (`builder` and `namePart`). This constitutes as 4 (Other statement changed) and 5 (Dependent API changed) since the dependent function's parameter name change was possibly accompanied by its implementation change.","The change of variable names and adding final keywords does not introduce any risk of different return values or exception handling, hence there is no Compatibility Issue."
<android.widget.TextView: float getLeftFadingEdgeStrength()>,18,19,<android.widget.TextView: float getLeftFadingEdgeStrength()>,<android.widget.TextView: float getLeftFadingEdgeStrength()>,0,"{
    if (mEllipsize == TextUtils.TruncateAt.MARQUEE && mMarqueeFadeMode != MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS) {
        if (mMarquee != null && !mMarquee.isStopped()) {
            final Marquee marquee = mMarquee;
            if (marquee.shouldDrawLeftFade()) {
                final float scroll = marquee.getScroll();
                return scroll / getHorizontalFadingEdgeLength();
            } else {
                return 0.0f;
            }
        } else if (getLineCount() == 1) {
            final int layoutDirection = getLayoutDirection();
            final int absoluteGravity = Gravity.getAbsoluteGravity(mGravity, layoutDirection);
            switch(absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
                case Gravity.LEFT:
                    return 0.0f;
                case Gravity.RIGHT:
                    return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength();
                case Gravity.CENTER_HORIZONTAL:
                    return 0.0f;
            }
        }
    }
    return super.getLeftFadingEdgeStrength();
}","{
    if (mEllipsize == TextUtils.TruncateAt.MARQUEE && mMarqueeFadeMode != MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS) {
        if (mMarquee != null && !mMarquee.isStopped()) {
            final Marquee marquee = mMarquee;
            if (marquee.shouldDrawLeftFade()) {
                final float scroll = marquee.getScroll();
                return scroll / getHorizontalFadingEdgeLength();
            } else {
                return 0.0f;
            }
        } else if (getLineCount() == 1) {
            final int layoutDirection = getLayoutDirection();
            final int absoluteGravity = Gravity.getAbsoluteGravity(mGravity, layoutDirection);
            switch(absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
                case Gravity.LEFT:
                    return 0.0f;
                case Gravity.RIGHT:
                    return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength();
                case Gravity.CENTER_HORIZONTAL:
                case Gravity.FILL_HORIZONTAL:
                    final int textDirection = mLayout.getParagraphDirection(0);
                    if (textDirection == Layout.DIR_LEFT_TO_RIGHT) {
                        return 0.0f;
                    } else {
                        return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength();
                    }
            }
        }
    }
    return super.getLeftFadingEdgeStrength();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mEllipsize, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mMarquee !, []), Expression(null && !mMarquee.isStopped()) {, [])]), AssignmentExpression(=, [VariableReference(final Marquee marquee, []), Expression(mMarquee, [])]), MethodCall(if (marquee.shouldDrawLeftFade()), [VariableReference(if (marquee, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(final float scroll, []), Expression(marquee.getScroll(), [])]), Statement(return scroll / getHorizontalFadingEdgeLength(), []), Statement(} else {, []), Statement(return 0.0f, []), Statement(}, []), AssignmentExpression(=, [VariableReference(} else if (getLineCount(), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final int layoutDirection, []), Expression(getLayoutDirection(), [])]), AssignmentExpression(=, [VariableReference(final int absoluteGravity, []), Expression(Gravity.getAbsoluteGravity(mGravity, layoutDirection), [])]), Statement(case Gravity.LEFT:, []), Statement(return 0.0f, []), Statement(case Gravity.RIGHT:, []), MethodCall(return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(), [VariableReference(return (mLayout, []), Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])]), Statement(case Gravity.CENTER_HORIZONTAL:, []), Statement(return 0.0f, []), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(return super.getLeftFadingEdgeStrength(), [VariableReference(return super, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mEllipsize, []), Expression(, [])])    VariableReference(if (mEllipsize, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mMarquee !, []), Expression(null && !mMarquee.isStopped()) {, [])])    VariableReference(if (mMarquee !, [])    Expression(null && !mMarquee.isStopped()) {, [])  AssignmentExpression(=, [VariableReference(final Marquee marquee, []), Expression(mMarquee, [])])    VariableReference(final Marquee marquee, [])    Expression(mMarquee, [])  MethodCall(if (marquee.shouldDrawLeftFade()), [VariableReference(if (marquee, []), Expression(), [])])    VariableReference(if (marquee, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(final float scroll, []), Expression(marquee.getScroll(), [])])    VariableReference(final float scroll, [])    Expression(marquee.getScroll(), [])  Statement(return scroll / getHorizontalFadingEdgeLength(), [])  Statement(} else {, [])  Statement(return 0.0f, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(} else if (getLineCount(), []), Expression(, [])])    VariableReference(} else if (getLineCount(), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final int layoutDirection, []), Expression(getLayoutDirection(), [])])    VariableReference(final int layoutDirection, [])    Expression(getLayoutDirection(), [])  AssignmentExpression(=, [VariableReference(final int absoluteGravity, []), Expression(Gravity.getAbsoluteGravity(mGravity, layoutDirection), [])])    VariableReference(final int absoluteGravity, [])    Expression(Gravity.getAbsoluteGravity(mGravity, layoutDirection), [])  Statement(case Gravity.LEFT:, [])  Statement(return 0.0f, [])  Statement(case Gravity.RIGHT:, [])  MethodCall(return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(), [VariableReference(return (mLayout, []), Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])])    VariableReference(return (mLayout, [])    Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])  Statement(case Gravity.CENTER_HORIZONTAL:, [])  Statement(return 0.0f, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(return super.getLeftFadingEdgeStrength(), [VariableReference(return super, []), Expression(, [])])    VariableReference(return super, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mEllipsize, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mMarquee !, []), Expression(null && !mMarquee.isStopped()) {, [])]), AssignmentExpression(=, [VariableReference(final Marquee marquee, []), Expression(mMarquee, [])]), MethodCall(if (marquee.shouldDrawLeftFade()), [VariableReference(if (marquee, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(final float scroll, []), Expression(marquee.getScroll(), [])]), Statement(return scroll / getHorizontalFadingEdgeLength(), []), Statement(} else {, []), Statement(return 0.0f, []), Statement(}, []), AssignmentExpression(=, [VariableReference(} else if (getLineCount(), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(final int layoutDirection, []), Expression(getLayoutDirection(), [])]), AssignmentExpression(=, [VariableReference(final int absoluteGravity, []), Expression(Gravity.getAbsoluteGravity(mGravity, layoutDirection), [])]), Statement(case Gravity.LEFT:, []), Statement(return 0.0f, []), Statement(case Gravity.RIGHT:, []), MethodCall(return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(), [VariableReference(return (mLayout, []), Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])]), Statement(case Gravity.CENTER_HORIZONTAL:, []), Statement(case Gravity.FILL_HORIZONTAL:, []), AssignmentExpression(=, [VariableReference(final int textDirection, []), Expression(mLayout.getParagraphDirection(0), [])]), AssignmentExpression(=, [VariableReference(if (textDirection, []), Expression(, [])]), Statement(return 0.0f, []), Statement(} else {, []), MethodCall(return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(), [VariableReference(return (mLayout, []), Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(return super.getLeftFadingEdgeStrength(), [VariableReference(return super, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mEllipsize, []), Expression(, [])])    VariableReference(if (mEllipsize, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mMarquee !, []), Expression(null && !mMarquee.isStopped()) {, [])])    VariableReference(if (mMarquee !, [])    Expression(null && !mMarquee.isStopped()) {, [])  AssignmentExpression(=, [VariableReference(final Marquee marquee, []), Expression(mMarquee, [])])    VariableReference(final Marquee marquee, [])    Expression(mMarquee, [])  MethodCall(if (marquee.shouldDrawLeftFade()), [VariableReference(if (marquee, []), Expression(), [])])    VariableReference(if (marquee, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(final float scroll, []), Expression(marquee.getScroll(), [])])    VariableReference(final float scroll, [])    Expression(marquee.getScroll(), [])  Statement(return scroll / getHorizontalFadingEdgeLength(), [])  Statement(} else {, [])  Statement(return 0.0f, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(} else if (getLineCount(), []), Expression(, [])])    VariableReference(} else if (getLineCount(), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(final int layoutDirection, []), Expression(getLayoutDirection(), [])])    VariableReference(final int layoutDirection, [])    Expression(getLayoutDirection(), [])  AssignmentExpression(=, [VariableReference(final int absoluteGravity, []), Expression(Gravity.getAbsoluteGravity(mGravity, layoutDirection), [])])    VariableReference(final int absoluteGravity, [])    Expression(Gravity.getAbsoluteGravity(mGravity, layoutDirection), [])  Statement(case Gravity.LEFT:, [])  Statement(return 0.0f, [])  Statement(case Gravity.RIGHT:, [])  MethodCall(return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(), [VariableReference(return (mLayout, []), Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])])    VariableReference(return (mLayout, [])    Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])  Statement(case Gravity.CENTER_HORIZONTAL:, [])  Statement(case Gravity.FILL_HORIZONTAL:, [])  AssignmentExpression(=, [VariableReference(final int textDirection, []), Expression(mLayout.getParagraphDirection(0), [])])    VariableReference(final int textDirection, [])    Expression(mLayout.getParagraphDirection(0), [])  AssignmentExpression(=, [VariableReference(if (textDirection, []), Expression(, [])])    VariableReference(if (textDirection, [])    Expression(, [])  Statement(return 0.0f, [])  Statement(} else {, [])  MethodCall(return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(), [VariableReference(return (mLayout, []), Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])])    VariableReference(return (mLayout, [])    Expression(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength(, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(return super.getLeftFadingEdgeStrength(), [VariableReference(return super, []), Expression(, [])])    VariableReference(return super, [])    Expression(, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3,4",1,3,1,"There is a change in the control dependency due to the addition of the `case Gravity.FILL_HORIZONTAL` block and the conditional handling for `Gravity.CENTER_HORIZONTAL`, thus the code change type is 3.","The addition of `case Gravity.FILL_HORIZONTAL` and conditional checks for `Gravity.CENTER_HORIZONTAL` introduces new control flow that can potentially return different floating-point values based on the text direction, therefore, a CI of type 1 could arise."
"<android.webkit.CallbackProxy: void onTooManyRedirects(Message,Message)>",7,8,"<android.webkit.CallbackProxy: void onTooManyRedirects(Message,Message)>","<android.webkit.CallbackProxy: void onTooManyRedirects(Message,Message)>",0,"{
    // been set.
    if (mWebViewClient == null) {
        cancelMsg.sendToTarget();
        return;
    }
    Message msg = obtainMessage(TOO_MANY_REDIRECTS);
    Bundle bundle = msg.getData();
    bundle.putParcelable(""cancelMsg"", cancelMsg);
    bundle.putParcelable(""continueMsg"", continueMsg);
    sendMessage(msg);
}","{
// deprecated.
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// been set., []), AssignmentExpression(=, [VariableReference(if (mWebViewClient, []), Expression(, [])]), MethodCall(cancelMsg.sendToTarget(), [VariableReference(cancelMsg, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Message msg, []), Expression(obtainMessage(TOO_MANY_REDIRECTS), [])]), AssignmentExpression(=, [VariableReference(Bundle bundle, []), Expression(msg.getData(), [])]), MethodCall(bundle.putParcelable(""cancelMsg"", cancelMsg), [VariableReference(bundle, []), Expression(""cancelMsg"", []), Expression(cancelMsg, [])]), MethodCall(bundle.putParcelable(""continueMsg"", continueMsg), [VariableReference(bundle, []), Expression(""continueMsg"", []), Expression(continueMsg, [])]), Statement(sendMessage(msg), []), Statement(}, [])])  Statement({, [])  Statement(// been set., [])  AssignmentExpression(=, [VariableReference(if (mWebViewClient, []), Expression(, [])])    VariableReference(if (mWebViewClient, [])    Expression(, [])  MethodCall(cancelMsg.sendToTarget(), [VariableReference(cancelMsg, []), Expression(, [])])    VariableReference(cancelMsg, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Message msg, []), Expression(obtainMessage(TOO_MANY_REDIRECTS), [])])    VariableReference(Message msg, [])    Expression(obtainMessage(TOO_MANY_REDIRECTS), [])  AssignmentExpression(=, [VariableReference(Bundle bundle, []), Expression(msg.getData(), [])])    VariableReference(Bundle bundle, [])    Expression(msg.getData(), [])  MethodCall(bundle.putParcelable(""cancelMsg"", cancelMsg), [VariableReference(bundle, []), Expression(""cancelMsg"", []), Expression(cancelMsg, [])])    VariableReference(bundle, [])    Expression(""cancelMsg"", [])    Expression(cancelMsg, [])  MethodCall(bundle.putParcelable(""continueMsg"", continueMsg), [VariableReference(bundle, []), Expression(""continueMsg"", []), Expression(continueMsg, [])])    VariableReference(bundle, [])    Expression(""continueMsg"", [])    Expression(continueMsg, [])  Statement(sendMessage(msg), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// deprecated., []), Statement(}, [])])  Statement({, [])  Statement(// deprecated., [])  Statement(}, [])",1,,"// party of the public classes, we cannot remove this method.
",-1,,,-1,-1,-1,-1,-1,4,1,4,"1,2","The entire method body has been changed. The early version has a series of statements sending messages, while the late version only contains a comment indicating deprecation, so the change type is 4.","The removal of functional statements and replacement with a deprecation comment can lead to a scenario where the method no longer sends messages or potentially throws exceptions differently, leading to different behaviors in clients calling this method. Therefore, the CI type is 1,2."
<android.content.Intent: String toUri(int)>,21,22,<android.content.Intent: String toUri(int)>,<android.content.Intent: String toUri(int)>,0,"{
    StringBuilder uri = new StringBuilder(128);
    String scheme = null;
    if (mData != null) {
        String data = mData.toString();
        if ((flags & URI_INTENT_SCHEME) != 0) {
            final int N = data.length();
            for (int i = 0; i < N; i++) {
                char c = data.charAt(i);
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '-') {
                    continue;
                }
                if (c == ':' && i > 0) {
                    // Valid scheme.
                    scheme = data.substring(0, i);
                    uri.append(""intent:"");
                    data = data.substring(i + 1);
                    break;
                }
                // No scheme.
                break;
            }
        }
        uri.append(data);
    } else if ((flags & URI_INTENT_SCHEME) != 0) {
        uri.append(""intent:"");
    }
    uri.append(""#Intent;"");
    toUriInner(uri, scheme, flags);
    if (mSelector != null) {
        uri.append(""SEL;"");
        // Note that for now we are not going to try to handle the
        // data part; not clear how to represent this as a URI, and
        // not much utility in it.
        mSelector.toUriInner(uri, null, flags);
    }
    uri.append(""end"");
    return uri.toString();
}","{
    StringBuilder uri = new StringBuilder(128);
    if ((flags & URI_ANDROID_APP_SCHEME) != 0) {
        if (mPackage == null) {
            throw new IllegalArgumentException(""Intent must include an explicit package name to build an android-app: "" + this);
        }
        uri.append(""android-app://"");
        uri.append(mPackage);
        String scheme = null;
        if (mData != null) {
            scheme = mData.getScheme();
            if (scheme != null) {
                uri.append('/');
                uri.append(scheme);
                String authority = mData.getEncodedAuthority();
                if (authority != null) {
                    uri.append('/');
                    uri.append(authority);
                    String path = mData.getEncodedPath();
                    if (path != null) {
                        uri.append(path);
                    }
                    String queryParams = mData.getEncodedQuery();
                    if (queryParams != null) {
                        uri.append('?');
                        uri.append(queryParams);
                    }
                    String fragment = mData.getEncodedFragment();
                    if (fragment != null) {
                        uri.append('#');
                        uri.append(fragment);
                    }
                }
            }
        }
        toUriFragment(uri, null, scheme == null ? Intent.ACTION_MAIN : Intent.ACTION_VIEW, mPackage, flags);
        return uri.toString();
    }
    String scheme = null;
    if (mData != null) {
        String data = mData.toString();
        if ((flags & URI_INTENT_SCHEME) != 0) {
            final int N = data.length();
            for (int i = 0; i < N; i++) {
                char c = data.charAt(i);
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '-') {
                    continue;
                }
                if (c == ':' && i > 0) {
                    // Valid scheme.
                    scheme = data.substring(0, i);
                    uri.append(""intent:"");
                    data = data.substring(i + 1);
                    break;
                }
                // No scheme.
                break;
            }
        }
        uri.append(data);
    } else if ((flags & URI_INTENT_SCHEME) != 0) {
        uri.append(""intent:"");
    }
    toUriFragment(uri, scheme, Intent.ACTION_VIEW, null, flags);
    return uri.toString();
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(StringBuilder uri, []), Expression(new StringBuilder(128), [])]), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (mData !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(String data, []), Expression(mData.toString(), [])]), AssignmentExpression(=, [VariableReference(if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(data.length(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(char c, []), Expression(data.charAt(i), [])]), AssignmentExpression(=, [VariableReference(if ((c >, []), Expression('a' && c <, [])]), Statement(continue, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (c, []), Expression(, [])]), Statement(// Valid scheme., []), AssignmentExpression(=, [VariableReference(scheme, []), Expression(data.substring(0, i), [])]), MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])]), AssignmentExpression(=, [VariableReference(data, []), Expression(data.substring(i + 1), [])]), Statement(break, []), Statement(}, []), Statement(// No scheme., []), Statement(break, []), Statement(}, []), Statement(}, []), MethodCall(uri.append(data), [VariableReference(uri, []), Expression(data, [])]), AssignmentExpression(=, [VariableReference(} else if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])]), MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])]), Statement(}, []), Statement(""), []), Statement(toUriInner(uri, scheme, flags), []), AssignmentExpression(=, [VariableReference(if (mSelector !, []), Expression(null) {, [])]), Statement(""), []), Statement(// Note that for now we are not going to try to handle the, []), Statement(// data part, []), Statement(not clear how to represent this as a URI, and, []), Statement(// not much utility in it., []), MethodCall(mSelector.toUriInner(uri, null, flags), [VariableReference(mSelector, []), Expression(uri, []), Expression(null, []), Expression(flags, [])]), Statement(}, []), MethodCall(uri.append(""end""), [VariableReference(uri, []), Expression(""end"", [])]), MethodCall(return uri.toString(), [VariableReference(return uri, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(StringBuilder uri, []), Expression(new StringBuilder(128), [])])    VariableReference(StringBuilder uri, [])    Expression(new StringBuilder(128), [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(null, [])])    VariableReference(String scheme, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (mData !, []), Expression(null) {, [])])    VariableReference(if (mData !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(String data, []), Expression(mData.toString(), [])])    VariableReference(String data, [])    Expression(mData.toString(), [])  AssignmentExpression(=, [VariableReference(if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])])    VariableReference(if ((flags & URI_INTENT_SCHEME) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(data.length(), [])])    VariableReference(final int N, [])    Expression(data.length(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(char c, []), Expression(data.charAt(i), [])])    VariableReference(char c, [])    Expression(data.charAt(i), [])  AssignmentExpression(=, [VariableReference(if ((c >, []), Expression('a' && c <, [])])    VariableReference(if ((c >, [])    Expression('a' && c <, [])  Statement(continue, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (c, []), Expression(, [])])    VariableReference(if (c, [])    Expression(, [])  Statement(// Valid scheme., [])  AssignmentExpression(=, [VariableReference(scheme, []), Expression(data.substring(0, i), [])])    VariableReference(scheme, [])    Expression(data.substring(0, i), [])  MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])])    VariableReference(uri, [])    Expression(""intent:"", [])  AssignmentExpression(=, [VariableReference(data, []), Expression(data.substring(i + 1), [])])    VariableReference(data, [])    Expression(data.substring(i + 1), [])  Statement(break, [])  Statement(}, [])  Statement(// No scheme., [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  MethodCall(uri.append(data), [VariableReference(uri, []), Expression(data, [])])    VariableReference(uri, [])    Expression(data, [])  AssignmentExpression(=, [VariableReference(} else if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])])    VariableReference(} else if ((flags & URI_INTENT_SCHEME) !, [])    Expression(0) {, [])  MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])])    VariableReference(uri, [])    Expression(""intent:"", [])  Statement(}, [])  Statement(""), [])  Statement(toUriInner(uri, scheme, flags), [])  AssignmentExpression(=, [VariableReference(if (mSelector !, []), Expression(null) {, [])])    VariableReference(if (mSelector !, [])    Expression(null) {, [])  Statement(""), [])  Statement(// Note that for now we are not going to try to handle the, [])  Statement(// data part, [])  Statement(not clear how to represent this as a URI, and, [])  Statement(// not much utility in it., [])  MethodCall(mSelector.toUriInner(uri, null, flags), [VariableReference(mSelector, []), Expression(uri, []), Expression(null, []), Expression(flags, [])])    VariableReference(mSelector, [])    Expression(uri, [])    Expression(null, [])    Expression(flags, [])  Statement(}, [])  MethodCall(uri.append(""end""), [VariableReference(uri, []), Expression(""end"", [])])    VariableReference(uri, [])    Expression(""end"", [])  MethodCall(return uri.toString(), [VariableReference(return uri, []), Expression(, [])])    VariableReference(return uri, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(StringBuilder uri, []), Expression(new StringBuilder(128), [])]), AssignmentExpression(=, [VariableReference(if ((flags & URI_ANDROID_APP_SCHEME) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(if (mPackage, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""Intent must include an explicit package name to build an android-app: "" + this), []), Statement(}, []), MethodCall(uri.append(""android-app://""), [VariableReference(uri, []), Expression(""android-app://"", [])]), MethodCall(uri.append(mPackage), [VariableReference(uri, []), Expression(mPackage, [])]), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (mData !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(scheme, []), Expression(mData.getScheme(), [])]), AssignmentExpression(=, [VariableReference(if (scheme !, []), Expression(null) {, [])]), MethodCall(uri.append('/'), [VariableReference(uri, []), Expression('/', [])]), MethodCall(uri.append(scheme), [VariableReference(uri, []), Expression(scheme, [])]), AssignmentExpression(=, [VariableReference(String authority, []), Expression(mData.getEncodedAuthority(), [])]), AssignmentExpression(=, [VariableReference(if (authority !, []), Expression(null) {, [])]), MethodCall(uri.append('/'), [VariableReference(uri, []), Expression('/', [])]), MethodCall(uri.append(authority), [VariableReference(uri, []), Expression(authority, [])]), AssignmentExpression(=, [VariableReference(String path, []), Expression(mData.getEncodedPath(), [])]), AssignmentExpression(=, [VariableReference(if (path !, []), Expression(null) {, [])]), MethodCall(uri.append(path), [VariableReference(uri, []), Expression(path, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(String queryParams, []), Expression(mData.getEncodedQuery(), [])]), AssignmentExpression(=, [VariableReference(if (queryParams !, []), Expression(null) {, [])]), MethodCall(uri.append('?'), [VariableReference(uri, []), Expression('?', [])]), MethodCall(uri.append(queryParams), [VariableReference(uri, []), Expression(queryParams, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(String fragment, []), Expression(mData.getEncodedFragment(), [])]), AssignmentExpression(=, [VariableReference(if (fragment !, []), Expression(null) {, [])]), MethodCall(uri.append('#'), [VariableReference(uri, []), Expression('#', [])]), MethodCall(uri.append(fragment), [VariableReference(uri, []), Expression(fragment, [])]), Statement(}, []), Statement(}, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(toUriFragment(uri, null, scheme, []), Expression(, [])]), MethodCall(return uri.toString(), [VariableReference(return uri, []), Expression(, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(String scheme, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(if (mData !, []), Expression(null) {, [])]), AssignmentExpression(=, [VariableReference(String data, []), Expression(mData.toString(), [])]), AssignmentExpression(=, [VariableReference(if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(final int N, []), Expression(data.length(), [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(char c, []), Expression(data.charAt(i), [])]), AssignmentExpression(=, [VariableReference(if ((c >, []), Expression('a' && c <, [])]), Statement(continue, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (c, []), Expression(, [])]), Statement(// Valid scheme., []), AssignmentExpression(=, [VariableReference(scheme, []), Expression(data.substring(0, i), [])]), MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])]), AssignmentExpression(=, [VariableReference(data, []), Expression(data.substring(i + 1), [])]), Statement(break, []), Statement(}, []), Statement(// No scheme., []), Statement(break, []), Statement(}, []), Statement(}, []), MethodCall(uri.append(data), [VariableReference(uri, []), Expression(data, [])]), AssignmentExpression(=, [VariableReference(} else if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])]), MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])]), Statement(}, []), MethodCall(return uri.toString(), [VariableReference(return uri, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(StringBuilder uri, []), Expression(new StringBuilder(128), [])])    VariableReference(StringBuilder uri, [])    Expression(new StringBuilder(128), [])  AssignmentExpression(=, [VariableReference(if ((flags & URI_ANDROID_APP_SCHEME) !, []), Expression(0) {, [])])    VariableReference(if ((flags & URI_ANDROID_APP_SCHEME) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(if (mPackage, []), Expression(, [])])    VariableReference(if (mPackage, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""Intent must include an explicit package name to build an android-app: "" + this), [])  Statement(}, [])  MethodCall(uri.append(""android-app://""), [VariableReference(uri, []), Expression(""android-app://"", [])])    VariableReference(uri, [])    Expression(""android-app://"", [])  MethodCall(uri.append(mPackage), [VariableReference(uri, []), Expression(mPackage, [])])    VariableReference(uri, [])    Expression(mPackage, [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(null, [])])    VariableReference(String scheme, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (mData !, []), Expression(null) {, [])])    VariableReference(if (mData !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(scheme, []), Expression(mData.getScheme(), [])])    VariableReference(scheme, [])    Expression(mData.getScheme(), [])  AssignmentExpression(=, [VariableReference(if (scheme !, []), Expression(null) {, [])])    VariableReference(if (scheme !, [])    Expression(null) {, [])  MethodCall(uri.append('/'), [VariableReference(uri, []), Expression('/', [])])    VariableReference(uri, [])    Expression('/', [])  MethodCall(uri.append(scheme), [VariableReference(uri, []), Expression(scheme, [])])    VariableReference(uri, [])    Expression(scheme, [])  AssignmentExpression(=, [VariableReference(String authority, []), Expression(mData.getEncodedAuthority(), [])])    VariableReference(String authority, [])    Expression(mData.getEncodedAuthority(), [])  AssignmentExpression(=, [VariableReference(if (authority !, []), Expression(null) {, [])])    VariableReference(if (authority !, [])    Expression(null) {, [])  MethodCall(uri.append('/'), [VariableReference(uri, []), Expression('/', [])])    VariableReference(uri, [])    Expression('/', [])  MethodCall(uri.append(authority), [VariableReference(uri, []), Expression(authority, [])])    VariableReference(uri, [])    Expression(authority, [])  AssignmentExpression(=, [VariableReference(String path, []), Expression(mData.getEncodedPath(), [])])    VariableReference(String path, [])    Expression(mData.getEncodedPath(), [])  AssignmentExpression(=, [VariableReference(if (path !, []), Expression(null) {, [])])    VariableReference(if (path !, [])    Expression(null) {, [])  MethodCall(uri.append(path), [VariableReference(uri, []), Expression(path, [])])    VariableReference(uri, [])    Expression(path, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(String queryParams, []), Expression(mData.getEncodedQuery(), [])])    VariableReference(String queryParams, [])    Expression(mData.getEncodedQuery(), [])  AssignmentExpression(=, [VariableReference(if (queryParams !, []), Expression(null) {, [])])    VariableReference(if (queryParams !, [])    Expression(null) {, [])  MethodCall(uri.append('?'), [VariableReference(uri, []), Expression('?', [])])    VariableReference(uri, [])    Expression('?', [])  MethodCall(uri.append(queryParams), [VariableReference(uri, []), Expression(queryParams, [])])    VariableReference(uri, [])    Expression(queryParams, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(String fragment, []), Expression(mData.getEncodedFragment(), [])])    VariableReference(String fragment, [])    Expression(mData.getEncodedFragment(), [])  AssignmentExpression(=, [VariableReference(if (fragment !, []), Expression(null) {, [])])    VariableReference(if (fragment !, [])    Expression(null) {, [])  MethodCall(uri.append('#'), [VariableReference(uri, []), Expression('#', [])])    VariableReference(uri, [])    Expression('#', [])  MethodCall(uri.append(fragment), [VariableReference(uri, []), Expression(fragment, [])])    VariableReference(uri, [])    Expression(fragment, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(toUriFragment(uri, null, scheme, []), Expression(, [])])    VariableReference(toUriFragment(uri, null, scheme, [])    Expression(, [])  MethodCall(return uri.toString(), [VariableReference(return uri, []), Expression(, [])])    VariableReference(return uri, [])    Expression(, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(String scheme, []), Expression(null, [])])    VariableReference(String scheme, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(if (mData !, []), Expression(null) {, [])])    VariableReference(if (mData !, [])    Expression(null) {, [])  AssignmentExpression(=, [VariableReference(String data, []), Expression(mData.toString(), [])])    VariableReference(String data, [])    Expression(mData.toString(), [])  AssignmentExpression(=, [VariableReference(if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])])    VariableReference(if ((flags & URI_INTENT_SCHEME) !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(data.length(), [])])    VariableReference(final int N, [])    Expression(data.length(), [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(char c, []), Expression(data.charAt(i), [])])    VariableReference(char c, [])    Expression(data.charAt(i), [])  AssignmentExpression(=, [VariableReference(if ((c >, []), Expression('a' && c <, [])])    VariableReference(if ((c >, [])    Expression('a' && c <, [])  Statement(continue, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (c, []), Expression(, [])])    VariableReference(if (c, [])    Expression(, [])  Statement(// Valid scheme., [])  AssignmentExpression(=, [VariableReference(scheme, []), Expression(data.substring(0, i), [])])    VariableReference(scheme, [])    Expression(data.substring(0, i), [])  MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])])    VariableReference(uri, [])    Expression(""intent:"", [])  AssignmentExpression(=, [VariableReference(data, []), Expression(data.substring(i + 1), [])])    VariableReference(data, [])    Expression(data.substring(i + 1), [])  Statement(break, [])  Statement(}, [])  Statement(// No scheme., [])  Statement(break, [])  Statement(}, [])  Statement(}, [])  MethodCall(uri.append(data), [VariableReference(uri, []), Expression(data, [])])    VariableReference(uri, [])    Expression(data, [])  AssignmentExpression(=, [VariableReference(} else if ((flags & URI_INTENT_SCHEME) !, []), Expression(0) {, [])])    VariableReference(} else if ((flags & URI_INTENT_SCHEME) !, [])    Expression(0) {, [])  MethodCall(uri.append(""intent:""), [VariableReference(uri, []), Expression(""intent:"", [])])    VariableReference(uri, [])    Expression(""intent:"", [])  Statement(}, [])  MethodCall(return uri.toString(), [VariableReference(return uri, []), Expression(, [])])    VariableReference(return uri, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Convert this Intent into a String holding a URI representation of it.
 * The returned URI string has been properly URI encoded, so it can be
 * used with {@link Uri#parse Uri.parse(String)}.  The URI contains the
 * Intent's data as the base URI, with an additional fragment describing
 * the action, categories, type, flags, package, component, and extras.
 *
 * <p>You can convert the returned string back to an Intent with
 * {@link #getIntent}.
 *
 * @param flags Additional operating flags.  Either 0 or
 * {@link #URI_INTENT_SCHEME}.
 *
 * @return Returns a URI encoding URI string describing the entire contents
 * of the Intent.
 */
","/**
 * Convert this Intent into a String holding a URI representation of it.
 * The returned URI string has been properly URI encoded, so it can be
 * used with {@link Uri#parse Uri.parse(String)}.  The URI contains the
 * Intent's data as the base URI, with an additional fragment describing
 * the action, categories, type, flags, package, component, and extras.
 *
 * <p>You can convert the returned string back to an Intent with
 * {@link #getIntent}.
 *
 * @param flags Additional operating flags.  Either 0,
 * {@link #URI_INTENT_SCHEME}, or {@link #URI_ANDROID_APP_SCHEME}.
 *
 * @return Returns a URI encoding URI string describing the entire contents
 * of the Intent.
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1,2,3,4","1,2","1) Control dependency changes as new conditions are introduced like `(flags & URI_ANDROID_APP_SCHEME) != 0`, `if (mPackage == null)`, and others for checking components of `mData`,",4) Additional functionalities added inside if-else blocks checking `flags` and `mData` to construct the URI differently.
"<android.hardware.Sensor: int getMaxLengthValuesArray(Sensor,int)>",18,19,"<android.hardware.Sensor: int getMaxLengthValuesArray(Sensor,int)>","<android.hardware.Sensor: int getMaxLengthValuesArray(Sensor,int)>",0,"{
    // mType starts from offset 1.
    int len = sMaxLengthValuesArray[sensor.mType - 1];
    // Set it to 3 for backward compatibility.
    if (sensor.getType() == Sensor.TYPE_ROTATION_VECTOR && sdkLevel <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        len = 3;
    }
    return len;
}","{
    int type = sensor.mType;
    // Set it to 3 for backward compatibility.
    if (type == Sensor.TYPE_ROTATION_VECTOR && sdkLevel <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        return 3;
    }
    int offset = type * 2 + 1;
    if (offset >= sSensorReportingModes.length) {
        // sensor
        return 16;
    }
    return sSensorReportingModes[offset];
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(// mType starts from offset 1., []), AssignmentExpression(=, [VariableReference(int len, []), Expression(sMaxLengthValuesArray[sensor.mType - 1], [])]), Statement(// Set it to 3 for backward compatibility., []), AssignmentExpression(=, [VariableReference(if (sensor.getType(), []), Expression(, [])]), AssignmentExpression(=, [VariableReference(len, []), Expression(3, [])]), Statement(}, []), Statement(return len, []), Statement(}, [])])  Statement({, [])  Statement(// mType starts from offset 1., [])  AssignmentExpression(=, [VariableReference(int len, []), Expression(sMaxLengthValuesArray[sensor.mType - 1], [])])    VariableReference(int len, [])    Expression(sMaxLengthValuesArray[sensor.mType - 1], [])  Statement(// Set it to 3 for backward compatibility., [])  AssignmentExpression(=, [VariableReference(if (sensor.getType(), []), Expression(, [])])    VariableReference(if (sensor.getType(), [])    Expression(, [])  AssignmentExpression(=, [VariableReference(len, []), Expression(3, [])])    VariableReference(len, [])    Expression(3, [])  Statement(}, [])  Statement(return len, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(int type, []), Expression(sensor.mType, [])]), Statement(// Set it to 3 for backward compatibility., []), AssignmentExpression(=, [VariableReference(if (type, []), Expression(, [])]), Statement(return 3, []), Statement(}, []), AssignmentExpression(=, [VariableReference(int offset, []), Expression(type * 2 + 1, [])]), AssignmentExpression(=, [VariableReference(if (offset >, []), Expression(sSensorReportingModes.length) {, [])]), Statement(// sensor, []), Statement(return 16, []), Statement(}, []), Statement(return sSensorReportingModes[offset], []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(int type, []), Expression(sensor.mType, [])])    VariableReference(int type, [])    Expression(sensor.mType, [])  Statement(// Set it to 3 for backward compatibility., [])  AssignmentExpression(=, [VariableReference(if (type, []), Expression(, [])])    VariableReference(if (type, [])    Expression(, [])  Statement(return 3, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int offset, []), Expression(type * 2 + 1, [])])    VariableReference(int offset, [])    Expression(type * 2 + 1, [])  AssignmentExpression(=, [VariableReference(if (offset >, []), Expression(sSensorReportingModes.length) {, [])])    VariableReference(if (offset >, [])    Expression(sSensorReportingModes.length) {, [])  Statement(// sensor, [])  Statement(return 16, [])  Statement(}, [])  Statement(return sSensorReportingModes[offset], [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1,3,4",1,"The return statement has been changed significantly. The new implementation introduces a variable `type` and uses different logic to calculate the return value. The new code uses additional control dependencies (if statements) and arithmetic operations. Hence, the change types include return statements (1), control dependency (3), and other statements (4).","Given that the logic for calculating and returning the value has changed significantly, there's a potential that the API could return different values in the two versions, leading to a CI of type 1."
<android.view.ScaleGestureDetector: float getCurrentSpanX()>,16,17,<android.view.ScaleGestureDetector: float getCurrentSpanX()>,<android.view.ScaleGestureDetector: float getCurrentSpanX()>,0,"{
    return mCurrFingerDiffX;
}","{
    return mCurrSpanX;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mCurrFingerDiffX, []), Statement(}, [])])  Statement({, [])  Statement(return mCurrFingerDiffX, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return mCurrSpanX, []), Statement(}, [])])  Statement({, [])  Statement(return mCurrSpanX, [])  Statement(}, [])",1,"/**
 * Return the current x distance between the two pointers forming the
 * gesture in progress.
 *
 * @return Distance between pointers in pixels.
 */
","/**
 * Return the average X distance between each of the pointers forming the
 * gesture in progress through the focal point.
 *
 * @return Distance between pointers in pixels.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,1,1,"The return statement has changed from returning `mCurrFingerDiffX` to returning `mCurrSpanX`, so the code change type is 1.","This change in the return statement may potentially cause the API to return different values, leading to different behavior in the late version, so the CI type is 1."
<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(Surface)>,25,26,<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(Surface)>,<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(Surface)>,0,"{
    checkNotNull(surface);
    return LegacyExceptionUtils.throwOnError(nativeDetectSurfaceType(surface));
}","{
    checkNotNull(surface);
    int surfaceType = nativeDetectSurfaceType(surface);
    // ImageFormat.PRIVATE. b/9487482
    if ((surfaceType >= LegacyMetadataMapper.HAL_PIXEL_FORMAT_RGBA_8888 && surfaceType <= LegacyMetadataMapper.HAL_PIXEL_FORMAT_BGRA_8888)) {
        surfaceType = ImageFormat.PRIVATE;
    }
    return LegacyExceptionUtils.throwOnError(surfaceType);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(checkNotNull(surface), []), MethodCall(return LegacyExceptionUtils.throwOnError(nativeDetectSurfaceType(surface)), [VariableReference(return LegacyExceptionUtils, []), Expression(nativeDetectSurfaceType(surface), [])]), Statement(}, [])])  Statement({, [])  Statement(checkNotNull(surface), [])  MethodCall(return LegacyExceptionUtils.throwOnError(nativeDetectSurfaceType(surface)), [VariableReference(return LegacyExceptionUtils, []), Expression(nativeDetectSurfaceType(surface), [])])    VariableReference(return LegacyExceptionUtils, [])    Expression(nativeDetectSurfaceType(surface), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(checkNotNull(surface), []), AssignmentExpression(=, [VariableReference(int surfaceType, []), Expression(nativeDetectSurfaceType(surface), [])]), Statement(// ImageFormat.PRIVATE. b/9487482, []), AssignmentExpression(=, [VariableReference(if ((surfaceType >, []), Expression(LegacyMetadataMapper.HAL_PIXEL_FORMAT_RGBA_8888 && surfaceType <, [])]), AssignmentExpression(=, [VariableReference(surfaceType, []), Expression(ImageFormat.PRIVATE, [])]), Statement(}, []), MethodCall(return LegacyExceptionUtils.throwOnError(surfaceType), [VariableReference(return LegacyExceptionUtils, []), Expression(surfaceType, [])]), Statement(}, [])])  Statement({, [])  Statement(checkNotNull(surface), [])  AssignmentExpression(=, [VariableReference(int surfaceType, []), Expression(nativeDetectSurfaceType(surface), [])])    VariableReference(int surfaceType, [])    Expression(nativeDetectSurfaceType(surface), [])  Statement(// ImageFormat.PRIVATE. b/9487482, [])  AssignmentExpression(=, [VariableReference(if ((surfaceType >, []), Expression(LegacyMetadataMapper.HAL_PIXEL_FORMAT_RGBA_8888 && surfaceType <, [])])    VariableReference(if ((surfaceType >, [])    Expression(LegacyMetadataMapper.HAL_PIXEL_FORMAT_RGBA_8888 && surfaceType <, [])  AssignmentExpression(=, [VariableReference(surfaceType, []), Expression(ImageFormat.PRIVATE, [])])    VariableReference(surfaceType, [])    Expression(ImageFormat.PRIVATE, [])  Statement(}, [])  MethodCall(return LegacyExceptionUtils.throwOnError(surfaceType), [VariableReference(return LegacyExceptionUtils, []), Expression(surfaceType, [])])    VariableReference(return LegacyExceptionUtils, [])    Expression(surfaceType, [])  Statement(}, [])",1,"/**
 * Query the surface for its currently configured format
 */
","/**
 * Query the surface for its currently configured format
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1,3,4",1,"The control dependency has changed with the new condition (if statement) added. Additionally, the new variable `surfaceType` has been introduced and assigned a different value under certain conditions, before being passed to `LegacyExceptionUtils.throwOnError(surfaceType)`. Therefore, the change types are 1,3,4.","Due to the new if condition that modifies the value of `surfaceType`, the method may return different values depending upon the conditions, leading to a potential Compatibility Issue. Therefore, the CI type is 1."
"<android.app.PendingIntent: PendingIntent getService(Context,int,Intent,int)>",16,17,"<android.app.PendingIntent: PendingIntent getService(Context,int,Intent,int)>","<android.app.PendingIntent: PendingIntent getService(Context,int,Intent,int)>",0,"{
    String packageName = context.getPackageName();
    String resolvedType = intent != null ? intent.resolveTypeIfNeeded(context.getContentResolver()) : null;
    try {
        intent.setAllowFds(false);
        IIntentSender target = ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType != null ? new String[] { resolvedType } : null, flags, null);
        return target != null ? new PendingIntent(target) : null;
    } catch (RemoteException e) {
    }
    return null;
}","{
    String packageName = context.getPackageName();
    String resolvedType = intent != null ? intent.resolveTypeIfNeeded(context.getContentResolver()) : null;
    try {
        intent.setAllowFds(false);
        IIntentSender target = ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType != null ? new String[] { resolvedType } : null, flags, null, UserHandle.myUserId());
        return target != null ? new PendingIntent(target) : null;
    } catch (RemoteException e) {
    }
    return null;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String packageName, []), Expression(context.getPackageName(), [])]), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent !, [])]), Statement(try {, []), MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(IIntentSender target, []), Expression(ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType !, [])]), AssignmentExpression(=, [VariableReference(return target !, []), Expression(null ? new PendingIntent(target) : null, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String packageName, []), Expression(context.getPackageName(), [])])    VariableReference(String packageName, [])    Expression(context.getPackageName(), [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent !, [])])    VariableReference(String resolvedType, [])    Expression(intent !, [])  Statement(try {, [])  MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])])    VariableReference(intent, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(IIntentSender target, []), Expression(ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType !, [])])    VariableReference(IIntentSender target, [])    Expression(ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType !, [])  AssignmentExpression(=, [VariableReference(return target !, []), Expression(null ? new PendingIntent(target) : null, [])])    VariableReference(return target !, [])    Expression(null ? new PendingIntent(target) : null, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String packageName, []), Expression(context.getPackageName(), [])]), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent !, [])]), Statement(try {, []), MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(IIntentSender target, []), Expression(ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType !, [])]), AssignmentExpression(=, [VariableReference(return target !, []), Expression(null ? new PendingIntent(target) : null, [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String packageName, []), Expression(context.getPackageName(), [])])    VariableReference(String packageName, [])    Expression(context.getPackageName(), [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent !, [])])    VariableReference(String resolvedType, [])    Expression(intent !, [])  Statement(try {, [])  MethodCall(intent.setAllowFds(false), [VariableReference(intent, []), Expression(false, [])])    VariableReference(intent, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(IIntentSender target, []), Expression(ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType !, [])])    VariableReference(IIntentSender target, [])    Expression(ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType !, [])  AssignmentExpression(=, [VariableReference(return target !, []), Expression(null ? new PendingIntent(target) : null, [])])    VariableReference(return target !, [])    Expression(null ? new PendingIntent(target) : null, [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])",1,"/**
 * Retrieve a PendingIntent that will start a service, like calling
 * {@link Context#startService Context.startService()}.  The start
 * arguments given to the service will come from the extras of the Intent.
 *
 * @param context The Context in which this PendingIntent should start
 * the service.
 * @param requestCode Private request code for the sender (currently
 * not used).
 * @param intent An Intent describing the service to be started.
 * @param flags May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE},
 * {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT},
 * or any of the flags as supported by
 * {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts
 * of the intent that can be supplied when the actual send happens.
 *
 * @return Returns an existing or new PendingIntent matching the given
 * parameters.  May return null only if {@link #FLAG_NO_CREATE} has been
 * supplied.
 */
","/**
 * Retrieve a PendingIntent that will start a service, like calling
 * {@link Context#startService Context.startService()}.  The start
 * arguments given to the service will come from the extras of the Intent.
 *
 * @param context The Context in which this PendingIntent should start
 * the service.
 * @param requestCode Private request code for the sender (currently
 * not used).
 * @param intent An Intent describing the service to be started.
 * @param flags May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE},
 * {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT},
 * or any of the flags as supported by
 * {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts
 * of the intent that can be supplied when the actual send happens.
 *
 * @return Returns an existing or new PendingIntent matching the given
 * parameters.  May return null only if {@link #FLAG_NO_CREATE} has been
 * supplied.
 */
",-1,,,-1,-1,-1,-1,-1,"4,5",1,"3,4",0,"A parameter UserHandle.myUserId() has been added to the getIntentSender() method call, altering the control dependency and other statements, so the change type is 3,4.","Although there is a control dependency change due to the addition of UserHandle.myUserId(), it does not immediately affect the return values or exception handling in this specific method. Therefore, there is no compatibility issue detected in this case."
<android.os.VibrationAttributes: int hashCode()>,30,31,<android.os.VibrationAttributes: int hashCode()>,<android.os.VibrationAttributes: int hashCode()>,0,"{
    return Objects.hash(mUsage, mFlags);
}","{
    return Objects.hash(mUsage, mOriginalAudioUsage, mFlags);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(return Objects.hash(mUsage, mFlags), [VariableReference(return Objects, []), Expression(mUsage, []), Expression(mFlags, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Objects.hash(mUsage, mFlags), [VariableReference(return Objects, []), Expression(mUsage, []), Expression(mFlags, [])])    VariableReference(return Objects, [])    Expression(mUsage, [])    Expression(mFlags, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return Objects.hash(mUsage, mOriginalAudioUsage, mFlags), [VariableReference(return Objects, []), Expression(mUsage, []), Expression(mOriginalAudioUsage, []), Expression(mFlags, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return Objects.hash(mUsage, mOriginalAudioUsage, mFlags), [VariableReference(return Objects, []), Expression(mUsage, []), Expression(mOriginalAudioUsage, []), Expression(mFlags, [])])    VariableReference(return Objects, [])    Expression(mUsage, [])    Expression(mOriginalAudioUsage, [])    Expression(mFlags, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,4,5",1,"1,4",1,"The return statement changes from `Objects.hash(mUsage, mFlags)` to `Objects.hash(mUsage, mOriginalAudioUsage, mFlags)`, so the code change type is 1,4.","The change in the return statement potentially leads the method to return a different hash code due to the new parameter `mOriginalAudioUsage`, thus leading to a CI. Therefore, the CI type is 1."
<android.widget.TextView: int getCompoundPaddingRight()>,22,23,<android.widget.TextView: int getCompoundPaddingRight()>,<android.widget.TextView: int getCompoundPaddingRight()>,0,"{
    final Drawables dr = mDrawables;
    if (dr == null || dr.mDrawableRight == null) {
        return mPaddingRight;
    } else {
        return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight;
    }
}","{
    final Drawables dr = mDrawables;
    if (dr == null || dr.mShowing[Drawables.RIGHT] == null) {
        return mPaddingRight;
    } else {
        return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Drawables dr, []), Expression(mDrawables, [])]), AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])]), Statement(return mPaddingRight, []), Statement(} else {, []), Statement(return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Drawables dr, []), Expression(mDrawables, [])])    VariableReference(final Drawables dr, [])    Expression(mDrawables, [])  AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])])    VariableReference(if (dr, [])    Expression(, [])  Statement(return mPaddingRight, [])  Statement(} else {, [])  Statement(return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final Drawables dr, []), Expression(mDrawables, [])]), AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])]), Statement(return mPaddingRight, []), Statement(} else {, []), Statement(return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight, []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final Drawables dr, []), Expression(mDrawables, [])])    VariableReference(final Drawables dr, [])    Expression(mDrawables, [])  AssignmentExpression(=, [VariableReference(if (dr, []), Expression(, [])])    VariableReference(if (dr, [])    Expression(, [])  Statement(return mPaddingRight, [])  Statement(} else {, [])  Statement(return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Returns the right padding of the view, plus space for the right
 * Drawable if any.
 */
","/**
 * Returns the right padding of the view, plus space for the right
 * Drawable if any.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,3,1,"The control dependency condition within the `if` statement has been modified from `dr.mDrawableRight == null` to `dr.mShowing[Drawables.RIGHT] == null`, so the code change type is 3.","The modification in the control dependency condition could lead to the function returning a different value in cases where the `if` condition evaluates differently between the two versions. Thus, this causes a potential Compatibility Issue with CI type 1."
<android.os.PowerManager: boolean isPowerSaveMode()>,23,24,<android.os.PowerManager: boolean isPowerSaveMode()>,<android.os.PowerManager: boolean isPowerSaveMode()>,0,"{
    try {
        return mService.isPowerSaveMode();
    } catch (RemoteException e) {
        return false;
    }
}","{
    try {
        return mService.isPowerSaveMode();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.isPowerSaveMode(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), Statement(return false, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.isPowerSaveMode(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  Statement(return false, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.isPowerSaveMode(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.isPowerSaveMode(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
","/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
",-1,,,-1,-1,-1,-1,-1,2,2,"1,2","1,2","The return statement in the catch block has changed from returning `false` to throwing `e.rethrowFromSystemServer()`, so the code change type is 1,2.","The behavior when a `RemoteException` occurs has changed, which can lead to potentially different return values or exceptions being thrown. Thus, the CI type is 1,2."
"<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>",17,18,"<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>","<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>",0,"{
    return native_control_request(requestType, request, value, index, buffer, length, timeout);
}","{
    return controlTransfer(requestType, request, value, index, buffer, 0, length, timeout);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return native_control_request(requestType, request, value, index, buffer, length, timeout), []), Statement(}, [])])  Statement({, [])  Statement(return native_control_request(requestType, request, value, index, buffer, length, timeout), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return controlTransfer(requestType, request, value, index, buffer, 0, length, timeout), []), Statement(}, [])])  Statement({, [])  Statement(return controlTransfer(requestType, request, value, index, buffer, 0, length, timeout), [])  Statement(}, [])",1,"/**
 * Performs a control transaction on endpoint zero for this device.
 * The direction of the transfer is determined by the request type.
 * If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is
 * {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write,
 * and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer
 * is a read.
 *
 * @param requestType request type for this transaction
 * @param request request ID for this transaction
 * @param value value field for this transaction
 * @param index index field for this transaction
 * @param buffer buffer for data portion of transaction,
 * or null if no data needs to be sent or received
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
","/**
 * Performs a control transaction on endpoint zero for this device.
 * The direction of the transfer is determined by the request type.
 * If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is
 * {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write,
 * and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer
 * is a read.
 * <p>
 * This method transfers data starting from index 0 in the buffer.
 * To specify a different offset, use
 * {@link #controlTransfer(int, int, int, int, byte[], int, int, int)}.
 * </p>
 *
 * @param requestType request type for this transaction
 * @param request request ID for this transaction
 * @param value value field for this transaction
 * @param index index field for this transaction
 * @param buffer buffer for data portion of transaction,
 * or null if no data needs to be sent or received
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,"1, 5",1,"The implementation calls a different function, switching from `native_control_request` to `controlTransfer`. Additionally, a new `0` parameter has been added in the method call in the new version, so the change type is 1, 5.","The modification might result in different return values or behaviors due to altering the parameters and invoking a different method, thus causing a CI type of 1."
"<android.content.ContentResolver: void takePersistableUriPermission(Uri,int)>",27,28,"<android.content.ContentResolver: void takePersistableUriPermission(Uri,int)>","<android.content.ContentResolver: void takePersistableUriPermission(Uri,int)>",0,"{
    Preconditions.checkNotNull(uri, ""uri"");
    try {
        ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri));
    } catch (RemoteException e) {
    }
}","{
    Preconditions.checkNotNull(uri, ""uri"");
    try {
        ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, /* toPackage= */
        null, resolveUserId(uri));
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(uri, ""uri""), [VariableReference(Preconditions, []), Expression(uri, []), Expression(""uri"", [])]), Statement(try {, []), MethodCall(ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri)), [VariableReference(ActivityManager, []), Expression().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), []), Expression(modeFlags, []), Expression(resolveUserId(uri), [])]), Statement(} catch (RemoteException e) {, []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(uri, ""uri""), [VariableReference(Preconditions, []), Expression(uri, []), Expression(""uri"", [])])    VariableReference(Preconditions, [])    Expression(uri, [])    Expression(""uri"", [])  Statement(try {, [])  MethodCall(ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri)), [VariableReference(ActivityManager, []), Expression().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), []), Expression(modeFlags, []), Expression(resolveUserId(uri), [])])    VariableReference(ActivityManager, [])    Expression().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), [])    Expression(modeFlags, [])    Expression(resolveUserId(uri), [])  Statement(} catch (RemoteException e) {, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(Preconditions.checkNotNull(uri, ""uri""), [VariableReference(Preconditions, []), Expression(uri, []), Expression(""uri"", [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, /* toPackage, []), Expression(*/, [])]), Statement(null, resolveUserId(uri)), []), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(Preconditions.checkNotNull(uri, ""uri""), [VariableReference(Preconditions, []), Expression(uri, []), Expression(""uri"", [])])    VariableReference(Preconditions, [])    Expression(uri, [])    Expression(""uri"", [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, /* toPackage, []), Expression(*/, [])])    VariableReference(ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, /* toPackage, [])    Expression(*/, [])  Statement(null, resolveUserId(uri)), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Take a persistable URI permission grant that has been offered. Once
 * taken, the permission grant will be remembered across device reboots.
 * Only URI permissions granted with
 * {@link Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION} can be persisted. If
 * the grant has already been persisted, taking it again will touch
 * {@link UriPermission#getPersistedTime()}.
 *
 * @see #getPersistedUriPermissions()
 */
","/**
 * Take a persistable URI permission grant that has been offered. Once
 * taken, the permission grant will be remembered across device reboots.
 * Only URI permissions granted with
 * {@link Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION} can be persisted. If
 * the grant has already been persisted, taking it again will touch
 * {@link UriPermission#getPersistedTime()}.
 *
 * @see #getPersistedUriPermissions()
 */
",-1,,,-1,-1,-1,-1,-1,"2,4,5",2,"2,4",2,"The late version introduces a new parameter `null` in the `takePersistableUriPermission` method call and adds a new exception handling statement `throw e.rethrowFromSystemServer()`, so the code change type is 2,4.","The addition of the `throw e.rethrowFromSystemServer()` statement modifies the exception handling behavior, potentially causing the method to throw a different exception, leading to a Compatibility Issue of type 2."
<android.widget.Switch: Mode getThumbTintMode()>,28,29,<android.widget.Switch: Mode getThumbTintMode()>,<android.widget.Switch: Mode getThumbTintMode()>,0,"{
    return mThumbTintMode;
}","{
    BlendMode mode = getThumbTintBlendMode();
    return mode != null ? BlendMode.blendModeToPorterDuffMode(mode) : null;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mThumbTintMode, []), Statement(}, [])])  Statement({, [])  Statement(return mThumbTintMode, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(BlendMode mode, []), Expression(getThumbTintBlendMode(), [])]), AssignmentExpression(=, [VariableReference(return mode !, []), Expression(null ? BlendMode.blendModeToPorterDuffMode(mode) : null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(BlendMode mode, []), Expression(getThumbTintBlendMode(), [])])    VariableReference(BlendMode mode, [])    Expression(getThumbTintBlendMode(), [])  AssignmentExpression(=, [VariableReference(return mode !, []), Expression(null ? BlendMode.blendModeToPorterDuffMode(mode) : null, [])])    VariableReference(return mode !, [])    Expression(null ? BlendMode.blendModeToPorterDuffMode(mode) : null, [])  Statement(}, [])",1,"/**
 * @return the blending mode used to apply the tint to the thumb
 * drawable
 * @attr ref android.R.styleable#Switch_thumbTintMode
 * @see #setThumbTintMode(PorterDuff.Mode)
 */
","/**
 * @return the blending mode used to apply the tint to the thumb
 * drawable
 * @attr ref android.R.styleable#Switch_thumbTintMode
 * @see #setThumbTintMode(PorterDuff.Mode)
 */
",-1,[@Nullable],"[@InspectableProperty, @Nullable]",-1,-1,-1,-1,-1,"1,4",1,"1,3,4",1,"In the late version, the return statement has changed from `return mThumbTintMode;` to `return mode != null ? BlendMode.blendModeToPorterDuffMode(mode) : null;`, an added condition `mode != null` has been introduced within the ternary operator, and additional assignment statements and method calls (`BlendMode mode = getThumbTintBlendMode()`). Thus, the change involves return statements, control dependency, and other statements: 1, 3, 4.","Since the return value can now be different due to the new condition and transformations, this can potentially lead to Compatibility Issues by returning different values. Hence, the CI type is 1."
"<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>",23,24,"<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>","<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>",0,"{
    if (DBG)
        Log.d(TAG, ""start("" + sampleRateInHz + "","" + audioFormat + "","" + channelCount + "")"");
    int channelConfig = BlockingAudioTrack.getChannelConfig(channelCount);
    synchronized (mStateLock) {
        if (channelConfig == 0) {
            Log.e(TAG, ""Unsupported number of channels :"" + channelCount);
            mStatusCode = TextToSpeech.ERROR_OUTPUT;
            return TextToSpeech.ERROR;
        }
        if (mStatusCode == TextToSpeech.STOPPED) {
            if (DBG)
                Log.d(TAG, ""stop() called before start(), returning."");
            return errorCodeOnStop();
        }
        if (mStatusCode != TextToSpeech.SUCCESS) {
            if (DBG)
                Log.d(TAG, ""Error was raised"");
            return TextToSpeech.ERROR;
        }
        if (mItem != null) {
            Log.e(TAG, ""Start called twice"");
            return TextToSpeech.ERROR;
        }
        SynthesisPlaybackQueueItem item = new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger);
        mAudioTrackHandler.enqueue(item);
        mItem = item;
    }
    return TextToSpeech.SUCCESS;
}","{
    if (DBG)
        Log.d(TAG, ""start("" + sampleRateInHz + "","" + audioFormat + "","" + channelCount + "")"");
    if (audioFormat != AudioFormat.ENCODING_PCM_8BIT && audioFormat != AudioFormat.ENCODING_PCM_16BIT && audioFormat != AudioFormat.ENCODING_PCM_FLOAT) {
        Log.w(TAG, ""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT"");
    }
    mDispatcher.dispatchOnBeginSynthesis(sampleRateInHz, audioFormat, channelCount);
    int channelConfig = BlockingAudioTrack.getChannelConfig(channelCount);
    synchronized (mStateLock) {
        if (channelConfig == 0) {
            Log.e(TAG, ""Unsupported number of channels :"" + channelCount);
            mStatusCode = TextToSpeech.ERROR_OUTPUT;
            return TextToSpeech.ERROR;
        }
        if (mStatusCode == TextToSpeech.STOPPED) {
            if (DBG)
                Log.d(TAG, ""stop() called before start(), returning."");
            return errorCodeOnStop();
        }
        if (mStatusCode != TextToSpeech.SUCCESS) {
            if (DBG)
                Log.d(TAG, ""Error was raised"");
            return TextToSpeech.ERROR;
        }
        if (mItem != null) {
            Log.e(TAG, ""Start called twice"");
            return TextToSpeech.ERROR;
        }
        SynthesisPlaybackQueueItem item = new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger);
        mAudioTrackHandler.enqueue(item);
        mItem = item;
    }
    return TextToSpeech.SUCCESS;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DBG), []), MethodCall(Log.d(TAG, ""start("" + sampleRateInHz + "", "" + audioFormat + "", "" + channelCount + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""start("" + sampleRateInHz + "", []), Expression("" + audioFormat + "", []), Expression("" + channelCount + "")"", [])]), AssignmentExpression(=, [VariableReference(int channelConfig, []), Expression(BlockingAudioTrack.getChannelConfig(channelCount), [])]), Statement(synchronized (mStateLock) {, []), AssignmentExpression(=, [VariableReference(if (channelConfig, []), Expression(, [])]), MethodCall(Log.e(TAG, ""Unsupported number of channels :"" + channelCount), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unsupported number of channels :"" + channelCount, [])]), AssignmentExpression(=, [VariableReference(mStatusCode, []), Expression(TextToSpeech.ERROR_OUTPUT, [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mStatusCode, []), Expression(, [])]), Statement(if (DBG), []), MethodCall(Log.d(TAG, ""stop() called before start(), returning.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""stop() called before start(), []), Expression(returning."", [])]), Statement(return errorCodeOnStop(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mStatusCode !, []), Expression(TextToSpeech.SUCCESS) {, [])]), Statement(if (DBG), []), MethodCall(Log.d(TAG, ""Error was raised""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error was raised"", [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mItem !, []), Expression(null) {, [])]), MethodCall(Log.e(TAG, ""Start called twice""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start called twice"", [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(SynthesisPlaybackQueueItem item, []), Expression(new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger), [])]), MethodCall(mAudioTrackHandler.enqueue(item), [VariableReference(mAudioTrackHandler, []), Expression(item, [])]), AssignmentExpression(=, [VariableReference(mItem, []), Expression(item, [])]), Statement(}, []), Statement(return TextToSpeech.SUCCESS, []), Statement(}, [])])  Statement({, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, ""start("" + sampleRateInHz + "", "" + audioFormat + "", "" + channelCount + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""start("" + sampleRateInHz + "", []), Expression("" + audioFormat + "", []), Expression("" + channelCount + "")"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""start("" + sampleRateInHz + "", [])    Expression("" + audioFormat + "", [])    Expression("" + channelCount + "")"", [])  AssignmentExpression(=, [VariableReference(int channelConfig, []), Expression(BlockingAudioTrack.getChannelConfig(channelCount), [])])    VariableReference(int channelConfig, [])    Expression(BlockingAudioTrack.getChannelConfig(channelCount), [])  Statement(synchronized (mStateLock) {, [])  AssignmentExpression(=, [VariableReference(if (channelConfig, []), Expression(, [])])    VariableReference(if (channelConfig, [])    Expression(, [])  MethodCall(Log.e(TAG, ""Unsupported number of channels :"" + channelCount), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unsupported number of channels :"" + channelCount, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unsupported number of channels :"" + channelCount, [])  AssignmentExpression(=, [VariableReference(mStatusCode, []), Expression(TextToSpeech.ERROR_OUTPUT, [])])    VariableReference(mStatusCode, [])    Expression(TextToSpeech.ERROR_OUTPUT, [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mStatusCode, []), Expression(, [])])    VariableReference(if (mStatusCode, [])    Expression(, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, ""stop() called before start(), returning.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""stop() called before start(), []), Expression(returning."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""stop() called before start(), [])    Expression(returning."", [])  Statement(return errorCodeOnStop(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mStatusCode !, []), Expression(TextToSpeech.SUCCESS) {, [])])    VariableReference(if (mStatusCode !, [])    Expression(TextToSpeech.SUCCESS) {, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, ""Error was raised""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error was raised"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Error was raised"", [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mItem !, []), Expression(null) {, [])])    VariableReference(if (mItem !, [])    Expression(null) {, [])  MethodCall(Log.e(TAG, ""Start called twice""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start called twice"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Start called twice"", [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SynthesisPlaybackQueueItem item, []), Expression(new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger), [])])    VariableReference(SynthesisPlaybackQueueItem item, [])    Expression(new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger), [])  MethodCall(mAudioTrackHandler.enqueue(item), [VariableReference(mAudioTrackHandler, []), Expression(item, [])])    VariableReference(mAudioTrackHandler, [])    Expression(item, [])  AssignmentExpression(=, [VariableReference(mItem, []), Expression(item, [])])    VariableReference(mItem, [])    Expression(item, [])  Statement(}, [])  Statement(return TextToSpeech.SUCCESS, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DBG), []), MethodCall(Log.d(TAG, ""start("" + sampleRateInHz + "", "" + audioFormat + "", "" + channelCount + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""start("" + sampleRateInHz + "", []), Expression("" + audioFormat + "", []), Expression("" + channelCount + "")"", [])]), AssignmentExpression(=, [VariableReference(if (audioFormat !, []), Expression(AudioFormat.ENCODING_PCM_8BIT && audioFormat !, [])]), MethodCall(Log.w(TAG, ""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, []), Expression(AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT"", [])]), Statement(}, []), MethodCall(mDispatcher.dispatchOnBeginSynthesis(sampleRateInHz, audioFormat, channelCount), [VariableReference(mDispatcher, []), Expression(sampleRateInHz, []), Expression(audioFormat, []), Expression(channelCount, [])]), AssignmentExpression(=, [VariableReference(int channelConfig, []), Expression(BlockingAudioTrack.getChannelConfig(channelCount), [])]), Statement(synchronized (mStateLock) {, []), AssignmentExpression(=, [VariableReference(if (channelConfig, []), Expression(, [])]), MethodCall(Log.e(TAG, ""Unsupported number of channels :"" + channelCount), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unsupported number of channels :"" + channelCount, [])]), AssignmentExpression(=, [VariableReference(mStatusCode, []), Expression(TextToSpeech.ERROR_OUTPUT, [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mStatusCode, []), Expression(, [])]), Statement(if (DBG), []), MethodCall(Log.d(TAG, ""stop() called before start(), returning.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""stop() called before start(), []), Expression(returning."", [])]), Statement(return errorCodeOnStop(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mStatusCode !, []), Expression(TextToSpeech.SUCCESS) {, [])]), Statement(if (DBG), []), MethodCall(Log.d(TAG, ""Error was raised""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error was raised"", [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mItem !, []), Expression(null) {, [])]), MethodCall(Log.e(TAG, ""Start called twice""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start called twice"", [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(SynthesisPlaybackQueueItem item, []), Expression(new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger), [])]), MethodCall(mAudioTrackHandler.enqueue(item), [VariableReference(mAudioTrackHandler, []), Expression(item, [])]), AssignmentExpression(=, [VariableReference(mItem, []), Expression(item, [])]), Statement(}, []), Statement(return TextToSpeech.SUCCESS, []), Statement(}, [])])  Statement({, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, ""start("" + sampleRateInHz + "", "" + audioFormat + "", "" + channelCount + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""start("" + sampleRateInHz + "", []), Expression("" + audioFormat + "", []), Expression("" + channelCount + "")"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""start("" + sampleRateInHz + "", [])    Expression("" + audioFormat + "", [])    Expression("" + channelCount + "")"", [])  AssignmentExpression(=, [VariableReference(if (audioFormat !, []), Expression(AudioFormat.ENCODING_PCM_8BIT && audioFormat !, [])])    VariableReference(if (audioFormat !, [])    Expression(AudioFormat.ENCODING_PCM_8BIT && audioFormat !, [])  MethodCall(Log.w(TAG, ""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, []), Expression(AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, [])    Expression(AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT"", [])  Statement(}, [])  MethodCall(mDispatcher.dispatchOnBeginSynthesis(sampleRateInHz, audioFormat, channelCount), [VariableReference(mDispatcher, []), Expression(sampleRateInHz, []), Expression(audioFormat, []), Expression(channelCount, [])])    VariableReference(mDispatcher, [])    Expression(sampleRateInHz, [])    Expression(audioFormat, [])    Expression(channelCount, [])  AssignmentExpression(=, [VariableReference(int channelConfig, []), Expression(BlockingAudioTrack.getChannelConfig(channelCount), [])])    VariableReference(int channelConfig, [])    Expression(BlockingAudioTrack.getChannelConfig(channelCount), [])  Statement(synchronized (mStateLock) {, [])  AssignmentExpression(=, [VariableReference(if (channelConfig, []), Expression(, [])])    VariableReference(if (channelConfig, [])    Expression(, [])  MethodCall(Log.e(TAG, ""Unsupported number of channels :"" + channelCount), [VariableReference(Log, []), Expression(TAG, []), Expression(""Unsupported number of channels :"" + channelCount, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Unsupported number of channels :"" + channelCount, [])  AssignmentExpression(=, [VariableReference(mStatusCode, []), Expression(TextToSpeech.ERROR_OUTPUT, [])])    VariableReference(mStatusCode, [])    Expression(TextToSpeech.ERROR_OUTPUT, [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mStatusCode, []), Expression(, [])])    VariableReference(if (mStatusCode, [])    Expression(, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, ""stop() called before start(), returning.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""stop() called before start(), []), Expression(returning."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""stop() called before start(), [])    Expression(returning."", [])  Statement(return errorCodeOnStop(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mStatusCode !, []), Expression(TextToSpeech.SUCCESS) {, [])])    VariableReference(if (mStatusCode !, [])    Expression(TextToSpeech.SUCCESS) {, [])  Statement(if (DBG), [])  MethodCall(Log.d(TAG, ""Error was raised""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Error was raised"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Error was raised"", [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mItem !, []), Expression(null) {, [])])    VariableReference(if (mItem !, [])    Expression(null) {, [])  MethodCall(Log.e(TAG, ""Start called twice""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Start called twice"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Start called twice"", [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SynthesisPlaybackQueueItem item, []), Expression(new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger), [])])    VariableReference(SynthesisPlaybackQueueItem item, [])    Expression(new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger), [])  MethodCall(mAudioTrackHandler.enqueue(item), [VariableReference(mAudioTrackHandler, []), Expression(item, [])])    VariableReference(mAudioTrackHandler, [])    Expression(item, [])  AssignmentExpression(=, [VariableReference(mItem, []), Expression(item, [])])    VariableReference(mItem, [])    Expression(item, [])  Statement(}, [])  Statement(return TextToSpeech.SUCCESS, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",1,"2,3,4","1,2","The early implementation logs errors and returns `TextToSpeech.ERROR` if an unsupported audio format is used, whereas the late implementation logs warnings and continues execution. Additionally, the late implementation adds a dispatch call through `mDispatcher.dispatchOnBeginSynthesis`. Thus, the change types are 2 (Exception handling statement has changed), 3 (Control dependency has changed since a new condition check for audio format is added), and 4 (Other statement has changed due to the addition of `mDispatcher.dispatchOnBeginSynthesis`).","The control dependency change and the new dispatch call can result in the method proceeding further in the late version when certain unsupported audio formats are passed, which can lead to different return values or behaviors, such as `TextToSpeech.SUCCESS`, when it would have returned `TextToSpeech.ERROR` in early version. Additionally, the method now raises different exceptions given previously unsupported audio formats. Therefore, the CI type is 1 (different return values) and 2 (different exception handlings)."
<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,20,21,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,0,"{
    try {
        return mService.getAuthenticatorTypes();
    } catch (RemoteException e) {
        // will never happen
        throw new RuntimeException(e);
    }
}","{
    try {
        return mService.getAuthenticatorTypes(UserHandle.getCallingUserId());
    } catch (RemoteException e) {
        // will never happen
        throw new RuntimeException(e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.getAuthenticatorTypes(), [VariableReference(return mService, []), Expression(, [])]), Statement(} catch (RemoteException e) {, []), Statement(// will never happen, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.getAuthenticatorTypes(), [VariableReference(return mService, []), Expression(, [])])    VariableReference(return mService, [])    Expression(, [])  Statement(} catch (RemoteException e) {, [])  Statement(// will never happen, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.getAuthenticatorTypes(UserHandle.getCallingUserId()), [VariableReference(return mService, []), Expression(UserHandle.getCallingUserId(), [])]), Statement(} catch (RemoteException e) {, []), Statement(// will never happen, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.getAuthenticatorTypes(UserHandle.getCallingUserId()), [VariableReference(return mService, []), Expression(UserHandle.getCallingUserId(), [])])    VariableReference(return mService, [])    Expression(UserHandle.getCallingUserId(), [])  Statement(} catch (RemoteException e) {, [])  Statement(// will never happen, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Lists the currently registered authenticators.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>No permission is required to call this method.
 *
 * @return An array of {@link AuthenticatorDescription} for every
 * authenticator known to the AccountManager service.  Empty (never
 * null) if no authenticators are known.
 */
","/**
 * Lists the currently registered authenticators.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>No permission is required to call this method.
 *
 * @return An array of {@link AuthenticatorDescription} for every
 * authenticator known to the AccountManager service.  Empty (never
 * null) if no authenticators are known.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4,5",0,"1,5",1,"The return statement has changed from `mService.getAuthenticatorTypes()` to `mService.getAuthenticatorTypes(UserHandle.getCallingUserId())`, indicating a parameter addition to the method call. This classifies the code change as 1 and 5.","The change in the `getAuthenticatorTypes()` method to include `UserHandle.getCallingUserId()` as a parameter may cause the API to return different values based on the calling user ID. Thus, the CI type is 1."
"<android.view.GLES20Canvas: boolean quickReject(Path,EdgeType)>",15,16,"<android.view.GLES20Canvas: boolean quickReject(Path,EdgeType)>","<android.view.GLES20Canvas: boolean quickReject(Path,EdgeType)>",0,"{
    throw new UnsupportedOperationException();
}","{
    path.computeBounds(mPathBounds, true);
    return nQuickReject(mRenderer, mPathBounds.left, mPathBounds.top, mPathBounds.right, mPathBounds.bottom, type.nativeInt);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(path.computeBounds(mPathBounds, true), [VariableReference(path, []), Expression(mPathBounds, []), Expression(true, [])]), Statement(}, [])])  Statement({, [])  MethodCall(path.computeBounds(mPathBounds, true), [VariableReference(path, []), Expression(mPathBounds, []), Expression(true, [])])    VariableReference(path, [])    Expression(mPathBounds, [])    Expression(true, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2","1,2","1,2,3,4","1,2","In the early version, the method throws an `UnsupportedOperationException`. In the late version, this exception handling has been removed, and the method now performs several operations including a call to `path.computeBounds` and returns the result of `nQuickReject`. Thus, the changes involve the return statement (1), the removal of the exception handling (2), control dependencies (3), and other operational statements (4).","The method's behavior has fundamentally changed. It no longer throws an exception but instead performs various computations and returns a boolean value. This can lead to different return type/values (1) and exception handling behavior (2). Therefore, the CI type is both 1 and 2."
"<android.util.Log: int v(String,String)>",7,8,"<android.util.Log: int v(String,String)>","<android.util.Log: int v(String,String)>",0,"{
    return println(VERBOSE, tag, msg);
}","{
    return println_native(LOG_ID_MAIN, VERBOSE, tag, msg);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return println(VERBOSE, tag, msg), []), Statement(}, [])])  Statement({, [])  Statement(return println(VERBOSE, tag, msg), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return println_native(LOG_ID_MAIN, VERBOSE, tag, msg), []), Statement(}, [])])  Statement({, [])  Statement(return println_native(LOG_ID_MAIN, VERBOSE, tag, msg), [])  Statement(}, [])",1,"/**
 * Send a {@link #VERBOSE} log message.
 * @param tag Used to identify the source of a log message.  It usually identifies
 * the class or activity where the log call occurs.
 * @param msg The message you would like logged.
 */
","/**
 * Send a {@link #VERBOSE} log message.
 * @param tag Used to identify the source of a log message.  It usually identifies
 * the class or activity where the log call occurs.
 * @param msg The message you would like logged.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,"1,5",1,"The return statement has changed from `println(VERBOSE, tag, msg)` to `println_native(LOG_ID_MAIN, VERBOSE, tag, msg)`, and the dependent API used in the return statement has changed, so the code change type is 1,5.","The change of return statement in conjunction with the change in the dependent API can potentially result in different return values, so the CI type is 1."
<android.view.autofill.AutofillId: int hashCode()>,28,29,<android.view.autofill.AutofillId: int hashCode()>,<android.view.autofill.AutofillId: int hashCode()>,0,"{
    final int prime = 31;
    int result = 1;
    result = prime * result + mViewId;
    result = prime * result + mVirtualId;
    return result;
}","{
    final int prime = 31;
    int result = 1;
    result = prime * result + mViewId;
    result = prime * result + mVirtualIntId;
    result = prime * result + (int) (mVirtualLongId ^ (mVirtualLongId >>> 32));
    result = prime * result + mSessionId;
    return result;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final int prime, []), Expression(31, [])]), AssignmentExpression(=, [VariableReference(int result, []), Expression(1, [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mViewId, [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mVirtualId, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int prime, []), Expression(31, [])])    VariableReference(final int prime, [])    Expression(31, [])  AssignmentExpression(=, [VariableReference(int result, []), Expression(1, [])])    VariableReference(int result, [])    Expression(1, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mViewId, [])])    VariableReference(result, [])    Expression(prime * result + mViewId, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mVirtualId, [])])    VariableReference(result, [])    Expression(prime * result + mVirtualId, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final int prime, []), Expression(31, [])]), AssignmentExpression(=, [VariableReference(int result, []), Expression(1, [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mViewId, [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mVirtualIntId, [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + (int) (mVirtualLongId ^ (mVirtualLongId >>> 32)), [])]), AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mSessionId, [])]), Statement(return result, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final int prime, []), Expression(31, [])])    VariableReference(final int prime, [])    Expression(31, [])  AssignmentExpression(=, [VariableReference(int result, []), Expression(1, [])])    VariableReference(int result, [])    Expression(1, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mViewId, [])])    VariableReference(result, [])    Expression(prime * result + mViewId, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mVirtualIntId, [])])    VariableReference(result, [])    Expression(prime * result + mVirtualIntId, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + (int) (mVirtualLongId ^ (mVirtualLongId >>> 32)), [])])    VariableReference(result, [])    Expression(prime * result + (int) (mVirtualLongId ^ (mVirtualLongId >>> 32)), [])  AssignmentExpression(=, [VariableReference(result, []), Expression(prime * result + mSessionId, [])])    VariableReference(result, [])    Expression(prime * result + mSessionId, [])  Statement(return result, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,4",1,1,1,"In the late version, additional fields `mVirtualIntId`, `mVirtualLongId`, and `mSessionId` are included in the calculation of the hash code, which results in a different return value. Thus, the code change type is 1.","Since the change in the late version affects the return value of the `hashCode()` method by including additional fields in the hash code computation, this can lead to different return values. Therefore, the CI type is 1."
"<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>",28,29,"<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>","<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>",0,"{
    boolean result = false;
    final IBluetoothHidDevice service = mService;
    if (service != null) {
        try {
            result = service.reportError(device, error);
        } catch (RemoteException e) {
            Log.e(TAG, e.toString());
        }
    } else {
        Log.w(TAG, ""Proxy not attached to service"");
    }
    return result;
}","{
    boolean result = false;
    final IBluetoothHidDevice service = getService();
    if (service != null) {
        try {
            result = service.reportError(device, error);
        } catch (RemoteException e) {
            Log.e(TAG, e.toString());
        }
    } else {
        Log.w(TAG, ""Proxy not attached to service"");
    }
    return result;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(boolean result, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(final IBluetoothHidDevice service, []), Expression(mService, [])]), AssignmentExpression(=, [VariableReference(if (service !, []), Expression(null) {, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(result, []), Expression(service.reportError(device, error), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, e.toString()), [VariableReference(Log, []), Expression(TAG, []), Expression(e.toString(), [])]), Statement(}, []), Statement(} else {, []), MethodCall(Log.w(TAG, ""Proxy not attached to service""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Proxy not attached to service"", [])]), Statement(}, []), Statement(return result, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(boolean result, []), Expression(false, [])])    VariableReference(boolean result, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(final IBluetoothHidDevice service, []), Expression(mService, [])])    VariableReference(final IBluetoothHidDevice service, [])    Expression(mService, [])  AssignmentExpression(=, [VariableReference(if (service !, []), Expression(null) {, [])])    VariableReference(if (service !, [])    Expression(null) {, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(service.reportError(device, error), [])])    VariableReference(result, [])    Expression(service.reportError(device, error), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, e.toString()), [VariableReference(Log, []), Expression(TAG, []), Expression(e.toString(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(e.toString(), [])  Statement(}, [])  Statement(} else {, [])  MethodCall(Log.w(TAG, ""Proxy not attached to service""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Proxy not attached to service"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Proxy not attached to service"", [])  Statement(}, [])  Statement(return result, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(boolean result, []), Expression(false, [])]), AssignmentExpression(=, [VariableReference(final IBluetoothHidDevice service, []), Expression(getService(), [])]), AssignmentExpression(=, [VariableReference(if (service !, []), Expression(null) {, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(result, []), Expression(service.reportError(device, error), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(Log.e(TAG, e.toString()), [VariableReference(Log, []), Expression(TAG, []), Expression(e.toString(), [])]), Statement(}, []), Statement(} else {, []), MethodCall(Log.w(TAG, ""Proxy not attached to service""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Proxy not attached to service"", [])]), Statement(}, []), Statement(return result, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(boolean result, []), Expression(false, [])])    VariableReference(boolean result, [])    Expression(false, [])  AssignmentExpression(=, [VariableReference(final IBluetoothHidDevice service, []), Expression(getService(), [])])    VariableReference(final IBluetoothHidDevice service, [])    Expression(getService(), [])  AssignmentExpression(=, [VariableReference(if (service !, []), Expression(null) {, [])])    VariableReference(if (service !, [])    Expression(null) {, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(result, []), Expression(service.reportError(device, error), [])])    VariableReference(result, [])    Expression(service.reportError(device, error), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(Log.e(TAG, e.toString()), [VariableReference(Log, []), Expression(TAG, []), Expression(e.toString(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(e.toString(), [])  Statement(}, [])  Statement(} else {, [])  MethodCall(Log.w(TAG, ""Proxy not attached to service""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Proxy not attached to service"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Proxy not attached to service"", [])  Statement(}, [])  Statement(return result, [])  Statement(}, [])",1,"/**
 * Sends error handshake message as reply for invalid SET_REPORT request from {@link
 * Callback#onSetReport(BluetoothDevice, byte, byte, byte[])}.
 *
 * @param error Error to be sent for SET_REPORT via HANDSHAKE.
 * @return true if the command is successfully sent; otherwise false.
 */
","/**
 * Sends error handshake message as reply for invalid SET_REPORT request from {@link
 * Callback#onSetReport(BluetoothDevice, byte, byte, byte[])}.
 *
 * @param error Error to be sent for SET_REPORT via HANDSHAKE.
 * @return true if the command is successfully sent; otherwise false.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,5,0,"The call to `mService` has been replaced with `getService()`. This indicates that the API's behavior depends on a new method, so the code change type is 5.","The dependent API change does not necessarily lead to compatibility issues for this method's return value or exception handling. Therefore, the CI type is 0."
"<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int,DatabaseErrorHandler)>",27,28,"<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int,DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int,DatabaseErrorHandler)>",0,"{
    SQLiteDatabase db = new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1);
    db.open();
    return db;
}","{
    SQLiteDatabase db = new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1, null, null);
    db.open();
    return db;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(SQLiteDatabase db, []), Expression(new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1), [])]), MethodCall(db.open(), [VariableReference(db, []), Expression(, [])]), Statement(return db, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(SQLiteDatabase db, []), Expression(new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1), [])])    VariableReference(SQLiteDatabase db, [])    Expression(new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1), [])  MethodCall(db.open(), [VariableReference(db, []), Expression(, [])])    VariableReference(db, [])    Expression(, [])  Statement(return db, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(SQLiteDatabase db, []), Expression(new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1, null, null), [])]), MethodCall(db.open(), [VariableReference(db, []), Expression(, [])]), Statement(return db, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(SQLiteDatabase db, []), Expression(new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1, null, null), [])])    VariableReference(SQLiteDatabase db, [])    Expression(new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1, null, null), [])  MethodCall(db.open(), [VariableReference(db, []), Expression(, [])])    VariableReference(db, [])    Expression(, [])  Statement(return db, [])  Statement(}, [])",1,"/**
 * Open the database according to the flags {@link #OPEN_READWRITE}
 * {@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}.
 *
 * <p>Sets the locale of the database to the  the system's current locale.
 * Call {@link #setLocale} if you would like something else.</p>
 *
 * <p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be
 * used to handle corruption when sqlite reports database corruption.</p>
 *
 * @param path to database file to open and/or create
 * @param factory an optional factory class that is called to instantiate a
 * cursor when query is called, or null for default
 * @param flags to control database access mode
 * @param errorHandler the {@link DatabaseErrorHandler} obj to be used to handle corruption
 * when sqlite reports database corruption
 * @return the newly opened database
 * @throws SQLiteException if the database cannot be opened
 */
","/**
 * Open the database according to the flags {@link #OPEN_READWRITE}
 * {@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}.
 *
 * <p>Sets the locale of the database to the  the system's current locale.
 * Call {@link #setLocale} if you would like something else.</p>
 *
 * <p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be
 * used to handle corruption when sqlite reports database corruption.</p>
 *
 * @param path to database file to open and/or create
 * @param factory an optional factory class that is called to instantiate a
 * cursor when query is called, or null for default
 * @param flags to control database access mode
 * @param errorHandler the {@link DatabaseErrorHandler} obj to be used to handle corruption
 * when sqlite reports database corruption
 * @return the newly opened database
 * @throws SQLiteException if the database cannot be opened
 */
",-1,,,-1,-1,-1,-1,-1,5,0,4,0,"The change involves adding two new `null` parameters to the constructor call of `SQLiteDatabase`. These parameters are likely to have default values that do not alter the behavior in a way that would impact return values or exception handling independently. Therefore, the change type is 4.","The added parameters in the constructor are assigned with `null` values which do not change the behavior of the method in terms of return values or exceptions. Hence, no compatibility issues are identified, so the CI type is 0."
<android.animation.PropertyValuesHolder.IntPropertyValuesHolder: IntPropertyValuesHolder clone()>,20,21,<android.animation.PropertyValuesHolder.IntPropertyValuesHolder: IntPropertyValuesHolder clone()>,<android.animation.PropertyValuesHolder.IntPropertyValuesHolder: IntPropertyValuesHolder clone()>,0,"{
    IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
    newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;
    return newPVH;
}","{
    IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
    newPVH.mIntKeyframes = (Keyframes.IntKeyframes) newPVH.mKeyframes;
    return newPVH;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(IntPropertyValuesHolder newPVH, []), Expression((IntPropertyValuesHolder) super.clone(), [])]), AssignmentExpression(=, [VariableReference(newPVH.mIntKeyframeSet, []), Expression((IntKeyframeSet) newPVH.mKeyframeSet, [])]), Statement(return newPVH, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(IntPropertyValuesHolder newPVH, []), Expression((IntPropertyValuesHolder) super.clone(), [])])    VariableReference(IntPropertyValuesHolder newPVH, [])    Expression((IntPropertyValuesHolder) super.clone(), [])  AssignmentExpression(=, [VariableReference(newPVH.mIntKeyframeSet, []), Expression((IntKeyframeSet) newPVH.mKeyframeSet, [])])    VariableReference(newPVH.mIntKeyframeSet, [])    Expression((IntKeyframeSet) newPVH.mKeyframeSet, [])  Statement(return newPVH, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(IntPropertyValuesHolder newPVH, []), Expression((IntPropertyValuesHolder) super.clone(), [])]), AssignmentExpression(=, [VariableReference(newPVH.mIntKeyframes, []), Expression((Keyframes.IntKeyframes) newPVH.mKeyframes, [])]), Statement(return newPVH, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(IntPropertyValuesHolder newPVH, []), Expression((IntPropertyValuesHolder) super.clone(), [])])    VariableReference(IntPropertyValuesHolder newPVH, [])    Expression((IntPropertyValuesHolder) super.clone(), [])  AssignmentExpression(=, [VariableReference(newPVH.mIntKeyframes, []), Expression((Keyframes.IntKeyframes) newPVH.mKeyframes, [])])    VariableReference(newPVH.mIntKeyframes, [])    Expression((Keyframes.IntKeyframes) newPVH.mKeyframes, [])  Statement(return newPVH, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,4,0,"1,4",1,"The variable assignment inside the method changed from `newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;` to `newPVH.mIntKeyframes = (Keyframes.IntKeyframes) newPVH.mKeyframes;`, and this is a change in other statements and the return statement due to internal state change.","The change in the assignment statement can potentially lead to the return value `newPVH` having different internal state values. This could lead to different behaviors or results when the cloned object is used, leading to a compatibility issue of type 1."
<android.app.SharedPreferencesImpl.EditorImpl: Editor remove(String)>,25,26,<android.app.SharedPreferencesImpl.EditorImpl: Editor remove(String)>,<android.app.SharedPreferencesImpl.EditorImpl: Editor remove(String)>,0,"{
    synchronized (this) {
        mModified.put(key, this);
        return this;
    }
}","{
    synchronized (mLock) {
        mModified.put(key, this);
        return this;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), MethodCall(mModified.put(key, this), [VariableReference(mModified, []), Expression(key, []), Expression(this, [])]), Statement(return this, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  MethodCall(mModified.put(key, this), [VariableReference(mModified, []), Expression(key, []), Expression(this, [])])    VariableReference(mModified, [])    Expression(key, [])    Expression(this, [])  Statement(return this, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mLock) {, []), MethodCall(mModified.put(key, this), [VariableReference(mModified, []), Expression(key, []), Expression(this, [])]), Statement(return this, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mLock) {, [])  MethodCall(mModified.put(key, this), [VariableReference(mModified, []), Expression(key, []), Expression(this, [])])    VariableReference(mModified, [])    Expression(key, [])    Expression(this, [])  Statement(return this, [])  Statement(}, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,4,0,3,0,"The only change is in the synchronized block from 'synchronized (this)' to 'synchronized (mLock)', so the code change type is 3.","This change does not affect the return value or exception handling of the method, so there is no compatibility issue. Thus, the CI type is 0."
<android.animation.ValueAnimator: void resume()>,23,24,<android.animation.ValueAnimator: void resume()>,<android.animation.ValueAnimator: void resume()>,0,"{
    if (mPaused) {
        mResumed = true;
    }
    super.resume();
}","{
    if (Looper.myLooper() == null) {
        throw new AndroidRuntimeException(""Animators may only be resumed from the same "" + ""thread that the animator was started on"");
    }
    if (mPaused && !mResumed) {
        mResumed = true;
        if (mPauseTime > 0) {
            AnimationHandler handler = AnimationHandler.getInstance();
            handler.addAnimationFrameCallback(this, 0);
        }
    }
    super.resume();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mPaused) {, []), AssignmentExpression(=, [VariableReference(mResumed, []), Expression(true, [])]), Statement(}, []), MethodCall(super.resume(), [VariableReference(super, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (mPaused) {, [])  AssignmentExpression(=, [VariableReference(mResumed, []), Expression(true, [])])    VariableReference(mResumed, [])    Expression(true, [])  Statement(}, [])  MethodCall(super.resume(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (Looper.myLooper(), []), Expression(, [])]), Statement(throw new AndroidRuntimeException(""Animators may only be resumed from the same "" + ""thread that the animator was started on""), []), Statement(}, []), Statement(if (mPaused && !mResumed) {, []), AssignmentExpression(=, [VariableReference(mResumed, []), Expression(true, [])]), Statement(if (mPauseTime > 0) {, []), AssignmentExpression(=, [VariableReference(AnimationHandler handler, []), Expression(AnimationHandler.getInstance(), [])]), MethodCall(handler.addAnimationFrameCallback(this, 0), [VariableReference(handler, []), Expression(this, []), Expression(0, [])]), Statement(}, []), Statement(}, []), MethodCall(super.resume(), [VariableReference(super, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (Looper.myLooper(), []), Expression(, [])])    VariableReference(if (Looper.myLooper(), [])    Expression(, [])  Statement(throw new AndroidRuntimeException(""Animators may only be resumed from the same "" + ""thread that the animator was started on""), [])  Statement(}, [])  Statement(if (mPaused && !mResumed) {, [])  AssignmentExpression(=, [VariableReference(mResumed, []), Expression(true, [])])    VariableReference(mResumed, [])    Expression(true, [])  Statement(if (mPauseTime > 0) {, [])  AssignmentExpression(=, [VariableReference(AnimationHandler handler, []), Expression(AnimationHandler.getInstance(), [])])    VariableReference(AnimationHandler handler, [])    Expression(AnimationHandler.getInstance(), [])  MethodCall(handler.addAnimationFrameCallback(this, 0), [VariableReference(handler, []), Expression(this, []), Expression(0, [])])    VariableReference(handler, [])    Expression(this, [])    Expression(0, [])  Statement(}, [])  Statement(}, [])  MethodCall(super.resume(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"2,3,4","1,2","2,3,4",2,"In the late version, a new exception handling statement has been added (throw new AndroidRuntimeException(""..."")). Additionally, new control dependency logic (if conditions) and other statements related to `AnimationHandler` have been inserted. Therefore, the change types are 2, 3, and 4.","The newly introduced exception handling statement could lead to the method throwing different exceptions when invoked under the late version. Thus, the CI type is 2."
<android.speech.SpeechRecognizer: void destroy()>,20,21,<android.speech.SpeechRecognizer: void destroy()>,<android.speech.SpeechRecognizer: void destroy()>,0,"{
    if (mConnection != null) {
        mContext.unbindService(mConnection);
    }
    mPendingTasks.clear();
    mService = null;
    mConnection = null;
    mListener.mInternalListener = null;
}","{
    if (mService != null) {
        try {
            mService.cancel(mListener);
        } catch (final RemoteException e) {
        // Not important
        }
    }
    if (mConnection != null) {
        mContext.unbindService(mConnection);
    }
    mPendingTasks.clear();
    mService = null;
    mConnection = null;
    mListener.mInternalListener = null;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mConnection !, []), Expression(null) {, [])]), MethodCall(mContext.unbindService(mConnection), [VariableReference(mContext, []), Expression(mConnection, [])]), Statement(}, []), MethodCall(mPendingTasks.clear(), [VariableReference(mPendingTasks, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mService, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mConnection, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mListener.mInternalListener, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mConnection !, []), Expression(null) {, [])])    VariableReference(if (mConnection !, [])    Expression(null) {, [])  MethodCall(mContext.unbindService(mConnection), [VariableReference(mContext, []), Expression(mConnection, [])])    VariableReference(mContext, [])    Expression(mConnection, [])  Statement(}, [])  MethodCall(mPendingTasks.clear(), [VariableReference(mPendingTasks, []), Expression(, [])])    VariableReference(mPendingTasks, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mService, []), Expression(null, [])])    VariableReference(mService, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mConnection, []), Expression(null, [])])    VariableReference(mConnection, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mListener.mInternalListener, []), Expression(null, [])])    VariableReference(mListener.mInternalListener, [])    Expression(null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])]), Statement(try {, []), MethodCall(mService.cancel(mListener), [VariableReference(mService, []), Expression(mListener, [])]), Statement(} catch (final RemoteException e) {, []), Statement(// Not important, []), Statement(}, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (mConnection !, []), Expression(null) {, [])]), MethodCall(mContext.unbindService(mConnection), [VariableReference(mContext, []), Expression(mConnection, [])]), Statement(}, []), MethodCall(mPendingTasks.clear(), [VariableReference(mPendingTasks, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mService, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mConnection, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(mListener.mInternalListener, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mService !, []), Expression(null) {, [])])    VariableReference(if (mService !, [])    Expression(null) {, [])  Statement(try {, [])  MethodCall(mService.cancel(mListener), [VariableReference(mService, []), Expression(mListener, [])])    VariableReference(mService, [])    Expression(mListener, [])  Statement(} catch (final RemoteException e) {, [])  Statement(// Not important, [])  Statement(}, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (mConnection !, []), Expression(null) {, [])])    VariableReference(if (mConnection !, [])    Expression(null) {, [])  MethodCall(mContext.unbindService(mConnection), [VariableReference(mContext, []), Expression(mConnection, [])])    VariableReference(mContext, [])    Expression(mConnection, [])  Statement(}, [])  MethodCall(mPendingTasks.clear(), [VariableReference(mPendingTasks, []), Expression(, [])])    VariableReference(mPendingTasks, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mService, []), Expression(null, [])])    VariableReference(mService, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mConnection, []), Expression(null, [])])    VariableReference(mConnection, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(mListener.mInternalListener, []), Expression(null, [])])    VariableReference(mListener.mInternalListener, [])    Expression(null, [])  Statement(}, [])",1,"/**
 * Destroys the {@code SpeechRecognizer} object.
 */
","/**
 * Destroys the {@code SpeechRecognizer} object.
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,"2,3",2,"In the late version, an additional `if` statement with exception handling has been introduced. The new code checks whether `mService` is not null and attempts to cancel it, catching a `RemoteException` if it occurs. Thus, the change type is 2,3.","The changes imply a new exception handling mechanism which can lead to different behaviors. If `mService` is not null, it now tries to cancel it (which wasn't done in the early version) and catches a potential `RemoteException`. This can cause different exceptions to be thrown (or not thrown), so the CI type is 2."
<android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache: RemoteViewsIndexMetaData getMetaDataAt(int)>,23,24,<android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache: RemoteViewsIndexMetaData getMetaDataAt(int)>,<android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache: RemoteViewsIndexMetaData getMetaDataAt(int)>,0,"{
    if (mIndexMetaData.containsKey(position)) {
        return mIndexMetaData.get(position);
    }
    return null;
}","{
    return mIndexMetaData.get(position);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(if (mIndexMetaData.containsKey(position)), [VariableReference(if (mIndexMetaData, []), Expression(position), [])]), MethodCall(return mIndexMetaData.get(position), [VariableReference(return mIndexMetaData, []), Expression(position, [])]), Statement(}, []), Statement(return null, []), Statement(}, [])])  Statement({, [])  MethodCall(if (mIndexMetaData.containsKey(position)), [VariableReference(if (mIndexMetaData, []), Expression(position), [])])    VariableReference(if (mIndexMetaData, [])    Expression(position), [])  MethodCall(return mIndexMetaData.get(position), [VariableReference(return mIndexMetaData, []), Expression(position, [])])    VariableReference(return mIndexMetaData, [])    Expression(position, [])  Statement(}, [])  Statement(return null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return mIndexMetaData.get(position), [VariableReference(return mIndexMetaData, []), Expression(position, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return mIndexMetaData.get(position), [VariableReference(return mIndexMetaData, []), Expression(position, [])])    VariableReference(return mIndexMetaData, [])    Expression(position, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"1,3",1,"1,3",1,"The control dependency, specifically the 'if' condition checking `mIndexMetaData.containsKey(position)`, has been removed, and the return statement `return null;` has also been removed. This means the method now directly returns the value of `mIndexMetaData.get(position)` without checking if the key exists. Therefore, both return statement change and control dependency change type are applicable, making the change type 1,3.","Removing the 'if' check can lead to a situation where the `mIndexMetaData.get(position)` directly returns possibly different values or throws an exception if the key isn't present in the late version, differing from the early version where it would return `null` in such a case. Thus, the CI type is 1."
"<android.view.GLES20Canvas: void drawHardwareLayer(HardwareLayer,float,float,Paint)>",16,17,"<android.view.GLES20Canvas: void drawHardwareLayer(HardwareLayer,float,float,Paint)>","<android.view.GLES20Canvas: void drawHardwareLayer(HardwareLayer,float,float,Paint)>",0,"{
    final GLES20Layer glLayer = (GLES20Layer) layer;
    int modifier = paint != null ? setupColorFilter(paint) : MODIFIER_NONE;
    try {
        final int nativePaint = paint == null ? 0 : paint.mNativePaint;
        nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint);
    } finally {
        if (modifier != MODIFIER_NONE)
            nResetModifiers(mRenderer, modifier);
    }
}","{
    final GLES20Layer glLayer = (GLES20Layer) layer;
    final int nativePaint = paint == null ? 0 : paint.mNativePaint;
    nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final GLES20Layer glLayer, []), Expression((GLES20Layer) layer, [])]), AssignmentExpression(=, [VariableReference(int modifier, []), Expression(paint !, [])]), Statement(try {, []), AssignmentExpression(=, [VariableReference(final int nativePaint, []), Expression(paint, [])]), MethodCall(nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint), [VariableReference(nDrawLayer(mRenderer, glLayer, []), Expression(), []), Expression(x, []), Expression(y, []), Expression(nativePaint, [])]), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(if (modifier !, []), Expression(MODIFIER_NONE), [])]), Statement(nResetModifiers(mRenderer, modifier), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final GLES20Layer glLayer, []), Expression((GLES20Layer) layer, [])])    VariableReference(final GLES20Layer glLayer, [])    Expression((GLES20Layer) layer, [])  AssignmentExpression(=, [VariableReference(int modifier, []), Expression(paint !, [])])    VariableReference(int modifier, [])    Expression(paint !, [])  Statement(try {, [])  AssignmentExpression(=, [VariableReference(final int nativePaint, []), Expression(paint, [])])    VariableReference(final int nativePaint, [])    Expression(paint, [])  MethodCall(nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint), [VariableReference(nDrawLayer(mRenderer, glLayer, []), Expression(), []), Expression(x, []), Expression(y, []), Expression(nativePaint, [])])    VariableReference(nDrawLayer(mRenderer, glLayer, [])    Expression(), [])    Expression(x, [])    Expression(y, [])    Expression(nativePaint, [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(if (modifier !, []), Expression(MODIFIER_NONE), [])])    VariableReference(if (modifier !, [])    Expression(MODIFIER_NONE), [])  Statement(nResetModifiers(mRenderer, modifier), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final GLES20Layer glLayer, []), Expression((GLES20Layer) layer, [])]), AssignmentExpression(=, [VariableReference(final int nativePaint, []), Expression(paint, [])]), MethodCall(nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint), [VariableReference(nDrawLayer(mRenderer, glLayer, []), Expression(), []), Expression(x, []), Expression(y, []), Expression(nativePaint, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final GLES20Layer glLayer, []), Expression((GLES20Layer) layer, [])])    VariableReference(final GLES20Layer glLayer, [])    Expression((GLES20Layer) layer, [])  AssignmentExpression(=, [VariableReference(final int nativePaint, []), Expression(paint, [])])    VariableReference(final int nativePaint, [])    Expression(paint, [])  MethodCall(nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint), [VariableReference(nDrawLayer(mRenderer, glLayer, []), Expression(), []), Expression(x, []), Expression(y, []), Expression(nativePaint, [])])    VariableReference(nDrawLayer(mRenderer, glLayer, [])    Expression(), [])    Expression(x, [])    Expression(y, [])    Expression(nativePaint, [])  Statement(}, [])",1,,,-1,,,-1,-1,-1,-1,-1,"2,3,4",0,"2,4",2,"The change involves the removal of the `try` and `finally` blocks in the Late Version, specifically removing the `nResetModifiers(mRenderer, modifier)` method call that was conditionally executed based on `modifier`. This change alters the exception handling mechanism and modifies the structure of statements unrelated to control dependency, so the change type is 2,4.","The removal of the `nResetModifiers(mRenderer, modifier)` call and the enclosing try-finally block means that any exceptions thrown will now propagate differently and the modifiers reset operation will no longer occur, which can result in different exception handling behavior. Therefore, the CI type is 2."
"<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>",15,16,"<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>","<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>",0,"{
    if (DBG) {
        Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""],"" + offset + "","" + length + "")"");
    }
    if (length > getMaxBufferSize() || length <= 0) {
        throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)"");
    }
    SynthesisMessageParams token = null;
    synchronized (mStateLock) {
        if (mToken == null || mStopped) {
            return TextToSpeech.ERROR;
        }
        token = mToken;
    }
    // Sigh, another copy.
    final byte[] bufferCopy = new byte[length];
    System.arraycopy(buffer, offset, bufferCopy, 0, length);
    // Might block on mToken.this, if there are too many buffers waiting to
    // be consumed.
    token.addBuffer(bufferCopy);
    mAudioTrackHandler.enqueueSynthesisDataAvailable(token);
    mLogger.onEngineDataReceived();
    return TextToSpeech.SUCCESS;
}","{
    if (DBG) {
        Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""],"" + offset + "","" + length + "")"");
    }
    if (length > getMaxBufferSize() || length <= 0) {
        throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)"");
    }
    SynthesisPlaybackQueueItem item = null;
    synchronized (mStateLock) {
        if (mItem == null || mStopped) {
            return TextToSpeech.ERROR;
        }
        item = mItem;
    }
    // Sigh, another copy.
    final byte[] bufferCopy = new byte[length];
    System.arraycopy(buffer, offset, bufferCopy, 0, length);
    // be consumed.
    try {
        item.put(bufferCopy);
    } catch (InterruptedException ie) {
        return TextToSpeech.ERROR;
    }
    mLogger.onEngineDataReceived();
    return TextToSpeech.SUCCESS;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DBG) {, []), MethodCall(Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""], "" + offset + "", "" + length + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""audioAvailable(byte["" + buffer.length + ""], []), Expression("" + offset + "", []), Expression("" + length + "")"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (length > getMaxBufferSize() || length <, []), Expression(0) {, [])]), Statement(throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(SynthesisMessageParams token, []), Expression(null, [])]), Statement(synchronized (mStateLock) {, []), AssignmentExpression(=, [VariableReference(if (mToken, []), Expression(, [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(token, []), Expression(mToken, [])]), Statement(}, []), Statement(// Sigh, another copy., []), AssignmentExpression(=, [VariableReference(final byte[] bufferCopy, []), Expression(new byte[length], [])]), MethodCall(System.arraycopy(buffer, offset, bufferCopy, 0, length), [VariableReference(System, []), Expression(buffer, []), Expression(offset, []), Expression(bufferCopy, []), Expression(0, []), Expression(length, [])]), Statement(// Might block on mToken.this, if there are too many buffers waiting to, []), Statement(// be consumed., []), MethodCall(token.addBuffer(bufferCopy), [VariableReference(token, []), Expression(bufferCopy, [])]), MethodCall(mAudioTrackHandler.enqueueSynthesisDataAvailable(token), [VariableReference(mAudioTrackHandler, []), Expression(token, [])]), MethodCall(mLogger.onEngineDataReceived(), [VariableReference(mLogger, []), Expression(, [])]), Statement(return TextToSpeech.SUCCESS, []), Statement(}, [])])  Statement({, [])  Statement(if (DBG) {, [])  MethodCall(Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""], "" + offset + "", "" + length + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""audioAvailable(byte["" + buffer.length + ""], []), Expression("" + offset + "", []), Expression("" + length + "")"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""audioAvailable(byte["" + buffer.length + ""], [])    Expression("" + offset + "", [])    Expression("" + length + "")"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (length > getMaxBufferSize() || length <, []), Expression(0) {, [])])    VariableReference(if (length > getMaxBufferSize() || length <, [])    Expression(0) {, [])  Statement(throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SynthesisMessageParams token, []), Expression(null, [])])    VariableReference(SynthesisMessageParams token, [])    Expression(null, [])  Statement(synchronized (mStateLock) {, [])  AssignmentExpression(=, [VariableReference(if (mToken, []), Expression(, [])])    VariableReference(if (mToken, [])    Expression(, [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(token, []), Expression(mToken, [])])    VariableReference(token, [])    Expression(mToken, [])  Statement(}, [])  Statement(// Sigh, another copy., [])  AssignmentExpression(=, [VariableReference(final byte[] bufferCopy, []), Expression(new byte[length], [])])    VariableReference(final byte[] bufferCopy, [])    Expression(new byte[length], [])  MethodCall(System.arraycopy(buffer, offset, bufferCopy, 0, length), [VariableReference(System, []), Expression(buffer, []), Expression(offset, []), Expression(bufferCopy, []), Expression(0, []), Expression(length, [])])    VariableReference(System, [])    Expression(buffer, [])    Expression(offset, [])    Expression(bufferCopy, [])    Expression(0, [])    Expression(length, [])  Statement(// Might block on mToken.this, if there are too many buffers waiting to, [])  Statement(// be consumed., [])  MethodCall(token.addBuffer(bufferCopy), [VariableReference(token, []), Expression(bufferCopy, [])])    VariableReference(token, [])    Expression(bufferCopy, [])  MethodCall(mAudioTrackHandler.enqueueSynthesisDataAvailable(token), [VariableReference(mAudioTrackHandler, []), Expression(token, [])])    VariableReference(mAudioTrackHandler, [])    Expression(token, [])  MethodCall(mLogger.onEngineDataReceived(), [VariableReference(mLogger, []), Expression(, [])])    VariableReference(mLogger, [])    Expression(, [])  Statement(return TextToSpeech.SUCCESS, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DBG) {, []), MethodCall(Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""], "" + offset + "", "" + length + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""audioAvailable(byte["" + buffer.length + ""], []), Expression("" + offset + "", []), Expression("" + length + "")"", [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (length > getMaxBufferSize() || length <, []), Expression(0) {, [])]), Statement(throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(SynthesisPlaybackQueueItem item, []), Expression(null, [])]), Statement(synchronized (mStateLock) {, []), AssignmentExpression(=, [VariableReference(if (mItem, []), Expression(, [])]), Statement(return TextToSpeech.ERROR, []), Statement(}, []), AssignmentExpression(=, [VariableReference(item, []), Expression(mItem, [])]), Statement(}, []), Statement(// Sigh, another copy., []), AssignmentExpression(=, [VariableReference(final byte[] bufferCopy, []), Expression(new byte[length], [])]), MethodCall(System.arraycopy(buffer, offset, bufferCopy, 0, length), [VariableReference(System, []), Expression(buffer, []), Expression(offset, []), Expression(bufferCopy, []), Expression(0, []), Expression(length, [])]), Statement(// be consumed., []), Statement(try {, []), MethodCall(item.put(bufferCopy), [VariableReference(item, []), Expression(bufferCopy, [])]), Statement(} catch (InterruptedException ie) {, []), Statement(return TextToSpeech.ERROR, []), Statement(}, []), MethodCall(mLogger.onEngineDataReceived(), [VariableReference(mLogger, []), Expression(, [])]), Statement(return TextToSpeech.SUCCESS, []), Statement(}, [])])  Statement({, [])  Statement(if (DBG) {, [])  MethodCall(Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""], "" + offset + "", "" + length + "")""), [VariableReference(Log, []), Expression(TAG, []), Expression(""audioAvailable(byte["" + buffer.length + ""], []), Expression("" + offset + "", []), Expression("" + length + "")"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""audioAvailable(byte["" + buffer.length + ""], [])    Expression("" + offset + "", [])    Expression("" + length + "")"", [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (length > getMaxBufferSize() || length <, []), Expression(0) {, [])])    VariableReference(if (length > getMaxBufferSize() || length <, [])    Expression(0) {, [])  Statement(throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(SynthesisPlaybackQueueItem item, []), Expression(null, [])])    VariableReference(SynthesisPlaybackQueueItem item, [])    Expression(null, [])  Statement(synchronized (mStateLock) {, [])  AssignmentExpression(=, [VariableReference(if (mItem, []), Expression(, [])])    VariableReference(if (mItem, [])    Expression(, [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(item, []), Expression(mItem, [])])    VariableReference(item, [])    Expression(mItem, [])  Statement(}, [])  Statement(// Sigh, another copy., [])  AssignmentExpression(=, [VariableReference(final byte[] bufferCopy, []), Expression(new byte[length], [])])    VariableReference(final byte[] bufferCopy, [])    Expression(new byte[length], [])  MethodCall(System.arraycopy(buffer, offset, bufferCopy, 0, length), [VariableReference(System, []), Expression(buffer, []), Expression(offset, []), Expression(bufferCopy, []), Expression(0, []), Expression(length, [])])    VariableReference(System, [])    Expression(buffer, [])    Expression(offset, [])    Expression(bufferCopy, [])    Expression(0, [])    Expression(length, [])  Statement(// be consumed., [])  Statement(try {, [])  MethodCall(item.put(bufferCopy), [VariableReference(item, []), Expression(bufferCopy, [])])    VariableReference(item, [])    Expression(bufferCopy, [])  Statement(} catch (InterruptedException ie) {, [])  Statement(return TextToSpeech.ERROR, [])  Statement(}, [])  MethodCall(mLogger.onEngineDataReceived(), [VariableReference(mLogger, []), Expression(, [])])    VariableReference(mLogger, [])    Expression(, [])  Statement(return TextToSpeech.SUCCESS, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,4","1,2","2,3,4","1,2","The variable `token` has been changed to `item`, and the method call `token.addBuffer` has been replaced with `item.put`. Additionally, a try-catch block has been introduced for handling `InterruptedException`, changing the exception handling behavior. Thus, the code change types are 2, 3, and 4.","The late version introduces a new exception handling mechanism which can lead the API to throw a different exception (`InterruptedException`) and returning `TextToSpeech.ERROR` due to the new try-catch block. Additionally, the control dependency under `synchronized` block changes as `token` is replaced with `item`, affecting potential return values. Hence, the CI types are 1 and 2."
<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>,30,31,<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>,<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>,0,"{
    if (DEBUG)
        Log.v(TAG, ""finishComposingText"");
    final Editable content = getEditable();
    if (content != null) {
        beginBatchEdit();
        removeComposingSpans(content);
        // Note: sendCurrentText does nothing unless mDummyMode is set
        sendCurrentText();
        endBatchEdit();
    }
    return true;
}","{
    if (DEBUG)
        Log.v(TAG, ""finishComposingText"");
    final Editable content = getEditable();
    if (content != null) {
        beginBatchEdit();
        removeComposingSpans(content);
        // Note: sendCurrentText does nothing unless mFallbackMode is set
        sendCurrentText();
        endBatchEdit();
        endComposingRegionEditInternal();
    }
    return true;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""finishComposingText""), [VariableReference(Log, []), Expression(TAG, []), Expression(""finishComposingText"", [])]), AssignmentExpression(=, [VariableReference(final Editable content, []), Expression(getEditable(), [])]), AssignmentExpression(=, [VariableReference(if (content !, []), Expression(null) {, [])]), Statement(beginBatchEdit(), []), Statement(removeComposingSpans(content), []), Statement(// Note: sendCurrentText does nothing unless mDummyMode is set, []), Statement(sendCurrentText(), []), Statement(endBatchEdit(), []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""finishComposingText""), [VariableReference(Log, []), Expression(TAG, []), Expression(""finishComposingText"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""finishComposingText"", [])  AssignmentExpression(=, [VariableReference(final Editable content, []), Expression(getEditable(), [])])    VariableReference(final Editable content, [])    Expression(getEditable(), [])  AssignmentExpression(=, [VariableReference(if (content !, []), Expression(null) {, [])])    VariableReference(if (content !, [])    Expression(null) {, [])  Statement(beginBatchEdit(), [])  Statement(removeComposingSpans(content), [])  Statement(// Note: sendCurrentText does nothing unless mDummyMode is set, [])  Statement(sendCurrentText(), [])  Statement(endBatchEdit(), [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG), []), MethodCall(Log.v(TAG, ""finishComposingText""), [VariableReference(Log, []), Expression(TAG, []), Expression(""finishComposingText"", [])]), AssignmentExpression(=, [VariableReference(final Editable content, []), Expression(getEditable(), [])]), AssignmentExpression(=, [VariableReference(if (content !, []), Expression(null) {, [])]), Statement(beginBatchEdit(), []), Statement(removeComposingSpans(content), []), Statement(// Note: sendCurrentText does nothing unless mFallbackMode is set, []), Statement(sendCurrentText(), []), Statement(endBatchEdit(), []), Statement(endComposingRegionEditInternal(), []), Statement(}, []), Statement(return true, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG), [])  MethodCall(Log.v(TAG, ""finishComposingText""), [VariableReference(Log, []), Expression(TAG, []), Expression(""finishComposingText"", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""finishComposingText"", [])  AssignmentExpression(=, [VariableReference(final Editable content, []), Expression(getEditable(), [])])    VariableReference(final Editable content, [])    Expression(getEditable(), [])  AssignmentExpression(=, [VariableReference(if (content !, []), Expression(null) {, [])])    VariableReference(if (content !, [])    Expression(null) {, [])  Statement(beginBatchEdit(), [])  Statement(removeComposingSpans(content), [])  Statement(// Note: sendCurrentText does nothing unless mFallbackMode is set, [])  Statement(sendCurrentText(), [])  Statement(endBatchEdit(), [])  Statement(endComposingRegionEditInternal(), [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])",1,"/**
 * The default implementation removes the composing state from the
 * current editable text.  In addition, only if dummy mode, a key event is
 * sent for the new text and the current editable buffer cleared.
 */
","/**
 * The default implementation removes the composing state from the
 * current editable text.  In addition, only if fallback mode, a key event is
 * sent for the new text and the current editable buffer cleared.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,"3, 4",0,"A new statement `endComposingRegionEditInternal()` has been added under the `if (content != null)` control dependency block, and the comment about `mDummyMode` was changed to `mFallbackMode`. Therefore, the code change types are 3 and 4.","The addition of `endComposingRegionEditInternal()` and the comment change does not directly affect the return value or cause different exceptions. Therefore, the CI type is 0."
"<android.view.View: boolean awakenScrollBars(int,boolean)>",22,23,"<android.view.View: boolean awakenScrollBars(int,boolean)>","<android.view.View: boolean awakenScrollBars(int,boolean)>",0,"{
    final ScrollabilityCache scrollCache = mScrollCache;
    if (scrollCache == null || !scrollCache.fadeScrollBars) {
        return false;
    }
    if (scrollCache.scrollBar == null) {
        scrollCache.scrollBar = new ScrollBarDrawable();
    }
    if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
        if (invalidate) {
            // Invalidate to show the scrollbars
            postInvalidateOnAnimation();
        }
        if (scrollCache.state == ScrollabilityCache.OFF) {
            // FIXME: this is copied from WindowManagerService.
            // We should get this value from the system when it
            // is possible to do so.
            final int KEY_REPEAT_FIRST_DELAY = 750;
            startDelay = Math.max(KEY_REPEAT_FIRST_DELAY, startDelay);
        }
        // Tell mScrollCache when we should start fading. This may
        // extend the fade start time if one was already scheduled
        long fadeStartTime = AnimationUtils.currentAnimationTimeMillis() + startDelay;
        scrollCache.fadeStartTime = fadeStartTime;
        scrollCache.state = ScrollabilityCache.ON;
        // Schedule our fader to run, unscheduling any old ones first
        if (mAttachInfo != null) {
            mAttachInfo.mHandler.removeCallbacks(scrollCache);
            mAttachInfo.mHandler.postAtTime(scrollCache, fadeStartTime);
        }
        return true;
    }
    return false;
}","{
    final ScrollabilityCache scrollCache = mScrollCache;
    if (scrollCache == null || !scrollCache.fadeScrollBars) {
        return false;
    }
    if (scrollCache.scrollBar == null) {
        scrollCache.scrollBar = new ScrollBarDrawable();
        scrollCache.scrollBar.setCallback(this);
        scrollCache.scrollBar.setState(getDrawableState());
    }
    if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
        if (invalidate) {
            // Invalidate to show the scrollbars
            postInvalidateOnAnimation();
        }
        if (scrollCache.state == ScrollabilityCache.OFF) {
            // FIXME: this is copied from WindowManagerService.
            // We should get this value from the system when it
            // is possible to do so.
            final int KEY_REPEAT_FIRST_DELAY = 750;
            startDelay = Math.max(KEY_REPEAT_FIRST_DELAY, startDelay);
        }
        // Tell mScrollCache when we should start fading. This may
        // extend the fade start time if one was already scheduled
        long fadeStartTime = AnimationUtils.currentAnimationTimeMillis() + startDelay;
        scrollCache.fadeStartTime = fadeStartTime;
        scrollCache.state = ScrollabilityCache.ON;
        // Schedule our fader to run, unscheduling any old ones first
        if (mAttachInfo != null) {
            mAttachInfo.mHandler.removeCallbacks(scrollCache);
            mAttachInfo.mHandler.postAtTime(scrollCache, fadeStartTime);
        }
        return true;
    }
    return false;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final ScrollabilityCache scrollCache, []), Expression(mScrollCache, [])]), AssignmentExpression(=, [VariableReference(if (scrollCache, []), Expression(, [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (scrollCache.scrollBar, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(scrollCache.scrollBar, []), Expression(new ScrollBarDrawable(), [])]), Statement(}, []), Statement(if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {, []), Statement(if (invalidate) {, []), Statement(// Invalidate to show the scrollbars, []), Statement(postInvalidateOnAnimation(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (scrollCache.state, []), Expression(, [])]), Statement(// FIXME: this is copied from WindowManagerService., []), Statement(// We should get this value from the system when it, []), Statement(// is possible to do so., []), AssignmentExpression(=, [VariableReference(final int KEY_REPEAT_FIRST_DELAY, []), Expression(750, [])]), AssignmentExpression(=, [VariableReference(startDelay, []), Expression(Math.max(KEY_REPEAT_FIRST_DELAY, startDelay), [])]), Statement(}, []), Statement(// Tell mScrollCache when we should start fading. This may, []), Statement(// extend the fade start time if one was already scheduled, []), AssignmentExpression(=, [VariableReference(long fadeStartTime, []), Expression(AnimationUtils.currentAnimationTimeMillis() + startDelay, [])]), AssignmentExpression(=, [VariableReference(scrollCache.fadeStartTime, []), Expression(fadeStartTime, [])]), AssignmentExpression(=, [VariableReference(scrollCache.state, []), Expression(ScrollabilityCache.ON, [])]), Statement(// Schedule our fader to run, unscheduling any old ones first, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])]), Statement(}, []), Statement(return true, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final ScrollabilityCache scrollCache, []), Expression(mScrollCache, [])])    VariableReference(final ScrollabilityCache scrollCache, [])    Expression(mScrollCache, [])  AssignmentExpression(=, [VariableReference(if (scrollCache, []), Expression(, [])])    VariableReference(if (scrollCache, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (scrollCache.scrollBar, []), Expression(, [])])    VariableReference(if (scrollCache.scrollBar, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(scrollCache.scrollBar, []), Expression(new ScrollBarDrawable(), [])])    VariableReference(scrollCache.scrollBar, [])    Expression(new ScrollBarDrawable(), [])  Statement(}, [])  Statement(if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {, [])  Statement(if (invalidate) {, [])  Statement(// Invalidate to show the scrollbars, [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (scrollCache.state, []), Expression(, [])])    VariableReference(if (scrollCache.state, [])    Expression(, [])  Statement(// FIXME: this is copied from WindowManagerService., [])  Statement(// We should get this value from the system when it, [])  Statement(// is possible to do so., [])  AssignmentExpression(=, [VariableReference(final int KEY_REPEAT_FIRST_DELAY, []), Expression(750, [])])    VariableReference(final int KEY_REPEAT_FIRST_DELAY, [])    Expression(750, [])  AssignmentExpression(=, [VariableReference(startDelay, []), Expression(Math.max(KEY_REPEAT_FIRST_DELAY, startDelay), [])])    VariableReference(startDelay, [])    Expression(Math.max(KEY_REPEAT_FIRST_DELAY, startDelay), [])  Statement(}, [])  Statement(// Tell mScrollCache when we should start fading. This may, [])  Statement(// extend the fade start time if one was already scheduled, [])  AssignmentExpression(=, [VariableReference(long fadeStartTime, []), Expression(AnimationUtils.currentAnimationTimeMillis() + startDelay, [])])    VariableReference(long fadeStartTime, [])    Expression(AnimationUtils.currentAnimationTimeMillis() + startDelay, [])  AssignmentExpression(=, [VariableReference(scrollCache.fadeStartTime, []), Expression(fadeStartTime, [])])    VariableReference(scrollCache.fadeStartTime, [])    Expression(fadeStartTime, [])  AssignmentExpression(=, [VariableReference(scrollCache.state, []), Expression(ScrollabilityCache.ON, [])])    VariableReference(scrollCache.state, [])    Expression(ScrollabilityCache.ON, [])  Statement(// Schedule our fader to run, unscheduling any old ones first, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo !, [])    Expression(null) {, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(final ScrollabilityCache scrollCache, []), Expression(mScrollCache, [])]), AssignmentExpression(=, [VariableReference(if (scrollCache, []), Expression(, [])]), Statement(return false, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (scrollCache.scrollBar, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(scrollCache.scrollBar, []), Expression(new ScrollBarDrawable(), [])]), Statement(}, []), Statement(if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {, []), Statement(if (invalidate) {, []), Statement(// Invalidate to show the scrollbars, []), Statement(postInvalidateOnAnimation(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (scrollCache.state, []), Expression(, [])]), Statement(// FIXME: this is copied from WindowManagerService., []), Statement(// We should get this value from the system when it, []), Statement(// is possible to do so., []), AssignmentExpression(=, [VariableReference(final int KEY_REPEAT_FIRST_DELAY, []), Expression(750, [])]), AssignmentExpression(=, [VariableReference(startDelay, []), Expression(Math.max(KEY_REPEAT_FIRST_DELAY, startDelay), [])]), Statement(}, []), Statement(// Tell mScrollCache when we should start fading. This may, []), Statement(// extend the fade start time if one was already scheduled, []), AssignmentExpression(=, [VariableReference(long fadeStartTime, []), Expression(AnimationUtils.currentAnimationTimeMillis() + startDelay, [])]), AssignmentExpression(=, [VariableReference(scrollCache.fadeStartTime, []), Expression(fadeStartTime, [])]), AssignmentExpression(=, [VariableReference(scrollCache.state, []), Expression(ScrollabilityCache.ON, [])]), Statement(// Schedule our fader to run, unscheduling any old ones first, []), AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])]), Statement(}, []), Statement(return true, []), Statement(}, []), Statement(return false, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(final ScrollabilityCache scrollCache, []), Expression(mScrollCache, [])])    VariableReference(final ScrollabilityCache scrollCache, [])    Expression(mScrollCache, [])  AssignmentExpression(=, [VariableReference(if (scrollCache, []), Expression(, [])])    VariableReference(if (scrollCache, [])    Expression(, [])  Statement(return false, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (scrollCache.scrollBar, []), Expression(, [])])    VariableReference(if (scrollCache.scrollBar, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(scrollCache.scrollBar, []), Expression(new ScrollBarDrawable(), [])])    VariableReference(scrollCache.scrollBar, [])    Expression(new ScrollBarDrawable(), [])  Statement(}, [])  Statement(if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {, [])  Statement(if (invalidate) {, [])  Statement(// Invalidate to show the scrollbars, [])  Statement(postInvalidateOnAnimation(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (scrollCache.state, []), Expression(, [])])    VariableReference(if (scrollCache.state, [])    Expression(, [])  Statement(// FIXME: this is copied from WindowManagerService., [])  Statement(// We should get this value from the system when it, [])  Statement(// is possible to do so., [])  AssignmentExpression(=, [VariableReference(final int KEY_REPEAT_FIRST_DELAY, []), Expression(750, [])])    VariableReference(final int KEY_REPEAT_FIRST_DELAY, [])    Expression(750, [])  AssignmentExpression(=, [VariableReference(startDelay, []), Expression(Math.max(KEY_REPEAT_FIRST_DELAY, startDelay), [])])    VariableReference(startDelay, [])    Expression(Math.max(KEY_REPEAT_FIRST_DELAY, startDelay), [])  Statement(}, [])  Statement(// Tell mScrollCache when we should start fading. This may, [])  Statement(// extend the fade start time if one was already scheduled, [])  AssignmentExpression(=, [VariableReference(long fadeStartTime, []), Expression(AnimationUtils.currentAnimationTimeMillis() + startDelay, [])])    VariableReference(long fadeStartTime, [])    Expression(AnimationUtils.currentAnimationTimeMillis() + startDelay, [])  AssignmentExpression(=, [VariableReference(scrollCache.fadeStartTime, []), Expression(fadeStartTime, [])])    VariableReference(scrollCache.fadeStartTime, [])    Expression(fadeStartTime, [])  AssignmentExpression(=, [VariableReference(scrollCache.state, []), Expression(ScrollabilityCache.ON, [])])    VariableReference(scrollCache.state, [])    Expression(ScrollabilityCache.ON, [])  Statement(// Schedule our fader to run, unscheduling any old ones first, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo !, []), Expression(null) {, [])])    VariableReference(if (mAttachInfo !, [])    Expression(null) {, [])  Statement(}, [])  Statement(return true, [])  Statement(}, [])  Statement(return false, [])  Statement(}, [])",1,"/**
 * <p>
 * Trigger the scrollbars to draw. When invoked this method starts an
 * animation to fade the scrollbars out after a fixed delay. If a subclass
 * provides animated scrolling, the start delay should equal the duration of
 * the scrolling animation.
 * </p>
 *
 * <p>
 * The animation starts only if at least one of the scrollbars is enabled,
 * as specified by {@link #isHorizontalScrollBarEnabled()} and
 * {@link #isVerticalScrollBarEnabled()}. When the animation is started,
 * this method returns true, and false otherwise. If the animation is
 * started, this method calls {@link #invalidate()} if the invalidate parameter
 * is set to true; in that case the caller
 * should not call {@link #invalidate()}.
 * </p>
 *
 * <p>
 * This method should be invoked everytime a subclass directly updates the
 * scroll parameters.
 * </p>
 *
 * @param startDelay the delay, in milliseconds, after which the animation
 * should start; when the delay is 0, the animation starts
 * immediately
 *
 * @param invalidate Wheter this method should call invalidate
 *
 * @return true if the animation is played, false otherwise
 *
 * @see #scrollBy(int, int)
 * @see #scrollTo(int, int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
","/**
 * <p>
 * Trigger the scrollbars to draw. When invoked this method starts an
 * animation to fade the scrollbars out after a fixed delay. If a subclass
 * provides animated scrolling, the start delay should equal the duration of
 * the scrolling animation.
 * </p>
 *
 * <p>
 * The animation starts only if at least one of the scrollbars is enabled,
 * as specified by {@link #isHorizontalScrollBarEnabled()} and
 * {@link #isVerticalScrollBarEnabled()}. When the animation is started,
 * this method returns true, and false otherwise. If the animation is
 * started, this method calls {@link #invalidate()} if the invalidate parameter
 * is set to true; in that case the caller
 * should not call {@link #invalidate()}.
 * </p>
 *
 * <p>
 * This method should be invoked every time a subclass directly updates the
 * scroll parameters.
 * </p>
 *
 * @param startDelay the delay, in milliseconds, after which the animation
 * should start; when the delay is 0, the animation starts
 * immediately
 *
 * @param invalidate Whether this method should call invalidate
 *
 * @return true if the animation is played, false otherwise
 *
 * @see #scrollBy(int, int)
 * @see #scrollTo(int, int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
",-1,,,-1,-1,-1,-1,-1,4,0,"3, 4",0,"A new ScrollBarDrawable is created in the case where `scrollCache.scrollBar` is null, and additional method calls (`setCallback(this)` and `setState(getDrawableState())`) are invoked on the `scrollCache.scrollBar` object. This indicates the control dependency and other statement changes, so the code change type is 3, 4.","None of the code changes introduced will lead to different return values or exception handling behaviors in the given method, so the CI type is 0."
<android.preference.Preference: int compareTo(Preference)>,18,19,<android.preference.Preference: int compareTo(Preference)>,<android.preference.Preference: int compareTo(Preference)>,0,"{
    if (mOrder != DEFAULT_ORDER || (mOrder == DEFAULT_ORDER && another.mOrder != DEFAULT_ORDER)) {
        // Do order comparison
        return mOrder - another.mOrder;
    } else if (mTitle == null) {
        return 1;
    } else if (another.mTitle == null) {
        return -1;
    } else {
        // Do name comparison
        return CharSequences.compareToIgnoreCase(mTitle, another.mTitle);
    }
}","{
    if (mOrder != DEFAULT_ORDER || (mOrder == DEFAULT_ORDER && another.mOrder != DEFAULT_ORDER)) {
        // Do order comparison
        return mOrder - another.mOrder;
    } else if (mTitle == another.mTitle) {
        // If titles are null or share same object comparison
        return 0;
    } else if (mTitle == null) {
        return 1;
    } else if (another.mTitle == null) {
        return -1;
    } else {
        // Do name comparison
        return CharSequences.compareToIgnoreCase(mTitle, another.mTitle);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOrder !, []), Expression(DEFAULT_ORDER || (mOrder, [])]), Statement(// Do order comparison, []), Statement(return mOrder - another.mOrder, []), AssignmentExpression(=, [VariableReference(} else if (mTitle, []), Expression(, [])]), Statement(return 1, []), AssignmentExpression(=, [VariableReference(} else if (another.mTitle, []), Expression(, [])]), Statement(return -1, []), Statement(} else {, []), Statement(// Do name comparison, []), MethodCall(return CharSequences.compareToIgnoreCase(mTitle, another.mTitle), [VariableReference(return CharSequences, []), Expression(mTitle, []), Expression(another.mTitle, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOrder !, []), Expression(DEFAULT_ORDER || (mOrder, [])])    VariableReference(if (mOrder !, [])    Expression(DEFAULT_ORDER || (mOrder, [])  Statement(// Do order comparison, [])  Statement(return mOrder - another.mOrder, [])  AssignmentExpression(=, [VariableReference(} else if (mTitle, []), Expression(, [])])    VariableReference(} else if (mTitle, [])    Expression(, [])  Statement(return 1, [])  AssignmentExpression(=, [VariableReference(} else if (another.mTitle, []), Expression(, [])])    VariableReference(} else if (another.mTitle, [])    Expression(, [])  Statement(return -1, [])  Statement(} else {, [])  Statement(// Do name comparison, [])  MethodCall(return CharSequences.compareToIgnoreCase(mTitle, another.mTitle), [VariableReference(return CharSequences, []), Expression(mTitle, []), Expression(another.mTitle, [])])    VariableReference(return CharSequences, [])    Expression(mTitle, [])    Expression(another.mTitle, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mOrder !, []), Expression(DEFAULT_ORDER || (mOrder, [])]), Statement(// Do order comparison, []), Statement(return mOrder - another.mOrder, []), AssignmentExpression(=, [VariableReference(} else if (mTitle, []), Expression(, [])]), Statement(// If titles are null or share same object comparison, []), Statement(return 0, []), AssignmentExpression(=, [VariableReference(} else if (mTitle, []), Expression(, [])]), Statement(return 1, []), AssignmentExpression(=, [VariableReference(} else if (another.mTitle, []), Expression(, [])]), Statement(return -1, []), Statement(} else {, []), Statement(// Do name comparison, []), MethodCall(return CharSequences.compareToIgnoreCase(mTitle, another.mTitle), [VariableReference(return CharSequences, []), Expression(mTitle, []), Expression(another.mTitle, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mOrder !, []), Expression(DEFAULT_ORDER || (mOrder, [])])    VariableReference(if (mOrder !, [])    Expression(DEFAULT_ORDER || (mOrder, [])  Statement(// Do order comparison, [])  Statement(return mOrder - another.mOrder, [])  AssignmentExpression(=, [VariableReference(} else if (mTitle, []), Expression(, [])])    VariableReference(} else if (mTitle, [])    Expression(, [])  Statement(// If titles are null or share same object comparison, [])  Statement(return 0, [])  AssignmentExpression(=, [VariableReference(} else if (mTitle, []), Expression(, [])])    VariableReference(} else if (mTitle, [])    Expression(, [])  Statement(return 1, [])  AssignmentExpression(=, [VariableReference(} else if (another.mTitle, []), Expression(, [])])    VariableReference(} else if (another.mTitle, [])    Expression(, [])  Statement(return -1, [])  Statement(} else {, [])  Statement(// Do name comparison, [])  MethodCall(return CharSequences.compareToIgnoreCase(mTitle, another.mTitle), [VariableReference(return CharSequences, []), Expression(mTitle, []), Expression(another.mTitle, [])])    VariableReference(return CharSequences, [])    Expression(mTitle, [])    Expression(another.mTitle, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Compares Preference objects based on order (if set), otherwise alphabetically on the titles.
 *
 * @param another The Preference to compare to this one.
 * @return 0 if the same; less than 0 if this Preference sorts ahead of <var>another</var>;
 * greater than 0 if this Preference sorts after <var>another</var>.
 */
","/**
 * Compares Preference objects based on order (if set), otherwise alphabetically on the titles.
 *
 * @param another The Preference to compare to this one.
 * @return 0 if the same; less than 0 if this Preference sorts ahead of <var>another</var>;
 * greater than 0 if this Preference sorts after <var>another</var>.
 */
",-1,,,-1,-1,-1,-1,-1,"1,3",1,"1,3",1,The added condition `else if (mTitle == another.mTitle)` and the return statement `return 0` introduce a new comparison logic when `mTitle` and `another.mTitle` are the same object or both are null. This means the control dependency and return statement both changed. The code change type includes 1 and 3.,"The new condition potentially alters the logic of comparison when `mTitle` and `another.mTitle` are the same object, leading the method to return `0` instead of comparing the titles. This could lead to different return values, so the CI type is 1."
<android.text.PrecomputedText.Params.Builder: Params build()>,32,33,,,,"{
    return new Params(mPaint, mTextDir, mBreakStrategy, mHyphenationFrequency);
}","{
    return new Params(mPaint, mLineBreakConfig, mTextDir, mBreakStrategy, mHyphenationFrequency);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return new Params(mPaint, mTextDir, mBreakStrategy, mHyphenationFrequency), []), Statement(}, [])])  Statement({, [])  Statement(return new Params(mPaint, mTextDir, mBreakStrategy, mHyphenationFrequency), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return new Params(mPaint, mLineBreakConfig, mTextDir, mBreakStrategy, mHyphenationFrequency), []), Statement(}, [])])  Statement({, [])  Statement(return new Params(mPaint, mLineBreakConfig, mTextDir, mBreakStrategy, mHyphenationFrequency), [])  Statement(}, [])",1,"/**
 * Build the {@link Params}.
 *
 * @return the layout parameter
 */
","/**
 * Build the {@link Params}.
 *
 * @return the layout parameter
 */
",0,[@NonNull],[@NonNull],0,,,,,"1,5",1,"1,5",1,"The parameters in the return statement have changed by adding an extra parameter `mLineBreakConfig`. The `Params` object now requires this additional parameter, so the code change types are 1 (Return statement changed) and 5 (Dependent API changed).","Since the return statement now constructs a `Params` object with an additional parameter, this can lead to the API potentially returning a different instance of `Params`. Therefore, it could cause different return values or types, making the CI type 1."
<android.webkit.WebSettings: String getDatabasePath()>,15,16,<android.webkit.WebSettings: String getDatabasePath()>,<android.webkit.WebSettings: String getDatabasePath()>,0,"{
    return mDatabasePath;
}","{
    throw new MustOverrideException();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return mDatabasePath, []), Statement(}, [])])  Statement({, [])  Statement(return mDatabasePath, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(throw new MustOverrideException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new MustOverrideException(), [])  Statement(}, [])",1,"/**
 * Return the path to where database storage API databases are saved for
 * the current WebView.
 * @return the String path to the database storage API databases.
 */
","/**
 * Gets the path to where database storage API databases are saved for
 * the current WebView.
 *
 * @return the String path to the database storage API databases
 */
",-1,,,-1,-1,-1,-1,-1,"1,2","1,2","1,2","1,2","The return statement that returned `mDatabasePath` has been replaced by a new exception handling statement `throw new MustOverrideException()`. Thus, the code change types are 1 and 2.","The change can lead to a different return value (from `mDatabasePath` to throwing an exception) and different exception handling (now throwing `MustOverrideException`). Thus, the CI types are 1 and 2."
<android.hardware.camera2.legacy.LegacyCameraDevice: void finalize()>,23,24,<android.hardware.camera2.legacy.LegacyCameraDevice: void finalize()>,<android.hardware.camera2.legacy.LegacyCameraDevice: void finalize()>,0,"{
    try {
        close();
    } catch (CameraRuntimeException e) {
        Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage());
    } finally {
        super.finalize();
    }
}","{
    try {
        close();
    } catch (ServiceSpecificException e) {
        Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage());
    } finally {
        super.finalize();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), Statement(close(), []), Statement(} catch (CameraRuntimeException e) {, []), MethodCall(Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage()), [VariableReference(Log, []), Expression(TAG, []), Expression(""Got error while trying to finalize, []), Expression(ignoring: "" + e.getMessage(), [])]), Statement(} finally {, []), MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  Statement(close(), [])  Statement(} catch (CameraRuntimeException e) {, [])  MethodCall(Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage()), [VariableReference(Log, []), Expression(TAG, []), Expression(""Got error while trying to finalize, []), Expression(ignoring: "" + e.getMessage(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Got error while trying to finalize, [])    Expression(ignoring: "" + e.getMessage(), [])  Statement(} finally {, [])  MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), Statement(close(), []), Statement(} catch (ServiceSpecificException e) {, []), MethodCall(Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage()), [VariableReference(Log, []), Expression(TAG, []), Expression(""Got error while trying to finalize, []), Expression(ignoring: "" + e.getMessage(), [])]), Statement(} finally {, []), MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  Statement(close(), [])  Statement(} catch (ServiceSpecificException e) {, [])  MethodCall(Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage()), [VariableReference(Log, []), Expression(TAG, []), Expression(""Got error while trying to finalize, []), Expression(ignoring: "" + e.getMessage(), [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Got error while trying to finalize, [])    Expression(ignoring: "" + e.getMessage(), [])  Statement(} finally {, [])  MethodCall(super.finalize(), [VariableReference(super, []), Expression(, [])])    VariableReference(super, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"2,4",2,2,2,"The exception handling statement has been changed from catching CameraRuntimeException to catching ServiceSpecificException, so the change type is 2.","The type of exceptions caught has changed, which results in different exception handling. This can potentially impact the behavior of the method, leading to a CI type of 2."
<android.widget.NumberPicker: void onDraw(Canvas)>,15,16,<android.widget.NumberPicker: void onDraw(Canvas)>,<android.widget.NumberPicker: void onDraw(Canvas)>,0,"{
    if (mSelectorWheelState == SELECTOR_WHEEL_STATE_NONE) {
        return;
    }
    float x = (mRight - mLeft) / 2;
    float y = mCurrentScrollOffset;
    final int restoreCount = canvas.save();
    if (mSelectorWheelState == SELECTOR_WHEEL_STATE_SMALL) {
        Rect clipBounds = canvas.getClipBounds();
        clipBounds.inset(0, mSelectorElementHeight);
        canvas.clipRect(clipBounds);
    }
    // draw the selector wheel
    int[] selectorIndices = mSelectorIndices;
    for (int i = 0; i < selectorIndices.length; i++) {
        int selectorIndex = selectorIndices[i];
        String scrollSelectorValue = mSelectorIndexToStringCache.get(selectorIndex);
        // value intermixed with the new one.
        if (i != SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() != VISIBLE) {
            canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint);
        }
        y += mSelectorElementHeight;
    }
    // draw the selection dividers (only if scrolling and drawable specified)
    if (mSelectionDivider != null) {
        // draw the top divider
        int topOfTopDivider = (getHeight() - mSelectorElementHeight - mSelectionDividerHeight) / 2;
        int bottomOfTopDivider = topOfTopDivider + mSelectionDividerHeight;
        mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider);
        mSelectionDivider.draw(canvas);
        // draw the bottom divider
        int topOfBottomDivider = topOfTopDivider + mSelectorElementHeight;
        int bottomOfBottomDivider = bottomOfTopDivider + mSelectorElementHeight;
        mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider);
        mSelectionDivider.draw(canvas);
    }
    canvas.restoreToCount(restoreCount);
}","{
    if (!mHasSelectorWheel) {
        super.onDraw(canvas);
        return;
    }
    float x = (mRight - mLeft) / 2;
    float y = mCurrentScrollOffset;
    // draw the virtual buttons pressed state if needed
    if (mVirtualButtonPressedDrawable != null && mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
        if (mDecrementVirtualButtonPressed) {
            mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
            mVirtualButtonPressedDrawable.setBounds(0, 0, mRight, mTopSelectionDividerTop);
            mVirtualButtonPressedDrawable.draw(canvas);
        }
        if (mIncrementVirtualButtonPressed) {
            mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
            mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, mRight, mBottom);
            mVirtualButtonPressedDrawable.draw(canvas);
        }
    }
    // draw the selector wheel
    int[] selectorIndices = mSelectorIndices;
    for (int i = 0; i < selectorIndices.length; i++) {
        int selectorIndex = selectorIndices[i];
        String scrollSelectorValue = mSelectorIndexToStringCache.get(selectorIndex);
        // with the new one.
        if (i != SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() != VISIBLE) {
            canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint);
        }
        y += mSelectorElementHeight;
    }
    // draw the selection dividers
    if (mSelectionDivider != null) {
        // draw the top divider
        int topOfTopDivider = mTopSelectionDividerTop;
        int bottomOfTopDivider = topOfTopDivider + mSelectionDividerHeight;
        mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider);
        mSelectionDivider.draw(canvas);
        // draw the bottom divider
        int bottomOfBottomDivider = mBottomSelectionDividerBottom;
        int topOfBottomDivider = bottomOfBottomDivider - mSelectionDividerHeight;
        mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider);
        mSelectionDivider.draw(canvas);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mSelectorWheelState, []), Expression(, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(float x, []), Expression((mRight - mLeft) / 2, [])]), AssignmentExpression(=, [VariableReference(float y, []), Expression(mCurrentScrollOffset, [])]), AssignmentExpression(=, [VariableReference(final int restoreCount, []), Expression(canvas.save(), [])]), AssignmentExpression(=, [VariableReference(if (mSelectorWheelState, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(Rect clipBounds, []), Expression(canvas.getClipBounds(), [])]), MethodCall(clipBounds.inset(0, mSelectorElementHeight), [VariableReference(clipBounds, []), Expression(0, []), Expression(mSelectorElementHeight, [])]), MethodCall(canvas.clipRect(clipBounds), [VariableReference(canvas, []), Expression(clipBounds, [])]), Statement(}, []), Statement(// draw the selector wheel, []), AssignmentExpression(=, [VariableReference(int[] selectorIndices, []), Expression(mSelectorIndices, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < selectorIndices.length, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(int selectorIndex, []), Expression(selectorIndices[i], [])]), AssignmentExpression(=, [VariableReference(String scrollSelectorValue, []), Expression(mSelectorIndexToStringCache.get(selectorIndex), [])]), Statement(// value intermixed with the new one., []), AssignmentExpression(=, [VariableReference(if (i !, []), Expression(SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() !, [])]), MethodCall(canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint), [VariableReference(canvas, []), Expression(scrollSelectorValue, []), Expression(x, []), Expression(y, []), Expression(mSelectorWheelPaint, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(y +, []), Expression(mSelectorElementHeight, [])]), Statement(}, []), Statement(// draw the selection dividers (only if scrolling and drawable specified), []), AssignmentExpression(=, [VariableReference(if (mSelectionDivider !, []), Expression(null) {, [])]), Statement(// draw the top divider, []), AssignmentExpression(=, [VariableReference(int topOfTopDivider, []), Expression((getHeight() - mSelectorElementHeight - mSelectionDividerHeight) / 2, [])]), AssignmentExpression(=, [VariableReference(int bottomOfTopDivider, []), Expression(topOfTopDivider + mSelectionDividerHeight, [])]), MethodCall(mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfTopDivider, []), Expression(mRight, []), Expression(bottomOfTopDivider, [])]), MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])]), Statement(// draw the bottom divider, []), AssignmentExpression(=, [VariableReference(int topOfBottomDivider, []), Expression(topOfTopDivider + mSelectorElementHeight, [])]), AssignmentExpression(=, [VariableReference(int bottomOfBottomDivider, []), Expression(bottomOfTopDivider + mSelectorElementHeight, [])]), MethodCall(mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfBottomDivider, []), Expression(mRight, []), Expression(bottomOfBottomDivider, [])]), MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])]), Statement(}, []), MethodCall(canvas.restoreToCount(restoreCount), [VariableReference(canvas, []), Expression(restoreCount, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mSelectorWheelState, []), Expression(, [])])    VariableReference(if (mSelectorWheelState, [])    Expression(, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(float x, []), Expression((mRight - mLeft) / 2, [])])    VariableReference(float x, [])    Expression((mRight - mLeft) / 2, [])  AssignmentExpression(=, [VariableReference(float y, []), Expression(mCurrentScrollOffset, [])])    VariableReference(float y, [])    Expression(mCurrentScrollOffset, [])  AssignmentExpression(=, [VariableReference(final int restoreCount, []), Expression(canvas.save(), [])])    VariableReference(final int restoreCount, [])    Expression(canvas.save(), [])  AssignmentExpression(=, [VariableReference(if (mSelectorWheelState, []), Expression(, [])])    VariableReference(if (mSelectorWheelState, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(Rect clipBounds, []), Expression(canvas.getClipBounds(), [])])    VariableReference(Rect clipBounds, [])    Expression(canvas.getClipBounds(), [])  MethodCall(clipBounds.inset(0, mSelectorElementHeight), [VariableReference(clipBounds, []), Expression(0, []), Expression(mSelectorElementHeight, [])])    VariableReference(clipBounds, [])    Expression(0, [])    Expression(mSelectorElementHeight, [])  MethodCall(canvas.clipRect(clipBounds), [VariableReference(canvas, []), Expression(clipBounds, [])])    VariableReference(canvas, [])    Expression(clipBounds, [])  Statement(}, [])  Statement(// draw the selector wheel, [])  AssignmentExpression(=, [VariableReference(int[] selectorIndices, []), Expression(mSelectorIndices, [])])    VariableReference(int[] selectorIndices, [])    Expression(mSelectorIndices, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < selectorIndices.length, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(int selectorIndex, []), Expression(selectorIndices[i], [])])    VariableReference(int selectorIndex, [])    Expression(selectorIndices[i], [])  AssignmentExpression(=, [VariableReference(String scrollSelectorValue, []), Expression(mSelectorIndexToStringCache.get(selectorIndex), [])])    VariableReference(String scrollSelectorValue, [])    Expression(mSelectorIndexToStringCache.get(selectorIndex), [])  Statement(// value intermixed with the new one., [])  AssignmentExpression(=, [VariableReference(if (i !, []), Expression(SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() !, [])])    VariableReference(if (i !, [])    Expression(SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() !, [])  MethodCall(canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint), [VariableReference(canvas, []), Expression(scrollSelectorValue, []), Expression(x, []), Expression(y, []), Expression(mSelectorWheelPaint, [])])    VariableReference(canvas, [])    Expression(scrollSelectorValue, [])    Expression(x, [])    Expression(y, [])    Expression(mSelectorWheelPaint, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(y +, []), Expression(mSelectorElementHeight, [])])    VariableReference(y +, [])    Expression(mSelectorElementHeight, [])  Statement(}, [])  Statement(// draw the selection dividers (only if scrolling and drawable specified), [])  AssignmentExpression(=, [VariableReference(if (mSelectionDivider !, []), Expression(null) {, [])])    VariableReference(if (mSelectionDivider !, [])    Expression(null) {, [])  Statement(// draw the top divider, [])  AssignmentExpression(=, [VariableReference(int topOfTopDivider, []), Expression((getHeight() - mSelectorElementHeight - mSelectionDividerHeight) / 2, [])])    VariableReference(int topOfTopDivider, [])    Expression((getHeight() - mSelectorElementHeight - mSelectionDividerHeight) / 2, [])  AssignmentExpression(=, [VariableReference(int bottomOfTopDivider, []), Expression(topOfTopDivider + mSelectionDividerHeight, [])])    VariableReference(int bottomOfTopDivider, [])    Expression(topOfTopDivider + mSelectionDividerHeight, [])  MethodCall(mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfTopDivider, []), Expression(mRight, []), Expression(bottomOfTopDivider, [])])    VariableReference(mSelectionDivider, [])    Expression(0, [])    Expression(topOfTopDivider, [])    Expression(mRight, [])    Expression(bottomOfTopDivider, [])  MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])])    VariableReference(mSelectionDivider, [])    Expression(canvas, [])  Statement(// draw the bottom divider, [])  AssignmentExpression(=, [VariableReference(int topOfBottomDivider, []), Expression(topOfTopDivider + mSelectorElementHeight, [])])    VariableReference(int topOfBottomDivider, [])    Expression(topOfTopDivider + mSelectorElementHeight, [])  AssignmentExpression(=, [VariableReference(int bottomOfBottomDivider, []), Expression(bottomOfTopDivider + mSelectorElementHeight, [])])    VariableReference(int bottomOfBottomDivider, [])    Expression(bottomOfTopDivider + mSelectorElementHeight, [])  MethodCall(mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfBottomDivider, []), Expression(mRight, []), Expression(bottomOfBottomDivider, [])])    VariableReference(mSelectionDivider, [])    Expression(0, [])    Expression(topOfBottomDivider, [])    Expression(mRight, [])    Expression(bottomOfBottomDivider, [])  MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])])    VariableReference(mSelectionDivider, [])    Expression(canvas, [])  Statement(}, [])  MethodCall(canvas.restoreToCount(restoreCount), [VariableReference(canvas, []), Expression(restoreCount, [])])    VariableReference(canvas, [])    Expression(restoreCount, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (!mHasSelectorWheel) {, []), MethodCall(super.onDraw(canvas), [VariableReference(super, []), Expression(canvas, [])]), Statement(return, []), Statement(}, []), AssignmentExpression(=, [VariableReference(float x, []), Expression((mRight - mLeft) / 2, [])]), AssignmentExpression(=, [VariableReference(float y, []), Expression(mCurrentScrollOffset, [])]), Statement(// draw the virtual buttons pressed state if needed, []), AssignmentExpression(=, [VariableReference(if (mVirtualButtonPressedDrawable !, []), Expression(null && mScrollState, [])]), Statement(if (mDecrementVirtualButtonPressed) {, []), MethodCall(mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(PRESSED_STATE_SET, [])]), MethodCall(mVirtualButtonPressedDrawable.setBounds(0, 0, mRight, mTopSelectionDividerTop), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(0, []), Expression(0, []), Expression(mRight, []), Expression(mTopSelectionDividerTop, [])]), MethodCall(mVirtualButtonPressedDrawable.draw(canvas), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(canvas, [])]), Statement(}, []), Statement(if (mIncrementVirtualButtonPressed) {, []), MethodCall(mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(PRESSED_STATE_SET, [])]), MethodCall(mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, mRight, mBottom), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(0, []), Expression(mBottomSelectionDividerBottom, []), Expression(mRight, []), Expression(mBottom, [])]), MethodCall(mVirtualButtonPressedDrawable.draw(canvas), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(canvas, [])]), Statement(}, []), Statement(}, []), Statement(// draw the selector wheel, []), AssignmentExpression(=, [VariableReference(int[] selectorIndices, []), Expression(mSelectorIndices, [])]), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < selectorIndices.length, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(int selectorIndex, []), Expression(selectorIndices[i], [])]), AssignmentExpression(=, [VariableReference(String scrollSelectorValue, []), Expression(mSelectorIndexToStringCache.get(selectorIndex), [])]), Statement(// with the new one., []), AssignmentExpression(=, [VariableReference(if (i !, []), Expression(SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() !, [])]), MethodCall(canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint), [VariableReference(canvas, []), Expression(scrollSelectorValue, []), Expression(x, []), Expression(y, []), Expression(mSelectorWheelPaint, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(y +, []), Expression(mSelectorElementHeight, [])]), Statement(}, []), Statement(// draw the selection dividers, []), AssignmentExpression(=, [VariableReference(if (mSelectionDivider !, []), Expression(null) {, [])]), Statement(// draw the top divider, []), AssignmentExpression(=, [VariableReference(int topOfTopDivider, []), Expression(mTopSelectionDividerTop, [])]), AssignmentExpression(=, [VariableReference(int bottomOfTopDivider, []), Expression(topOfTopDivider + mSelectionDividerHeight, [])]), MethodCall(mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfTopDivider, []), Expression(mRight, []), Expression(bottomOfTopDivider, [])]), MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])]), Statement(// draw the bottom divider, []), AssignmentExpression(=, [VariableReference(int bottomOfBottomDivider, []), Expression(mBottomSelectionDividerBottom, [])]), AssignmentExpression(=, [VariableReference(int topOfBottomDivider, []), Expression(bottomOfBottomDivider - mSelectionDividerHeight, [])]), MethodCall(mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfBottomDivider, []), Expression(mRight, []), Expression(bottomOfBottomDivider, [])]), MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (!mHasSelectorWheel) {, [])  MethodCall(super.onDraw(canvas), [VariableReference(super, []), Expression(canvas, [])])    VariableReference(super, [])    Expression(canvas, [])  Statement(return, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(float x, []), Expression((mRight - mLeft) / 2, [])])    VariableReference(float x, [])    Expression((mRight - mLeft) / 2, [])  AssignmentExpression(=, [VariableReference(float y, []), Expression(mCurrentScrollOffset, [])])    VariableReference(float y, [])    Expression(mCurrentScrollOffset, [])  Statement(// draw the virtual buttons pressed state if needed, [])  AssignmentExpression(=, [VariableReference(if (mVirtualButtonPressedDrawable !, []), Expression(null && mScrollState, [])])    VariableReference(if (mVirtualButtonPressedDrawable !, [])    Expression(null && mScrollState, [])  Statement(if (mDecrementVirtualButtonPressed) {, [])  MethodCall(mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(PRESSED_STATE_SET, [])])    VariableReference(mVirtualButtonPressedDrawable, [])    Expression(PRESSED_STATE_SET, [])  MethodCall(mVirtualButtonPressedDrawable.setBounds(0, 0, mRight, mTopSelectionDividerTop), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(0, []), Expression(0, []), Expression(mRight, []), Expression(mTopSelectionDividerTop, [])])    VariableReference(mVirtualButtonPressedDrawable, [])    Expression(0, [])    Expression(0, [])    Expression(mRight, [])    Expression(mTopSelectionDividerTop, [])  MethodCall(mVirtualButtonPressedDrawable.draw(canvas), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(canvas, [])])    VariableReference(mVirtualButtonPressedDrawable, [])    Expression(canvas, [])  Statement(}, [])  Statement(if (mIncrementVirtualButtonPressed) {, [])  MethodCall(mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(PRESSED_STATE_SET, [])])    VariableReference(mVirtualButtonPressedDrawable, [])    Expression(PRESSED_STATE_SET, [])  MethodCall(mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, mRight, mBottom), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(0, []), Expression(mBottomSelectionDividerBottom, []), Expression(mRight, []), Expression(mBottom, [])])    VariableReference(mVirtualButtonPressedDrawable, [])    Expression(0, [])    Expression(mBottomSelectionDividerBottom, [])    Expression(mRight, [])    Expression(mBottom, [])  MethodCall(mVirtualButtonPressedDrawable.draw(canvas), [VariableReference(mVirtualButtonPressedDrawable, []), Expression(canvas, [])])    VariableReference(mVirtualButtonPressedDrawable, [])    Expression(canvas, [])  Statement(}, [])  Statement(}, [])  Statement(// draw the selector wheel, [])  AssignmentExpression(=, [VariableReference(int[] selectorIndices, []), Expression(mSelectorIndices, [])])    VariableReference(int[] selectorIndices, [])    Expression(mSelectorIndices, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < selectorIndices.length, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(int selectorIndex, []), Expression(selectorIndices[i], [])])    VariableReference(int selectorIndex, [])    Expression(selectorIndices[i], [])  AssignmentExpression(=, [VariableReference(String scrollSelectorValue, []), Expression(mSelectorIndexToStringCache.get(selectorIndex), [])])    VariableReference(String scrollSelectorValue, [])    Expression(mSelectorIndexToStringCache.get(selectorIndex), [])  Statement(// with the new one., [])  AssignmentExpression(=, [VariableReference(if (i !, []), Expression(SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() !, [])])    VariableReference(if (i !, [])    Expression(SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() !, [])  MethodCall(canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint), [VariableReference(canvas, []), Expression(scrollSelectorValue, []), Expression(x, []), Expression(y, []), Expression(mSelectorWheelPaint, [])])    VariableReference(canvas, [])    Expression(scrollSelectorValue, [])    Expression(x, [])    Expression(y, [])    Expression(mSelectorWheelPaint, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(y +, []), Expression(mSelectorElementHeight, [])])    VariableReference(y +, [])    Expression(mSelectorElementHeight, [])  Statement(}, [])  Statement(// draw the selection dividers, [])  AssignmentExpression(=, [VariableReference(if (mSelectionDivider !, []), Expression(null) {, [])])    VariableReference(if (mSelectionDivider !, [])    Expression(null) {, [])  Statement(// draw the top divider, [])  AssignmentExpression(=, [VariableReference(int topOfTopDivider, []), Expression(mTopSelectionDividerTop, [])])    VariableReference(int topOfTopDivider, [])    Expression(mTopSelectionDividerTop, [])  AssignmentExpression(=, [VariableReference(int bottomOfTopDivider, []), Expression(topOfTopDivider + mSelectionDividerHeight, [])])    VariableReference(int bottomOfTopDivider, [])    Expression(topOfTopDivider + mSelectionDividerHeight, [])  MethodCall(mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfTopDivider, []), Expression(mRight, []), Expression(bottomOfTopDivider, [])])    VariableReference(mSelectionDivider, [])    Expression(0, [])    Expression(topOfTopDivider, [])    Expression(mRight, [])    Expression(bottomOfTopDivider, [])  MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])])    VariableReference(mSelectionDivider, [])    Expression(canvas, [])  Statement(// draw the bottom divider, [])  AssignmentExpression(=, [VariableReference(int bottomOfBottomDivider, []), Expression(mBottomSelectionDividerBottom, [])])    VariableReference(int bottomOfBottomDivider, [])    Expression(mBottomSelectionDividerBottom, [])  AssignmentExpression(=, [VariableReference(int topOfBottomDivider, []), Expression(bottomOfBottomDivider - mSelectionDividerHeight, [])])    VariableReference(int topOfBottomDivider, [])    Expression(bottomOfBottomDivider - mSelectionDividerHeight, [])  MethodCall(mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider), [VariableReference(mSelectionDivider, []), Expression(0, []), Expression(topOfBottomDivider, []), Expression(mRight, []), Expression(bottomOfBottomDivider, [])])    VariableReference(mSelectionDivider, [])    Expression(0, [])    Expression(topOfBottomDivider, [])    Expression(mRight, [])    Expression(bottomOfBottomDivider, [])  MethodCall(mSelectionDivider.draw(canvas), [VariableReference(mSelectionDivider, []), Expression(canvas, [])])    VariableReference(mSelectionDivider, [])    Expression(canvas, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"3,4",1,"The control dependency concerning the initial states (i.e., `mSelectorWheelState == SELECTOR_WHEEL_STATE_NONE` in the early implementation and `!mHasSelectorWheel` in the late implementation) has changed. Additionally, there is an added method call to `super.onDraw(canvas)` in the late implementation. Control structures and other related statements have also been significantly altered, so the change type is 3,4.","The change in control dependency (especially the introduction of `super.onDraw(canvas)`) could lead to different drawing behavior, affecting the final state of the canvas. This alteration could result in the method potentially returning different visual outputs, which induces CI, thus the CI type is 1."
<android.hardware.camera2.legacy.CameraDeviceUserShim: int createStream(OutputConfiguration)>,23,24,<android.hardware.camera2.legacy.CameraDeviceUserShim: int createStream(OutputConfiguration)>,<android.hardware.camera2.legacy.CameraDeviceUserShim: int createStream(OutputConfiguration)>,0,"{
    if (DEBUG) {
        Log.d(TAG, ""createStream called."");
    }
    if (mLegacyDevice.isClosed()) {
        Log.e(TAG, ""Cannot create stream, device has been closed."");
        return CameraBinderDecorator.ENODEV;
    }
    synchronized (mConfigureLock) {
        if (!mConfiguring) {
            Log.e(TAG, ""Cannot create stream, beginConfigure hasn't been called yet."");
            return CameraBinderDecorator.INVALID_OPERATION;
        }
        if (outputConfiguration.getRotation() != OutputConfiguration.ROTATION_0) {
            Log.e(TAG, ""Cannot create stream, stream rotation is not supported."");
            return CameraBinderDecorator.INVALID_OPERATION;
        }
        int id = ++mSurfaceIdCounter;
        mSurfaces.put(id, outputConfiguration.getSurface());
        return id;
    }
}","{
    if (DEBUG) {
        Log.d(TAG, ""createStream called."");
    }
    if (mLegacyDevice.isClosed()) {
        String err = ""Cannot create stream, device has been closed."";
        Log.e(TAG, err);
        throw new ServiceSpecificException(ICameraService.ERROR_DISCONNECTED, err);
    }
    synchronized (mConfigureLock) {
        if (!mConfiguring) {
            String err = ""Cannot create stream, beginConfigure hasn't been called yet."";
            Log.e(TAG, err);
            throw new ServiceSpecificException(ICameraService.ERROR_INVALID_OPERATION, err);
        }
        if (outputConfiguration.getRotation() != OutputConfiguration.ROTATION_0) {
            String err = ""Cannot create stream, stream rotation is not supported."";
            Log.e(TAG, err);
            throw new ServiceSpecificException(ICameraService.ERROR_ILLEGAL_ARGUMENT, err);
        }
        int id = ++mSurfaceIdCounter;
        mSurfaces.put(id, outputConfiguration.getSurface());
        return id;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""createStream called.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""createStream called."", [])]), Statement(}, []), MethodCall(if (mLegacyDevice.isClosed()), [VariableReference(if (mLegacyDevice, []), Expression(), [])]), MethodCall(Log.e(TAG, ""Cannot create stream, device has been closed.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create stream, []), Expression(device has been closed."", [])]), Statement(return CameraBinderDecorator.ENODEV, []), Statement(}, []), Statement(synchronized (mConfigureLock) {, []), Statement(if (!mConfiguring) {, []), MethodCall(Log.e(TAG, ""Cannot create stream, beginConfigure hasn't been called yet.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create stream, []), Expression(beginConfigure hasn't been called yet."", [])]), Statement(return CameraBinderDecorator.INVALID_OPERATION, []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (outputConfiguration.getRotation() !, []), Expression(OutputConfiguration.ROTATION_0) {, [])]), MethodCall(Log.e(TAG, ""Cannot create stream, stream rotation is not supported.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create stream, []), Expression(stream rotation is not supported."", [])]), Statement(return CameraBinderDecorator.INVALID_OPERATION, []), Statement(}, []), AssignmentExpression(=, [VariableReference(int id, []), Expression(++mSurfaceIdCounter, [])]), MethodCall(mSurfaces.put(id, outputConfiguration.getSurface()), [VariableReference(mSurfaces, []), Expression(id, []), Expression(outputConfiguration.getSurface(), [])]), Statement(return id, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""createStream called.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""createStream called."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""createStream called."", [])  Statement(}, [])  MethodCall(if (mLegacyDevice.isClosed()), [VariableReference(if (mLegacyDevice, []), Expression(), [])])    VariableReference(if (mLegacyDevice, [])    Expression(), [])  MethodCall(Log.e(TAG, ""Cannot create stream, device has been closed.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create stream, []), Expression(device has been closed."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create stream, [])    Expression(device has been closed."", [])  Statement(return CameraBinderDecorator.ENODEV, [])  Statement(}, [])  Statement(synchronized (mConfigureLock) {, [])  Statement(if (!mConfiguring) {, [])  MethodCall(Log.e(TAG, ""Cannot create stream, beginConfigure hasn't been called yet.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create stream, []), Expression(beginConfigure hasn't been called yet."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create stream, [])    Expression(beginConfigure hasn't been called yet."", [])  Statement(return CameraBinderDecorator.INVALID_OPERATION, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (outputConfiguration.getRotation() !, []), Expression(OutputConfiguration.ROTATION_0) {, [])])    VariableReference(if (outputConfiguration.getRotation() !, [])    Expression(OutputConfiguration.ROTATION_0) {, [])  MethodCall(Log.e(TAG, ""Cannot create stream, stream rotation is not supported.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""Cannot create stream, []), Expression(stream rotation is not supported."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""Cannot create stream, [])    Expression(stream rotation is not supported."", [])  Statement(return CameraBinderDecorator.INVALID_OPERATION, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int id, []), Expression(++mSurfaceIdCounter, [])])    VariableReference(int id, [])    Expression(++mSurfaceIdCounter, [])  MethodCall(mSurfaces.put(id, outputConfiguration.getSurface()), [VariableReference(mSurfaces, []), Expression(id, []), Expression(outputConfiguration.getSurface(), [])])    VariableReference(mSurfaces, [])    Expression(id, [])    Expression(outputConfiguration.getSurface(), [])  Statement(return id, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (DEBUG) {, []), MethodCall(Log.d(TAG, ""createStream called.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""createStream called."", [])]), Statement(}, []), MethodCall(if (mLegacyDevice.isClosed()), [VariableReference(if (mLegacyDevice, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(String err, []), Expression(""Cannot create stream, device has been closed."", [])]), MethodCall(Log.e(TAG, err), [VariableReference(Log, []), Expression(TAG, []), Expression(err, [])]), Statement(}, []), Statement(synchronized (mConfigureLock) {, []), Statement(if (!mConfiguring) {, []), AssignmentExpression(=, [VariableReference(String err, []), Expression(""Cannot create stream, beginConfigure hasn't been called yet."", [])]), MethodCall(Log.e(TAG, err), [VariableReference(Log, []), Expression(TAG, []), Expression(err, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(if (outputConfiguration.getRotation() !, []), Expression(OutputConfiguration.ROTATION_0) {, [])]), AssignmentExpression(=, [VariableReference(String err, []), Expression(""Cannot create stream, stream rotation is not supported."", [])]), MethodCall(Log.e(TAG, err), [VariableReference(Log, []), Expression(TAG, []), Expression(err, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(int id, []), Expression(++mSurfaceIdCounter, [])]), MethodCall(mSurfaces.put(id, outputConfiguration.getSurface()), [VariableReference(mSurfaces, []), Expression(id, []), Expression(outputConfiguration.getSurface(), [])]), Statement(return id, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(if (DEBUG) {, [])  MethodCall(Log.d(TAG, ""createStream called.""), [VariableReference(Log, []), Expression(TAG, []), Expression(""createStream called."", [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(""createStream called."", [])  Statement(}, [])  MethodCall(if (mLegacyDevice.isClosed()), [VariableReference(if (mLegacyDevice, []), Expression(), [])])    VariableReference(if (mLegacyDevice, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(String err, []), Expression(""Cannot create stream, device has been closed."", [])])    VariableReference(String err, [])    Expression(""Cannot create stream, device has been closed."", [])  MethodCall(Log.e(TAG, err), [VariableReference(Log, []), Expression(TAG, []), Expression(err, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(err, [])  Statement(}, [])  Statement(synchronized (mConfigureLock) {, [])  Statement(if (!mConfiguring) {, [])  AssignmentExpression(=, [VariableReference(String err, []), Expression(""Cannot create stream, beginConfigure hasn't been called yet."", [])])    VariableReference(String err, [])    Expression(""Cannot create stream, beginConfigure hasn't been called yet."", [])  MethodCall(Log.e(TAG, err), [VariableReference(Log, []), Expression(TAG, []), Expression(err, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(err, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (outputConfiguration.getRotation() !, []), Expression(OutputConfiguration.ROTATION_0) {, [])])    VariableReference(if (outputConfiguration.getRotation() !, [])    Expression(OutputConfiguration.ROTATION_0) {, [])  AssignmentExpression(=, [VariableReference(String err, []), Expression(""Cannot create stream, stream rotation is not supported."", [])])    VariableReference(String err, [])    Expression(""Cannot create stream, stream rotation is not supported."", [])  MethodCall(Log.e(TAG, err), [VariableReference(Log, []), Expression(TAG, []), Expression(err, [])])    VariableReference(Log, [])    Expression(TAG, [])    Expression(err, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int id, []), Expression(++mSurfaceIdCounter, [])])    VariableReference(int id, [])    Expression(++mSurfaceIdCounter, [])  MethodCall(mSurfaces.put(id, outputConfiguration.getSurface()), [VariableReference(mSurfaces, []), Expression(id, []), Expression(outputConfiguration.getSurface(), [])])    VariableReference(mSurfaces, [])    Expression(id, [])    Expression(outputConfiguration.getSurface(), [])  Statement(return id, [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,4","1,2","1,2","1,2","The late implementation changed the handling of errors from returning an error code to throwing `ServiceSpecificException` exceptions. The changes in return statements and introduction of exception handling statements classify the change as 1,2.","The change in return statements and new exception handling can lead to different behaviors when invoking the API, potentially returning different values or throwing different exceptions. Therefore, the CI types are 1,2."
<android.view.TextureView: HardwareLayer getHardwareLayer()>,20,21,<android.view.TextureView: HardwareLayer getHardwareLayer()>,<android.view.TextureView: HardwareLayer getHardwareLayer()>,0,"{
    // NOTE: Maintain these two lines very carefully (see View.java)
    mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;
    mPrivateFlags &= ~PFLAG_DIRTY_MASK;
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createHardwareLayer(mOpaque);
        if (!mUpdateSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = mAttachInfo.mHardwareRenderer.createSurfaceTexture(mLayer);
        }
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        nCreateNativeWindow(mSurface);
        mUpdateListener = new SurfaceTexture.OnFrameAvailableListener() {

            @Override
            public void onFrameAvailable(SurfaceTexture surfaceTexture) {
                // Per SurfaceTexture's documentation, the callback may be invoked
                // from an arbitrary thread
                updateLayer();
                if (Looper.myLooper() == Looper.getMainLooper()) {
                    invalidate();
                } else {
                    postInvalidate();
                }
            }
        };
        mSurface.setOnFrameAvailableListener(mUpdateListener);
        if (mListener != null && !mUpdateSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mAttachInfo.mHardwareRenderer.setSurfaceTexture(mLayer, mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    applyUpdate();
    applyTransformMatrix();
    return mLayer;
}","{
    // NOTE: Maintain these two lines very carefully (see View.java)
    mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;
    mPrivateFlags &= ~PFLAG_DIRTY_MASK;
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createTextureLayer();
        if (!mUpdateSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = new SurfaceTexture(false);
            mLayer.setSurfaceTexture(mSurface);
        }
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        nCreateNativeWindow(mSurface);
        mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler);
        if (mListener != null && !mUpdateSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    applyUpdate();
    applyTransformMatrix();
    return mLayer;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags &, []), Expression(~PFLAG_DIRTY_MASK, [])]), AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createHardwareLayer(mOpaque), [])]), Statement(if (!mUpdateSurface) {, []), Statement(// Create a new SurfaceTexture for the layer., []), AssignmentExpression(=, [VariableReference(mSurface, []), Expression(mAttachInfo.mHardwareRenderer.createSurfaceTexture(mLayer), [])]), Statement(}, []), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(nCreateNativeWindow(mSurface), []), AssignmentExpression(=, [VariableReference(mUpdateListener, []), Expression(new SurfaceTexture.OnFrameAvailableListener() {, [])]), Statement(@Override, []), Statement(public void onFrameAvailable(SurfaceTexture surfaceTexture) {, []), Statement(// Per SurfaceTexture's documentation, the callback may be invoked, []), Statement(// from an arbitrary thread, []), Statement(updateLayer(), []), AssignmentExpression(=, [VariableReference(if (Looper.myLooper(), []), Expression(, [])]), Statement(invalidate(), []), Statement(} else {, []), Statement(postInvalidate(), []), Statement(}, []), Statement(}, []), Statement(}, []), MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener), [VariableReference(mSurface, []), Expression(mUpdateListener, [])]), AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && !mUpdateSurface) {, [])]), MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])]), Statement(}, []), Statement(if (mUpdateSurface) {, []), Statement(// Someone has requested that we use a specific SurfaceTexture, so, []), Statement(// tell mLayer about it and set the SurfaceTexture to use the, []), Statement(// current view size., []), AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])]), Statement(// Since we are updating the layer, force an update to ensure its, []), Statement(updateLayer(), []), AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])]), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), Statement(applyUpdate(), []), Statement(applyTransformMatrix(), []), Statement(return mLayer, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID, [])])    VariableReference(mPrivateFlags |, [])    Expression(PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags &, []), Expression(~PFLAG_DIRTY_MASK, [])])    VariableReference(mPrivateFlags &, [])    Expression(~PFLAG_DIRTY_MASK, [])  AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])])    VariableReference(if (mLayer, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createHardwareLayer(mOpaque), [])])    VariableReference(mLayer, [])    Expression(mAttachInfo.mHardwareRenderer.createHardwareLayer(mOpaque), [])  Statement(if (!mUpdateSurface) {, [])  Statement(// Create a new SurfaceTexture for the layer., [])  AssignmentExpression(=, [VariableReference(mSurface, []), Expression(mAttachInfo.mHardwareRenderer.createSurfaceTexture(mLayer), [])])    VariableReference(mSurface, [])    Expression(mAttachInfo.mHardwareRenderer.createSurfaceTexture(mLayer), [])  Statement(}, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(nCreateNativeWindow(mSurface), [])  AssignmentExpression(=, [VariableReference(mUpdateListener, []), Expression(new SurfaceTexture.OnFrameAvailableListener() {, [])])    VariableReference(mUpdateListener, [])    Expression(new SurfaceTexture.OnFrameAvailableListener() {, [])  Statement(@Override, [])  Statement(public void onFrameAvailable(SurfaceTexture surfaceTexture) {, [])  Statement(// Per SurfaceTexture's documentation, the callback may be invoked, [])  Statement(// from an arbitrary thread, [])  Statement(updateLayer(), [])  AssignmentExpression(=, [VariableReference(if (Looper.myLooper(), []), Expression(, [])])    VariableReference(if (Looper.myLooper(), [])    Expression(, [])  Statement(invalidate(), [])  Statement(} else {, [])  Statement(postInvalidate(), [])  Statement(}, [])  Statement(}, [])  Statement(}, [])  MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener), [VariableReference(mSurface, []), Expression(mUpdateListener, [])])    VariableReference(mSurface, [])    Expression(mUpdateListener, [])  AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && !mUpdateSurface) {, [])])    VariableReference(if (mListener !, [])    Expression(null && !mUpdateSurface) {, [])  MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mListener, [])    Expression(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])])    VariableReference(mLayer, [])    Expression(mLayerPaint, [])  Statement(}, [])  Statement(if (mUpdateSurface) {, [])  Statement(// Someone has requested that we use a specific SurfaceTexture, so, [])  Statement(// tell mLayer about it and set the SurfaceTexture to use the, [])  Statement(// current view size., [])  AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])])    VariableReference(mUpdateSurface, [])    Expression(false, [])  Statement(// Since we are updating the layer, force an update to ensure its, [])  Statement(updateLayer(), [])  AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])])    VariableReference(mMatrixChanged, [])    Expression(true, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  Statement(applyUpdate(), [])  Statement(applyTransformMatrix(), [])  Statement(return mLayer, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID, [])]), AssignmentExpression(=, [VariableReference(mPrivateFlags &, []), Expression(~PFLAG_DIRTY_MASK, [])]), AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])]), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])]), Statement(if (!mUpdateSurface) {, []), Statement(// Create a new SurfaceTexture for the layer., []), AssignmentExpression(=, [VariableReference(mSurface, []), Expression(new SurfaceTexture(false), [])]), MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])]), Statement(}, []), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(nCreateNativeWindow(mSurface), []), MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler), [VariableReference(mSurface, []), Expression(mUpdateListener, []), Expression(mAttachInfo.mHandler, [])]), AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && !mUpdateSurface) {, [])]), MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])]), Statement(}, []), Statement(if (mUpdateSurface) {, []), Statement(// Someone has requested that we use a specific SurfaceTexture, so, []), Statement(// tell mLayer about it and set the SurfaceTexture to use the, []), Statement(// current view size., []), AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])]), Statement(// Since we are updating the layer, force an update to ensure its, []), Statement(updateLayer(), []), AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])]), MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])]), MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])]), Statement(}, []), Statement(applyUpdate(), []), Statement(applyTransformMatrix(), []), Statement(return mLayer, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags |, []), Expression(PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID, [])])    VariableReference(mPrivateFlags |, [])    Expression(PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID, [])  AssignmentExpression(=, [VariableReference(mPrivateFlags &, []), Expression(~PFLAG_DIRTY_MASK, [])])    VariableReference(mPrivateFlags &, [])    Expression(~PFLAG_DIRTY_MASK, [])  AssignmentExpression(=, [VariableReference(if (mLayer, []), Expression(, [])])    VariableReference(if (mLayer, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(if (mAttachInfo, []), Expression(, [])])    VariableReference(if (mAttachInfo, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mLayer, []), Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])])    VariableReference(mLayer, [])    Expression(mAttachInfo.mHardwareRenderer.createTextureLayer(), [])  Statement(if (!mUpdateSurface) {, [])  Statement(// Create a new SurfaceTexture for the layer., [])  AssignmentExpression(=, [VariableReference(mSurface, []), Expression(new SurfaceTexture(false), [])])    VariableReference(mSurface, [])    Expression(new SurfaceTexture(false), [])  MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])])    VariableReference(mLayer, [])    Expression(mSurface, [])  Statement(}, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(nCreateNativeWindow(mSurface), [])  MethodCall(mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler), [VariableReference(mSurface, []), Expression(mUpdateListener, []), Expression(mAttachInfo.mHandler, [])])    VariableReference(mSurface, [])    Expression(mUpdateListener, [])    Expression(mAttachInfo.mHandler, [])  AssignmentExpression(=, [VariableReference(if (mListener !, []), Expression(null && !mUpdateSurface) {, [])])    VariableReference(if (mListener !, [])    Expression(null && !mUpdateSurface) {, [])  MethodCall(mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight()), [VariableReference(mListener, []), Expression(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mListener, [])    Expression(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  MethodCall(mLayer.setLayerPaint(mLayerPaint), [VariableReference(mLayer, []), Expression(mLayerPaint, [])])    VariableReference(mLayer, [])    Expression(mLayerPaint, [])  Statement(}, [])  Statement(if (mUpdateSurface) {, [])  Statement(// Someone has requested that we use a specific SurfaceTexture, so, [])  Statement(// tell mLayer about it and set the SurfaceTexture to use the, [])  Statement(// current view size., [])  AssignmentExpression(=, [VariableReference(mUpdateSurface, []), Expression(false, [])])    VariableReference(mUpdateSurface, [])    Expression(false, [])  Statement(// Since we are updating the layer, force an update to ensure its, [])  Statement(updateLayer(), [])  AssignmentExpression(=, [VariableReference(mMatrixChanged, []), Expression(true, [])])    VariableReference(mMatrixChanged, [])    Expression(true, [])  MethodCall(mLayer.setSurfaceTexture(mSurface), [VariableReference(mLayer, []), Expression(mSurface, [])])    VariableReference(mLayer, [])    Expression(mSurface, [])  MethodCall(mSurface.setDefaultBufferSize(getWidth(), getHeight()), [VariableReference(mSurface, []), Expression(getWidth(), []), Expression(getHeight(), [])])    VariableReference(mSurface, [])    Expression(getWidth(), [])    Expression(getHeight(), [])  Statement(}, [])  Statement(applyUpdate(), [])  Statement(applyTransformMatrix(), [])  Statement(return mLayer, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"1,3, 5 ","1, 2","The return statement in the form of the method call `createHardwareLayer(mOpaque)` has changed to `createTextureLayer()`, which indicates a change in the return value and thus falls under type 1. The condition involving `mUpdateSurface` has also been altered with changes in the associated assignments and method calls, which points to a change in control dependencies (type 3). Additionally, the dependent API call has changed (createTextureLayer), indicating a type 5 change.",Changes in the return value due to `createTextureLayer()` instead of `createHardwareLayer` can result in returning different types or variable values (CI type 1). Changes in exception handling and control dependencies can lead to throwing different exceptions (CI type 2) due to changed flow and calls to other APIs like `createTextureLayer()`.
"<android.view.GLES20Canvas: boolean clipRegion(Region,Op)>",15,16,"<android.view.GLES20Canvas: boolean clipRegion(Region,Op)>","<android.view.GLES20Canvas: boolean clipRegion(Region,Op)>",0,"{
    throw new UnsupportedOperationException();
}","{
    // TODO: Implement
    region.getBounds(mClipBounds);
    return nClipRect(mRenderer, mClipBounds.left, mClipBounds.top, mClipBounds.right, mClipBounds.bottom, op.nativeInt);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(throw new UnsupportedOperationException(), []), Statement(}, [])])  Statement({, [])  Statement(throw new UnsupportedOperationException(), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(// TODO: Implement, []), MethodCall(region.getBounds(mClipBounds), [VariableReference(region, []), Expression(mClipBounds, [])]), Statement(}, [])])  Statement({, [])  Statement(// TODO: Implement, [])  MethodCall(region.getBounds(mClipBounds), [VariableReference(region, []), Expression(mClipBounds, [])])    VariableReference(region, [])    Expression(mClipBounds, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,4","1,2","1,2,4","1,2",The method has undergone several changes:,"3. New statements and method calls such as `region.getBounds(mClipBounds)` and `return nClipRect(mRenderer, mClipBounds.left, mClipBounds.top, mClipBounds.right, mClipBounds.bottom, op.nativeInt)` have been introduced. "
<android.os.RemoteCallbackList: int beginBroadcast()>,18,19,<android.os.RemoteCallbackList: int beginBroadcast()>,<android.os.RemoteCallbackList: int beginBroadcast()>,0,"{
    synchronized (mCallbacks) {
        if (mBroadcastCount > 0) {
            throw new IllegalStateException(""beginBroadcast() called while already in a broadcast"");
        }
        final int N = mBroadcastCount = mCallbacks.size();
        if (N <= 0) {
            return 0;
        }
        Object[] active = mActiveBroadcast;
        if (active == null || active.length < N) {
            mActiveBroadcast = active = new Object[N];
        }
        int i = 0;
        for (Callback cb : mCallbacks.values()) {
            active[i++] = cb;
        }
        return i;
    }
}","{
    synchronized (mCallbacks) {
        if (mBroadcastCount > 0) {
            throw new IllegalStateException(""beginBroadcast() called while already in a broadcast"");
        }
        final int N = mBroadcastCount = mCallbacks.size();
        if (N <= 0) {
            return 0;
        }
        Object[] active = mActiveBroadcast;
        if (active == null || active.length < N) {
            mActiveBroadcast = active = new Object[N];
        }
        for (int i = 0; i < N; i++) {
            active[i] = mCallbacks.valueAt(i);
        }
        return N;
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mCallbacks) {, []), Statement(if (mBroadcastCount > 0) {, []), Statement(throw new IllegalStateException(""beginBroadcast() called while already in a broadcast""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mBroadcastCount, [])]), AssignmentExpression(=, [VariableReference(if (N <, []), Expression(0) {, [])]), Statement(return 0, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Object[] active, []), Expression(mActiveBroadcast, [])]), AssignmentExpression(=, [VariableReference(if (active, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mActiveBroadcast, []), Expression(active, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(int i, []), Expression(0, [])]), MethodCall(for (Callback cb : mCallbacks.values()), [VariableReference(for (Callback cb : mCallbacks, []), Expression(), [])]), AssignmentExpression(=, [VariableReference(active[i++], []), Expression(cb, [])]), Statement(}, []), Statement(return i, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mCallbacks) {, [])  Statement(if (mBroadcastCount > 0) {, [])  Statement(throw new IllegalStateException(""beginBroadcast() called while already in a broadcast""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mBroadcastCount, [])])    VariableReference(final int N, [])    Expression(mBroadcastCount, [])  AssignmentExpression(=, [VariableReference(if (N <, []), Expression(0) {, [])])    VariableReference(if (N <, [])    Expression(0) {, [])  Statement(return 0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Object[] active, []), Expression(mActiveBroadcast, [])])    VariableReference(Object[] active, [])    Expression(mActiveBroadcast, [])  AssignmentExpression(=, [VariableReference(if (active, []), Expression(, [])])    VariableReference(if (active, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mActiveBroadcast, []), Expression(active, [])])    VariableReference(mActiveBroadcast, [])    Expression(active, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int i, []), Expression(0, [])])    VariableReference(int i, [])    Expression(0, [])  MethodCall(for (Callback cb : mCallbacks.values()), [VariableReference(for (Callback cb : mCallbacks, []), Expression(), [])])    VariableReference(for (Callback cb : mCallbacks, [])    Expression(), [])  AssignmentExpression(=, [VariableReference(active[i++], []), Expression(cb, [])])    VariableReference(active[i++], [])    Expression(cb, [])  Statement(}, [])  Statement(return i, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mCallbacks) {, []), Statement(if (mBroadcastCount > 0) {, []), Statement(throw new IllegalStateException(""beginBroadcast() called while already in a broadcast""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(final int N, []), Expression(mBroadcastCount, [])]), AssignmentExpression(=, [VariableReference(if (N <, []), Expression(0) {, [])]), Statement(return 0, []), Statement(}, []), AssignmentExpression(=, [VariableReference(Object[] active, []), Expression(mActiveBroadcast, [])]), AssignmentExpression(=, [VariableReference(if (active, []), Expression(, [])]), AssignmentExpression(=, [VariableReference(mActiveBroadcast, []), Expression(active, [])]), Statement(}, []), AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])]), Statement(i < N, []), Statement(i++) {, []), AssignmentExpression(=, [VariableReference(active[i], []), Expression(mCallbacks.valueAt(i), [])]), Statement(}, []), Statement(return N, []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mCallbacks) {, [])  Statement(if (mBroadcastCount > 0) {, [])  Statement(throw new IllegalStateException(""beginBroadcast() called while already in a broadcast""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final int N, []), Expression(mBroadcastCount, [])])    VariableReference(final int N, [])    Expression(mBroadcastCount, [])  AssignmentExpression(=, [VariableReference(if (N <, []), Expression(0) {, [])])    VariableReference(if (N <, [])    Expression(0) {, [])  Statement(return 0, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(Object[] active, []), Expression(mActiveBroadcast, [])])    VariableReference(Object[] active, [])    Expression(mActiveBroadcast, [])  AssignmentExpression(=, [VariableReference(if (active, []), Expression(, [])])    VariableReference(if (active, [])    Expression(, [])  AssignmentExpression(=, [VariableReference(mActiveBroadcast, []), Expression(active, [])])    VariableReference(mActiveBroadcast, [])    Expression(active, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(for (int i, []), Expression(0, [])])    VariableReference(for (int i, [])    Expression(0, [])  Statement(i < N, [])  Statement(i++) {, [])  AssignmentExpression(=, [VariableReference(active[i], []), Expression(mCallbacks.valueAt(i), [])])    VariableReference(active[i], [])    Expression(mCallbacks.valueAt(i), [])  Statement(}, [])  Statement(return N, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Prepare to start making calls to the currently registered callbacks.
 * This creates a copy of the callback list, which you can retrieve items
 * from using {@link #getBroadcastItem}.  Note that only one broadcast can
 * be active at a time, so you must be sure to always call this from the
 * same thread (usually by scheduling with {@link Handler}) or
 * do your own synchronization.  You must call {@link #finishBroadcast}
 * when done.
 *
 * <p>A typical loop delivering a broadcast looks like this:
 *
 * <pre>
 * int i = callbacks.beginBroadcast();
 * while (i &gt; 0) {
 * i--;
 * try {
 * callbacks.getBroadcastItem(i).somethingHappened();
 * } catch (RemoteException e) {
 * // The RemoteCallbackList will take care of removing
 * // the dead object for us.
 * }
 * }
 * callbacks.finishBroadcast();</pre>
 *
 * @return Returns the number of callbacks in the broadcast, to be used
 * with {@link #getBroadcastItem} to determine the range of indices you
 * can supply.
 *
 * @see #getBroadcastItem
 * @see #finishBroadcast
 */
","/**
 * Prepare to start making calls to the currently registered callbacks.
 * This creates a copy of the callback list, which you can retrieve items
 * from using {@link #getBroadcastItem}.  Note that only one broadcast can
 * be active at a time, so you must be sure to always call this from the
 * same thread (usually by scheduling with {@link Handler}) or
 * do your own synchronization.  You must call {@link #finishBroadcast}
 * when done.
 *
 * <p>A typical loop delivering a broadcast looks like this:
 *
 * <pre>
 * int i = callbacks.beginBroadcast();
 * while (i &gt; 0) {
 * i--;
 * try {
 * callbacks.getBroadcastItem(i).somethingHappened();
 * } catch (RemoteException e) {
 * // The RemoteCallbackList will take care of removing
 * // the dead object for us.
 * }
 * }
 * callbacks.finishBroadcast();</pre>
 *
 * @return Returns the number of callbacks in the broadcast, to be used
 * with {@link #getBroadcastItem} to determine the range of indices you
 * can supply.
 *
 * @see #getBroadcastItem
 * @see #finishBroadcast
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,"1,3",1,"The for-loop logic has changed from `for (Callback cb : mCallbacks.values()) active[i++] = cb; return i;` to `for (int i = 0; i < N; i++) active[i] = mCallbacks.valueAt(i); return N;`. This change affects the initialization and return statement inside the synchronized block, changing the loop iteration and return value calculation. Thus, the code change type is 1,3.","The changes in the loop iteration and return value calculation can result in the method potentially returning different values, thus leading to a possible compatibility issue (CI type 1)."
"<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(String,int,String)>",29,30,"<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(String,int,String)>","<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(String,int,String)>",0,"{
    try {
        return mService.checkOperationRaw(strOpToOp(op), uid, packageName);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return unsafeCheckOpRawNoThrow(strOpToOp(op), uid, packageName);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(return mService.checkOperationRaw(strOpToOp(op), uid, packageName), [VariableReference(return mService, []), Expression(strOpToOp(op), []), Expression(uid, []), Expression(packageName, [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(return mService.checkOperationRaw(strOpToOp(op), uid, packageName), [VariableReference(return mService, []), Expression(strOpToOp(op), []), Expression(uid, []), Expression(packageName, [])])    VariableReference(return mService, [])    Expression(strOpToOp(op), [])    Expression(uid, [])    Expression(packageName, [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return unsafeCheckOpRawNoThrow(strOpToOp(op), uid, packageName), []), Statement(}, [])])  Statement({, [])  Statement(return unsafeCheckOpRawNoThrow(strOpToOp(op), uid, packageName), [])  Statement(}, [])",1,"/**
 * Like {@link #unsafeCheckOpNoThrow(String, int, String)} but returns the <em>raw</em>
 * mode associated with the op. Does not throw a security exception, does not translate
 * {@link #MODE_FOREGROUND}.
 */
","/**
 * Like {@link #unsafeCheckOpNoThrow(String, int, String)} but returns the <em>raw</em>
 * mode associated with the op. Does not throw a security exception, does not translate
 * {@link #MODE_FOREGROUND}.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,"1,2,5","1,2","The return statement has changed from `mService.checkOperationRaw(strOpToOp(op), uid, packageName)` to `unsafeCheckOpRawNoThrow(strOpToOp(op), uid, packageName)`, and the exception handling block has been removed. The updated method now calls a different method `unsafeCheckOpRawNoThrow`, indicating a dependent API change. Therefore, the code change types are 1, 2, and 5.","The API potentially returns different values due to the change in the method being called and the removal of the try-catch block. Moreover, the exception handling has changed since the `RemoteException e` is no longer being thrown. Therefore, the CI types are 1 and 2."
<android.accounts.AccountManager: String getPassword(Account)>,22,23,<android.accounts.AccountManager: String getPassword(Account)>,<android.accounts.AccountManager: String getPassword(Account)>,0,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    try {
        return mService.getPassword(account);
    } catch (RemoteException e) {
        // will never happen
        throw new RuntimeException(e);
    }
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    try {
        return mService.getPassword(account);
    } catch (RemoteException e) {
        // won't ever happen
        throw new RuntimeException(e);
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), Statement(try {, []), MethodCall(return mService.getPassword(account), [VariableReference(return mService, []), Expression(account, [])]), Statement(} catch (RemoteException e) {, []), Statement(// will never happen, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  Statement(try {, [])  MethodCall(return mService.getPassword(account), [VariableReference(return mService, []), Expression(account, [])])    VariableReference(return mService, [])    Expression(account, [])  Statement(} catch (RemoteException e) {, [])  Statement(// will never happen, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])]), Statement(throw new IllegalArgumentException(""account is null""), []), Statement(try {, []), MethodCall(return mService.getPassword(account), [VariableReference(return mService, []), Expression(account, [])]), Statement(} catch (RemoteException e) {, []), Statement(// won't ever happen, []), Statement(throw new RuntimeException(e), []), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (account, []), Expression(, [])])    VariableReference(if (account, [])    Expression(, [])  Statement(throw new IllegalArgumentException(""account is null""), [])  Statement(try {, [])  MethodCall(return mService.getPassword(account), [VariableReference(return mService, []), Expression(account, [])])    VariableReference(return mService, [])    Expression(account, [])  Statement(} catch (RemoteException e) {, [])  Statement(// won't ever happen, [])  Statement(throw new RuntimeException(e), [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Gets the saved password associated with the account.
 * This is intended for authenticators and related code; applications
 * should get an auth token instead.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
 * and to have the same UID as the account's authenticator.
 *
 * @param account The account to query for a password
 * @return The account's password, null if none or if the account doesn't exist
 */
","/**
 * Gets the saved password associated with the account.
 * This is intended for authenticators and related code; applications
 * should get an auth token instead.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that owns the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The account to query for a password. Must not be {@code null}.
 * @return The account's password, null if none or if the account doesn't exist
 */
",-1,,,-1,-1,-1,-1,-1,0,0,0,0,"There is no significant change in the method implementation between the early and late versions. The only difference is a comment change from ""will never happen"" to ""won't ever happen,"" which does not affect the behavior of the method.","As there are no changes in the logic or functionality of the method, there are no potential compatibility issues."
<android.app.ActivityManager: void killBackgroundProcesses(String)>,25,26,<android.app.ActivityManager: void killBackgroundProcesses(String)>,<android.app.ActivityManager: void killBackgroundProcesses(String)>,0,"{
    try {
        ActivityManagerNative.getDefault().killBackgroundProcesses(packageName, UserHandle.myUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    try {
        getService().killBackgroundProcesses(packageName, UserHandle.myUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(ActivityManagerNative.getDefault().killBackgroundProcesses(packageName, UserHandle.myUserId()), [VariableReference(ActivityManagerNative, []), Expression().killBackgroundProcesses(packageName, []), Expression(UserHandle.myUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(ActivityManagerNative.getDefault().killBackgroundProcesses(packageName, UserHandle.myUserId()), [VariableReference(ActivityManagerNative, []), Expression().killBackgroundProcesses(packageName, []), Expression(UserHandle.myUserId(), [])])    VariableReference(ActivityManagerNative, [])    Expression().killBackgroundProcesses(packageName, [])    Expression(UserHandle.myUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(try {, []), MethodCall(getService().killBackgroundProcesses(packageName, UserHandle.myUserId()), [VariableReference(getService(), []), Expression(packageName, []), Expression(UserHandle.myUserId(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(try {, [])  MethodCall(getService().killBackgroundProcesses(packageName, UserHandle.myUserId()), [VariableReference(getService(), []), Expression(packageName, []), Expression(UserHandle.myUserId(), [])])    VariableReference(getService(), [])    Expression(packageName, [])    Expression(UserHandle.myUserId(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,"/**
 * Have the system immediately kill all background processes associated
 * with the given package.  This is the same as the kernel killing those
 * processes to reclaim memory; the system will take care of restarting
 * these processes in the future as needed.
 *
 * <p>You must hold the permission
 * {@link android.Manifest.permission#KILL_BACKGROUND_PROCESSES} to be able to
 * call this method.
 *
 * @param packageName The name of the package whose processes are to
 * be killed.
 */
","/**
 * Have the system immediately kill all background processes associated
 * with the given package.  This is the same as the kernel killing those
 * processes to reclaim memory; the system will take care of restarting
 * these processes in the future as needed.
 *
 * @param packageName The name of the package whose processes are to
 * be killed.
 */
",-1,,[@RequiresPermission(Manifest.permission.KILL_BACKGROUND_PROCESSES)],-1,-1,-1,-1,-1,4,0,"4,5",0,"The early version uses `ActivityManagerNative.getDefault()` to retrieve the service, while the late version uses `getService()`. This represents a change in the dependent API. Additionally, there's an annotation added in the late version which is classified under the other statement change. Therefore, the change type is 4,5.","The fundamental behavior of the method has not changed, as the underlying call to `killBackgroundProcesses` remains the same. It does not lead to different return values or different exception handling. Therefore, the CI type is 0."
<android.view.accessibility.AccessibilityNodeInfo: AccessibilityNodeInfo getChild(int)>,32,33,,,,"{
    enforceSealed();
    if (mChildNodeIds == null) {
        return null;
    }
    if (!canPerformRequestOverConnection(mConnectionId, mWindowId, mSourceNodeId)) {
        return null;
    }
    final long childId = mChildNodeIds.get(index);
    final AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
    if (mLeashedChild != null && childId == LEASHED_NODE_ID) {
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mLeashedChild, ROOT_NODE_ID, false, FLAG_PREFETCH_DESCENDANTS, null);
    }
    return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, childId, false, FLAG_PREFETCH_DESCENDANTS, null);
}","{
    return getChild(index, FLAG_PREFETCH_DESCENDANTS_HYBRID);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(enforceSealed(), []), AssignmentExpression(=, [VariableReference(if (mChildNodeIds, []), Expression(, [])]), Statement(return null, []), Statement(}, []), Statement(if (!canPerformRequestOverConnection(mConnectionId, mWindowId, mSourceNodeId)) {, []), Statement(return null, []), Statement(}, []), AssignmentExpression(=, [VariableReference(final long childId, []), Expression(mChildNodeIds.get(index), [])]), AssignmentExpression(=, [VariableReference(final AccessibilityInteractionClient client, []), Expression(AccessibilityInteractionClient.getInstance(), [])]), AssignmentExpression(=, [VariableReference(if (mLeashedChild !, []), Expression(null && childId, [])]), MethodCall(return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mLeashedChild, ROOT_NODE_ID, false, FLAG_PREFETCH_DESCENDANTS, null), [VariableReference(return client, []), Expression(mConnectionId, []), Expression(mLeashedChild, []), Expression(ROOT_NODE_ID, []), Expression(false, []), Expression(FLAG_PREFETCH_DESCENDANTS, []), Expression(null, [])]), Statement(}, []), MethodCall(return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, childId, false, FLAG_PREFETCH_DESCENDANTS, null), [VariableReference(return client, []), Expression(mConnectionId, []), Expression(mWindowId, []), Expression(childId, []), Expression(false, []), Expression(FLAG_PREFETCH_DESCENDANTS, []), Expression(null, [])]), Statement(}, [])])  Statement({, [])  Statement(enforceSealed(), [])  AssignmentExpression(=, [VariableReference(if (mChildNodeIds, []), Expression(, [])])    VariableReference(if (mChildNodeIds, [])    Expression(, [])  Statement(return null, [])  Statement(}, [])  Statement(if (!canPerformRequestOverConnection(mConnectionId, mWindowId, mSourceNodeId)) {, [])  Statement(return null, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(final long childId, []), Expression(mChildNodeIds.get(index), [])])    VariableReference(final long childId, [])    Expression(mChildNodeIds.get(index), [])  AssignmentExpression(=, [VariableReference(final AccessibilityInteractionClient client, []), Expression(AccessibilityInteractionClient.getInstance(), [])])    VariableReference(final AccessibilityInteractionClient client, [])    Expression(AccessibilityInteractionClient.getInstance(), [])  AssignmentExpression(=, [VariableReference(if (mLeashedChild !, []), Expression(null && childId, [])])    VariableReference(if (mLeashedChild !, [])    Expression(null && childId, [])  MethodCall(return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mLeashedChild, ROOT_NODE_ID, false, FLAG_PREFETCH_DESCENDANTS, null), [VariableReference(return client, []), Expression(mConnectionId, []), Expression(mLeashedChild, []), Expression(ROOT_NODE_ID, []), Expression(false, []), Expression(FLAG_PREFETCH_DESCENDANTS, []), Expression(null, [])])    VariableReference(return client, [])    Expression(mConnectionId, [])    Expression(mLeashedChild, [])    Expression(ROOT_NODE_ID, [])    Expression(false, [])    Expression(FLAG_PREFETCH_DESCENDANTS, [])    Expression(null, [])  Statement(}, [])  MethodCall(return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, childId, false, FLAG_PREFETCH_DESCENDANTS, null), [VariableReference(return client, []), Expression(mConnectionId, []), Expression(mWindowId, []), Expression(childId, []), Expression(false, []), Expression(FLAG_PREFETCH_DESCENDANTS, []), Expression(null, [])])    VariableReference(return client, [])    Expression(mConnectionId, [])    Expression(mWindowId, [])    Expression(childId, [])    Expression(false, [])    Expression(FLAG_PREFETCH_DESCENDANTS, [])    Expression(null, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(return getChild(index, FLAG_PREFETCH_DESCENDANTS_HYBRID), []), Statement(}, [])])  Statement({, [])  Statement(return getChild(index, FLAG_PREFETCH_DESCENDANTS_HYBRID), [])  Statement(}, [])",1,"/**
 * Get the child at given index.
 * <p>
 * <strong>Note:</strong> It is a client responsibility to recycle the
 * received info by calling {@link AccessibilityNodeInfo#recycle()}
 * to avoid creating of multiple instances.
 * </p>
 *
 * @param index The child index.
 * @return The child node.
 *
 * @throws IllegalStateException If called outside of an AccessibilityService.
 */
","/**
 * Get the child at given index.
 *
 * @param index The child index.
 * @return The child node.
 *
 * @throws IllegalStateException If called outside of an AccessibilityService.
 */
",1,,,0,,,,,"1,3,4",1,"1,5",1,"The late version simplified the implementation by calling another method `getChild` with two parameters, while the early version had a detailed implementation. The return statement has fundamentally changed, and the used dependent API has been changed, thus the code change type is 1,5.","The change in the return statement and relying on a different dependent API (another heavily-altered method `getChild(index, FLAG_PREFETCH_DESCENDANTS_HYBRID)`) can lead to the API returning different values or types, thus the CI type is 1."
"<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>",29,30,"<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>","<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>",0,"{
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])]), Statement(try {, []), MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])]), MethodCall(ActivityManager.getService().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier()), [VariableReference(ActivityManager, []), Expression().broadcastIntent(mMainThread.getApplicationThread(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(null, []), Expression(AppOpsManager.OP_NONE, []), Expression(null, []), Expression(false, []), Expression(true, []), Expression(user.getIdentifier(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])])    VariableReference(String resolvedType, [])    Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])  Statement(try {, [])  MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])])    VariableReference(intent, [])    Expression(this, [])  MethodCall(ActivityManager.getService().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier()), [VariableReference(ActivityManager, []), Expression().broadcastIntent(mMainThread.getApplicationThread(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(null, []), Expression(AppOpsManager.OP_NONE, []), Expression(null, []), Expression(false, []), Expression(true, []), Expression(user.getIdentifier(), [])])    VariableReference(ActivityManager, [])    Expression().broadcastIntent(mMainThread.getApplicationThread(), [])    Expression(intent, [])    Expression(resolvedType, [])    Expression(null, [])    Expression(Activity.RESULT_OK, [])    Expression(null, [])    Expression(null, [])    Expression(null, [])    Expression(AppOpsManager.OP_NONE, [])    Expression(null, [])    Expression(false, [])    Expression(true, [])    Expression(user.getIdentifier(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])]), Statement(try {, []), MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])]), MethodCall(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier()), [VariableReference(ActivityManager, []), Expression().broadcastIntentWithFeature(mMainThread.getApplicationThread(), []), Expression(getAttributionTag(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(null, []), Expression(AppOpsManager.OP_NONE, []), Expression(null, []), Expression(false, []), Expression(true, []), Expression(user.getIdentifier(), [])]), Statement(} catch (RemoteException e) {, []), MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])]), Statement(}, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(String resolvedType, []), Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])])    VariableReference(String resolvedType, [])    Expression(intent.resolveTypeIfNeeded(getContentResolver()), [])  Statement(try {, [])  MethodCall(intent.prepareToLeaveProcess(this), [VariableReference(intent, []), Expression(this, [])])    VariableReference(intent, [])    Expression(this, [])  MethodCall(ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier()), [VariableReference(ActivityManager, []), Expression().broadcastIntentWithFeature(mMainThread.getApplicationThread(), []), Expression(getAttributionTag(), []), Expression(intent, []), Expression(resolvedType, []), Expression(null, []), Expression(Activity.RESULT_OK, []), Expression(null, []), Expression(null, []), Expression(null, []), Expression(AppOpsManager.OP_NONE, []), Expression(null, []), Expression(false, []), Expression(true, []), Expression(user.getIdentifier(), [])])    VariableReference(ActivityManager, [])    Expression().broadcastIntentWithFeature(mMainThread.getApplicationThread(), [])    Expression(getAttributionTag(), [])    Expression(intent, [])    Expression(resolvedType, [])    Expression(null, [])    Expression(Activity.RESULT_OK, [])    Expression(null, [])    Expression(null, [])    Expression(null, [])    Expression(AppOpsManager.OP_NONE, [])    Expression(null, [])    Expression(false, [])    Expression(true, [])    Expression(user.getIdentifier(), [])  Statement(} catch (RemoteException e) {, [])  MethodCall(throw e.rethrowFromSystemServer(), [VariableReference(throw e, []), Expression(, [])])    VariableReference(throw e, [])    Expression(, [])  Statement(}, [])  Statement(}, [])",1,,,-1,"[@Override, @Deprecated]","[@Override, @Deprecated]",-1,-1,-1,-1,-1,4,0,5,0,"The method called on `ActivityManager.getService()` has changed from `broadcastIntent` to `broadcastIntentWithFeature`, indicating the modification of a dependent API, so the code change type is 5.","The functional change of the dependent API does not necessarily lead to a change in behavior for this method, as it still returns void, doesn't introduce any new exceptions, and keeps the overall structure and intended functionality intact. Therefore, no compatibility issue (0)."
<android.widget.FrameLayout: LayoutParams generateDefaultLayoutParams()>,7,8,<android.widget.FrameLayout: LayoutParams generateDefaultLayoutParams()>,<android.widget.FrameLayout: LayoutParams generateDefaultLayoutParams()>,0,"{
    return new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
}","{
    return new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(}, [])])  Statement({, [])  Statement(}, [])",1,"/**
 * Returns a set of layout parameters with a width of
 * {@link android.view.ViewGroup.LayoutParams#FILL_PARENT},
 * and a height of {@link android.view.ViewGroup.LayoutParams#FILL_PARENT}.
 */
","/**
 * Returns a set of layout parameters with a width of
 * {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT},
 * and a height of {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}.
 */
",-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,4",1,1,1,"The return statement has changed from using `LayoutParams.FILL_PARENT` to `LayoutParams.MATCH_PARENT`. Although both are equivalent in many contexts, they are not technically the same value, leading to a return statement change (change type 1).","The change in return statement will make the API potentially return a different value, causing the compatibility issue (CI type 1)."
"<android.app.Notification.Builder: Builder setSound(Uri,int)>",25,26,"<android.app.Notification.Builder: Builder setSound(Uri,int)>","<android.app.Notification.Builder: Builder setSound(Uri,int)>",0,"{
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}","{
    PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"");
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])]), AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])])    VariableReference(mN.sound, [])    Expression(sound, [])  AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])])    VariableReference(mN.audioStreamType, [])    Expression(streamType, [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()""), [VariableReference(PlayerBase, []), Expression(streamType, []), Expression(""Notification"", []), Expression(""setSound()"", [])]), AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])]), AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  MethodCall(PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()""), [VariableReference(PlayerBase, []), Expression(streamType, []), Expression(""Notification"", []), Expression(""setSound()"", [])])    VariableReference(PlayerBase, [])    Expression(streamType, [])    Expression(""Notification"", [])    Expression(""setSound()"", [])  AssignmentExpression(=, [VariableReference(mN.sound, []), Expression(sound, [])])    VariableReference(mN.sound, [])    Expression(sound, [])  AssignmentExpression(=, [VariableReference(mN.audioStreamType, []), Expression(streamType, [])])    VariableReference(mN.audioStreamType, [])    Expression(streamType, [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * <p>
 * A notification that is noisy is more likely to be presented as a heads-up notification.
 * </p>
 * @deprecated use {@link #setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
","/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)}.
 */
",-1,[@Deprecated],[@Deprecated],-1,-1,-1,-1,-1,4,0,"4,5",0,"A new method call is introduced: PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()""). The rest of the implementation remains the same, so the code change type is 4,5.","The change involves adding a call to the method `PlayerBase.deprecateStreamTypeForPlayback`, which does not alter the return type or exception handling of the `setSound` method. Therefore, it does not potentially lead to any Compatibility Issues. The CI type is 0."
<android.app.Activity: void recreate()>,23,24,<android.app.Activity: void recreate()>,<android.app.Activity: void recreate()>,0,"{
    if (mParent != null) {
        throw new IllegalStateException(""Can only be called on top-level activity"");
    }
    if (Looper.myLooper() != mMainThread.getLooper()) {
        throw new IllegalStateException(""Must be called from main thread"");
    }
    mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false);
}","{
    if (mParent != null) {
        throw new IllegalStateException(""Can only be called on top-level activity"");
    }
    if (Looper.myLooper() != mMainThread.getLooper()) {
        throw new IllegalStateException(""Must be called from main thread"");
    }
    mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false, false);
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])]), Statement(throw new IllegalStateException(""Can only be called on top-level activity""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (Looper.myLooper() !, []), Expression(mMainThread.getLooper()) {, [])]), Statement(throw new IllegalStateException(""Must be called from main thread""), []), Statement(}, []), MethodCall(mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false), [VariableReference(mMainThread, []), Expression(mToken, []), Expression(null, []), Expression(null, []), Expression(0, []), Expression(false, []), Expression(null, []), Expression(null, []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])])    VariableReference(if (mParent !, [])    Expression(null) {, [])  Statement(throw new IllegalStateException(""Can only be called on top-level activity""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (Looper.myLooper() !, []), Expression(mMainThread.getLooper()) {, [])])    VariableReference(if (Looper.myLooper() !, [])    Expression(mMainThread.getLooper()) {, [])  Statement(throw new IllegalStateException(""Must be called from main thread""), [])  Statement(}, [])  MethodCall(mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false), [VariableReference(mMainThread, []), Expression(mToken, []), Expression(null, []), Expression(null, []), Expression(0, []), Expression(false, []), Expression(null, []), Expression(null, []), Expression(false, [])])    VariableReference(mMainThread, [])    Expression(mToken, [])    Expression(null, [])    Expression(null, [])    Expression(0, [])    Expression(false, [])    Expression(null, [])    Expression(null, [])    Expression(false, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])]), Statement(throw new IllegalStateException(""Can only be called on top-level activity""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(if (Looper.myLooper() !, []), Expression(mMainThread.getLooper()) {, [])]), Statement(throw new IllegalStateException(""Must be called from main thread""), []), Statement(}, []), MethodCall(mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false, false), [VariableReference(mMainThread, []), Expression(mToken, []), Expression(null, []), Expression(null, []), Expression(0, []), Expression(false, []), Expression(null, []), Expression(null, []), Expression(false, []), Expression(false, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (mParent !, []), Expression(null) {, [])])    VariableReference(if (mParent !, [])    Expression(null) {, [])  Statement(throw new IllegalStateException(""Can only be called on top-level activity""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(if (Looper.myLooper() !, []), Expression(mMainThread.getLooper()) {, [])])    VariableReference(if (Looper.myLooper() !, [])    Expression(mMainThread.getLooper()) {, [])  Statement(throw new IllegalStateException(""Must be called from main thread""), [])  Statement(}, [])  MethodCall(mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false, false), [VariableReference(mMainThread, []), Expression(mToken, []), Expression(null, []), Expression(null, []), Expression(0, []), Expression(false, []), Expression(null, []), Expression(null, []), Expression(false, []), Expression(false, [])])    VariableReference(mMainThread, [])    Expression(mToken, [])    Expression(null, [])    Expression(null, [])    Expression(0, [])    Expression(false, [])    Expression(null, [])    Expression(null, [])    Expression(false, [])    Expression(false, [])  Statement(}, [])",1,"/**
 * Cause this Activity to be recreated with a new instance.  This results
 * in essentially the same flow as when the Activity is created due to
 * a configuration change -- the current instance will go through its
 * lifecycle to {@link #onDestroy} and a new instance then created after it.
 */
","/**
 * Cause this Activity to be recreated with a new instance.  This results
 * in essentially the same flow as when the Activity is created due to
 * a configuration change -- the current instance will go through its
 * lifecycle to {@link #onDestroy} and a new instance then created after it.
 */
",-1,,,-1,-1,-1,-1,-1,5,0,4,0,"The method call `mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false)` has changed to `mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false, false)`, adding an extra boolean parameter. The change is in other statements that don't affect return values or exception handling directly, so the code change is 4.","The addition of an extra boolean parameter to the method call does not change the return value of the current API nor its exception-handling behavior. Therefore, no Compatibility Issues are identified, so the CI type is 0."
<android.app.Activity: void setActionBar(Toolbar)>,22,23,<android.app.Activity: void setActionBar(Toolbar)>,<android.app.Activity: void setActionBar(Toolbar)>,0,"{
    if (getActionBar() instanceof WindowDecorActionBar) {
        throw new IllegalStateException(""This Activity already has an action bar supplied "" + ""by the window decor. Do not request Window.FEATURE_ACTION_BAR and set "" + ""android:windowActionBar to false in your theme to use a Toolbar instead."");
    }
    ToolbarActionBar tbab = new ToolbarActionBar(toolbar, getTitle(), this);
    mActionBar = tbab;
    mWindow.setCallback(tbab.getWrappedWindowCallback());
    mActionBar.invalidateOptionsMenu();
}","{
    if (getActionBar() instanceof WindowDecorActionBar) {
        throw new IllegalStateException(""This Activity already has an action bar supplied "" + ""by the window decor. Do not request Window.FEATURE_ACTION_BAR and set "" + ""android:windowActionBar to false in your theme to use a Toolbar instead."");
    }
    // Clear out the MenuInflater to make sure that it is valid for the new Action Bar
    mMenuInflater = null;
    ToolbarActionBar tbab = new ToolbarActionBar(toolbar, getTitle(), this);
    mActionBar = tbab;
    mWindow.setCallback(tbab.getWrappedWindowCallback());
    mActionBar.invalidateOptionsMenu();
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (getActionBar() instanceof WindowDecorActionBar) {, []), Statement(}, []), AssignmentExpression(=, [VariableReference(ToolbarActionBar tbab, []), Expression(new ToolbarActionBar(toolbar, getTitle(), this), [])]), AssignmentExpression(=, [VariableReference(mActionBar, []), Expression(tbab, [])]), MethodCall(mWindow.setCallback(tbab.getWrappedWindowCallback()), [VariableReference(mWindow, []), Expression(tbab.getWrappedWindowCallback(), [])]), MethodCall(mActionBar.invalidateOptionsMenu(), [VariableReference(mActionBar, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (getActionBar() instanceof WindowDecorActionBar) {, [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(ToolbarActionBar tbab, []), Expression(new ToolbarActionBar(toolbar, getTitle(), this), [])])    VariableReference(ToolbarActionBar tbab, [])    Expression(new ToolbarActionBar(toolbar, getTitle(), this), [])  AssignmentExpression(=, [VariableReference(mActionBar, []), Expression(tbab, [])])    VariableReference(mActionBar, [])    Expression(tbab, [])  MethodCall(mWindow.setCallback(tbab.getWrappedWindowCallback()), [VariableReference(mWindow, []), Expression(tbab.getWrappedWindowCallback(), [])])    VariableReference(mWindow, [])    Expression(tbab.getWrappedWindowCallback(), [])  MethodCall(mActionBar.invalidateOptionsMenu(), [VariableReference(mActionBar, []), Expression(, [])])    VariableReference(mActionBar, [])    Expression(, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(if (getActionBar() instanceof WindowDecorActionBar) {, []), Statement(}, []), Statement(// Clear out the MenuInflater to make sure that it is valid for the new Action Bar, []), AssignmentExpression(=, [VariableReference(mMenuInflater, []), Expression(null, [])]), AssignmentExpression(=, [VariableReference(ToolbarActionBar tbab, []), Expression(new ToolbarActionBar(toolbar, getTitle(), this), [])]), AssignmentExpression(=, [VariableReference(mActionBar, []), Expression(tbab, [])]), MethodCall(mWindow.setCallback(tbab.getWrappedWindowCallback()), [VariableReference(mWindow, []), Expression(tbab.getWrappedWindowCallback(), [])]), MethodCall(mActionBar.invalidateOptionsMenu(), [VariableReference(mActionBar, []), Expression(, [])]), Statement(}, [])])  Statement({, [])  Statement(if (getActionBar() instanceof WindowDecorActionBar) {, [])  Statement(}, [])  Statement(// Clear out the MenuInflater to make sure that it is valid for the new Action Bar, [])  AssignmentExpression(=, [VariableReference(mMenuInflater, []), Expression(null, [])])    VariableReference(mMenuInflater, [])    Expression(null, [])  AssignmentExpression(=, [VariableReference(ToolbarActionBar tbab, []), Expression(new ToolbarActionBar(toolbar, getTitle(), this), [])])    VariableReference(ToolbarActionBar tbab, [])    Expression(new ToolbarActionBar(toolbar, getTitle(), this), [])  AssignmentExpression(=, [VariableReference(mActionBar, []), Expression(tbab, [])])    VariableReference(mActionBar, [])    Expression(tbab, [])  MethodCall(mWindow.setCallback(tbab.getWrappedWindowCallback()), [VariableReference(mWindow, []), Expression(tbab.getWrappedWindowCallback(), [])])    VariableReference(mWindow, [])    Expression(tbab.getWrappedWindowCallback(), [])  MethodCall(mActionBar.invalidateOptionsMenu(), [VariableReference(mActionBar, []), Expression(, [])])    VariableReference(mActionBar, [])    Expression(, [])  Statement(}, [])",1,"/**
 * Set a {@link android.widget.Toolbar Toolbar} to act as the {@link ActionBar} for this
 * Activity window.
 *
 * <p>When set to a non-null value the {@link #getActionBar()} method will return
 * an {@link ActionBar} object that can be used to control the given toolbar as if it were
 * a traditional window decor action bar. The toolbar's menu will be populated with the
 * Activity's options menu and the navigation button will be wired through the standard
 * {@link android.R.id#home home} menu select action.</p>
 *
 * <p>In order to use a Toolbar within the Activity's window content the application
 * must not request the window feature {@link Window#FEATURE_ACTION_BAR FEATURE_ACTION_BAR}.</p>
 *
 * @param toolbar Toolbar to set as the Activity's action bar
 */
","/**
 * Set a {@link android.widget.Toolbar Toolbar} to act as the {@link ActionBar} for this
 * Activity window.
 *
 * <p>When set to a non-null value the {@link #getActionBar()} method will return
 * an {@link ActionBar} object that can be used to control the given toolbar as if it were
 * a traditional window decor action bar. The toolbar's menu will be populated with the
 * Activity's options menu and the navigation button will be wired through the standard
 * {@link android.R.id#home home} menu select action.</p>
 *
 * <p>In order to use a Toolbar within the Activity's window content the application
 * must not request the window feature {@link Window#FEATURE_ACTION_BAR FEATURE_ACTION_BAR}.</p>
 *
 * @param toolbar Toolbar to set as the Activity's action bar
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,0,"An additional statement `mMenuInflater = null;` has been added to the method, so the change type is 4.","The added statement doesn't affect the return value or exception handling directly; it simply resets the MenuInflater. Therefore, there is no compatibility issue."
<android.print.PrintManager.PrintDocumentAdapterDelegate.MyWriteResultCallback: void onWriteCancelled()>,20,21,<android.print.PrintManager.PrintDocumentAdapterDelegate.MyWriteResultCallback: void onWriteCancelled()>,<android.print.PrintManager.PrintDocumentAdapterDelegate.MyWriteResultCallback: void onWriteCancelled()>,0,"{
    synchronized (mLock) {
        if (mDestroyed) {
            Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?"");
            return;
        }
        clearLocked();
    }
}","{
    final IWriteResultCallback callback;
    synchronized (mLock) {
        callback = mCallback;
    }
    // If the callback is null we are destroyed.
    if (callback == null) {
        Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?"");
        return;
    }
    try {
        callback.onWriteCanceled(mSequence);
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error calling onWriteCanceled"", re);
    } finally {
        destroy();
    }
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (mLock) {, []), Statement(if (mDestroyed) {, []), MethodCall(Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?"", [])]), Statement(return, []), Statement(}, []), Statement(clearLocked(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(synchronized (mLock) {, [])  Statement(if (mDestroyed) {, [])  MethodCall(Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?"", [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?"", [])  Statement(return, [])  Statement(}, [])  Statement(clearLocked(), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(final IWriteResultCallback callback, []), Statement(synchronized (mLock) {, []), AssignmentExpression(=, [VariableReference(callback, []), Expression(mCallback, [])]), Statement(}, []), Statement(// If the callback is null we are destroyed., []), AssignmentExpression(=, [VariableReference(if (callback, []), Expression(, [])]), MethodCall(Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?"", [])]), Statement(return, []), Statement(}, []), Statement(try {, []), MethodCall(callback.onWriteCanceled(mSequence), [VariableReference(callback, []), Expression(mSequence, [])]), Statement(} catch (RemoteException re) {, []), MethodCall(Log.e(LOG_TAG, ""Error calling onWriteCanceled"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error calling onWriteCanceled"", []), Expression(re, [])]), Statement(} finally {, []), Statement(destroy(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  Statement(final IWriteResultCallback callback, [])  Statement(synchronized (mLock) {, [])  AssignmentExpression(=, [VariableReference(callback, []), Expression(mCallback, [])])    VariableReference(callback, [])    Expression(mCallback, [])  Statement(}, [])  Statement(// If the callback is null we are destroyed., [])  AssignmentExpression(=, [VariableReference(if (callback, []), Expression(, [])])    VariableReference(if (callback, [])    Expression(, [])  MethodCall(Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?""), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?"", [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?"", [])  Statement(return, [])  Statement(}, [])  Statement(try {, [])  MethodCall(callback.onWriteCanceled(mSequence), [VariableReference(callback, []), Expression(mSequence, [])])    VariableReference(callback, [])    Expression(mSequence, [])  Statement(} catch (RemoteException re) {, [])  MethodCall(Log.e(LOG_TAG, ""Error calling onWriteCanceled"", re), [VariableReference(Log, []), Expression(LOG_TAG, []), Expression(""Error calling onWriteCanceled"", []), Expression(re, [])])    VariableReference(Log, [])    Expression(LOG_TAG, [])    Expression(""Error calling onWriteCanceled"", [])    Expression(re, [])  Statement(} finally {, [])  Statement(destroy(), [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,3,4","1,2","1,2,3,4","1,2",Several changes have been made: ,"3. A try-catch block has been added to handle `RemoteException` with the associated logging and a call to `destroy()` in finally block, indicating other statement changes (type 4), return statement changes (type 1), and modified exception handling (type 2)."
<android.util.SparseIntArray: int indexOfKey(int)>,18,19,<android.util.SparseIntArray: int indexOfKey(int)>,<android.util.SparseIntArray: int indexOfKey(int)>,0,"{
    return binarySearch(mKeys, 0, mSize, key);
}","{
    return ContainerHelpers.binarySearch(mKeys, mSize, key);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(return binarySearch(mKeys, 0, mSize, key), []), Statement(}, [])])  Statement({, [])  Statement(return binarySearch(mKeys, 0, mSize, key), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(return ContainerHelpers.binarySearch(mKeys, mSize, key), [VariableReference(return ContainerHelpers, []), Expression(mKeys, []), Expression(mSize, []), Expression(key, [])]), Statement(}, [])])  Statement({, [])  MethodCall(return ContainerHelpers.binarySearch(mKeys, mSize, key), [VariableReference(return ContainerHelpers, []), Expression(mKeys, []), Expression(mSize, []), Expression(key, [])])    VariableReference(return ContainerHelpers, [])    Expression(mKeys, [])    Expression(mSize, [])    Expression(key, [])  Statement(}, [])",1,"/**
 * Returns the index for which {@link #keyAt} would return the
 * specified key, or a negative number if the specified
 * key is not mapped.
 */
","/**
 * Returns the index for which {@link #keyAt} would return the
 * specified key, or a negative number if the specified
 * key is not mapped.
 */
",-1,,,-1,-1,-1,-1,-1,"1,5",1,"1,5",1,"The return statement changes from `binarySearch(mKeys, 0, mSize, key)` to `ContainerHelpers.binarySearch(mKeys, mSize, key)`, involving a parameter change for the `binarySearch` method and a switch to a different class method, so it falls under both categories 1 (Return statement changed) and 5 (Dependent API changed).","As the method relied on (binarySearch) has changed and the parameters are altered, it potentially leads to different return values. Therefore, the CI type is 1."
"<android.view.GLES20Canvas: void drawText(String,int,int,float,float,Paint)>",20,21,"<android.view.GLES20Canvas: void drawText(String,int,int,float,float,Paint)>","<android.view.GLES20Canvas: void drawText(String,int,int,float,float,Paint)>",0,"{
    if ((start | end | (end - start) | (text.length() - end)) < 0) {
        throw new IndexOutOfBoundsException();
    }
    int modifiers = setupModifiers(paint);
    try {
        nDrawText(mRenderer, text, start, end, x, y, paint.mBidiFlags, paint.mNativePaint);
    } finally {
        if (modifiers != MODIFIER_NONE)
            nResetModifiers(mRenderer, modifiers);
    }
}","{
    if ((start | end | (end - start) | (text.length() - end)) < 0) {
        throw new IndexOutOfBoundsException();
    }
    nDrawText(mRenderer, text, start, end, x, y, paint.mBidiFlags, paint.mNativePaint, paint.mNativeTypeface);
}",1,"MethodDeclaration(method_body, [Statement({, []), MethodCall(if ((start | end | (end - start) | (text.length() - end)) < 0), [VariableReference(if ((start | end | (end - start) | (text, []), Expression() - end)) < 0, [])]), Statement(throw new IndexOutOfBoundsException(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(int modifiers, []), Expression(setupModifiers(paint), [])]), Statement(try {, []), Statement(} finally {, []), AssignmentExpression(=, [VariableReference(if (modifiers !, []), Expression(MODIFIER_NONE), [])]), Statement(nResetModifiers(mRenderer, modifiers), []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(if ((start | end | (end - start) | (text.length() - end)) < 0), [VariableReference(if ((start | end | (end - start) | (text, []), Expression() - end)) < 0, [])])    VariableReference(if ((start | end | (end - start) | (text, [])    Expression() - end)) < 0, [])  Statement(throw new IndexOutOfBoundsException(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int modifiers, []), Expression(setupModifiers(paint), [])])    VariableReference(int modifiers, [])    Expression(setupModifiers(paint), [])  Statement(try {, [])  Statement(} finally {, [])  AssignmentExpression(=, [VariableReference(if (modifiers !, []), Expression(MODIFIER_NONE), [])])    VariableReference(if (modifiers !, [])    Expression(MODIFIER_NONE), [])  Statement(nResetModifiers(mRenderer, modifiers), [])  Statement(}, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), MethodCall(if ((start | end | (end - start) | (text.length() - end)) < 0), [VariableReference(if ((start | end | (end - start) | (text, []), Expression() - end)) < 0, [])]), Statement(throw new IndexOutOfBoundsException(), []), Statement(}, []), Statement(}, [])])  Statement({, [])  MethodCall(if ((start | end | (end - start) | (text.length() - end)) < 0), [VariableReference(if ((start | end | (end - start) | (text, []), Expression() - end)) < 0, [])])    VariableReference(if ((start | end | (end - start) | (text, [])    Expression() - end)) < 0, [])  Statement(throw new IndexOutOfBoundsException(), [])  Statement(}, [])  Statement(}, [])",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"2,4",2,"1,2,4,5","1,2",- The `nDrawText` method call in the late version has an additional parameter `paint.mNativeTypeface` which was not present in the early version.,
<android.content.pm.ShortcutInfo.Builder: Builder setActivity(ComponentName)>,29,30,<android.content.pm.ShortcutInfo.Builder: Builder setActivity(ComponentName)>,<android.content.pm.ShortcutInfo.Builder: Builder setActivity(ComponentName)>,0,"{
    mActivity = Preconditions.checkNotNull(activity, ""activity cannot be null"");
    return this;
}","{
    mActivity = Objects.requireNonNull(activity, ""activity cannot be null"");
    return this;
}",1,"MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mActivity, []), Expression(Preconditions.checkNotNull(activity, ""activity cannot be null""), [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mActivity, []), Expression(Preconditions.checkNotNull(activity, ""activity cannot be null""), [])])    VariableReference(mActivity, [])    Expression(Preconditions.checkNotNull(activity, ""activity cannot be null""), [])  Statement(return this, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(mActivity, []), Expression(Objects.requireNonNull(activity, ""activity cannot be null""), [])]), Statement(return this, []), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(mActivity, []), Expression(Objects.requireNonNull(activity, ""activity cannot be null""), [])])    VariableReference(mActivity, [])    Expression(Objects.requireNonNull(activity, ""activity cannot be null""), [])  Statement(return this, [])  Statement(}, [])",1,"/**
 * Sets the target activity.  A shortcut will be shown along with this activity's icon
 * on the launcher.
 *
 * When selecting a target activity, keep the following in mind:
 * <ul>
 * <li>All dynamic shortcuts must have a target activity.  When a shortcut with no target
 * activity is published using
 * {@link ShortcutManager#addDynamicShortcuts(List)} or
 * {@link ShortcutManager#setDynamicShortcuts(List)},
 * the first main activity defined in the app's <code>AndroidManifest.xml</code>
 * file is used.
 *
 * <li>Only ""main"" activities&mdash;ones that define the {@link Intent#ACTION_MAIN}
 * and {@link Intent#CATEGORY_LAUNCHER} intent filters&mdash;can be target
 * activities.
 *
 * <li>By default, the first main activity defined in the app's manifest is
 * the target activity.
 *
 * <li>A target activity must belong to the publisher app.
 * </ul>
 *
 * @see ShortcutInfo#getActivity()
 */
","/**
 * Sets the target activity.  A shortcut will be shown along with this activity's icon
 * on the launcher.
 *
 * When selecting a target activity, keep the following in mind:
 * <ul>
 * <li>All dynamic shortcuts must have a target activity.  When a shortcut with no target
 * activity is published using
 * {@link ShortcutManager#addDynamicShortcuts(List)} or
 * {@link ShortcutManager#setDynamicShortcuts(List)},
 * the first main activity defined in the app's <code>AndroidManifest.xml</code>
 * file is used.
 *
 * <li>Only ""main"" activities&mdash;ones that define the {@link Intent#ACTION_MAIN}
 * and {@link Intent#CATEGORY_LAUNCHER} intent filters&mdash;can be target
 * activities.
 *
 * <li>By default, the first main activity defined in the app's manifest is
 * the target activity.
 *
 * <li>A target activity must belong to the publisher app.
 * </ul>
 *
 * @see ShortcutInfo#getActivity()
 */
",-1,[@NonNull],[@NonNull],-1,-1,-1,-1,-1,4,0,5,0,"The implementation of the null check has changed from `Preconditions.checkNotNull` to `Objects.requireNonNull`. This indicates that there's a change in the dependent API used for the null check, so the change type is 5.","The change from `Preconditions.checkNotNull` to `Objects.requireNonNull` retains the same functionality of checking for null values with a similar exception message. Therefore, this change is unlikely to cause different behaviors, leading to no compatibility issues."
"<android.util.LongSparseArray: void setValueAt(int,E)>",28,29,"<android.util.LongSparseArray: void setValueAt(int,E)>","<android.util.LongSparseArray: void setValueAt(int,E)>",0,"{
    if (mGarbage) {
        gc();
    }
    mValues[index] = value;
}","{
    if (index >= mSize && UtilConfig.sThrowExceptionForUpperArrayOutOfBounds) {
        // Check if exception should be thrown outside of the critical path.
        throw new ArrayIndexOutOfBoundsException(index);
    }
    if (mGarbage) {
        gc();
    }
    mValues[index] = value;
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(if (mGarbage) {, []), Statement(gc(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mValues[index], []), Expression(value, [])]), Statement(}, [])])  Statement({, [])  Statement(if (mGarbage) {, [])  Statement(gc(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mValues[index], []), Expression(value, [])])    VariableReference(mValues[index], [])    Expression(value, [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), AssignmentExpression(=, [VariableReference(if (index >, []), Expression(mSize && UtilConfig.sThrowExceptionForUpperArrayOutOfBounds) {, [])]), Statement(// Check if exception should be thrown outside of the critical path., []), Statement(throw new ArrayIndexOutOfBoundsException(index), []), Statement(}, []), Statement(if (mGarbage) {, []), Statement(gc(), []), Statement(}, []), AssignmentExpression(=, [VariableReference(mValues[index], []), Expression(value, [])]), Statement(}, [])])  Statement({, [])  AssignmentExpression(=, [VariableReference(if (index >, []), Expression(mSize && UtilConfig.sThrowExceptionForUpperArrayOutOfBounds) {, [])])    VariableReference(if (index >, [])    Expression(mSize && UtilConfig.sThrowExceptionForUpperArrayOutOfBounds) {, [])  Statement(// Check if exception should be thrown outside of the critical path., [])  Statement(throw new ArrayIndexOutOfBoundsException(index), [])  Statement(}, [])  Statement(if (mGarbage) {, [])  Statement(gc(), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(mValues[index], []), Expression(value, [])])    VariableReference(mValues[index], [])    Expression(value, [])  Statement(}, [])",1,"/**
 * Given an index in the range <code>0...size()-1</code>, sets a new
 * value for the <code>index</code>th key-value mapping that this
 * LongSparseArray stores.
 */
","/**
 * Given an index in the range <code>0...size()-1</code>, sets a new
 * value for the <code>index</code>th key-value mapping that this
 * LongSparseArray stores.
 *
 * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for
 * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an
 * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting
 * {@link android.os.Build.VERSION_CODES#Q} and later.</p>
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,"2,3",2,"A new exception handling statement (throw new ArrayIndexOutOfBoundsException(index)) has been introduced along with a new control dependency (if statement) checking the index value. Thus, the code change type is 2,3.","The new exception handling statement can potentially throw a different exception (ArrayIndexOutOfBoundsException) when the index is beyond the upper bound, resulting in a change in exception handling behaviour. Therefore, the CI type is 2."
"<android.content.res.AssetManager: XmlBlock openXmlBlockAsset(int,String)>",20,21,"<android.content.res.AssetManager: XmlBlock openXmlBlockAsset(int,String)>","<android.content.res.AssetManager: XmlBlock openXmlBlockAsset(int,String)>",0,"{
    synchronized (this) {
        if (!mOpen) {
            throw new RuntimeException(""Assetmanager has been closed"");
        }
        int xmlBlock = openXmlAssetNative(cookie, fileName);
        if (xmlBlock != 0) {
            XmlBlock res = new XmlBlock(this, xmlBlock);
            incRefsLocked(res.hashCode());
            return res;
        }
    }
    throw new FileNotFoundException(""Asset XML file: "" + fileName);
}","{
    synchronized (this) {
        if (!mOpen) {
            throw new RuntimeException(""Assetmanager has been closed"");
        }
        long xmlBlock = openXmlAssetNative(cookie, fileName);
        if (xmlBlock != 0) {
            XmlBlock res = new XmlBlock(this, xmlBlock);
            incRefsLocked(res.hashCode());
            return res;
        }
    }
    throw new FileNotFoundException(""Asset XML file: "" + fileName);
}",1,"MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), Statement(if (!mOpen) {, []), Statement(throw new RuntimeException(""Assetmanager has been closed""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(int xmlBlock, []), Expression(openXmlAssetNative(cookie, fileName), [])]), AssignmentExpression(=, [VariableReference(if (xmlBlock !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(XmlBlock res, []), Expression(new XmlBlock(this, xmlBlock), [])]), MethodCall(incRefsLocked(res.hashCode()), [VariableReference(incRefsLocked(res, []), Expression(), [])]), Statement(return res, []), Statement(}, []), Statement(}, []), Statement(throw new FileNotFoundException(""Asset XML file: "" + fileName), []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  Statement(if (!mOpen) {, [])  Statement(throw new RuntimeException(""Assetmanager has been closed""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(int xmlBlock, []), Expression(openXmlAssetNative(cookie, fileName), [])])    VariableReference(int xmlBlock, [])    Expression(openXmlAssetNative(cookie, fileName), [])  AssignmentExpression(=, [VariableReference(if (xmlBlock !, []), Expression(0) {, [])])    VariableReference(if (xmlBlock !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(XmlBlock res, []), Expression(new XmlBlock(this, xmlBlock), [])])    VariableReference(XmlBlock res, [])    Expression(new XmlBlock(this, xmlBlock), [])  MethodCall(incRefsLocked(res.hashCode()), [VariableReference(incRefsLocked(res, []), Expression(), [])])    VariableReference(incRefsLocked(res, [])    Expression(), [])  Statement(return res, [])  Statement(}, [])  Statement(}, [])  Statement(throw new FileNotFoundException(""Asset XML file: "" + fileName), [])  Statement(}, [])","MethodDeclaration(method_body, [Statement({, []), Statement(synchronized (this) {, []), Statement(if (!mOpen) {, []), Statement(throw new RuntimeException(""Assetmanager has been closed""), []), Statement(}, []), AssignmentExpression(=, [VariableReference(long xmlBlock, []), Expression(openXmlAssetNative(cookie, fileName), [])]), AssignmentExpression(=, [VariableReference(if (xmlBlock !, []), Expression(0) {, [])]), AssignmentExpression(=, [VariableReference(XmlBlock res, []), Expression(new XmlBlock(this, xmlBlock), [])]), MethodCall(incRefsLocked(res.hashCode()), [VariableReference(incRefsLocked(res, []), Expression(), [])]), Statement(return res, []), Statement(}, []), Statement(}, []), Statement(throw new FileNotFoundException(""Asset XML file: "" + fileName), []), Statement(}, [])])  Statement({, [])  Statement(synchronized (this) {, [])  Statement(if (!mOpen) {, [])  Statement(throw new RuntimeException(""Assetmanager has been closed""), [])  Statement(}, [])  AssignmentExpression(=, [VariableReference(long xmlBlock, []), Expression(openXmlAssetNative(cookie, fileName), [])])    VariableReference(long xmlBlock, [])    Expression(openXmlAssetNative(cookie, fileName), [])  AssignmentExpression(=, [VariableReference(if (xmlBlock !, []), Expression(0) {, [])])    VariableReference(if (xmlBlock !, [])    Expression(0) {, [])  AssignmentExpression(=, [VariableReference(XmlBlock res, []), Expression(new XmlBlock(this, xmlBlock), [])])    VariableReference(XmlBlock res, [])    Expression(new XmlBlock(this, xmlBlock), [])  MethodCall(incRefsLocked(res.hashCode()), [VariableReference(incRefsLocked(res, []), Expression(), [])])    VariableReference(incRefsLocked(res, [])    Expression(), [])  Statement(return res, [])  Statement(}, [])  Statement(}, [])  Statement(throw new FileNotFoundException(""Asset XML file: "" + fileName), [])  Statement(}, [])",1,"/*package*/
","/*package*/
",-1,,,-1,-1,-1,-1,-1,4,0,"1,5",1,"The variable type for `xmlBlock` has been changed from `int` to `long`, implying a change in the return value from `openXmlAssetNative()`. This counts as both a return statement change and a dependent API change, so the change type is 1,5.","The change in the variable type from `int` to `long` can lead to a CI since this could potentially lead to different return values, so the CI type is 1."
