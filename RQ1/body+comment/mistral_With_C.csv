Number,Signature,Early_Version,Late_Version,Early_Signature,Late_Signature,Diff_Signature,Early_Implementation,Late_Implementation,Diff_Implementation,Early_Comment,Late_Comment,Diff_Comment,Early_Annotation,Late_Annotation,Diff_Annotation,Early_Callback,Late_Callback,Diff_Callback,GT_CI_ControlFlow,GT_Change_Type,GT_CI_Type,pred_change,pred_CI,change_description,CI_description
1,<android.os.StrictMode.ThreadPolicy.Builder: Builder permitUnbufferedIo()>,28,29,<android.os.StrictMode.ThreadPolicy.Builder: Builder permitUnbufferedIo()>,<android.os.StrictMode.ThreadPolicy.Builder: Builder permitUnbufferedIo()>,0,"{
    return disable(DETECT_UNBUFFERED_IO);
}","{
    return disable(DETECT_THREAD_UNBUFFERED_IO);
}",1,"/**
 * Disable detection of unbuffered input/output operations.
 */","/**
 * Disable detection of unbuffered input/output operations.
 */",0,,[@NonNull],1,0,0,0,1,1,1,"1,5",1,"The return statement has changed from `disable(DETECT_UNBUFFERED_IO)` to `disable(DETECT_THREAD_UNBUFFERED_IO)` and the parameter type of `disable()` also changed, so the code change type is 1,5.","The change of return statement will make the API potentially return a different value, so the CI type is 1."
2,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,23,24,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,0,"{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        Log.e(TAG, ""Unable to talk to notification manager. Woe!"", e);
    }
    return INTERRUPTION_FILTER_UNKNOWN;
}","{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Gets the current notification interruption filter.
 *
 * <p>
 * The interruption filter defines which notifications are allowed to interrupt the user
 * (e.g. via sound &amp; vibration) and is applied globally.
 * @return One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when
 * unavailable.
 *
 * <p>
 * Only available if policy access is granted to this package.
 * See {@link #isNotificationPolicyAccessGranted}.
 */","/**
 * Gets the current notification interruption filter.
 *
 * <p>
 * The interruption filter defines which notifications are allowed to interrupt the user
 * (e.g. via sound &amp; vibration) and is applied globally.
 * @return One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when
 * unavailable.
 */",1,,[@InterruptionFilter],0,0,0,0,"1,2","1,2","1,2","1,2",2,"The implementation of the catch block for RemoteException has been changed. In the early version, the catch block logs the error and returns INTERRUPTION\_FILTER\_UNKNOWN. In the late version, the catch block rethrows the exception as a RuntimeException using the rethrowFromSystemServer() method.","The change in the catch block implementation can lead to a compatibility issue. In the early version, the method would return INTERRUPTION\_FILTER\_UNKNOWN in case of a RemoteException. In the late version, the method would throw a RuntimeException in case of a RemoteException. This can cause a compatibility issue for the clients of the API who are not expecting a RuntimeException to be thrown and have not added a catch block for it."
3,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,25,26,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,<android.app.NotificationManager: int getCurrentInterruptionFilter()>,0,"{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    final INotificationManager service = getService();
    try {
        return zenModeToInterruptionFilter(service.getZenMode());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",0,"/**
 * Gets the current notification interruption filter.
 *
 * <p>
 * The interruption filter defines which notifications are allowed to interrupt the user
 * (e.g. via sound &amp; vibration) and is applied globally.
 * @return One of the INTERRUPTION_FILTER_ constants, or INTERRUPTION_FILTER_UNKNOWN when
 * unavailable.
 */","/**
 * Gets the current notification interruption filter.
 * <p>
 * The interruption filter defines which notifications are allowed to
 * interrupt the user (e.g. via sound &amp; vibration) and is applied
 * globally.
 */",1,[@InterruptionFilter],[@InterruptionFilter],0,0,0,0,0,0,0,0,0,There is no difference in the implementation and annotations between the early version and late version of the API `android.app.NotificationManager: int getCurrentInterruptionFilter()`.,No compatibility issues exist for the API between the two versions.
9,<android.os.Environment: boolean isExternalStorageEmulated()>,27,28,<android.os.Environment: boolean isExternalStorageEmulated()>,<android.os.Environment: boolean isExternalStorageEmulated()>,0,"{
    if (isStorageDisabled())
        return false;
    final File externalDir = sCurrentUser.getExternalDirs()[0];
    return isExternalStorageEmulated(externalDir);
}","{
    final File externalDir = sCurrentUser.getExternalDirs()[0];
    return isExternalStorageEmulated(externalDir);
}",1,"/**
 * Returns whether the primary shared/external storage media is emulated.
 * <p>
 * The contents of emulated storage devices are backed by a private user
 * data partition, which means there is little benefit to apps storing data
 * here instead of the private directories returned by
 * {@link Context#getFilesDir()}, etc.
 * <p>
 * This returns true when emulated storage is backed by either internal
 * storage or an adopted storage device.
 *
 * @see DevicePolicyManager#setStorageEncryption(android.content.ComponentName,
 * boolean)
 */","/**
 * Returns whether the primary shared/external storage media is emulated.
 * <p>
 * The contents of emulated storage devices are backed by a private user
 * data partition, which means there is little benefit to apps storing data
 * here instead of the private directories returned by
 * {@link Context#getFilesDir()}, etc.
 * <p>
 * This returns true when emulated storage is backed by either internal
 * storage or an adopted storage device.
 *
 * @see DevicePolicyManager#setStorageEncryption(android.content.ComponentName,
 * boolean)
 */",0,,,0,0,0,0,1,"1,3",1,1,1,"The code change is that the early version has an if statement with a return statement inside it, while the late version does not have the if statement and the return statement. This means that the late version will always execute the `isExternalStorageEmulated(externalDir)` method, while the early version will return false if `isStorageDisabled()` is true.","The compatibility issue is that the late version will always return the result of `isExternalStorageEmulated(externalDir)`, while the early version will return false under certain circumstances. This means that apps that rely on the result of `isExternalStorageEmulated()` method may behave differently between the two versions. Specifically, if the device's storage is disabled and the app is designed to handle this situation by checking the result of `isExternalStorageEmulated()`, it may not work as expected on the late version."
10,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",23,24,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",android.app.usage.NetworkStatsManager.queryDetails,0,"{
    NetworkTemplate template = createTemplate(networkType, subscriberId);
    if (template == null) {
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}",1,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time or uid. This means
 * buckets' start and end timestamps are going to be between 'startTime' and 'endTime'
 * parameters, state is going to be {@link NetworkStats.Bucket#STATE_ALL} and uid will vary.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time or uid. This means
 * buckets' start and end timestamps are going to be between 'startTime' and 'endTime'
 * parameters. State is going to be {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE} and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",1,,,0,0,0,0,1,"1,2,3","1,2","2,5","1,2","The early version of the function consists of a simple if-else block, where if the template is null, it returns null. In the late version, this if-else block is replaced by a try-catch block, where the createTemplate function call is wrapped inside the try block, and if an IllegalArgumentException is thrown, it returns null. Additionally, a new parameter 'tag' is added to the NetworkStats constructor in the late version.","The change in the control flow from an if-else block to a try-catch block can potentially lead to different behaviors in the two versions. In the early version, if the createTemplate function call fails for any reason other than returning null, it will result in an unhandled exception. In contrast, the late version will only return null if an IllegalArgumentException is thrown, and any other exceptions will still be unhandled."
11,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",25,26,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>","<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",0,"{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}",0,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time or uid. This means
 * buckets' start and end timestamps are going to be between 'startTime' and 'endTime'
 * parameters. State is going to be {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE} and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",1,,,0,0,0,0,1,0,0,0,0,The code implementation and annotations have not undergone any changes between the two versions.,"No Compatibility Issue (CI) exists, as the code changes do not result in different behaviours."
12,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",26,27,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>","<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",0,"{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, mFlags, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}",1,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",0,,,0,0,0,0,"1,2","1,5",1,5,1,"A new parameter 'mFlags' has been added in the constructor of NetworkStats class between the two versions. This is a dependent API change and the value of 'mFlags' will affect the behavior of NetworkStats object, so the change type is 5.","The addition of 'mFlags' parameter in the constructor of NetworkStats class could potentially cause the API to return a different value. Therefore, it should be regarded as a Compatibility Issue caused by potential different return values or types, so the CI type is 1."
13,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",27,28,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>","<android.app.usage.NetworkStatsManager: NetworkStats queryDetails(int,String,long,long)>",0,"{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, mFlags, startTime, endTime);
    result.startUserUidEnumeration();
    return result;
}","{
    NetworkTemplate template;
    try {
        template = createTemplate(networkType, subscriberId);
    } catch (IllegalArgumentException e) {
        if (DBG)
            Log.e(TAG, ""Cannot create template"", e);
        return null;
    }
    NetworkStats result;
    result = new NetworkStats(mContext, template, mFlags, startTime, endTime, mService);
    result.startUserUidEnumeration();
    return result;
}",1,"/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE}, metered is going to be
 * {@link NetworkStats.Bucket#METERED_ALL}, and roaming is going to be
 * {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */","/**
 * Query network usage statistics details. Result filtered to include only uids belonging to
 * calling user. Result is aggregated over state but not aggregated over time, uid, tag,
 * metered, nor roaming. This means buckets' start and end timestamps are going to be between
 * 'startTime' and 'endTime' parameters. State is going to be
 * {@link NetworkStats.Bucket#STATE_ALL}, uid will vary,
 * tag {@link NetworkStats.Bucket#TAG_NONE},
 * default network is going to be {@link NetworkStats.Bucket#DEFAULT_NETWORK_ALL},
 * metered is going to be {@link NetworkStats.Bucket#METERED_ALL},
 * and roaming is going to be {@link NetworkStats.Bucket#ROAMING_ALL}.
 * <p>Only includes buckets that atomically occur in the inclusive time range. Doesn't
 * interpolate across partial buckets. Since bucket length is in the order of hours, this
 * method cannot be used to measure data usage on a fine grained time scale.
 *
 * @param networkType As defined in {@link ConnectivityManager}, e.g.
 * {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI}
 * etc.
 * @param subscriberId If applicable, the subscriber id of the network interface.
 * @param startTime Start of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime End of period. Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @return Statistics object or null if permissions are insufficient or error happened during
 * statistics collection.
 */",1,,,0,0,0,0,"1,2","1,5",1,5,1,"A new parameter is added to the constructor of NetworkStats in the late implementation, which could potentially lead to different behaviors in the returned NetworkStats object.","The addition of a new parameter to the constructor of NetworkStats could potentially lead to a different NetworkStats object being returned in the late version, as compared to the early version. This could be a Compatibility Issue, as it could cause unexpected behaviors in the code that depends on the returned object."
14,<android.animation.ValueAnimator: long getFrameDelay()>,23,24,<android.animation.ValueAnimator: long getFrameDelay()>,<android.animation.ValueAnimator: long getFrameDelay()>,0,"{
    return Choreographer.getFrameDelay();
}","{
    return AnimationHandler.getInstance().getFrameDelay();
}",1,"/**
 * The amount of time, in milliseconds, between each frame of the animation. This is a
 * requested time that the animation will attempt to honor, but the actual delay between
 * frames may be different, depending on system load and capabilities. This is a static
 * function because the same delay will be applied to all animations, since they are all
 * run off of a single timing loop.
 *
 * The frame delay may be ignored when the animation system uses an external timing
 * source, such as the display refresh rate (vsync), to govern animations.
 *
 * @return the requested time between frames, in milliseconds
 */","/**
 * The amount of time, in milliseconds, between each frame of the animation. This is a
 * requested time that the animation will attempt to honor, but the actual delay between
 * frames may be different, depending on system load and capabilities. This is a static
 * function because the same delay will be applied to all animations, since they are all
 * run off of a single timing loop.
 *
 * The frame delay may be ignored when the animation system uses an external timing
 * source, such as the display refresh rate (vsync), to govern animations.
 *
 * Note that this method should be called from the same thread that {@link #start()} is
 * called in order to check the frame delay for that animation. A runtime exception will be
 * thrown if the calling thread does not have a Looper.
 *
 * @return the requested time between frames, in milliseconds
 */",1,,,0,0,0,0,1,1,1,5,1,"The implementation of the API has been changed, from calling Choreographer.getFrameDelay() to calling AnimationHandler.getInstance().getFrameDelay(). This is a change in the dependent API, so the code change type is 5.","The change in the dependent API may cause the API to return a different value, so it is a Compatibility Issue caused by potential different return values or types, and the CI type is 1."
16,<android.provider.Settings: boolean canDrawOverlays(Context)>,23,24,<android.provider.Settings: boolean canDrawOverlays(Context)>,<android.provider.Settings: boolean canDrawOverlays(Context)>,0,"{
    int uid = Binder.getCallingUid();
    return Settings.isCallingPackageAllowedToDrawOverlays(context, uid, Settings.getPackageNameForUid(context, uid), false);
}","{
    return Settings.isCallingPackageAllowedToDrawOverlays(context, Process.myUid(), context.getOpPackageName(), false);
}",1,"/**
 * An app can use this method to check if it is currently allowed to draw on top of other
 * apps. In order to be allowed to do so, an app must first declare the
 * {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission in its manifest. If it
 * is currently disallowed, it can prompt the user to grant it this capability through a
 * management UI by sending an Intent with action
 * {@link android.provider.Settings#ACTION_MANAGE_OVERLAY_PERMISSION}.
 *
 * @param context A context
 * @return true if the calling app can draw on top of other apps, false otherwise.
 */","/**
 * Checks if the specified context can draw on top of other apps. As of API
 * level 23, an app cannot draw on top of other apps unless it declares the
 * {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission in its
 * manifest, <em>and</em> the user specifically grants the app this
 * capability. To prompt the user to grant this approval, the app must send an
 * intent with the action
 * {@link android.provider.Settings#ACTION_MANAGE_OVERLAY_PERMISSION}, which
 * causes the system to display a permission management screen.
 *
 * @param context App context.
 * @return true if the specified context can draw on top of other apps, false otherwise
 */",1,,,0,0,0,0,"1,2","1,5",1,1,1,"The return statement in the implementation of the API has been changed from ""Settings.isCallingPackageAllowedToDrawOverlays(context, uid, Settings.getPackageNameForUid(context, uid), false)"" to ""Settings.isCallingPackageAllowedToDrawOverlays(context, Process.myUid(), context.getOpPackageName(), false)"". This change could potentially cause the API to return different values as the parameters being passed to the ""Settings.isCallingPackageAllowedToDrawOverlays"" method have been changed.","The change in the return statement of the API could potentially cause it to return different values in different versions, which could break the functionality of the application that is using this API. This is a Compatibility Issue caused by potential different return values or types."
18,<android.app.NotificationManager.Policy: String toString()>,23,24,<android.app.NotificationManager.Policy: String toString()>,<android.app.NotificationManager.Policy: String toString()>,0,"{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + ""]"";
}","{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + "",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects) + ""]"";
}",1,,,0,[@Override],[@Override],0,0,0,0,1,1,1,1,1,"The implementation of the ""toString()"" method has changed. Specifically, a new variable ""suppressedVisualEffects"" is included in the string representation of the ""NotificationManager.Policy"" object in the late version.",The change in the "toString()" method implementation can lead to different behaviors in the sense that the string representation of the "NotificationManager.Policy" object will be different in the early and late versions. This can potentially cause compatibility issues if the application code depends on the specific format of the string representation.
19,<android.app.NotificationManager.Policy: String toString()>,27,28,<android.app.NotificationManager.Policy: String toString()>,<android.app.NotificationManager.Policy: String toString()>,0,"{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + "",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects) + ""]"";
}","{
    return ""NotificationManager.Policy["" + ""priorityCategories="" + priorityCategoriesToString(priorityCategories) + "",priorityCallSenders="" + prioritySendersToString(priorityCallSenders) + "",priorityMessageSenders="" + prioritySendersToString(priorityMessageSenders) + "",suppressedVisualEffects="" + suppressedEffectsToString(suppressedVisualEffects) + "",areChannelsBypassingDnd="" + (((state & STATE_CHANNELS_BYPASSING_DND) != 0) ? ""true"" : ""false"") + ""]"";
}",1,,,0,[@Override],[@Override],0,0,0,0,1,1,1,1,1,"The return statement has been changed. In the late version, a new field ""areChannelsBypassingDnd"" has been added to the string representation of the NotificationManager.Policy object.","The change in the return statement can lead to different behaviors. In the early version, the string representation of the NotificationManager.Policy object does not include the ""areChannelsBypassingDnd"" field. Therefore, if a developer is relying on the string representation of the NotificationManager.Policy object to be consistent across different versions of the Android OS, then this change can cause a compatibility issue. For example, if a developer is using the string representation of the NotificationManager.Policy object to persist the object's state in a database or a file, then the data stored in the early version will be missing the ""areChannelsBypassingDnd"" field, and the data stored in the late version will include it. This can cause compatibility issues when the developer tries to read the data stored in the early version in the late version, or vice versa."
23,<android.text.Html: String toHtml(Spanned)>,23,24,<android.text.Html: String toHtml(Spanned)>,<android.text.Html: String toHtml(Spanned)>,0,"{
    StringBuilder out = new StringBuilder();
    withinHtml(out, text);
    return out.toString();
}","{
    return toHtml(text, TO_HTML_PARAGRAPH_LINES_CONSECUTIVE);
}",1,"/**
 * Returns an HTML representation of the provided Spanned text. A best effort is
 * made to add HTML tags corresponding to spans. Also note that HTML metacharacters
 * (such as ""&lt;"" and ""&amp;"") within the input text are escaped.
 *
 * @param text input text to convert
 * @return string containing input converted to HTML
 */","/**
 * @deprecated use {@link #toHtml(Spanned, int)} instead.
 */",1,,[@Deprecated],1,0,0,0,1,"1,4,5",1,1,1,The implementation of the method has been changed from using a StringBuilder to build an HTML representation of the provided Spanned text to a call to the `toHtml` method with two arguments.,"The change in implementation can potentially lead to different HTML representations of the same Spanned text, causing a compatibility issue."
27,<android.app.Activity: void stopLockTask()>,27,28,<android.app.Activity: void stopLockTask()>,<android.app.Activity: void stopLockTask()>,0,"{
    try {
        ActivityManager.getService().stopLockTaskMode();
    } catch (RemoteException e) {
    }
}","{
    try {
        ActivityManager.getService().stopLockTaskModeByToken(mToken);
    } catch (RemoteException e) {
    }
}",1,"/**
 * Allow the user to switch away from the current task.
 *
 * Called to end the mode started by {@link Activity#startLockTask}. This
 * can only be called by activities that have successfully called
 * startLockTask previously.
 *
 * This will allow the user to exit this app and move onto other activities.
 * <p>Note: This method should only be called when the activity is user-facing. That is,
 * between onResume() and onPause().
 * <p>Note: If there are other tasks below this one that are also locked then calling this
 * method will immediately finish this task and resume the previous locked one, remaining in
 * lockTask mode.
 *
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */","/**
 * Stop the current task from being locked.
 *
 * <p>Called to end the LockTask or screen pinning mode started by {@link #startLockTask()}.
 * This can only be called by activities that have called {@link #startLockTask()} previously.
 *
 * <p><strong>Note:</strong> If the device is in LockTask mode that is not initially started
 * by this activity, then calling this method will not terminate the LockTask mode, but only
 * finish its own task. The device will remain in LockTask mode, until the activity which
 * started the LockTask mode calls this method, or until its whitelist authorization is revoked
 * by {@link DevicePolicyManager#setLockTaskPackages(ComponentName, String[])}.
 *
 * @see #startLockTask()
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */",1,,,0,0,0,0,1,4,0,"5, 1",1,The code change is in the method implementation where the method "stopLockTaskMode()" is replaced with "stopLockTaskModeByToken(mToken)". This change is classified as 5 (Dependent API changed) and 1 (Return statement changed) because the return type of the two methods might be different and also the new method has an additional parameter "mToken".,The Compatibility Issue is caused by the potential different return values or types of the two methods. The change in the method implementation might affect the behavior of the API and the dependent code. The developers should be aware of this change and update the dependent code accordingly to avoid any issues.
28,<android.app.Activity: void stopLockTask()>,28,29,<android.app.Activity: void stopLockTask()>,<android.app.Activity: void stopLockTask()>,0,"{
    try {
        ActivityManager.getService().stopLockTaskModeByToken(mToken);
    } catch (RemoteException e) {
    }
}","{
    try {
        ActivityTaskManager.getService().stopLockTaskModeByToken(mToken);
    } catch (RemoteException e) {
    }
}",1,"/**
 * Stop the current task from being locked.
 *
 * <p>Called to end the LockTask or screen pinning mode started by {@link #startLockTask()}.
 * This can only be called by activities that have called {@link #startLockTask()} previously.
 *
 * <p><strong>Note:</strong> If the device is in LockTask mode that is not initially started
 * by this activity, then calling this method will not terminate the LockTask mode, but only
 * finish its own task. The device will remain in LockTask mode, until the activity which
 * started the LockTask mode calls this method, or until its whitelist authorization is revoked
 * by {@link DevicePolicyManager#setLockTaskPackages(ComponentName, String[])}.
 *
 * @see #startLockTask()
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */","/**
 * Stop the current task from being locked.
 *
 * <p>Called to end the LockTask or screen pinning mode started by {@link #startLockTask()}.
 * This can only be called by activities that have called {@link #startLockTask()} previously.
 *
 * <p><strong>Note:</strong> If the device is in LockTask mode that is not initially started
 * by this activity, then calling this method will not terminate the LockTask mode, but only
 * finish its own task. The device will remain in LockTask mode, until the activity which
 * started the LockTask mode calls this method, or until its whitelist authorization is revoked
 * by {@link DevicePolicyManager#setLockTaskPackages(ComponentName, String[])}.
 *
 * @see #startLockTask()
 * @see android.R.attr#lockTaskMode
 * @see ActivityManager#getLockTaskModeState()
 */",0,,,0,0,0,0,1,4,0,5,1,"The code change is classified as 5) Dependent API changed, as the method name of the dependent API has been changed from ""ActivityManager.getService()"" to ""ActivityTaskManager.getService()"".","The Compatibility Issue is classified as 1) Compatibility Issue caused by potential different return values or types, as the change of the dependent API may lead to a different behavior of the stopLockTask() method, such as returning a different value or throwing an exception."
29,<android.animation.ValueAnimator: void end()>,23,24,<android.animation.ValueAnimator: void end()>,<android.animation.ValueAnimator: void end()>,0,"{
    AnimationHandler handler = getOrCreateAnimationHandler();
    if (!handler.mAnimations.contains(this) && !handler.mPendingAnimations.contains(this)) {
        // Special case if the animation has not yet started; get it ready for ending
        mStartedDelay = false;
        startAnimation(handler);
        mStarted = true;
    } else if (!mInitialized) {
        initAnimation();
    }
    animateValue(mPlayingBackwards ? 0f : 1f);
    endAnimation(handler);
}","{
    if (Looper.myLooper() == null) {
        throw new AndroidRuntimeException(""Animators may only be run on Looper threads"");
    }
    if (!mRunning) {
        // Special case if the animation has not yet started; get it ready for ending
        startAnimation();
        mStarted = true;
    } else if (!mInitialized) {
        initAnimation();
    }
    animateValue(shouldPlayBackward(mRepeatCount) ? 0f : 1f);
    endAnimation();
}",1,,,0,[@Override],[@Override],0,0,0,0,1,"2,3,4",2,"1, 3, 4","1, 2",Three changes have been made in the late version of the API:,3. The method for calculating the playback direction has been changed from `mPlayingBackwards` to `shouldPlayBackward(mRepeatCount)`.
31,"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int,Theme)>",23,24,"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int,Theme)>","<android.content.res.Resources: Drawable loadDrawable(TypedValue,int,Theme)>",0,"{
    if (TRACE_FOR_PRELOAD) {
        // Log only framework resources
        if ((id >>> 24) == 0x1) {
            final String name = getResourceName(id);
            if (name != null) {
                Log.d(""PreloadDrawable"", name);
            }
        }
    }
    final boolean isColorDrawable;
    final DrawableCache caches;
    final long key;
    if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
        isColorDrawable = true;
        caches = mColorDrawableCache;
        key = value.data;
    } else {
        isColorDrawable = false;
        caches = mDrawableCache;
        key = (((long) value.assetCookie) << 32) | value.data;
    }
    // that was inflated against the specified theme.
    if (!mPreloading) {
        final Drawable cachedDrawable = caches.getInstance(key, theme);
        if (cachedDrawable != null) {
            return cachedDrawable;
        }
    }
    // Next, check preloaded drawables. These may contain unresolved theme
    // attributes.
    final ConstantState cs;
    if (isColorDrawable) {
        cs = sPreloadedColorDrawables.get(key);
    } else {
        cs = sPreloadedDrawables[mConfiguration.getLayoutDirection()].get(key);
    }
    Drawable dr;
    if (cs != null) {
        dr = cs.newDrawable(this);
    } else if (isColorDrawable) {
        dr = new ColorDrawable(value.data);
    } else {
        dr = loadDrawableForCookie(value, id, null);
    }
    // Determine if the drawable has unresolved theme attributes. If it
    // does, we'll need to apply a theme and store it in a theme-specific
    // cache.
    final boolean canApplyTheme = dr != null && dr.canApplyTheme();
    if (canApplyTheme && theme != null) {
        dr = dr.mutate();
        dr.applyTheme(theme);
        dr.clearMutated();
    }
    // cache: preload, not themed, null theme, or theme-specific.
    if (dr != null) {
        dr.setChangingConfigurations(value.changingConfigurations);
        cacheDrawable(value, isColorDrawable, caches, theme, canApplyTheme, key, dr);
    }
    return dr;
}","{
    return mResourcesImpl.loadDrawable(this, value, id, theme, true);
}",1,,,0,[@Nullable],[@NonNull],1,0,0,0,"1,2","1,3,4",1,5,1,"The API implementation has been completely changed, and it now relies on another API (mResourcesImpl.loadDrawable). This is classified as a Dependent API change (5).","As the API implementation has been completely changed, the API behavior may also change, which means it may return a different value. This is classified as a Compatibility Issue caused by potential different return values or types (1)."
32,<android.os.BatteryManager: boolean isCharging()>,23,24,<android.os.BatteryManager: boolean isCharging()>,<android.os.BatteryManager: boolean isCharging()>,0,"{
    try {
        return mBatteryStats.isCharging();
    } catch (RemoteException e) {
        return true;
    }
}","{
    try {
        return mBatteryStats.isCharging();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Return true if the battery is currently considered to be charging.  This means that
 * the device is plugged in and is supplying sufficient power that the battery level is
 * going up (or the battery is fully charged).  Changes in this state are matched by
 * broadcasts of {@link #ACTION_CHARGING} and {@link #ACTION_DISCHARGING}.
 */
","/**
 * Return true if the battery is currently considered to be charging.  This means that
 * the device is plugged in and is supplying sufficient power that the battery level is
 * going up (or the battery is fully charged).  Changes in this state are matched by
 * broadcasts of {@link #ACTION_CHARGING} and {@link #ACTION_DISCHARGING}.
 */
",0,,,0,0,0,0,1,"1,2","1,2",2,2,"The code change is in the exception handling block. The early version returns 'true' when a RemoteException is caught, while the late version re-throws the exception.","The compatibility issue is caused by the potential difference in exception handling. In the early version, if a RemoteException is caught, the method will return 'true', which may not be the correct state of the battery. In the late version, the exception is re-thrown, which will propagate the error to the caller and may lead to different behavior in the app."
33,<android.app.ApplicationContext: Drawable peekWallpaper()>,4,5,<android.app.ApplicationContext: Drawable peekWallpaper()>,<android.app.ApplicationContext: Drawable peekWallpaper()>,0,"{
    if (mWallpaper != null) {
        return mWallpaper;
    }
    mWallpaperCallback = new WallpaperCallback(this);
    mWallpaper = getCurrentWallpaperLocked();
    return mWallpaper;
}","{
    return getWallpaperManager().peekDrawable();
}",1,,,0,[@Override],[@Override],0,0,0,0,1,"1,3,4",1,1,1,"The implementation of the API has been changed completely. In the early version, the API will first check if the `mWallpaper` field is not null and return it if it is not null. If `mWallpaper` is null, the API will create a new `WallpaperCallback` object and assign it to the `mWallpaperCallback` field, then call the `getCurrentWallpaperLocked` method and assign the result to the `mWallpaper` field, and finally return `mWallpaper`. In the late version, the API will directly call the `getWallpaperManager` method and then call the `peekDrawable` method of the result to get the wallpaper.","The change of the implementation may lead to different behaviors of the API. In the early version, if `mWallpaper` is null, the API will create a new `WallpaperCallback` object and call the `getCurrentWallpaperLocked` method to get the wallpaper. However, in the late version, the API will directly call the `getWallpaperManager` method and then call the `peekDrawable` method to get the wallpaper, without creating a new `WallpaperCallback` object. Therefore, the late version of the API may not be able to get the correct wallpaper in some cases, which will cause a compatibility issue."
34,"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int)>",4,5,"<android.content.res.Resources: Drawable loadDrawable(TypedValue,int)>","<android.content.res.Resources: Drawable loadDrawable(TypedValue,int)>",0,"{
    if (TRACE_FOR_PRELOAD) {
        // Log only framework resources
        if ((id >>> 24) == 0x1) {
            final String name = getResourceName(id);
            if (name != null)
                android.util.Log.d(""PreloadDrawable"", name);
        }
    }
    final long key = (((long) value.assetCookie) << 32) | value.data;
    Drawable dr = getCachedDrawable(key);
    if (dr != null) {
        return dr;
    }
    Drawable.ConstantState cs = mPreloadedDrawables.get(key);
    if (cs != null) {
        dr = cs.newDrawable();
    } else {
        if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
            dr = new ColorDrawable(value.data);
        }
        if (dr == null) {
            if (value.string == null) {
                throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value);
            }
            String file = value.string.toString();
            if (DEBUG_LOAD)
                Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file);
            if (file.endsWith("".xml"")) {
                try {
                    XmlResourceParser rp = loadXmlResourceParser(file, id, value.assetCookie, ""drawable"");
                    dr = Drawable.createFromXml(this, rp);
                    rp.close();
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            } else {
                try {
                    InputStream is = mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_BUFFER);
                    // System.out.println(""Opened file "" + file + "": "" + is);
                    dr = Drawable.createFromResourceStream(this, value, is, file);
                    is.close();
                // System.out.println(""Created stream: "" + dr);
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            }
        }
    }
    if (dr != null) {
        dr.setChangingConfigurations(value.changingConfigurations);
        cs = dr.getConstantState();
        if (cs != null) {
            if (mPreloading) {
                sPreloadedDrawables.put(key, cs);
            } else {
                synchronized (mTmpValue) {
                    // Log.i(TAG, ""Saving cached drawable @ #"" +
                    // Integer.toHexString(key.intValue())
                    // + "" in "" + this + "": "" + cs);
                    mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs));
                }
            }
        }
    }
    return dr;
}","{
    if (TRACE_FOR_PRELOAD) {
        // Log only framework resources
        if ((id >>> 24) == 0x1) {
            final String name = getResourceName(id);
            if (name != null)
                android.util.Log.d(""PreloadDrawable"", name);
        }
    }
    final long key = (((long) value.assetCookie) << 32) | value.data;
    Drawable dr = getCachedDrawable(key);
    if (dr != null) {
        return dr;
    }
    Drawable.ConstantState cs = sPreloadedDrawables.get(key);
    if (cs != null) {
        dr = cs.newDrawable(this);
    } else {
        if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
            dr = new ColorDrawable(value.data);
        }
        if (dr == null) {
            if (value.string == null) {
                throw new NotFoundException(""Resource is not a Drawable (color or path): "" + value);
            }
            String file = value.string.toString();
            if (DEBUG_LOAD)
                Log.v(TAG, ""Loading drawable for cookie "" + value.assetCookie + "": "" + file);
            if (file.endsWith("".xml"")) {
                try {
                    XmlResourceParser rp = loadXmlResourceParser(file, id, value.assetCookie, ""drawable"");
                    dr = Drawable.createFromXml(this, rp);
                    rp.close();
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            } else {
                try {
                    InputStream is = mAssets.openNonAsset(value.assetCookie, file, AssetManager.ACCESS_STREAMING);
                    // System.out.println(""Opened file "" + file + "": "" + is);
                    dr = Drawable.createFromResourceStream(this, value, is, file, null);
                    is.close();
                // System.out.println(""Created stream: "" + dr);
                } catch (Exception e) {
                    NotFoundException rnf = new NotFoundException(""File "" + file + "" from drawable resource ID #0x"" + Integer.toHexString(id));
                    rnf.initCause(e);
                    throw rnf;
                }
            }
        }
    }
    if (dr != null) {
        dr.setChangingConfigurations(value.changingConfigurations);
        cs = dr.getConstantState();
        if (cs != null) {
            if (mPreloading) {
                sPreloadedDrawables.put(key, cs);
            } else {
                synchronized (mTmpValue) {
                    // Log.i(TAG, ""Saving cached drawable @ #"" +
                    // Integer.toHexString(key.intValue())
                    // + "" in "" + this + "": "" + cs);
                    mDrawableCache.put(key, new WeakReference<Drawable.ConstantState>(cs));
                }
            }
        }
    }
    return dr;
}",1,"/*package*/
","/*package*/
",0,,,0,0,0,0,"1,2","1,3,4,5",1,"5, 1",1,"The code change is related to the dependent API. The method `Drawable.ConstantState.newDrawable()` in the early version has been changed to `Drawable.ConstantState.newDrawable(Resources)` in the late version. Also, the method `Drawable.createFromResourceStream(Resources, TypedValue, InputStream, String)` in the early version has been changed to `Drawable.createFromResourceStream(Resources, TypedValue, InputStream, String, Resources.Theme)` in the late version. However, since the newly added parameter `Resources.Theme` in the late version is set to `null`, it will not cause any compatibility issue.","The change of the dependent API `Drawable.ConstantState.newDrawable()` may cause the API `Resources.loadDrawable(TypedValue, int)` to return a different object in the late version, which may lead to a compatibility issue. The developer needs to make sure that the usage of the object is not affected by the change."
35,"<android.content.pm.ResolveInfo: void dump(Printer,String)>",4,5,"<android.content.pm.ResolveInfo: void dump(Printer,String)>","<android.content.pm.ResolveInfo: void dump(Printer,String)>",0,"{
    if (filter != null) {
        pw.println(prefix + ""Filter:"");
        filter.dump(pw, prefix + ""  "");
    } else {
        pw.println(prefix + ""Filter: null"");
    }
    pw.println(prefix + ""priority="" + priority + "" preferredOrder="" + preferredOrder + "" match=0x"" + Integer.toHexString(match) + "" specificIndex="" + specificIndex + "" isDefault="" + isDefault);
    pw.println(prefix + ""labelRes=0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel="" + nonLocalizedLabel + "" icon=0x"" + Integer.toHexString(icon));
    if (activityInfo != null) {
        pw.println(prefix + ""ActivityInfo:"");
        activityInfo.dump(pw, prefix + ""  "");
    } else if (serviceInfo != null) {
        pw.println(prefix + ""ServiceInfo:"");
    // TODO
    // serviceInfo.dump(pw, prefix + ""  "");
    }
}","{
    if (filter != null) {
        pw.println(prefix + ""Filter:"");
        filter.dump(pw, prefix + ""  "");
    }
    pw.println(prefix + ""priority="" + priority + "" preferredOrder="" + preferredOrder + "" match=0x"" + Integer.toHexString(match) + "" specificIndex="" + specificIndex + "" isDefault="" + isDefault);
    if (resolvePackageName != null) {
        pw.println(prefix + ""resolvePackageName="" + resolvePackageName);
    }
    if (labelRes != 0 || nonLocalizedLabel != null || icon != 0) {
        pw.println(prefix + ""labelRes=0x"" + Integer.toHexString(labelRes) + "" nonLocalizedLabel="" + nonLocalizedLabel + "" icon=0x"" + Integer.toHexString(icon));
    }
    if (activityInfo != null) {
        pw.println(prefix + ""ActivityInfo:"");
        activityInfo.dump(pw, prefix + ""  "");
    } else if (serviceInfo != null) {
        pw.println(prefix + ""ServiceInfo:"");
        serviceInfo.dump(pw, prefix + ""  "");
    }
}",1,,,0,,,0,0,0,0,1,"2,4",0,"4, 5",1,"The implementation of dump() method has been changed between the two versions. In the late version, there are two new if-statements to print the resolvePackageName and to print the labelRes, nonLocalizedLabel, and icon only when they are not the default values.","The new if-statements in the late version can potentially cause different outputs of the dump() method compared to the early version. Specifically, the resolvePackageName may not be printed in the early version even if it is not null. And, the labelRes, nonLocalizedLabel, and icon may be printed in the early version even if they are the default values. Therefore, there is a compatibility issue caused by potential different return values or types."
36,<android.webkit.WebView: void clearMatches()>,4,5,<android.webkit.WebView: void clearMatches()>,<android.webkit.WebView: void clearMatches()>,0,"{
    mFindIsUp = false;
    nativeSetFindIsDown();
    // Now that the dialog has been removed, ensure that we scroll to a
    // location that is not beyond the end of the page.
    pinScrollTo(mScrollX, mScrollY, false, 0);
    invalidate();
}","{
    if (mFindIsUp) {
        recordNewContentSize(mContentWidth, mContentHeight - mFindHeight, false);
        mFindIsUp = false;
    }
    nativeSetFindIsDown();
    // Now that the dialog has been removed, ensure that we scroll to a
    // location that is not beyond the end of the page.
    pinScrollTo(mScrollX, mScrollY, false, 0);
    invalidate();
}",1,"/*
     * Clear the highlighting surrounding text matches created by findAll.
     */
","/*
     * Clear the highlighting surrounding text matches created by findAll.
     */
",0,,,0,0,0,0,1,"2,4",0,3,1,"A new 'if' statement is introduced in the late version, which checks if the mFindIsUp is true or not. If it is true, the recordNewContentSize method is called and mFindIsUp is set to false. This control dependency change affects the behavior of the API since the recordNewContentSize method is not called in the early version.","The Compatibility Issue is caused by the potential different return values or types. The introduction of the 'if' statement and the recordNewContentSize method in the late version can lead to different content sizes and scroll positions, resulting in different visual outputs and user interactions compared to the early version."
37,<android.widget.VideoView: boolean isPlaying()>,4,5,<android.widget.VideoView: boolean isPlaying()>,<android.widget.VideoView: boolean isPlaying()>,0,"{
    if (mMediaPlayer != null && mIsPrepared) {
        return mMediaPlayer.isPlaying();
    }
    return false;
}","{
    return isInPlaybackState() && mMediaPlayer.isPlaying();
}",1,,,0,,,0,0,0,0,1,"1,2",1,"1, 5",1,"The implementation of the method isPlaying() has been changed. In the early version, the method checks if mMediaPlayer is not null and mIsPrepared is true, and then returns the result of mMediaPlayer.isPlaying(). In the late version, the method returns the result of isInPlaybackState() && mMediaPlayer.isPlaying(). The control dependency has been changed, and a new method isInPlaybackState() has been introduced.","The change in the control dependency and the introduction of the new method isInPlaybackState() may lead to different behaviors of the method isPlaying(). In the early version, the method may return false if mMediaPlayer is null or mIsPrepared is false, even if the video is actually playing. In the late version, the method will always return the correct result, but it may throw a NullPointerException if mMediaPlayer is null. Therefore, the compatibility issue is caused by potential different return values or types."
39,<android.view.Surface: String toString()>,4,5,<android.view.Surface: String toString()>,<android.view.Surface: String toString()>,0,"{
    return ""Surface(native-token="" + mSurface + "")"";
}","{
    return ""Surface(native-token="" + mSurfaceControl + "")"";
}",1,,,0,[@Override],[@Override],0,0,0,0,1,1,1,1,1,"The return statement of the API has changed, and it returns a different String in the late version. Specifically, the variable ""mSurface"" in the early version is replaced by ""mSurfaceControl"" in the late version.","The code change potentially causes the API to return a different String, which can be regarded as a Compatibility Issue. The potential different return values can lead to unexpected behaviors if the caller relies on the specific String format in the early version."
40,<android.webkit.BrowserFrame: void didFirstLayout()>,4,5,<android.webkit.BrowserFrame: void didFirstLayout()>,<android.webkit.BrowserFrame: void didFirstLayout()>,0,"{
    if (!mFirstLayoutDone) {
        mFirstLayoutDone = true;
        // ensure {@link WebViewCore#webkitDraw} is called as we were
        // blocking the update in {@link #loadStarted}
        mWebViewCore.contentDraw();
    }
    mWebViewCore.mEndScaleZoom = true;
}","{
    if (!mFirstLayoutDone) {
        mFirstLayoutDone = true;
        // ensure {@link WebViewCore#webkitDraw} is called as we were
        // blocking the update in {@link #loadStarted}
        mWebViewCore.contentDraw();
    }
}",1,"/* package */
","/* package */
",0,,,0,0,0,0,1,"3,4",0,4,1,"A statement `mWebViewCore.mEndScaleZoom = true;` in the early version is deleted in the late version. This statement is not related to return or exception handling, thus the code change type is 4.","As the statement `mWebViewCore.mEndScaleZoom = true;` is deleted, the value of `mWebViewCore.mEndScaleZoom` may be different in the late version. If the value of `mWebViewCore.mEndScaleZoom` affects the behaviors of the API, then it can cause a Compatibility Issue. Therefore, the CI type is 1."
41,<android.hardware.Camera.Parameters: void setPictureFormat(int)>,4,5,<android.hardware.Camera.Parameters: void setPictureFormat(int)>,<android.hardware.Camera.Parameters: void setPictureFormat(int)>,0,"{
    String s = cameraFormatForPixelFormat(pixel_format);
    if (s == null) {
        throw new IllegalArgumentException();
    }
    set(""picture-format"", s);
}","{
    String s = cameraFormatForPixelFormat(pixel_format);
    if (s == null) {
        throw new IllegalArgumentException(""Invalid pixel_format="" + pixel_format);
    }
    set(KEY_PICTURE_FORMAT, s);
}",1,"/**
 * Sets the image format for pictures.
 *
 * @param pixel_format the desired picture format
 * (<var>PixelFormat.YCbCr_420_SP</var>,
 * <var>PixelFormat.RGB_565</var>, or
 * <var>PixelFormat.JPEG</var>)
 * @see android.graphics.PixelFormat
 */
","/**
 * Sets the image format for pictures.
 *
 * @param pixel_format the desired picture format
 * (<var>PixelFormat.YCbCr_420_SP (NV21)</var>,
 * <var>PixelFormat.RGB_565</var>, or
 * <var>PixelFormat.JPEG</var>)
 * @see android.graphics.PixelFormat
 */
",1,,,0,0,0,0,"1,2","2,3,4,5",2,"2,5",1,The implementation has changed in two ways:,
42,<android.hardware.Camera.Parameters: Size getPictureSize()>,4,5,<android.hardware.Camera.Parameters: Size getPictureSize()>,<android.hardware.Camera.Parameters: Size getPictureSize()>,0,"{
    String pair = get(""picture-size"");
    if (pair == null)
        return null;
    String[] dims = pair.split(""x"");
    if (dims.length != 2)
        return null;
    return new Size(Integer.parseInt(dims[0]), Integer.parseInt(dims[1]));
}","{
    String pair = get(KEY_PICTURE_SIZE);
    return strToSize(pair);
}",1,"/**
 * Returns the dimension setting for pictures.
 *
 * @return a Size object with the height and width setting
 * for pictures
 */
","/**
 * Returns the dimension setting for pictures.
 *
 * @return a Size object with the height and width setting
 * for pictures
 */
",0,,,0,0,0,0,1,"1,3,4",1,"5, 1",1,"The implementation of the `getPictureSize()` method has been changed from using the `get(""picture-size"")` method to using the `get(KEY_PICTURE_SIZE)` method, which may potentially return a different value. And also, the way of parsing the returned string has been changed from using `String.split()` method and `Integer.parseInt()` method to using `strToSize()` method, which may also potentially return a different `Size` object. Therefore, the code change is a combination of Dependent API changed (5) and Return statement changed (1).","The `getPictureSize()` method is supposed to return the dimension setting for pictures. However, due to the changes in the implementation, it may potentially return a different `Size` object, which may cause compatibility issues for the apps that rely on the specific dimension setting for pictures. Therefore, the Compatibility Issue is caused by potential different return values or types (1)."
43,<android.animation.ValueAnimator: void end()>,15,16,<android.animation.ValueAnimator: void end()>,<android.animation.ValueAnimator: void end()>,0,"{
    if (!sAnimations.get().contains(this) && !sPendingAnimations.get().contains(this)) {
        // Special case if the animation has not yet started; get it ready for ending
        mStartedDelay = false;
        startAnimation();
    } else if (!mInitialized) {
        initAnimation();
    }
    // was supposed to repeat an odd number of times
    if (mRepeatCount > 0 && (mRepeatCount & 0x01) == 1) {
        animateValue(0f);
    } else {
        animateValue(1f);
    }
    endAnimation();
}","{
    AnimationHandler handler = getOrCreateAnimationHandler();
    if (!handler.mAnimations.contains(this) && !handler.mPendingAnimations.contains(this)) {
        // Special case if the animation has not yet started; get it ready for ending
        mStartedDelay = false;
        startAnimation(handler);
        mStarted = true;
    } else if (!mInitialized) {
        initAnimation();
    }
    // was supposed to repeat an odd number of times
    if (mRepeatCount > 0 && (mRepeatCount & 0x01) == 1) {
        animateValue(0f);
    } else {
        animateValue(1f);
    }
    endAnimation(handler);
}",1,,,0,[@Override],[@Override],0,0,0,0,"1,2","3,4",0,"1, 3, 5",1,Three changes were made between the two versions:,"3. The `endAnimation()` method was replaced with `endAnimation(handler)`, which also indicates a change in the method signature of the dependent API."
44,<android.app.Activity: void onConfigurationChanged(Configuration)>,15,16,<android.app.Activity: void onConfigurationChanged(Configuration)>,<android.app.Activity: void onConfigurationChanged(Configuration)>,0,"{
    mCalled = true;
    mFragments.dispatchConfigurationChanged(newConfig);
    if (mWindow != null) {
        // Pass the configuration changed event to the window
        mWindow.onConfigurationChanged(newConfig);
    }
    if (mActionBar != null) {
        // Do this last; the action bar will need to access
        // view changes from above.
        mActionBar.onConfigurationChanged(newConfig);
    }
}","{
    if (DEBUG_LIFECYCLE)
        Slog.v(TAG, ""onConfigurationChanged "" + this + "": "" + newConfig);
    mCalled = true;
    mFragments.dispatchConfigurationChanged(newConfig);
    if (mWindow != null) {
        // Pass the configuration changed event to the window
        mWindow.onConfigurationChanged(newConfig);
    }
    if (mActionBar != null) {
        // Do this last; the action bar will need to access
        // view changes from above.
        mActionBar.onConfigurationChanged(newConfig);
    }
}",1,"/**
 * Called by the system when the device configuration changes while your
 * activity is running.  Note that this will <em>only</em> be called if
 * you have selected configurations you would like to handle with the
 * {@link android.R.attr#configChanges} attribute in your manifest.  If
 * any configuration change occurs that is not selected to be reported
 * by that attribute, then instead of reporting it the system will stop
 * and restart the activity (to have it launched with the new
 * configuration).
 *
 * <p>At the time that this function has been called, your Resources
 * object will have been updated to return resource values matching the
 * new configuration.
 *
 * @param newConfig The new device configuration.
 */
","/**
 * Called by the system when the device configuration changes while your
 * activity is running.  Note that this will <em>only</em> be called if
 * you have selected configurations you would like to handle with the
 * {@link android.R.attr#configChanges} attribute in your manifest.  If
 * any configuration change occurs that is not selected to be reported
 * by that attribute, then instead of reporting it the system will stop
 * and restart the activity (to have it launched with the new
 * configuration).
 *
 * <p>At the time that this function has been called, your Resources
 * object will have been updated to return resource values matching the
 * new configuration.
 *
 * @param newConfig The new device configuration.
 */
",0,,,0,0,0,0,1,"3,4",0,4,0,An additional logging statement has been added before the mCalled = true; statement in the late version implementation. It logs a message "onConfigurationChanged " + this + ": " + newConfig if the DEBUG_LIFECYCLE is true. This is considered as an "Other statement changed" code change.,No compatibility issue exists for this API. The additional logging statement in the late version implementation does not change the return value or throw any exception differently. It just logs a message for debugging purposes.
45,<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>,15,16,<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>,<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>,0,"{
    mBuiltInZoomControls = enabled;
    mWebView.updateMultiTouchSupport(mContext);
}","{
    throw new MustOverrideException();
}",1,"/**
 * Sets whether the zoom mechanism built into WebView is used.
 */
","// {@link WebView#getZoomControls}, which is now hidden.
",1,,,0,0,0,0,1,"2,4",2,1,1,"The implementation of the method has been completely changed. In the early version, the method sets the value of a field and then calls a method on another field. In the late version, the method throws an exception.","The change in implementation can cause compatibility issues. In the early version, the method sets a value and then updates the multi-touch support of the web view. In the late version, the method throws an exception, which can cause the app to crash if it is not caught and handled properly. The app's behavior can be different in the two versions, and the app may not work as expected in the late version."
47,<android.view.MenuInflater.InflatedOnMenuItemClickListener: boolean onMenuItemClick(MenuItem)>,15,16,<android.view.MenuInflater.InflatedOnMenuItemClickListener: boolean onMenuItemClick(MenuItem)>,<android.view.MenuInflater.InflatedOnMenuItemClickListener: boolean onMenuItemClick(MenuItem)>,0,"{
    try {
        if (mMethod.getReturnType() == Boolean.TYPE) {
            return (Boolean) mMethod.invoke(mContext, item);
        } else {
            mMethod.invoke(mContext, item);
            return true;
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}","{
    try {
        if (mMethod.getReturnType() == Boolean.TYPE) {
            return (Boolean) mMethod.invoke(mRealOwner, item);
        } else {
            mMethod.invoke(mRealOwner, item);
            return true;
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",1,,,0,,,0,0,0,0,"1,2","1,5",1,5,1,"The code change is classified as 5, Dependent API changed. Specifically, the argument of `mMethod.invoke()` has been changed from `mContext` to `mRealOwner`.","The Dependent API change of `mMethod.invoke()`'s argument could potentially cause the API to return a different value, which leads to a Compatibility Issue of type 1."
49,"<android.content.ContentProviderClient: int update(Uri,ContentValues,String,String[])>",15,16,"<android.content.ContentProviderClient: int update(Uri,ContentValues,String,String[])>","<android.content.ContentProviderClient: int update(Uri,ContentValues,String,String[])>",0,"{
    return mContentProvider.update(url, values, selection, selectionArgs);
}","{
    try {
        return mContentProvider.update(url, values, selection, selectionArgs);
    } catch (DeadObjectException e) {
        if (!mStable) {
            mContentResolver.unstableProviderDied(mContentProvider);
        }
        throw e;
    }
}",1,"/**
 * See {@link ContentProvider#update ContentProvider.update}
 */
","/**
 * See {@link ContentProvider#update ContentProvider.update}
 */
",0,,,0,0,0,0,1,"1,2,3,4","1,2","2, 5",2,"The method has been modified to include a try-catch block for handling `DeadObjectException`. This is a new exception handling statement, so the code change type is 2. Additionally, the method's dependency on `mContentProvider` has been updated to include the possibility of it throwing a `DeadObjectException`, so the code change type is also 5.","The inclusion of the try-catch block for `DeadObjectException` means that the method's behavior has changed in the case where `mContentProvider.update` throws that exception. If `mStable` is false, the method will now call `mContentResolver.unstableProviderDied` before re-throwing the exception. This is a Compatibility Issue caused by potential different exception handling, so the CI type is 2."
52,<android.widget.TextView: void onStartTemporaryDetach()>,15,16,<android.widget.TextView: void onStartTemporaryDetach()>,<android.widget.TextView: void onStartTemporaryDetach()>,0,"{
    super.onStartTemporaryDetach();
    // usually because this instance is an editable field in a list
    if (!mDispatchTemporaryDetach)
        mTemporaryDetach = true;
    // Because of View recycling in ListView, there is no easy way to know when a TextView with
    // selection becomes visible again. Until a better solution is found, stop text selection
    // mode (if any) as soon as this TextView is recycled.
    hideControllers();
}","{
    super.onStartTemporaryDetach();
    // usually because this instance is an editable field in a list
    if (!mDispatchTemporaryDetach)
        mTemporaryDetach = true;
    // selection state as needed.
    if (mEditor != null)
        mEditor.mTemporaryDetach = true;
}",1,,,0,[@Override],[@Override],0,0,0,0,1,"3,4",0,4,1,"The code change between the two versions is that the method `hideControllers()` in the early version is replaced with the statement `mEditor.mTemporaryDetach = true;` in the late version. This is a change of ""Other statement"", so the pred_change is 4.","The change of the statement may cause different behaviors of the API. In the early version, the method `hideControllers()` is called to hide the text selection controllers, while in the late version, the variable `mEditor.mTemporaryDetach` is set to true. This change may lead to the API not hiding the text selection controllers as expected in the late version, so it should be regarded as a Compatibility Issue caused by potential different return values or types (pred_CI is 1)."
53,<android.widget.NumberPicker: void setEnabled(boolean)>,15,16,<android.widget.NumberPicker: void setEnabled(boolean)>,<android.widget.NumberPicker: void setEnabled(boolean)>,0,"{
    super.setEnabled(enabled);
    mIncrementButton.setEnabled(enabled);
    mDecrementButton.setEnabled(enabled);
    mInputText.setEnabled(enabled);
}","{
    super.setEnabled(enabled);
    if (!mHasSelectorWheel) {
        mIncrementButton.setEnabled(enabled);
    }
    if (!mHasSelectorWheel) {
        mDecrementButton.setEnabled(enabled);
    }
    mInputText.setEnabled(enabled);
}",1,,,0,[@Override],[@Override],0,0,0,0,1,"3,4",0,3,1,"The code change is a control dependency change, as the two ""if"" statements are added to control the enabling of the increment and decrement buttons. This means that in the late version, the increment and decrement buttons will not be enabled if the ""mHasSelectorWheel"" is true, while in the early version, they will always be enabled regardless of the ""mHasSelectorWheel"" value.","The compatibility issue is caused by the potential different return values or types, as the behavior of the API has changed. In the late version, the increment and decrement buttons will not be enabled if the ""mHasSelectorWheel"" is true, while in the early version, they will always be enabled. This can lead to different UI states and user experiences between the two versions."
56,<android.webkit.WebView: void onResume()>,15,16,<android.webkit.WebView: void onResume()>,<android.webkit.WebView: void onResume()>,0,"{
    checkThread();
    if (mIsPaused) {
        mIsPaused = false;
        mWebViewCore.sendMessage(EventHub.ON_RESUME);
        if (mNativeClass != 0) {
            nativeSetPauseDrawing(mNativeClass, false);
        }
    }
}","{
    checkThread();
    mProvider.onResume();
}",1,"/**
 * Call this to resume a WebView after a previous call to onPause().
 */
","/**
 * Resumes a WebView after a previous call to onPause().
 */
",1,,,0,0,0,0,1,3,0,5,1,"The code in the implementation of onResume() has been completely changed. In the early version, it checks if the WebView is paused and if it is, it sets mIsPaused to false, sends a message to the WebViewCore and calls nativeSetPauseDrawing(). In the late version, it only calls mProvider.onResume().","The change in the implementation of onResume() could potentially lead to different behaviors if the WebView is paused. In the early version, it sends a message to the WebViewCore and calls nativeSetPauseDrawing() to resume the WebView. In the late version, it only calls mProvider.onResume() which might not be able to resume the WebView properly if the WebViewCore and native code are not updated. This could lead to compatibility issues."
57,"<android.view.ViewGroup: void dispatchAttachedToWindow(AttachInfo,int)>",15,16,"<android.view.ViewGroup: void dispatchAttachedToWindow(AttachInfo,int)>","<android.view.ViewGroup: void dispatchAttachedToWindow(AttachInfo,int)>",0,"{
    mGroupFlags |= FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    super.dispatchAttachedToWindow(info, visibility);
    mGroupFlags &= ~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    visibility |= mViewFlags & VISIBILITY_MASK;
    final int count = mChildrenCount;
    final View[] children = mChildren;
    for (int i = 0; i < count; i++) {
        children[i].dispatchAttachedToWindow(info, visibility);
    }
}","{
    mGroupFlags |= FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    super.dispatchAttachedToWindow(info, visibility);
    mGroupFlags &= ~FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    final int count = mChildrenCount;
    final View[] children = mChildren;
    for (int i = 0; i < count; i++) {
        final View child = children[i];
        child.dispatchAttachedToWindow(info, visibility | (child.mViewFlags & VISIBILITY_MASK));
    }
}",1,"/**
 * {@inheritDoc}
 */
","/**
 * {@inheritDoc}
 */
",0,[@Override],[@Override],0,0,0,0,1,"3,4",0,4,1,"In the late version implementation, there's a change in the calculation of the 'visibility' parameter passed to the 'dispatchAttachedToWindow' method of the child views. Specifically, the change is from 'visibility' to 'visibility | (child.mViewFlags & VISIBILITY_MASK)'.","This change in the calculation of the 'visibility' parameter can potentially lead to different behaviors in the child views, as the value of 'visibility' is now also dependent on the 'mViewFlags' of the child view. So, there's a Compatibility Issue caused by potential different return values or types (1)."
58,<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>,15,16,<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>,<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>,0,"{
    if (mJavaScriptCanOpenWindowsAutomatically != flag) {
        mJavaScriptCanOpenWindowsAutomatically = flag;
        postSync();
    }
}","{
    throw new MustOverrideException();
}",1,"/**
 * Tell javascript to open windows automatically. This applies to the
 * javascript function window.open().
 * @param flag True if javascript can open windows automatically.
 */
","/**
 * Tells JavaScript to open windows automatically. This applies to the
 * JavaScript function window.open(). The default is false.
 *
 * @param flag true if JavaScript can open windows automatically
 */
",1,,,0,0,0,0,1,"2,3",2,1,1,"The implementation of the method has been completely changed. In the early version, the method updates the value of a field and calls a method if the value of the field is different from the input parameter. In the late version, the method always throws an exception.","The change in the implementation of the method can lead to compatibility issues. In the early version, the method updates the value of a field and calls a method if the value of the field is different from the input parameter. In the late version, the method always throws an exception. Therefore, if the method is called in the late version, it will always throw an exception, which can lead to different behavior than in the early version."
60,<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>,15,16,<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>,<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>,0,"{
    try {
        long timeStart = acquireAndLock(READ);
        long retValue = native_1x1_long();
        mDatabase.logTimeStat(mSql, timeStart);
        return retValue;
    } catch (SQLiteDoneException e) {
        throw new SQLiteDoneException(""expected 1 row from this query but query returned no data. check the query: "" + mSql);
    } finally {
        releaseAndUnlock();
    }
}","{
    acquireReference();
    try {
        return getSession().executeForLong(getSql(), getBindArgs(), getConnectionFlags(), null);
    } catch (SQLiteDatabaseCorruptException ex) {
        onCorruption();
        throw ex;
    } finally {
        releaseReference();
    }
}",1,"/**
 * Execute a statement that returns a 1 by 1 table with a numeric value.
 * For example, SELECT COUNT(*) FROM table;
 *
 * @return The result of the query.
 *
 * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
 */
","/**
 * Execute a statement that returns a 1 by 1 table with a numeric value.
 * For example, SELECT COUNT(*) FROM table;
 *
 * @return The result of the query.
 *
 * @throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
 */
",0,,,0,0,0,0,1,"1,2,4","1,2","1, 5","1,2","The implementation of the `simpleQueryForLong()` method has been completely changed. The early version uses a native method `native_1x1_long()` to execute the SQL query and return the result, while the late version uses the `executeForLong()` method of the `SQLiteSession` class. Additionally, the error handling has also been changed. The early version throws a `SQLiteDoneException` if the query returns zero rows, while the late version throws a `SQLiteDatabaseCorruptException` if the database is corrupted and calls the `onCorruption()` method. The locking mechanism has also been changed from using `acquireAndLock(READ)` and `releaseAndUnlock()` in the early version to using `acquireReference()` and `releaseReference()` in the late version.","The change in the implementation of the `simpleQueryForLong()` method may cause compatibility issues. The early version uses a native method to execute the query, while the late version uses a different method of a different class. This may cause the method to behave differently and return different results. Additionally, the change in the error handling may also cause compatibility issues. The early version throws a `SQLiteDoneException` if the query returns zero rows, while the late version throws a different exception and calls a different method. This may cause the calling code to behave differently and not handle the errors correctly."
61,<android.view.InputDevice: int[] getDeviceIds()>,15,16,<android.view.InputDevice: int[] getDeviceIds()>,<android.view.InputDevice: int[] getDeviceIds()>,0,"{
    IWindowManager wm = Display.getWindowManager();
    try {
        return wm.getInputDeviceIds();
    } catch (RemoteException ex) {
        throw new RuntimeException(""Could not get input device ids from Window Manager."", ex);
    }
}","{
    return InputManager.getInstance().getInputDeviceIds();
}",1,"/**
 * Gets the ids of all input devices in the system.
 * @return The input device ids.
 */
","/**
 * Gets the ids of all input devices in the system.
 * @return The input device ids.
 */
",0,,,0,0,0,0,1,"1,2,4","1,2",5,1,"The implementation of the API has been changed from using WindowManager to using InputManager, which potentially leads to different return values.","The change of implementation potentially leads to different return values, which could cause compatibility issues in the code that relies on the specific return values of the API."
63,<android.database.ContentObservable: void notifyChange(boolean)>,15,16,<android.database.ContentObservable: void notifyChange(boolean)>,<android.database.ContentObservable: void notifyChange(boolean)>,0,"{
    synchronized (mObservers) {
        for (ContentObserver observer : mObservers) {
            observer.onChange(selfChange);
        }
    }
}","{
    synchronized (mObservers) {
        for (ContentObserver observer : mObservers) {
            observer.onChange(selfChange, null);
        }
    }
}",1,"/**
 * invokes onChange on each observer
 * @param selfChange
 */
","/**
 * Invokes {@link ContentObserver#onChange} on each observer.
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange} instead.
 */
",1,,[@Deprecated],1,0,0,0,2,5,0,1,1,"The implementation of the `notifyChange` method has been changed. In the early version, the method invokes `onChange` on each observer with a single argument `selfChange`. In the late version, the method invokes `onChange` on each observer with two arguments `selfChange` and `null`.","The change in the implementation of the `notifyChange` method can lead to compatibility issues. In the late version, the method invokes `onChange` on each observer with two arguments, while in the early version the method invokes `onChange` with a single argument. This can cause the `onChange` method in the observers to behave differently or even throw an exception if it is not designed to handle two arguments."
64,<android.webkit.WebSettings: int getTextZoom()>,15,16,<android.webkit.WebSettings: int getTextZoom()>,<android.webkit.WebSettings: int getTextZoom()>,0,"{
    return mTextSize;
}","{
    throw new MustOverrideException();
}",1,"/**
 * Get the text zoom of the page in percent.
 * @return A percent value describing the text zoom.
 * @see setTextSizeZoom
 */
","/**
 * Gets the text zoom of the page in percent.
 *
 * @return a percent value describing the text zoom
 * @see #setTextSizeZoom
 */
",1,,,0,0,0,0,1,"1,2","1,2",1,2,The implementation of the method `getTextZoom()` has been changed from returning the value of `mTextSize` in the early version to throwing a `MustOverrideException` in the late version.,The change in implementation can lead to a compatibility issue as the method no longer returns the expected value and instead throws an exception. This can cause the code that relies on the value returned by `getTextZoom()` to break in the late version.
65,<android.webkit.WebView: void freeMemory()>,15,16,<android.webkit.WebView: void freeMemory()>,<android.webkit.WebView: void freeMemory()>,0,"{
    checkThread();
    mWebViewCore.sendMessage(EventHub.FREE_MEMORY);
}","{
    checkThread();
    mProvider.freeMemory();
}",1,"/**
 * Call this to inform the view that memory is low so that it can
 * free any available memory.
 */
","/**
 * Informs this WebView that memory is low so that it can free any available
 * memory.
 */
",1,,,0,0,0,0,1,4,0,5,1,The implementation of the method has changed from using "mWebViewCore.sendMessage(EventHub.FREE\_MEMORY)" to "mProvider.freeMemory()" to free the memory.,"The change in the implementation of the method can lead to different behaviors in the way the memory is freed, which can cause compatibility issues with applications that rely on the specific behavior of the earlier version of the method."
67,"<android.database.DatabaseUtils: ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement,String[])>",15,16,"<android.database.DatabaseUtils: ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement,String[])>","<android.database.DatabaseUtils: ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase,String,String[])>",0,"{
    prog.bindAllArgsAsStrings(selectionArgs);
    return prog.simpleQueryForBlobFileDescriptor();
}","{
    SQLiteStatement prog = db.compileStatement(query);
    try {
        return blobFileDescriptorForQuery(prog, selectionArgs);
    } finally {
        prog.close();
    }
}",1,"/**
 * Utility method to run the pre-compiled query and return the blob value in the
 * first column of the first row.
 *
 * @return A read-only file descriptor for a copy of the blob value.
 */
","/**
 * Utility method to run the query on the db and return the blob value in the
 * first column of the first row.
 *
 * @return A read-only file descriptor for a copy of the blob value.
 */
",0,,,0,0,0,0,1,"1,2,4",1,5,1,"The implementation of the method has been completely modified, which includes the addition of a local variable, a try-catch block, and a call to a different method. This change type is classified as 5.","The change in the implementation of the method could lead to different behaviors, as it is now using a different method to execute the query and retrieve the blob value. This could potentially result in the method returning a different value, which is classified as a Compatibility Issue type 1."
68,<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>,15,16,<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>,<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>,0,"{
    size = pin(size);
    if (mDefaultFixedFontSize != size) {
        mDefaultFixedFontSize = size;
        postSync();
    }
}","{
    throw new MustOverrideException();
}",1,"/**
 * Set the default fixed font size.
 * @param size A non-negative integer between 1 and 72.
 * Any number outside the specified range will be pinned.
 */
","/**
 * Sets the default fixed font size. The default is 16.
 *
 * @param size a non-negative integer between 1 and 72. Any number outside
 * the specified range will be pinned.
 */
",1,,,0,0,0,0,1,"2,3,4",2,"1, 2",1,"The Early\_Implementation sets the default fixed font size and posts a sync event if the size has changed, while the Late\_Implementation throws a MustOverrideException. This is a change in return statement (no return statement in Early\_Implementation, but a throw statement in Late\_Implementation) and a change in exception handling statement (no exception handling in Early\_Implementation, but a throw statement in Late\_Implementation).","The change in return statement and exception handling statement can cause a Compatibility Issue, as the API's behavior has changed significantly between the two versions. In the Early\_Version, the API would set the default fixed font size and post a sync event if the size has changed. In the Late\_Version, the API would always throw a MustOverrideException, regardless of the input size. This can cause compatibility issues for any code that relies on the previous behavior of the API."
69,<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>,15,16,<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>,<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>,0,"{
    checkThread();
    mOverlayHorizontalScrollbar = overlay;
}","{
    checkThread();
    mProvider.setHorizontalScrollbarOverlay(overlay);
}",1,"/**
 * Specify whether the horizontal scrollbar has overlay style.
 * @param overlay TRUE if horizontal scrollbar should have overlay style.
 */
","/**
 * Specifies whether the horizontal scrollbar has overlay style.
 *
 * @param overlay true if horizontal scrollbar should have overlay style
 */
",0,,,0,0,0,0,1,4,0,5,1,"The implementation of the method has changed from directly modifying the mOverlayHorizontalScrollbar field to delegating the call to the mProvider object's setHorizontalScrollbarOverlay method, which potentially leads to different behaviors.","Since the mProvider object is not shown in the given code, we cannot be sure about its implementation. It is possible that the mProvider object's setHorizontalScrollbarOverlay method has side effects or different logic, which could lead to different behaviors compared to the early version. Therefore, this is a compatibility issue caused by potential different return values or types."
70,<android.database.sqlite.SQLiteDatabase: boolean isOpen()>,15,16,<android.database.sqlite.SQLiteDatabase: boolean isOpen()>,<android.database.sqlite.SQLiteDatabase: boolean isOpen()>,0,"{
    return mNativeHandle != 0;
}","{
    synchronized (mLock) {
        return mConnectionPoolLocked != null;
    }
}",1,"/**
 * @return true if the DB is currently open (has not been closed)
 */
","/**
 * Returns true if the database is currently open.
 *
 * @return True if the database is currently open (has not been closed).
 */
",1,,,0,0,0,0,1,"1,4",1,3,1,The implementation of the isOpen() method has changed from checking if the mNativeHandle is not equal to 0 to checking if the mConnectionPoolLocked is not null within a synchronized block. This is a control dependency change as the condition for determining if the database is open has changed.,"The change in the implementation of the isOpen() method can potentially lead to a compatibility issue as the method may now return a different value. For example, if the mNativeHandle is not equal to 0 but the mConnectionPoolLocked is null, the method would have returned true in the early version but will now return false in the late version."
72,"<android.app.FragmentManagerImpl: void attachFragment(Fragment,int,int)>",15,16,"<android.app.FragmentManagerImpl: void attachFragment(Fragment,int,int)>","<android.app.FragmentManagerImpl: void attachFragment(Fragment,int,int)>",0,"{
    if (DEBUG)
        Log.v(TAG, ""attach: "" + fragment);
    if (fragment.mDetached) {
        fragment.mDetached = false;
        if (!fragment.mAdded) {
            mAdded.add(fragment);
            fragment.mAdded = true;
            if (fragment.mHasMenu && fragment.mMenuVisible) {
                mNeedMenuInvalidate = true;
            }
            moveToState(fragment, mCurState, transition, transitionStyle);
        }
    }
}","{
    if (DEBUG)
        Log.v(TAG, ""attach: "" + fragment);
    if (fragment.mDetached) {
        fragment.mDetached = false;
        if (!fragment.mAdded) {
            if (mAdded == null) {
                mAdded = new ArrayList<Fragment>();
            }
            mAdded.add(fragment);
            fragment.mAdded = true;
            if (fragment.mHasMenu && fragment.mMenuVisible) {
                mNeedMenuInvalidate = true;
            }
            moveToState(fragment, mCurState, transition, transitionStyle, false);
        }
    }
}",1,,,0,,,0,0,0,0,"1,2","3,4,5",0,3,1,"The code change between the two versions is that, in the late version, a new statement `if (mAdded == null) { mAdded = new ArrayList<Fragment>(); }` is added before `mAdded.add(fragment)`. This change modifies the control flow of the method, hence it is classified as 3) control dependency changed.","The added statement in the late version ensures that `mAdded` is not null before adding a new fragment to it. However, in the early version, there is no such check. Therefore, if `mAdded` is null in the early version, a `NullPointerException` will be thrown at the statement `mAdded.add(fragment)`. In contrast, in the late version, `mAdded` will be initialized as a new `ArrayList` before the same statement, hence no `NullPointerException` will be thrown. This different behavior between the two versions can lead to compatibility issues, hence it is classified as 1) compatibility issue caused by potential different return values or types."
74,<android.view.View: void getLocationInWindow(int[])>,15,16,<android.view.View: void getLocationInWindow(int[])>,<android.view.View: void getLocationInWindow(int[])>,0,"{
    // When the view is not attached to a window, this method does not make sense
    if (mAttachInfo == null)
        return;
    if (location == null || location.length < 2) {
        throw new IllegalArgumentException(""location must be an array of two integers"");
    }
    float[] position = mAttachInfo.mTmpTransformLocation;
    position[0] = position[1] = 0.0f;
    if (!hasIdentityMatrix()) {
        getMatrix().mapPoints(position);
    }
    position[0] += mLeft;
    position[1] += mTop;
    ViewParent viewParent = mParent;
    while (viewParent instanceof View) {
        final View view = (View) viewParent;
        position[0] -= view.mScrollX;
        position[1] -= view.mScrollY;
        if (!view.hasIdentityMatrix()) {
            view.getMatrix().mapPoints(position);
        }
        position[0] += view.mLeft;
        position[1] += view.mTop;
        viewParent = view.mParent;
    }
    if (viewParent instanceof ViewRootImpl) {
        // *cough*
        final ViewRootImpl vr = (ViewRootImpl) viewParent;
        position[1] -= vr.mCurScrollY;
    }
    location[0] = (int) (position[0] + 0.5f);
    location[1] = (int) (position[1] + 0.5f);
}","{
    if (location == null || location.length < 2) {
        throw new IllegalArgumentException(""location must be an array of two integers"");
    }
    if (mAttachInfo == null) {
        // When the view is not attached to a window, this method does not make sense
        location[0] = location[1] = 0;
        return;
    }
    float[] position = mAttachInfo.mTmpTransformLocation;
    position[0] = position[1] = 0.0f;
    if (!hasIdentityMatrix()) {
        getMatrix().mapPoints(position);
    }
    position[0] += mLeft;
    position[1] += mTop;
    ViewParent viewParent = mParent;
    while (viewParent instanceof View) {
        final View view = (View) viewParent;
        position[0] -= view.mScrollX;
        position[1] -= view.mScrollY;
        if (!view.hasIdentityMatrix()) {
            view.getMatrix().mapPoints(position);
        }
        position[0] += view.mLeft;
        position[1] += view.mTop;
        viewParent = view.mParent;
    }
    if (viewParent instanceof ViewRootImpl) {
        // *cough*
        final ViewRootImpl vr = (ViewRootImpl) viewParent;
        position[1] -= vr.mCurScrollY;
    }
    location[0] = (int) (position[0] + 0.5f);
    location[1] = (int) (position[1] + 0.5f);
}",1,"/**
 * <p>Computes the coordinates of this view in its window. The argument
 * must be an array of two integers. After the method returns, the array
 * contains the x and y location in that order.</p>
 *
 * @param location an array of two integers in which to hold the coordinates
 */
","/**
 * <p>Computes the coordinates of this view in its window. The argument
 * must be an array of two integers. After the method returns, the array
 * contains the x and y location in that order.</p>
 *
 * @param location an array of two integers in which to hold the coordinates
 */
",0,,,0,0,0,0,1,"1,3",1,3,1,"There is a change in the order of the if-else statements. In the early version, the code checks if the view is not attached to a window and returns if it is not. In the late version, the code first checks if the location array is valid and then checks if the view is not attached to a window. If the view is not attached to a window, the location array is set to [0, 0] instead of returning.","The change in the order of the if-else statements can lead to different behavior in some cases. In the early version, if the location array is not valid and the view is not attached to a window, the code will return without throwing an exception. In the late version, the code will always throw an exception if the location array is not valid, even if the view is not attached to a window. This can cause compatibility issues for code that relies on the early version behavior. Additionally, in the late version, if the view is not attached to a window, the location array is set to [0, 0] instead of returning. This can also cause compatibility issues for code that relies on the early version behavior."
76,"<android.widget.ExpandableListView: ContextMenuInfo createContextMenuInfo(View,int,long)>",15,16,"<android.widget.ExpandableListView: ContextMenuInfo createContextMenuInfo(View,int,long)>","<android.widget.ExpandableListView: ContextMenuInfo createContextMenuInfo(View,int,long)>",0,"{
    if (isHeaderOrFooterPosition(flatListPosition)) {
        // Return normal info for header/footer view context menus
        return new AdapterContextMenuInfo(view, flatListPosition, id);
    }
    final int adjustedPosition = getFlatPositionForConnector(flatListPosition);
    PositionMetadata pm = mConnector.getUnflattenedPos(adjustedPosition);
    ExpandableListPosition pos = pm.position;
    pm.recycle();
    id = getChildOrGroupId(pos);
    long packedPosition = pos.getPackedPosition();
    pos.recycle();
    return new ExpandableListContextMenuInfo(view, packedPosition, id);
}","{
    if (isHeaderOrFooterPosition(flatListPosition)) {
        // Return normal info for header/footer view context menus
        return new AdapterContextMenuInfo(view, flatListPosition, id);
    }
    final int adjustedPosition = getFlatPositionForConnector(flatListPosition);
    PositionMetadata pm = mConnector.getUnflattenedPos(adjustedPosition);
    ExpandableListPosition pos = pm.position;
    id = getChildOrGroupId(pos);
    long packedPosition = pos.getPackedPosition();
    pm.recycle();
    return new ExpandableListContextMenuInfo(view, packedPosition, id);
}",1,,,0,[@Override],[@Override],0,0,0,0,1,4,0,3,1,"The code change is in the control dependency. In the early version, the method `pm.recycle()` is called before `pos.recycle()`, while in the late version, `pos.recycle()` is called before `pm.recycle()`. This change can potentially lead to a different behavior of the API.","The Compatibility Issue is caused by the potential different return values. The change of the order of `pm.recycle()` and `pos.recycle()` can potentially affect the value of `packedPosition`, which is used in the return statement `new ExpandableListContextMenuInfo(view, packedPosition, id)`. Therefore, this code change can potentially lead to a different behavior of the API."
78,<android.animation.KeyframeSet: KeyframeSet ofFloat(float)>,17,18,<android.animation.KeyframeSet: KeyframeSet ofFloat(float)>,<android.animation.KeyframeSet: KeyframeSet ofFloat(float)>,0,"{
    int numKeyframes = values.length;
    FloatKeyframe[] keyframes = new FloatKeyframe[Math.max(numKeyframes, 2)];
    if (numKeyframes == 1) {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
        keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
    } else {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f, values[0]);
        for (int i = 1; i < numKeyframes; ++i) {
            keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]);
        }
    }
    return new FloatKeyframeSet(keyframes);
}","{
    boolean badValue = false;
    int numKeyframes = values.length;
    FloatKeyframe[] keyframes = new FloatKeyframe[Math.max(numKeyframes, 2)];
    if (numKeyframes == 1) {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
        keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
        if (Float.isNaN(values[0])) {
            badValue = true;
        }
    } else {
        keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f, values[0]);
        for (int i = 1; i < numKeyframes; ++i) {
            keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((float) i / (numKeyframes - 1), values[i]);
            if (Float.isNaN(values[i])) {
                badValue = true;
            }
        }
    }
    if (badValue) {
        Log.w(""Animator"", ""Bad value (NaN) in float animator"");
    }
    return new FloatKeyframeSet(keyframes);
}",1,,,0,,,0,0,0,0,1,"3,4",0,4,0,"In the late version, there are new if statements and a new variable ""badValue"" to check the values in the array ""values"" whether they are NaN. If there is a NaN, then ""badValue"" will be set to true, then a warning will be logged.","Since the behavior of the API didn't change in terms of returning different values or types, or throwing different exceptions, there is no Compatibility Issue."
79,<android.view.ViewGroup.MarginLayoutParams: void resolveLayoutDirection(int)>,17,18,<android.view.ViewGroup.MarginLayoutParams: void resolveLayoutDirection(int)>,<android.view.ViewGroup.MarginLayoutParams: void resolveLayoutDirection(int)>,0,"{
    setLayoutDirection(layoutDirection);
    if (!isMarginRelative())
        return;
    switch(layoutDirection) {
        case View.LAYOUT_DIRECTION_RTL:
            leftMargin = (endMargin > DEFAULT_RELATIVE) ? endMargin : initialLeftMargin;
            rightMargin = (startMargin > DEFAULT_RELATIVE) ? startMargin : initialRightMargin;
            break;
        case View.LAYOUT_DIRECTION_LTR:
        default:
            leftMargin = (startMargin > DEFAULT_RELATIVE) ? startMargin : initialLeftMargin;
            rightMargin = (endMargin > DEFAULT_RELATIVE) ? endMargin : initialRightMargin;
            break;
    }
}","{
    setLayoutDirection(layoutDirection);
    // Will use the left and right margins if no relative margin is defined.
    if (!isMarginRelative() || (mMarginFlags & NEED_RESOLUTION_MASK) != NEED_RESOLUTION_MASK)
        return;
    // Proceed with resolution
    doResolveMargins();
}",1,"/**
 * This will be called by {@link android.view.View#requestLayout()}. Left and Right margins
 * may be overridden depending on layout direction.
 */
","/**
 * This will be called by {@link android.view.View#requestLayout()}. Left and Right margins
 * may be overridden depending on layout direction.
 */
",0,[@Override],[@Override],0,0,0,0,1,"1,3",1,"3, 4",1,"The implementation of the method has been modified. The original switch statement has been removed and replaced with a new condition statement for checking if margin resolution is needed. Additionally, a new method 'doResolveMargins()' has been introduced to perform the margin resolution.","The modification in the code can potentially lead to different behaviors, specifically in terms of the values of 'leftMargin' and 'rightMargin'. In the early version, their values are determined by the layout direction and the values of 'startMargin' and 'endMargin'. However, in the late version, the margin resolution is performed through the 'doResolveMargins()' method, which may or may not result in the same values for 'leftMargin' and 'rightMargin' as in the early version. Therefore, this is a Compatibility Issue of type 1."
81,"<android.appwidget.AppWidgetHost: AppWidgetHostView createView(Context,int,AppWidgetProviderInfo)>",17,18,"<android.appwidget.AppWidgetHost: AppWidgetHostView createView(Context,int,AppWidgetProviderInfo)>","<android.appwidget.AppWidgetHost: AppWidgetHostView createView(Context,int,AppWidgetProviderInfo)>",0,"{
    AppWidgetHostView view = onCreateView(context, appWidgetId, appWidget);
    view.setOnClickHandler(mOnClickHandler);
    view.setAppWidget(appWidgetId, appWidget);
    synchronized (mViews) {
        mViews.put(appWidgetId, view);
    }
    RemoteViews views;
    try {
        views = sService.getAppWidgetViews(appWidgetId);
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
    view.updateAppWidget(views);
    return view;
}","{
    final int userId = mContext.getUserId();
    AppWidgetHostView view = onCreateView(mContext, appWidgetId, appWidget);
    view.setUserId(userId);
    view.setOnClickHandler(mOnClickHandler);
    view.setAppWidget(appWidgetId, appWidget);
    synchronized (mViews) {
        mViews.put(appWidgetId, view);
    }
    RemoteViews views;
    try {
        views = sService.getAppWidgetViews(appWidgetId, userId);
        if (views != null) {
            views.setUser(new UserHandle(mContext.getUserId()));
        }
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
    view.updateAppWidget(views);
    return view;
}",1,"/**
 * Create the AppWidgetHostView for the given widget.
 * The AppWidgetHost retains a pointer to the newly-created View.
 */
","/**
 * Create the AppWidgetHostView for the given widget.
 * The AppWidgetHost retains a pointer to the newly-created View.
 */
",0,,,0,0,0,0,1|2,"1,3,4,5",1,"1, 5","1, 2",The changes between the early and late version are:,3. A new statement `if (views != null) { views.setUser(new UserHandle(mContext.getUserId())); }` is added. This change is classified as 'Control dependency changed'.
82,<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>,17,18,<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>,<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>,0,"{
    setBooleanProperty(PROPERTY_FOCUSED, focused);
}","{
    setBooleanProperty(BOOLEAN_PROPERTY_FOCUSED, focused);
}",1,"/**
 * Sets whether this node is focused.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param focused True if the node is focused.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
","/**
 * Sets whether this node is focused.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param focused True if the node is focused.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
",0,,,0,0,0,0,2,5,0,5,0,"The code change is in the first parameter of the `setBooleanProperty` method, which is changed from `PROPERTY_FOCUSED` to `BOOLEAN_PROPERTY_FOCUSED`. This kind of change is categorized as 5) Dependent API changed.","The change of the first parameter in the `setBooleanProperty` method will not affect the behavior of the `setFocused` method, because both `PROPERTY_FOCUSED` and `BOOLEAN_PROPERTY_FOCUSED` are constants, and their values are the same. Therefore, there is no Compatibility Issue in this case."
83,<android.os.Looper: void quit()>,17,18,<android.os.Looper: void quit()>,<android.os.Looper: void quit()>,0,"{
    mQueue.quit();
}","{
    mQueue.quit(false);
}",1,"/**
 * Quits the looper.
 *
 * Causes the {@link #loop} method to terminate as soon as possible.
 */
","/**
 * Quits the looper.
 * <p>
 * Causes the {@link #loop} method to terminate without processing any
 * more messages in the message queue.
 * </p><p>
 * Any attempt to post messages to the queue after the looper is asked to quit will fail.
 * For example, the {@link Handler#sendMessage(Message)} method will return false.
 * </p><p class=""note"">
 * Using this method may be unsafe because some messages may not be delivered
 * before the looper terminates.  Consider using {@link #quitSafely} instead to ensure
 * that all pending work is completed in an orderly manner.
 * </p>
 *
 * @see #quitSafely
 */
",1,,,0,0,0,0,2,5,0,5,1,"The `quit()` method in the early version calls `mQueue.quit()`, while the late version calls `mQueue.quit(false)`. This is a change in the dependent API, as the `quit()` method of the `MessageQueue` class has been modified to include a boolean parameter.","The addition of the boolean parameter to the `quit()` method of the `MessageQueue` class can potentially lead to different behavior in the `quit()` method of the `Looper` class. If the `MessageQueue` class behaves differently based on the value of the boolean parameter, then the `Looper` class may also behave differently in the late version. This can be considered a compatibility issue, as the change in the dependent API can cause the `Looper.quit()` method to return a different value or throw a different exception."
84,<android.os.Parcel: T readParcelable(ClassLoader)>,17,18,<android.os.Parcel: T readParcelable(ClassLoader)>,<android.os.Parcel: T readParcelable(ClassLoader)>,0,"{
    String name = readString();
    if (name == null) {
        return null;
    }
    Parcelable.Creator<T> creator;
    synchronized (mCreators) {
        HashMap<String, Parcelable.Creator> map = mCreators.get(loader);
        if (map == null) {
            map = new HashMap<String, Parcelable.Creator>();
            mCreators.put(loader, map);
        }
        creator = map.get(name);
        if (creator == null) {
            try {
                Class c = loader == null ? Class.forName(name) : Class.forName(name, true, loader);
                Field f = c.getField(""CREATOR"");
                creator = (Parcelable.Creator) f.get(null);
            } catch (IllegalAccessException e) {
                Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e);
                throw new BadParcelableException(""IllegalAccessException when unmarshalling: "" + name);
            } catch (ClassNotFoundException e) {
                Log.e(TAG, ""Class not found when unmarshalling: "" + name + "", e: "" + e);
                throw new BadParcelableException(""ClassNotFoundException when unmarshalling: "" + name);
            } catch (ClassCastException e) {
                throw new BadParcelableException(""Parcelable protocol requires a "" + ""Parcelable.Creator object called "" + "" CREATOR on class "" + name);
            } catch (NoSuchFieldException e) {
                throw new BadParcelableException(""Parcelable protocol requires a "" + ""Parcelable.Creator object called "" + "" CREATOR on class "" + name);
            }
            if (creator == null) {
                throw new BadParcelableException(""Parcelable protocol requires a "" + ""Parcelable.Creator object called "" + "" CREATOR on class "" + name);
            }
            map.put(name, creator);
        }
    }
    if (creator instanceof Parcelable.ClassLoaderCreator<?>) {
        return ((Parcelable.ClassLoaderCreator<T>) creator).createFromParcel(this, loader);
    }
    return creator.createFromParcel(this);
}","{
    Parcelable.Creator<T> creator = readParcelableCreator(loader);
    if (creator == null) {
        return null;
    }
    if (creator instanceof Parcelable.ClassLoaderCreator<?>) {
        return ((Parcelable.ClassLoaderCreator<T>) creator).createFromParcel(this, loader);
    }
    return creator.createFromParcel(this);
}",1,"/**
 * Read and return a new Parcelable from the parcel.  The given class loader
 * will be used to load any enclosed Parcelables.  If it is null, the default
 * class loader will be used.
 * @param loader A ClassLoader from which to instantiate the Parcelable
 * object, or null for the default class loader.
 * @return Returns the newly created Parcelable, or null if a null
 * object has been written.
 * @throws BadParcelableException Throws BadParcelableException if there
 * was an error trying to instantiate the Parcelable.
 */
","/**
 * Read and return a new Parcelable from the parcel.  The given class loader
 * will be used to load any enclosed Parcelables.  If it is null, the default
 * class loader will be used.
 * @param loader A ClassLoader from which to instantiate the Parcelable
 * object, or null for the default class loader.
 * @return Returns the newly created Parcelable, or null if a null
 * object has been written.
 * @throws BadParcelableException Throws BadParcelableException if there
 * was an error trying to instantiate the Parcelable.
 */
",0,,,0,0,0,0,1,"2,3,4",2,"1, 5",1,"The implementation of the method has been significantly changed. The early version uses a synchronized block to get the `Parcelable.Creator` object from a map. If the object is not found in the map, it will try to create it by reflection. Then it uses the creator object to create a new Parcelable object. The late version, however, uses a separate method `readParcelableCreator` to get the creator object and then uses it to create the Parcelable object. This is a code change of type 1 (Return statement changed) and type 5 (Dependent API changed).","The change in the implementation of the method can potentially lead to compatibility issues. The early version uses reflection to create the Parcelable.Creator object if it is not found in the map. This means that the object can be created as long as the class is in the classpath and the CREATOR field is accessible. The late version, however, uses a separate method to get the creator object. If the method is not implemented correctly, the creator object may not be found and the method will return null. This can lead to a compatibility issue of type 1 (Compatibility Issue caused by potential different return values or types)."
97,"<android.app.AlertDialog: void setButton3(CharSequence,Message)>",19,20,"<android.app.AlertDialog: void setButton3(CharSequence,Message)>","<android.app.AlertDialog: void setButton3(CharSequence,OnClickListener)>",0,"{
    setButton(BUTTON_NEUTRAL, text, msg);
}","{
    setButton(BUTTON_NEUTRAL, text, listener);
}",1,"/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_NEUTRAL}.
 */
","/**
 * Set a listener to be invoked when button 3 of the dialog is pressed.
 * @param text The text to display in button 3.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_POSITIVE}
 */
",1,[@Deprecated],[@Deprecated],0,0,0,0,1,5,0,1,1,The third parameter of the method "setButton" has been changed from "Message" to "android.content.DialogInterface.OnClickListener".,"The Compatibility Issue arises as the change in the third parameter of the method ""setButton"" from ""Message"" to ""android.content.DialogInterface.OnClickListener"" could potentially lead to the API throwing a different exception or returning a different variable type, if the third parameter passed to the method is not compatible with the new type."
98,<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>,19,20,<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>,<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>,0,"{
    return runAction(new Action<Set<String>>() {

        @Override
        public Set<String> run(ITextToSpeechService service) throws RemoteException {
            String[] features = service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant());
            if (features != null) {
                final Set<String> featureSet = new HashSet<String>();
                Collections.addAll(featureSet, features);
                return featureSet;
            }
            return null;
        }
    }, null, ""getFeatures"");
}","{
    return runAction(new Action<Set<String>>() {

        @Override
        public Set<String> run(ITextToSpeechService service) throws RemoteException {
            String[] features = null;
            try {
                features = service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant());
            } catch (MissingResourceException e) {
                Log.w(TAG, ""Couldn't retrieve 3 letter ISO 639-2/T language and/or ISO 3166 "" + ""country code for locale: "" + locale, e);
                return null;
            }
            if (features != null) {
                final Set<String> featureSet = new HashSet<String>();
                Collections.addAll(featureSet, features);
                return featureSet;
            }
            return null;
        }
    }, null, ""getFeatures"");
}",1,"/**
 * Queries the engine for the set of features it supports for a given locale.
 * Features can either be framework defined, e.g.
 * {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.
 * Engine specific keys must be prefixed by the name of the engine they
 * are intended for. These keys can be used as parameters to
 * {@link TextToSpeech#speak(String, int, java.util.HashMap)} and
 * {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.
 *
 * Features are boolean flags, and their values in the synthesis parameters
 * must be behave as per {@link Boolean#parseBoolean(String)}.
 *
 * @param locale The locale to query features for.
 */
","/**
 * Queries the engine for the set of features it supports for a given locale.
 * Features can either be framework defined, e.g.
 * {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.
 * Engine specific keys must be prefixed by the name of the engine they
 * are intended for. These keys can be used as parameters to
 * {@link TextToSpeech#speak(String, int, java.util.HashMap)} and
 * {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.
 *
 * Features are boolean flags, and their values in the synthesis parameters
 * must be behave as per {@link Boolean#parseBoolean(String)}.
 *
 * @param locale The locale to query features for.
 */
",1,,,0,0,0,0,1,"1,2,4","1,2","1,2",1,"The change is the addition of a try-catch block in the late version implementation of the TextToSpeech.getFeatures(Locale) method. Specifically, the method service.getFeaturesForLanguage(locale.getISO3Language(), locale.getISO3Country(), locale.getVariant()) is now wrapped in a try block, and a catch block for MissingResourceException is added. In the catch block, the method logs a warning message and returns null.","The Compatibility Issue arises due to the fact that the late version implementation of the method may return null in case of a MissingResourceException, while the early version implementation may not. This difference in behavior can cause issues in client code that relies on the return value of the method and does not expect it to be null. For example, the client code may throw a NullPointerException when it tries to access a member of the returned Set<String>. Therefore, the CI type is 1, which means that the code change potentially causes the API to return a different variable (value or type)."
100,"<android.app.ActivityThread.ApplicationThread: void dumpProvider(FileDescriptor,IBinder,String[])>",19,20,"<android.app.ActivityThread.ApplicationThread: void dumpProvider(FileDescriptor,IBinder,String[])>","<android.app.ActivityThread.ApplicationThread: void dumpProvider(FileDescriptor,IBinder,String[])>",0,"{
    DumpComponentInfo data = new DumpComponentInfo();
    try {
        data.fd = ParcelFileDescriptor.dup(fd);
        data.token = providertoken;
        data.args = args;
        queueOrSendMessage(H.DUMP_PROVIDER, data);
    } catch (IOException e) {
        Slog.w(TAG, ""dumpProvider failed"", e);
    }
}","{
    DumpComponentInfo data = new DumpComponentInfo();
    try {
        data.fd = ParcelFileDescriptor.dup(fd);
        data.token = providertoken;
        data.args = args;
        sendMessage(H.DUMP_PROVIDER, data, 0, 0, true);
    } catch (IOException e) {
        Slog.w(TAG, ""dumpProvider failed"", e);
    }
}",1,,,0,,,0,0,0,0,1,4,0,5,0,"The method queueOrSendMessage() has been changed to sendMessage() in the implementation of the API. This is a dependent API change, where the type or number of parameters has been modified.","The dependent API change does not affect the return value or the exception handling of the current API. Therefore, no compatibility issue exists for this API."
101,<android.widget.PopupWindow.PopupDecorView: void requestEnterTransition(Transition)>,23,24,<android.widget.PopupWindow.PopupDecorView: void requestEnterTransition(Transition)>,<android.widget.PopupWindow.PopupDecorView: void requestEnterTransition(Transition)>,0,"{
    final ViewTreeObserver observer = getViewTreeObserver();
    if (observer != null && transition != null) {
        final Transition enterTransition = transition.clone();
        // Postpone the enter transition after the first layout pass.
        observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                final ViewTreeObserver observer = getViewTreeObserver();
                if (observer != null) {
                    observer.removeOnGlobalLayoutListener(this);
                }
                final Rect epicenter = getRelativeAnchorBounds();
                enterTransition.setEpicenterCallback(new EpicenterCallback() {

                    @Override
                    public Rect onGetEpicenter(Transition transition) {
                        return epicenter;
                    }
                });
                startEnterTransition(enterTransition);
            }
        });
    }
}","{
    final ViewTreeObserver observer = getViewTreeObserver();
    if (observer != null && transition != null) {
        final Transition enterTransition = transition.clone();
        // Postpone the enter transition after the first layout pass.
        observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                final ViewTreeObserver observer = getViewTreeObserver();
                if (observer != null) {
                    observer.removeOnGlobalLayoutListener(this);
                }
                final Rect epicenter = getTransitionEpicenter();
                enterTransition.setEpicenterCallback(new EpicenterCallback() {

                    @Override
                    public Rect onGetEpicenter(Transition transition) {
                        return epicenter;
                    }
                });
                startEnterTransition(enterTransition);
            }
        });
    }
}",1,"/**
 * Requests that an enter transition run after the next layout pass.
 */","/**
 * Requests that an enter transition run after the next layout pass.
 */",0,,,0,,,,1,4,0,5,1,The method `getRelativeAnchorBounds()` in the early version has been replaced with `getTransitionEpicenter()` in the late version. This is a change in the dependent API.,"The change in the dependent API `getRelativeAnchorBounds()` to `getTransitionEpicenter()` can potentially lead to a different value of `epicenter`, which is used in the `enterTransition.setEpicenterCallback()` method. This can cause a different behavior in the enter transition transition, hence it is a Compatibility Issue of type 1."
102,<android.view.ViewRootImpl.ImeInputStage: int onProcess(QueuedInputEvent)>,23,24,<android.view.ViewRootImpl.ImeInputStage: int onProcess(QueuedInputEvent)>,<android.view.ViewRootImpl.ImeInputStage: int onProcess(QueuedInputEvent)>,0,"{
    if (mLastWasImTarget && !isInLocalFocusMode()) {
        InputMethodManager imm = InputMethodManager.peekInstance();
        if (imm != null) {
            final InputEvent event = q.mEvent;
            if (DEBUG_IMF)
                Log.v(TAG, ""Sending input event to IME: "" + event);
            int result = imm.dispatchInputEvent(event, q, this, mHandler);
            if (result == InputMethodManager.DISPATCH_HANDLED) {
                return FINISH_HANDLED;
            } else if (result == InputMethodManager.DISPATCH_NOT_HANDLED) {
                // The IME could not handle it, so skip along to the next InputStage
                return FORWARD;
            } else {
                // callback will be invoked later
                return DEFER;
            }
        }
    }
    return FORWARD;
}","{
    if (mLastWasImTarget && !isInLocalFocusMode()) {
        InputMethodManager imm = InputMethodManager.peekInstance();
        if (imm != null) {
            final InputEvent event = q.mEvent;
            if (DEBUG_IMF)
                Log.v(mTag, ""Sending input event to IME: "" + event);
            int result = imm.dispatchInputEvent(event, q, this, mHandler);
            if (result == InputMethodManager.DISPATCH_HANDLED) {
                return FINISH_HANDLED;
            } else if (result == InputMethodManager.DISPATCH_NOT_HANDLED) {
                // The IME could not handle it, so skip along to the next InputStage
                return FORWARD;
            } else {
                // callback will be invoked later
                return DEFER;
            }
        }
    }
    return FORWARD;
}",1,,,0,[@Override],[@Override],0,,,,1,4,0,4,0,The change is that the log message is printed with a different tag in the late version (mTag instead of TAG). This is a change in the 'other statement' category.,"The change in the log message tag does not affect the functionality of the API, and therefore, there is no compatibility issue."
104,"<android.view.View: void scheduleDrawable(Drawable,Runnable,long)>",23,24,"<android.view.View: void scheduleDrawable(Drawable,Runnable,long)>","<android.view.View: void scheduleDrawable(Drawable,Runnable,long)>",0,"{
    if (verifyDrawable(who) && what != null) {
        final long delay = when - SystemClock.uptimeMillis();
        if (mAttachInfo != null) {
            mAttachInfo.mViewRootImpl.mChoreographer.postCallbackDelayed(Choreographer.CALLBACK_ANIMATION, what, who, Choreographer.subtractFrameDelay(delay));
        } else {
            ViewRootImpl.getRunQueue().postDelayed(what, delay);
        }
    }
}","{
    if (verifyDrawable(who) && what != null) {
        final long delay = when - SystemClock.uptimeMillis();
        if (mAttachInfo != null) {
            mAttachInfo.mViewRootImpl.mChoreographer.postCallbackDelayed(Choreographer.CALLBACK_ANIMATION, what, who, Choreographer.subtractFrameDelay(delay));
        } else {
            // Postpone the runnable until we know
            // on which thread it needs to run.
            getRunQueue().postDelayed(what, delay);
        }
    }
}",1,"/**
 * Schedules an action on a drawable to occur at a specified time.
 *
 * @param who the recipient of the action
 * @param what the action to run on the drawable
 * @param when the time at which the action must occur. Uses the
 * {@link SystemClock#uptimeMillis} timebase.
 */","/**
 * Schedules an action on a drawable to occur at a specified time.
 *
 * @param who the recipient of the action
 * @param what the action to run on the drawable
 * @param when the time at which the action must occur. Uses the
 * {@link SystemClock#uptimeMillis} timebase.
 */",0,[@Override],[@Override],0,,,,1,3,0,3,1,"The implementation of the code block in the `else` statement has changed from `ViewRootImpl.getRunQueue().postDelayed(what, delay)` to `getRunQueue().postDelayed(what, delay)`. This change changes the object on which the `postDelayed` method is called, which may lead to different behavior of the `scheduleDrawable` method.","The change of the object on which the `postDelayed` method is called may lead to the `what` Runnable being executed on a different thread or at a different time, which may cause the behavior of the `scheduleDrawable` method to be different between the two versions. Therefore, this change has the potential to cause a Compatibility Issue of type 1 - Compatibility Issue caused by potential different return values or types."
105,"<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout: void onRemoteViewsLoaded(RemoteViews,OnClickHandler)>",23,24,"<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout: void onRemoteViewsLoaded(RemoteViews,OnClickHandler)>","<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout: void onRemoteViewsLoaded(RemoteViews,OnClickHandler)>",0,"{
    try {
        // Remove all the children of this layout first
        removeAllViews();
        addView(view.apply(getContext(), this, handler));
    } catch (Exception e) {
        Log.e(TAG, ""Failed to apply RemoteViews."");
    }
}","{
    setOnClickHandler(handler);
    applyRemoteViews(view);
}",1,"/**
 * Updates this RemoteViewsFrameLayout depending on the view that was loaded.
 * @param view the RemoteViews that was loaded. If null, the RemoteViews was not loaded
 * successfully.
 */","/**
 * Updates this RemoteViewsFrameLayout depending on the view that was loaded.
 * @param view the RemoteViews that was loaded. If null, the RemoteViews was not loaded
 * successfully.
 */",0,,,0,,,,1,"2,4",2,"1, 5","1,2","The implementation of the method has been completely changed. In the early version, the method first removes all the children of the layout, then adds a new view that is applied with the context, the layout, and the click handler. In the late version, the method first sets the click handler, then applies the remote views to the layout. Additionally, the method in the late version no longer catches and logs exceptions.","The change in the implementation of the method can potentially lead to compatibility issues. Firstly, the behavior of the method has been changed, which means that the method in the late version may not produce the same result as the method in the early version. This can cause issues for apps that rely on the specific behavior of the method in the early version. Secondly, the removal of the exception handling in the late version can potentially cause crashes for apps that use this method. In the early version, if an exception is thrown during the application of the remote views, the method logs the exception and continues to run. In the late version, however, if an exception is thrown, it will propagate up and potentially cause a crash."
107,<android.text.style.TtsSpan.DecimalBuilder: DecimalBuilder setIntegerPart(String)>,23,24,<android.text.style.TtsSpan.DecimalBuilder: DecimalBuilder setIntegerPart(String)>,<android.text.style.TtsSpan.DecimalBuilder: DecimalBuilder setIntegerPart(String)>,0,"{
    return setStringArgument(TtsSpan.ARG_INTEGER_PART, integerPart);
}","{
    return setIntegerPart(String.valueOf(integerPart));
}",1,"/**
 * Sets the {@link #ARG_INTEGER_PART} argument.
 * @param integerPart A non-empty string of digits with an optional
 * leading + or -.
 * @return This instance.
 */","/**
 * Convenience method that converts the number to a String and sets it
 * to the value for {@link #ARG_INTEGER_PART}.
 * @param integerPart The integer part of the decimal.
 * @return This instance.
 */",1,,,0,,,,1,1,1,1,1,"The implementation of the `setIntegerPart` method in the `DecimalBuilder` class has changed between the two versions. The early version calls the `setStringArgument` method with the `TtsSpan.ARG_INTEGER_PART` argument and the `integerPart` string as its parameters. The late version, on the other hand, calls the `setIntegerPart` method with the `String.valueOf(integerPart)` as its parameter.",
109,"<android.accounts.AccountManager: void setAuthToken(Account,String,String)>",23,24,"<android.accounts.AccountManager: void setAuthToken(Account,String,String)>","<android.accounts.AccountManager: void setAuthToken(Account,String,String)>",0,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    try {
        mService.setAuthToken(account, authTokenType, authToken);
    } catch (RemoteException e) {
        // won't ever happen
        throw new RuntimeException(e);
    }
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    try {
        mService.setAuthToken(account, authTokenType, authToken);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Adds an auth token to the AccountManager cache for an account.
 * If the account does not exist then this call has no effect.
 * Replaces any previous auth token for this account and auth token type.
 * Intended for use by the authenticator, not directly by applications.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
 * is needed for those platforms. See docs for this function in API level 22.
 *
 * @param account The account to set an auth token for
 * @param authTokenType The type of the auth token, see {#getAuthToken}
 * @param authToken The auth token to add to the cache
 */","/**
 * Adds an auth token to the AccountManager cache for an account.
 * If the account does not exist then this call has no effect.
 * Replaces any previous auth token for this account and auth token type.
 * Intended for use by the authenticator, not directly by applications.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
 * is needed for those platforms. See docs for this function in API level 22.
 *
 * @param account The account to set an auth token for
 * @param authTokenType The type of the auth token, see {#getAuthToken}
 * @param authToken The auth token to add to the cache
 */",0,,,0,,,,1,2,2,2,2,"The exception handling statement has changed. In the early version, the code will throw a new RuntimeException(e) when catching a RemoteException. In the late version, the code will call e.rethrowFromSystemServer() instead, which will re-throw the original RemoteException.","This change can cause a compatibility issue because the behavior of the code when catching a RemoteException has changed. In the early version, the code will throw a new RuntimeException(e), which may be caught and handled differently by the calling code. In the late version, the code will re-throw the original RemoteException, which may not be caught and handled correctly by the calling code. Therefore, the CI type is 2 (Compatibility Issue caused by potential different exception handlings)."
115,<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>,24,25,<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>,<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>,0,"{
    if (mClosed) {
        if (DEBUG)
            Log.v(TAG, mIdString + ""close - reentering"");
        return;
    }
    if (DEBUG)
        Log.v(TAG, mIdString + ""close - first time"");
    mClosed = true;
    /*
         * Flush out any repeating request. Since camera is closed, no new requests
         * can be queued, and eventually the entire request queue will be drained.
         *
         * If the camera device was already closed, short circuit and do nothing; since
         * no more internal device callbacks will fire anyway.
         *
         * Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure the
         * camera. Once that's done, fire #onClosed.
         */
    try {
        mDeviceImpl.stopRepeating();
    } catch (IllegalStateException e) {
        // OK: Camera device may already be closed, nothing else to do
        // TODO: Fire onClosed anytime we get the device onClosed or the ISE?
        // or just suppress the ISE only and rely onClosed.
        // Also skip any of the draining work if this is already closed.
        // Short-circuit; queue callback immediately and return
        mStateCallback.onClosed(this);
        return;
    } catch (CameraAccessException e) {
        // OK: close does not throw checked exceptions.
        Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e);
    // TODO: call onError instead of onClosed if this happens
    }
    // If no sequences are pending, fire #onClosed immediately
    mSequenceDrainer.beginDrain();
}","{
    synchronized (this) {
        if (mClosed) {
            if (DEBUG)
                Log.v(TAG, mIdString + ""close - reentering"");
            return;
        }
        if (DEBUG)
            Log.v(TAG, mIdString + ""close - first time"");
        mClosed = true;
    }
    synchronized (mDeviceImpl.mInterfaceLock) {
        synchronized (this) {
            /*
                 * Flush out any repeating request. Since camera is closed, no new requests
                 * can be queued, and eventually the entire request queue will be drained.
                 *
                 * If the camera device was already closed, short circuit and do nothing; since
                 * no more internal device callbacks will fire anyway.
                 *
                 * Otherwise, once stopRepeating is done, wait for camera to idle, then unconfigure
                 * the camera. Once that's done, fire #onClosed.
                 */
            try {
                mDeviceImpl.stopRepeating();
            } catch (IllegalStateException e) {
                // OK: Camera device may already be closed, nothing else to do
                // TODO: Fire onClosed anytime we get the device onClosed or the ISE?
                // or just suppress the ISE only and rely onClosed.
                // Also skip any of the draining work if this is already closed.
                // Short-circuit; queue callback immediately and return
                mStateCallback.onClosed(this);
                return;
            } catch (CameraAccessException e) {
                // OK: close does not throw checked exceptions.
                Log.e(TAG, mIdString + ""Exception while stopping repeating: "", e);
            // TODO: call onError instead of onClosed if this happens
            }
        }
    }
    synchronized (this) {
        // If no sequences are pending, fire #onClosed immediately
        mSequenceDrainer.beginDrain();
    }
}",1,,,0,[@Override],[@Override],0,,,,1,"1,3,4",1,3,1,"In the late version implementation, three blocks of synchronized statements have been added, which can potentially change the control flow of the API.","As the control flow of the API has been potentially changed due to the addition of the synchronized statements, the API can potentially return a different value or type, leading to a Compatibility Issue of type 1."
122,<android.widget.DatePickerCalendarDelegate: void onLocaleChanged(Locale)>,25,26,<android.widget.DatePickerCalendarDelegate: void onLocaleChanged(Locale)>,<android.widget.DatePickerCalendarDelegate: void onLocaleChanged(Locale)>,0,"{
    final TextView headerYear = mHeaderYear;
    if (headerYear == null) {
        // again later after everything has been set up.
        return;
    }
    // Update the date formatter.
    final String datePattern = DateFormat.getBestDateTimePattern(locale, ""EMMMd"");
    mMonthDayFormat = new SimpleDateFormat(datePattern, locale);
    mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE);
    mYearFormat = new SimpleDateFormat(""y"", locale);
    // Clear out the lazily-initialized accessibility event formatter.
    mAccessibilityEventFormat = null;
    // Update the header text.
    onCurrentDateChanged(false);
}","{
    final TextView headerYear = mHeaderYear;
    if (headerYear == null) {
        // again later after everything has been set up.
        return;
    }
    // Update the date formatter.
    final String datePattern = DateFormat.getBestDateTimePattern(locale, ""EMMMd"");
    mMonthDayFormat = new SimpleDateFormat(datePattern, locale);
    mMonthDayFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE);
    mYearFormat = new SimpleDateFormat(""y"", locale);
    // Update the header text.
    onCurrentDateChanged(false);
}",1,,,0,[@Override],[@Override],0,,,,1,4,0,4,0,"In the early version, the statement ""mAccessibilityEventFormat = null;"" is present, which is used to clear out the lazily-initialized accessibility event formatter. However, in the late version, this statement is removed. This is an other statement changed.","The removal of ""mAccessibilityEventFormat = null;"" statement in the late version will not cause any compatibility issue, as it is only used to clear out a variable. This variable will be reinitialized again when it is needed, so the behavior of the API will not be affected. Therefore, the CI type is 0."
123,<android.view.ContextThemeWrapper: Theme getTheme()>,25,26,<android.view.ContextThemeWrapper: Theme getTheme()>,<android.view.ContextThemeWrapper: Theme getTheme()>,0,"{
    if (mTheme != null) {
        return mTheme;
    }
    mThemeResource = Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion);
    initializeTheme();
    return mTheme;
}","{
    if (mTheme != null) {
        return mTheme;
    }
    mThemeResource = Resources.selectDefaultTheme(mThemeResource, getApplicationInfo().targetSdkVersion);
    initializeTheme();
    return mTheme;
}",0,,,0,[@Override],[@Override],0,,,,0,0,0,0,0,There is no change in the given method implementations and annotations between the two continuous versions.,There is no Compatibility Issue (CI) exist for the given API as there is no code change between the two versions.
130,"<android.net.ConnectivityManager: void requestNetwork(NetworkRequest,PendingIntent)>",26,27,"<android.net.ConnectivityManager: void requestNetwork(NetworkRequest,PendingIntent)>","<android.net.ConnectivityManager: void requestNetwork(NetworkRequest,PendingIntent)>",0,"{
    checkPendingIntent(operation);
    try {
        mService.pendingRequestForNetwork(request.networkCapabilities, operation);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    checkPendingIntentNotNull(operation);
    try {
        mService.pendingRequestForNetwork(request.networkCapabilities, operation);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (ServiceSpecificException e) {
        throw convertServiceException(e);
    }
}",1,"/**
 * Request a network to satisfy a set of {@link android.net.NetworkCapabilities}.
 *
 * This function behaves identically to the version that takes a NetworkCallback, but instead
 * of {@link NetworkCallback} a {@link PendingIntent} is used.  This means
 * the request may outlive the calling application and get called back when a suitable
 * network is found.
 * <p>
 * The operation is an Intent broadcast that goes to a broadcast receiver that
 * you registered with {@link Context#registerReceiver} or through the
 * &lt;receiver&gt; tag in an AndroidManifest.xml file
 * <p>
 * The operation Intent is delivered with two extras, a {@link Network} typed
 * extra called {@link #EXTRA_NETWORK} and a {@link NetworkRequest}
 * typed extra called {@link #EXTRA_NETWORK_REQUEST} containing
 * the original requests parameters.  It is important to create a new,
 * {@link NetworkCallback} based request before completing the processing of the
 * Intent to reserve the network or it will be released shortly after the Intent
 * is processed.
 * <p>
 * If there is already a request for this Intent registered (with the equality of
 * two Intents defined by {@link Intent#filterEquals}), then it will be removed and
 * replaced by this one, effectively releasing the previous {@link NetworkRequest}.
 * <p>
 * The request may be released normally by calling
 * {@link #releaseNetworkRequest(android.app.PendingIntent)}.
 * <p>It is presently unsupported to request a network with either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}
 * as these {@code NetworkCapabilities} represent states that a particular
 * network may never attain, and whether a network will attain these states
 * is unknown prior to bringing up the network so the framework does not
 * know how to go about satisfing a request with these capabilities.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param request {@link NetworkRequest} describing this request.
 * @param operation Action to perform when the network is available (corresponds
 * to the {@link NetworkCallback#onAvailable} call.  Typically
 * comes from {@link PendingIntent#getBroadcast}. Cannot be null.
 * @throws IllegalArgumentException if {@code request} contains either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}.
 */","/**
 * Request a network to satisfy a set of {@link android.net.NetworkCapabilities}.
 *
 * This function behaves identically to the version that takes a NetworkCallback, but instead
 * of {@link NetworkCallback} a {@link PendingIntent} is used.  This means
 * the request may outlive the calling application and get called back when a suitable
 * network is found.
 * <p>
 * The operation is an Intent broadcast that goes to a broadcast receiver that
 * you registered with {@link Context#registerReceiver} or through the
 * &lt;receiver&gt; tag in an AndroidManifest.xml file
 * <p>
 * The operation Intent is delivered with two extras, a {@link Network} typed
 * extra called {@link #EXTRA_NETWORK} and a {@link NetworkRequest}
 * typed extra called {@link #EXTRA_NETWORK_REQUEST} containing
 * the original requests parameters.  It is important to create a new,
 * {@link NetworkCallback} based request before completing the processing of the
 * Intent to reserve the network or it will be released shortly after the Intent
 * is processed.
 * <p>
 * If there is already a request for this Intent registered (with the equality of
 * two Intents defined by {@link Intent#filterEquals}), then it will be removed and
 * replaced by this one, effectively releasing the previous {@link NetworkRequest}.
 * <p>
 * The request may be released normally by calling
 * {@link #releaseNetworkRequest(android.app.PendingIntent)}.
 * <p>It is presently unsupported to request a network with either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}
 * as these {@code NetworkCapabilities} represent states that a particular
 * network may never attain, and whether a network will attain these states
 * is unknown prior to bringing up the network so the framework does not
 * know how to go about satisfing a request with these capabilities.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param request {@link NetworkRequest} describing this request.
 * @param operation Action to perform when the network is available (corresponds
 * to the {@link NetworkCallback#onAvailable} call.  Typically
 * comes from {@link PendingIntent#getBroadcast}. Cannot be null.
 * @throws IllegalArgumentException if {@code request} contains either
 * {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} or
 * {@link NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL}.
 */",0,,,0,,,,1,2,2,"2, 5",2,"The `checkPendingIntent` method has been replaced with `checkPendingIntentNotNull` in the late version, potentially leading to different behavior in the null-checking of the `operation` parameter. Additionally, a new `catch` block for `ServiceSpecificException` has been added, with a call to `convertServiceException` method which may throw a different type of exception.","The compatibility issue arises from the change in the null-checking of the `operation` parameter. In the early version, `checkPendingIntent` method might have allowed null values for the `operation` parameter, whereas in the late version, `checkPendingIntentNotNull` will explicitly throw a `NullPointerException` if the `operation` is null. This can lead to different behavior in the calling code, and thus, a compatibility issue. The addition of a new `catch` block and the `convertServiceException` method might also throw a different type of exception, but without the knowledge of the dependent API, it is hard to confirm if it is a compatibility issue."
131,"<android.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(Fragment,Bundle,boolean)>",26,27,"<android.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(Fragment,Bundle,boolean)>","<android.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(Fragment,Bundle,boolean)>",0,"{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true);
        }
    }
    if (mLifecycleCallbacks == null) {
        return;
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentActivityCreated(this, f, savedInstanceState);
        }
    }
}","{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentActivityCreated(f, savedInstanceState, true);
        }
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentActivityCreated(this, f, savedInstanceState);
        }
    }
}",1,,,0,,,0,,,,1,"1,3",1,3,1,"In the late version, the statement ""if (mLifecycleCallbacks == null) { return; }"" has been removed. This statement was previously used to check if the mLifecycleCallbacks object is null and return from the method if it is. The removal of this statement means that the method will now continue to execute the for-loop even if mLifecycleCallbacks is null, which can potentially lead to a NullPointerException.","The removal of the ""if (mLifecycleCallbacks == null) { return; }"" statement can potentially change the behavior of the method in cases where mLifecycleCallbacks is null. In the early version, the method would simply return and not execute the for-loop. In the late version, the method will execute the for-loop and potentially throw a NullPointerException if mLifecycleCallbacks is null. This is a Compatibility Issue caused by potential different return values or types (in this case, a potential NullPointerException)."
132,<android.service.autofill.SaveInfo.Builder: Builder setDescription(CharSequence)>,26,27,<android.service.autofill.SaveInfo.Builder: Builder setDescription(CharSequence)>,<android.service.autofill.SaveInfo.Builder: Builder setDescription(CharSequence)>,0,"{
    throwIfDestroyed();
    mDescription = description;
    return this;
}","{
    throwIfDestroyed();
    Preconditions.checkState(mCustomDescription == null, ""Can call setDescription() or setCustomDescription(), but not both"");
    mDescription = description;
    return this;
}",1,"/**
 * Sets an optional description to be shown in the UI when the user is asked to save.
 *
 * <p>Typically, it describes how the data will be stored by the service, so it can help
 * users to decide whether they can trust the service to save their data.
 *
 * @param description a succint description.
 * @return This Builder.
 */","/**
 * Sets an optional description to be shown in the UI when the user is asked to save.
 *
 * <p>Typically, it describes how the data will be stored by the service, so it can help
 * users to decide whether they can trust the service to save their data.
 *
 * @param description a succint description.
 * @return This Builder.
 *
 * @throws IllegalStateException if this call was made after calling
 * {@link #setCustomDescription(CustomDescription)}.
 */",1,[@NonNull],[@NonNull],0,,,,1,4,0,"2, 5","1, 2","A new statement has been added in the late version, which is ""Preconditions.checkState(mCustomDescription == null, ""Can call setDescription() or setCustomDescription(), but not both"");"". This statement is used to check the state of the object and throws an exception if the condition is not satisfied. Also, the late version has a new dependent API, which is ""setCustomDescription(CustomDescription)"".","The new statement in the late version can potentially throw an IllegalStateException, which is not thrown in the early version. This can cause a compatibility issue for the code that calls this API and does not handle this exception. Also, the new dependent API in the late version can potentially cause the code to return a different value or type, which can also lead to a compatibility issue."
137,<android.view.textclassifier.TextSelection.Builder: TextSelection build()>,26,27,<android.view.textclassifier.TextSelection.Builder: TextSelection build()>,<android.view.textclassifier.TextSelection.Builder: TextSelection build()>,0,"{
    return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource);
}","{
    return new TextSelection(mStartIndex, mEndIndex, mEntityConfidence, mLogSource, mVersionInfo);
}",1,"/**
 * Builds and returns {@link TextSelection} object.
 */","/**
 * Builds and returns {@link TextSelection} object.
 */",0,,,0,,,,"1,2","1,5",1,1,1,The code change is that the return statement of the build() method in the late version has an additional parameter "mVersionInfo" compared to the early version.,"The Compatibility Issue arises because the additional parameter ""mVersionInfo"" in the late version's return statement may cause the API to return a different object of TextSelection, which may have different behavior or properties. This violation of the API's contract may cause unexpected errors or crashes in the client code that uses the API."
138,"<android.app.Notification.BigTextStyle: void applyBigTextContentView(Builder,RemoteViews,CharSequence)>",26,27,"<android.app.Notification.BigTextStyle: void applyBigTextContentView(Builder,RemoteViews,CharSequence)>","<android.app.Notification.BigTextStyle: void applyBigTextContentView(Builder,RemoteViews,CharSequence)>",0,"{
    contentView.setTextViewText(R.id.big_text, bigTextText);
    builder.setTextViewColorSecondary(contentView, R.id.big_text);
    contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE);
    contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon());
}","{
    contentView.setTextViewText(R.id.big_text, builder.processTextSpans(bigTextText));
    builder.setTextViewColorSecondary(contentView, R.id.big_text);
    contentView.setViewVisibility(R.id.big_text, TextUtils.isEmpty(bigTextText) ? View.GONE : View.VISIBLE);
    contentView.setBoolean(R.id.big_text, ""setHasImage"", builder.mN.hasLargeIcon());
}",1,,,0,,,0,,,,"1,2",5,0,1,1,"The method call `setTextViewText(R.id.big_text, bigTextText)` has been changed to `setTextViewText(R.id.big_text, builder.processTextSpans(bigTextText))` in the late version. This change affects the second argument of the method, which is the text to be displayed. The `processTextSpans` method may modify the text, for example, by adding or removing spans, which would result in a different text being displayed in the late version.","The Compatibility Issue arises because the change in the method call can result in a different text being displayed in the late version. This, in turn, can affect the functionality of the app, for example, if the text is used to convey important information to the user. The user may not receive the correct information, which can lead to confusion and errors."
139,<android.widget.Editor.HandleView: void show()>,26,27,<android.widget.Editor.HandleView: void show()>,<android.widget.Editor.HandleView: void show()>,0,"{
    if (isShowing())
        return;
    getPositionListener().addSubscriber(this, true);
    // Make sure the offset is always considered new, even when focusing at same position
    mPreviousOffset = -1;
    positionAtCursorOffset(getCurrentCursorOffset(), false);
}","{
    if (isShowing())
        return;
    getPositionListener().addSubscriber(this, true);
    // Make sure the offset is always considered new, even when focusing at same position
    mPreviousOffset = -1;
    positionAtCursorOffset(getCurrentCursorOffset(), false, false);
}",1,,,0,,,0,,,,2,5,0,5,0,The code change is that an additional boolean parameter is added to the method `positionAtCursorOffset` in the late version. This type of change is classified as 5) Dependent API changed.,"The additional boolean parameter in the `positionAtCursorOffset` method may change the behavior of this method, but it does not cause the `show` method to return different values or throw different exceptions. Therefore, there is no Compatibility Issue in this case."
140,<android.os.WorkSource: void clear()>,27,28,<android.os.WorkSource: void clear()>,<android.os.WorkSource: void clear()>,0,"{
    mNum = 0;
}","{
    mNum = 0;
    if (mChains != null) {
        mChains.clear();
    }
}",1,"/**
 * Clear this WorkSource to be empty.
 */","/**
 * Clear this WorkSource to be empty.
 */",0,,,0,,,,1,3,0,3,1,"A new condition statement has been introduced, which is ""if (mChains != null)"". The statement inside this condition is ""mChains.clear()"", which is a newly added statement. Therefore, this change is classified as ""Control dependency changed"".","The newly added statement ""mChains.clear()"" has the potential to lead to different behaviors between the two versions. In the late version, if ""mChains"" is not null, it will be cleared. However, in the early version, ""mChains"" will not be cleared even if it is not null. Therefore, this change is classified as ""Compatibility Issue caused by potential different return values or types""."
141,<android.app.Notification.Action.Builder: Action build()>,27,28,<android.app.Notification.Action.Builder: Action build()>,<android.app.Notification.Action.Builder: Action build()>,0,"{
    ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
    RemoteInput[] previousDataInputs = (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
    if (previousDataInputs != null) {
        for (RemoteInput input : previousDataInputs) {
            dataOnlyInputs.add(input);
        }
    }
    List<RemoteInput> textInputs = new ArrayList<>();
    if (mRemoteInputs != null) {
        for (RemoteInput input : mRemoteInputs) {
            if (input.isDataOnly()) {
                dataOnlyInputs.add(input);
            } else {
                textInputs.add(input);
            }
        }
    }
    if (!dataOnlyInputs.isEmpty()) {
        RemoteInput[] dataInputsArr = dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
        mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
    }
    RemoteInput[] textInputsArr = textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
    return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies);
}","{
    ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
    RemoteInput[] previousDataInputs = (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
    if (previousDataInputs != null) {
        for (RemoteInput input : previousDataInputs) {
            dataOnlyInputs.add(input);
        }
    }
    List<RemoteInput> textInputs = new ArrayList<>();
    if (mRemoteInputs != null) {
        for (RemoteInput input : mRemoteInputs) {
            if (input.isDataOnly()) {
                dataOnlyInputs.add(input);
            } else {
                textInputs.add(input);
            }
        }
    }
    if (!dataOnlyInputs.isEmpty()) {
        RemoteInput[] dataInputsArr = dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
        mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
    }
    RemoteInput[] textInputsArr = textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
    return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies, mSemanticAction);
}",1,"/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */","/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */",0,,,0,,,,2,"1,5",1,5,1,A new parameter 'mSemanticAction' has been added to the constructor of Action class. This is a dependent API change as the constructor of Action class is a dependent API for the build() method.,The addition of a new parameter to the constructor of Action class may lead to different behavior if the calling code has not been updated to provide this new parameter. This is a compatibility issue caused by potential different return values or types.
142,"<android.net.NetworkCapabilities: void writeToParcel(Parcel,int)>",27,28,"<android.net.NetworkCapabilities: void writeToParcel(Parcel,int)>","<android.net.NetworkCapabilities: void writeToParcel(Parcel,int)>",0,"{
    dest.writeLong(mNetworkCapabilities);
    dest.writeLong(mTransportTypes);
    dest.writeInt(mLinkUpBandwidthKbps);
    dest.writeInt(mLinkDownBandwidthKbps);
    dest.writeParcelable((Parcelable) mNetworkSpecifier, flags);
    dest.writeInt(mSignalStrength);
}","{
    dest.writeLong(mNetworkCapabilities);
    dest.writeLong(mUnwantedNetworkCapabilities);
    dest.writeLong(mTransportTypes);
    dest.writeInt(mLinkUpBandwidthKbps);
    dest.writeInt(mLinkDownBandwidthKbps);
    dest.writeParcelable((Parcelable) mNetworkSpecifier, flags);
    dest.writeInt(mSignalStrength);
    dest.writeArraySet(mUids);
    dest.writeString(mSSID);
}",1,,,0,[@Override],[@Override],0,,,,1,4,0,5,1,"Two new statements are introduced in the late version of the method writeToParcel: dest.writeLong(mUnwantedNetworkCapabilities) and dest.writeString(mSSID). This means that the Parcel object will now contain additional information about the network capabilities and SSID, which was not present in the early version.","The introduction of new statements in the method writeToParcel can potentially lead to compatibility issues. If an application that was developed using the early version of the API is run on a device with the late version of the API, the additional information in the Parcel object may not be properly handled by the application, leading to unintended behavior or crashes. Similarly, if a device with the early version of the API receives a Parcel object that contains the additional information, it may not be able to properly process the Parcel, leading to compatibility issues."
143,<android.view.textclassifier.TextClassification: String toString()>,27,28,<android.view.textclassifier.TextClassification: String toString()>,<android.view.textclassifier.TextClassification: String toString()>,0,"{
    return String.format(""TextClassification {"" + ""text=%s, entities=%s, label=%s, intent=%s}"", mText, mEntityConfidence, mLabel, mIntent);
}","{
    return String.format(Locale.US, ""TextClassification {text=%s, entities=%s, actions=%s, id=%s}"", mText, mEntityConfidence, mActions, mId);
}",1,,,0,[@Override],[@Override],0,,,,"1,2","1,5",1,1,1,"The return statement has been changed. In the early version, the API returns a string containing the information of ""mText"", ""mEntityConfidence"", ""mLabel"" and ""mIntent"". In the late version, the API returns a string containing the information of ""mText"", ""mEntityConfidence"", ""mActions"" and ""mId"".","The Compatibility Issue arises because the code change could lead to different behaviours. Specifically, the API potentially returns different variable types or values in the two versions. The string returned by the API in the late version contains the information of ""mActions"" and ""mId"" instead of ""mLabel"" and ""mIntent"", which could cause the program that relies on the string format of the early version to behave incorrectly."
145,"<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>",27,28,"<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>","<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>",0,"{
    assertNotCompacted();
    final int id = checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_OBJECT);
    writeRepeatedObjectImpl(id, value);
}","{
    assertNotCompacted();
    final int id = checkFieldId(fieldId, FIELD_COUNT_REPEATED | FIELD_TYPE_MESSAGE);
    writeRepeatedObjectImpl(id, value);
}",1,"/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */","/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */",0,[@Deprecated],[@Deprecated],0,,,,2,5,0,5,1,"The code change is a dependent API change, as the method checkFieldId() has a different parameter in the two versions. Specifically, FIELD\_TYPE\_OBJECT is used in the early version, and FIELD\_TYPE\_MESSAGE is used in the late version.","The different parameter in the checkFieldId() method may cause the method to return a different value, which may further lead to different behaviors in the writeRepeatedObjectImpl() method. Therefore, this code change may cause compatibility issues due to potential different return values or types."
146,<android.view.textclassifier.TextClassification: int getEntityCount()>,27,28,<android.view.textclassifier.TextClassification: int getEntityCount()>,<android.view.textclassifier.TextClassification: int getEntityCount()>,0,"{
    return mEntities.size();
}","{
    return mEntityConfidence.getEntities().size();
}",1,"/**
 * Returns the number of entities found in the classified text.
 */","/**
 * Returns the number of entities found in the classified text.
 */",1,[@IntRange(from = 0)],[@IntRange(from = 0)],0,,,,1.2,"1,5",1,1,1,"The code change between the two versions is in the return statement. In the early version, the method returns the size of `mEntities` while in the late version, it returns the size of `mEntityConfidence.getEntities()`.","The Compatibility Issue arises because the change in the return statement could lead to different behaviors. In the early version, the method returns the size of `mEntities` while in the late version, it returns the size of `mEntityConfidence.getEntities()`. If `mEntities` and `mEntityConfidence.getEntities()` do not always have the same size, then the method will return different values in the two versions, which could lead to compatibility issues in the client code that uses this method."
147,<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>,27,28,<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>,<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>,0,"{
    return mInPictureInPicture;
}","{
    return getBooleanProperty(BOOLEAN_PROPERTY_PICTURE_IN_PICTURE);
}",1,"/**
 * Check if the window is in picture-in-picture mode.
 *
 * @return {@code true} if the window is in picture-in-picture mode, {@code false} otherwise.
 */","/**
 * Check if the window is in picture-in-picture mode.
 *
 * @return {@code true} if the window is in picture-in-picture mode, {@code false} otherwise.
 */",0,,,0,,,,1,1,1,1,1,"The return statement has changed from returning a class-level boolean variable to calling a method and returning its result. This method, `getBooleanProperty()`, retrieves the value of a specific boolean property of the window. The property being retrieved is `BOOLEAN_PROPERTY_PICTURE_IN_PICTURE`, which indicates whether the window is in picture-in-picture mode.","The code change has the potential to cause a compatibility issue because the value being returned by the method in the late version is dependent on the value of a specific boolean property of the window. If the implementation of the `BOOLEAN_PROPERTY_PICTURE_IN_PICTURE` property changes in a future version, it could cause the `isInPictureInPictureMode()` method to return an incorrect value, which could break the functionality of any apps that rely on this method."
149,<android.companion.CompanionDeviceManager.CallbackProxy: void onSuccess(PendingIntent)>,27,28,<android.companion.CompanionDeviceManager.CallbackProxy: void onSuccess(PendingIntent)>,<android.companion.CompanionDeviceManager.CallbackProxy: void onSuccess(PendingIntent)>,0,"{
    Handler handler = mHandler;
    if (handler == null)
        return;
    handler.post(() -> {
        Callback callback = mCallback;
        if (callback == null)
            return;
        callback.onDeviceFound(launcher.getIntentSender());
    });
}","{
    lockAndPost(Callback::onDeviceFound, launcher.getIntentSender());
}",1,,,0,[@Override],[@Override],0,,,,1,"1,3,4",1,5,0,"The code for handling the onSuccess event has been refactored. Instead of using a Handler and a lambda function to post the event, the late version uses a lockAndPost method to directly post the event to the Callback. The implementation of lockAndPost method is not provided, so we cannot be sure if the behavior of the API has changed.","Since the implementation of lockAndPost method is not provided, we cannot be sure if the behavior of the API has changed. However, based on the given information, there is no clear evidence of a compatibility issue. The lambda function in the early version and the lockAndPost method in the late version both call the onDeviceFound method of the Callback, so it is likely that the behavior of the API has not changed."
158,"<android.service.notification.ZenModeConfig.ZenRule: void writeToParcel(Parcel,int)>",28,29,"<android.service.notification.ZenModeConfig.ZenRule: void writeToParcel(Parcel,int)>","<android.service.notification.ZenModeConfig.ZenRule: void writeToParcel(Parcel,int)>",0,"{
    dest.writeInt(enabled ? 1 : 0);
    dest.writeInt(snoozing ? 1 : 0);
    if (name != null) {
        dest.writeInt(1);
        dest.writeString(name);
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(zenMode);
    dest.writeParcelable(conditionId, 0);
    dest.writeParcelable(condition, 0);
    dest.writeParcelable(component, 0);
    if (id != null) {
        dest.writeInt(1);
        dest.writeString(id);
    } else {
        dest.writeInt(0);
    }
    dest.writeLong(creationTime);
    if (enabler != null) {
        dest.writeInt(1);
        dest.writeString(enabler);
    } else {
        dest.writeInt(0);
    }
}","{
    dest.writeInt(enabled ? 1 : 0);
    dest.writeInt(snoozing ? 1 : 0);
    if (name != null) {
        dest.writeInt(1);
        dest.writeString(name);
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(zenMode);
    dest.writeParcelable(conditionId, 0);
    dest.writeParcelable(condition, 0);
    dest.writeParcelable(component, 0);
    dest.writeParcelable(configurationActivity, 0);
    if (id != null) {
        dest.writeInt(1);
        dest.writeString(id);
    } else {
        dest.writeInt(0);
    }
    dest.writeLong(creationTime);
    if (enabler != null) {
        dest.writeInt(1);
        dest.writeString(enabler);
    } else {
        dest.writeInt(0);
    }
    dest.writeParcelable(zenPolicy, 0);
    dest.writeInt(modified ? 1 : 0);
    dest.writeString(pkg);
}",1,,,0,[@Override],[@Override],0,,,,1,4,0,5,1,"The method implementation has changed by adding new statements to write additional fields to the `Parcel` object. Specifically, the statements `dest.writeParcelable(configurationActivity, 0);`, `dest.writeParcelable(zenPolicy, 0);`, `dest.writeInt(modified ? 1 : 0);`, and `dest.writeString(pkg);` have been added in the late version.","The added statements in the late version may cause compatibility issues if the client code that reads the `Parcel` object is not updated to handle the new fields. Specifically, if the client code expects the `Parcel` object to have a certain size or order of fields, it may throw an exception or behave incorrectly when it encounters the new fields. Therefore, the CI type is 1 - Compatibility Issue caused by potential different return values or types."
159,<android.view.View: void setAutofillId(AutofillId)>,28,29,<android.view.View: void setAutofillId(AutofillId)>,<android.view.View: void setAutofillId(AutofillId)>,0,"{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (android.view.autofill.Helper.sVerbose) {
        Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && id.isVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}","{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)) {
        Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && !id.isNonVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}",1,"/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */","/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */",0,,,0,,,,1,3,2,2,2,"In the Late_Implementation, the if-condition `id != null && id.isVirtual()` is replaced by `id != null && !id.isNonVirtual()`, which is a negation of a method call. This is an exception handling statement change.","The change in the if-condition can potentially cause the Late_Version API to throw an `IllegalStateException` differently compared to the Early_Version API. If the AutofillId `id` is neither virtual nor non-virtual, the Early_Version API would not throw an exception, while the Late_Version API would. Hence, this is a Compatibility Issue caused by potential different exception handlings."
160,<android.companion.WifiDeviceFilter.Builder: WifiDeviceFilter build()>,29,30,<android.companion.WifiDeviceFilter.Builder: WifiDeviceFilter build()>,<android.companion.WifiDeviceFilter.Builder: WifiDeviceFilter build()>,0,"{
    markUsed();
    return new WifiDeviceFilter(mNamePattern);
}","{
    checkNotUsed();
    // Mark builder used
    mBuilderFieldsSet |= 0x8;
    if ((mBuilderFieldsSet & 0x1) == 0) {
        mNamePattern = null;
    }
    if ((mBuilderFieldsSet & 0x2) == 0) {
        mBssid = null;
    }
    if ((mBuilderFieldsSet & 0x4) == 0) {
        mBssidMask = MacAddress.BROADCAST_ADDRESS;
    }
    WifiDeviceFilter o = new WifiDeviceFilter(mNamePattern, mBssid, mBssidMask);
    return o;
}",1,"/**
 * @inheritDoc
 */","/**
 * Builds the instance. This builder should not be touched after calling this!
 */",1,"[@Override, @NonNull]",[@NonNull],1,,,,"1,2","1,3,4,5",1,"1, 5","1, 2","The implementation of the method `build()` has been completely changed between the two versions. In the early version, the method simply marks the builder as used and returns a new `WifiDeviceFilter` object with only `mNamePattern` field. In the late version, the method first checks if the builder has been used, then marks it as used, and sets default values for `mBssid` and `mBssidMask` fields if they have not been set. Finally, it returns a new `WifiDeviceFilter` object with all three fields `mNamePattern`, `mBssid`, and `mBssidMask`. Additionally, the annotation `@Override` has been removed from the late version. This change is classified as both return statement change (1) and dependent API change (5) because the constructor of `WifiDeviceFilter` has been changed to include new fields.","The change in the implementation of `build()` method leads to potential compatibility issues. In the early version, the `WifiDeviceFilter` object created by the method only contains `mNamePattern` field, while in the late version, it contains all three fields `mNamePattern`, `mBssid`, and `mBssidMask`. This difference in the returned object can cause compatibility issues if the code using the early version of the API only expects the `mNamePattern` field and does not handle the other two fields. Additionally, the new default values for `mBssid` and `mBssidMask` fields can also cause compatibility issues if the code using the early version of the API expects different default values. The potential different return values or types (1) and potential different exception handlings (2) are both present in this case."
161,<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(Surface)>,29,30,<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(Surface)>,<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(Surface)>,0,"{
    if (surface == null)
        throw new IllegalArgumentException(""Surface is null"");
    synchronized (mInterfaceLock) {
        int streamId = -1;
        for (int i = 0; i < mConfiguredOutputs.size(); i++) {
            if (surface == mConfiguredOutputs.valueAt(i).getSurface()) {
                streamId = mConfiguredOutputs.keyAt(i);
                break;
            }
        }
        if (streamId == -1) {
            throw new IllegalArgumentException(""Surface is not part of this session"");
        }
        mRemoteDevice.tearDown(streamId);
    }
}","{
    if (surface == null)
        throw new IllegalArgumentException(""Surface is null"");
    synchronized (mInterfaceLock) {
        checkIfCameraClosedOrInError();
        int streamId = -1;
        for (int i = 0; i < mConfiguredOutputs.size(); i++) {
            if (surface == mConfiguredOutputs.valueAt(i).getSurface()) {
                streamId = mConfiguredOutputs.keyAt(i);
                break;
            }
        }
        if (streamId == -1) {
            throw new IllegalArgumentException(""Surface is not part of this session"");
        }
        mRemoteDevice.tearDown(streamId);
    }
}",1,,,0,,,0,,,,1,4,0,5,2,"A new method call `checkIfCameraClosedOrInError();` has been added in the late version, which is a dependent API that may throw an exception. Therefore, the code change type is 5.","The newly added method `checkIfCameraClosedOrInError();` may throw an exception. In the early version, this exception would not be thrown. Therefore, the compatibility issue type is 2."
163,<android.view.DisplayCutout: boolean equals(Object)>,29,30,<android.view.DisplayCutout: boolean equals(Object)>,<android.view.DisplayCutout: boolean equals(Object)>,0,"{
    if (o == this) {
        return true;
    }
    if (o instanceof DisplayCutout) {
        DisplayCutout c = (DisplayCutout) o;
        return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds);
    }
    return false;
}","{
    if (o == this) {
        return true;
    }
    if (o instanceof DisplayCutout) {
        DisplayCutout c = (DisplayCutout) o;
        return mSafeInsets.equals(c.mSafeInsets) && mBounds.equals(c.mBounds) && mWaterfallInsets.equals(c.mWaterfallInsets);
    }
    return false;
}",1,,,0,[@Override],[@Override],0,,,,1,1,1,1,1,"The return statement inside the second 'if' statement has been changed. Specifically, a new condition 'mWaterfallInsets.equals(c.mWaterfallInsets)' has been added, which may lead to different return values.","The new condition added in the return statement may cause the API to return false even if the previous conditions are true. Therefore, it may cause Compatibility Issue when the input object 'o' has different 'mWaterfallInsets' values between the two versions."
165,<android.net.TrafficStats: long getUidTxPackets(int)>,29,30,<android.net.TrafficStats: long getUidTxPackets(int)>,<android.net.TrafficStats: long getUidTxPackets(int)>,0,"{
    // This isn't actually enforcing any security; it just returns the
    // unsupported value. The real filtering is done at the kernel level.
    final int callingUid = android.os.Process.myUid();
    if (callingUid == android.os.Process.SYSTEM_UID || callingUid == uid) {
        try {
            return getStatsService().getUidStats(uid, TYPE_TX_PACKETS);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    } else {
        return UNSUPPORTED;
    }
}","{
    try {
        return getStatsService().getUidStats(uid, TYPE_TX_PACKETS);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Return number of packets transmitted by the given UID since device boot.
 * Counts packets across all network interfaces, and always increases
 * monotonically since device boot. Statistics are measured at the network
 * layer, so they include both TCP and UDP usage.
 * <p>
 * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
 * {@link #UNSUPPORTED} on devices where statistics aren't available.
 * <p>
 * Starting in {@link android.os.Build.VERSION_CODES#N} this will only
 * report traffic statistics for the calling UID. It will return
 * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access
 * historical network statistics belonging to other UIDs, use
 * {@link NetworkStatsManager}.
 *
 * @see android.os.Process#myUid()
 * @see android.content.pm.ApplicationInfo#uid
 */","/**
 * Return number of packets transmitted by the given UID since device boot.
 * Counts packets across all network interfaces, and always increases
 * monotonically since device boot. Statistics are measured at the network
 * layer, so they include both TCP and UDP usage.
 * <p>
 * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
 * {@link #UNSUPPORTED} on devices where statistics aren't available.
 * <p>
 * Starting in {@link android.os.Build.VERSION_CODES#N} this will only
 * report traffic statistics for the calling UID. It will return
 * {@link #UNSUPPORTED} for all other UIDs for privacy reasons. To access
 * historical network statistics belonging to other UIDs, use
 * {@link NetworkStatsManager}.
 *
 * @see android.os.Process#myUid()
 * @see android.content.pm.ApplicationInfo#uid
 */",0,,,0,,,,"1,2","1,2,3,4","1,2",1,1,"In the early version, there is an if-else statement that checks whether the callingUid is equal to the SYSTEM\_UID or the uid. If the condition is true, it returns the result of getStatsService().getUidStats(uid, TYPE\_TX\_PACKETS). Otherwise, it returns UNSUPPORTED. In the late version, the if-else statement is removed, and it always returns the result of getStatsService().getUidStats(uid, TYPE\_TX\_PACKETS). This change can potentially lead to different return values or types.","In the early version, if the callingUid is not equal to the SYSTEM\_UID or the uid, the method will return UNSUPPORTED. However, in the late version, the method will always return the result of getStatsService().getUidStats(uid, TYPE\_TX\_PACKETS), even if the callingUid is not equal to the SYSTEM\_UID or the uid. This change can potentially lead to compatibility issues, as the behavior of the method has been changed."
166,<android.security.keystore.recovery.KeyChainProtectionParams.Builder: KeyChainProtectionParams build()>,29,30,<android.security.keystore.recovery.KeyChainProtectionParams.Builder: KeyChainProtectionParams build()>,<android.security.keystore.recovery.KeyChainProtectionParams.Builder: KeyChainProtectionParams build()>,0,"{
    if (mInstance.mUserSecretType == null) {
        mInstance.mUserSecretType = TYPE_LOCKSCREEN;
    }
    Preconditions.checkNotNull(mInstance.mLockScreenUiFormat);
    Preconditions.checkNotNull(mInstance.mKeyDerivationParams);
    if (mInstance.mSecret == null) {
        mInstance.mSecret = new byte[] {};
    }
    return mInstance;
}","{
    if (mInstance.mUserSecretType == null) {
        mInstance.mUserSecretType = TYPE_LOCKSCREEN;
    }
    Objects.requireNonNull(mInstance.mLockScreenUiFormat);
    Objects.requireNonNull(mInstance.mKeyDerivationParams);
    if (mInstance.mSecret == null) {
        mInstance.mSecret = new byte[] {};
    }
    return mInstance;
}",1,"/**
 * Creates a new {@link KeyChainProtectionParams} instance.
 * The instance will include default values, if {@link #setSecret}
 * or {@link #setUserSecretType} were not called.
 *
 * @return new instance
 * @throws NullPointerException if some required fields were not set.
 */
","/**
 * Creates a new {@link KeyChainProtectionParams} instance.
 * The instance will include default values, if {@link #setSecret}
 * or {@link #setUserSecretType} were not called.
 *
 * @return new instance
 * @throws NullPointerException if some required fields were not set.
 */
",0,[@NonNull],[@NonNull],0,,,,1,5,0,4,0,"The method for checking null, `Preconditions.checkNotNull`, has been replaced with `Objects.requireNonNull` in the late version. This change is classified as 4, other statement changed, as it does not involve return statements, exception handling statements, control dependency, or dependent API changes.","The behavior of `Preconditions.checkNotNull` and `Objects.requireNonNull` is the same - both throw a `NullPointerException` if the argument is null. So, this change does not lead to any compatibility issues."
167,<android.app.ContextImpl: Context createContextForSplit(String)>,29,30,<android.app.ContextImpl: Context createContextForSplit(String)>,<android.app.ContextImpl: Context createContextForSplit(String)>,0,"{
    if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()) {
        // All Splits are always loaded.
        return this;
    }
    final ClassLoader classLoader = mPackageInfo.getSplitClassLoader(splitName);
    final String[] paths = mPackageInfo.getSplitPaths(splitName);
    final ContextImpl context = new ContextImpl(this, mMainThread, mPackageInfo, splitName, mActivityToken, mUser, mFlags, classLoader, null);
    final int displayId = getDisplayId();
    context.setResources(ResourcesManager.getInstance().getResources(mActivityToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader));
    return context;
}","{
    if (!mPackageInfo.getApplicationInfo().requestsIsolatedSplitLoading()) {
        // All Splits are always loaded.
        return this;
    }
    final ClassLoader classLoader = mPackageInfo.getSplitClassLoader(splitName);
    final String[] paths = mPackageInfo.getSplitPaths(splitName);
    final ContextImpl context = new ContextImpl(this, mMainThread, mPackageInfo, mAttributionTag, splitName, mToken, mUser, mFlags, classLoader, null);
    final int displayId = getDisplayId();
    context.setResources(ResourcesManager.getInstance().getResources(mToken, mPackageInfo.getResDir(), paths, mPackageInfo.getOverlayDirs(), mPackageInfo.getApplicationInfo().sharedLibraryFiles, displayId, null, mPackageInfo.getCompatibilityInfo(), classLoader, mResources.getLoaders()));
    return context;
}",1,,,0,[@Override],[@Override],0,,,,"1,2",4,1,"1,5",1,The early version of the API creates a new ContextImpl object by passing in "mActivityToken" while the late version passes in "mToken". The late version also passes in an additional parameter "mResources.getLoaders()" when calling the setResources() method. These changes could potentially lead to different behaviour when the API is invoked.,"The change of parameter ""mActivityToken"" to ""mToken"" and the additional parameter ""mResources.getLoaders()"" could potentially cause the API to return a different ContextImpl object with different properties, so the CI type is 1."
168,"<android.content.ContentResolver: boolean refresh(Uri,Bundle,CancellationSignal)>",29,30,"<android.content.ContentResolver: boolean refresh(Uri,Bundle,CancellationSignal)>","<android.content.ContentResolver: boolean refresh(Uri,Bundle,CancellationSignal)>",0,"{
    Preconditions.checkNotNull(url, ""url"");
    try {
        if (mWrapped != null)
            return mWrapped.refresh(url, args, cancellationSignal);
    } catch (RemoteException e) {
        return false;
    }
    IContentProvider provider = acquireProvider(url);
    if (provider == null) {
        return false;
    }
    try {
        ICancellationSignal remoteCancellationSignal = null;
        if (cancellationSignal != null) {
            cancellationSignal.throwIfCanceled();
            remoteCancellationSignal = provider.createCancellationSignal();
            cancellationSignal.setRemote(remoteCancellationSignal);
        }
        return provider.refresh(mPackageName, url, args, remoteCancellationSignal);
    } catch (RemoteException e) {
        // Manager will kill this process shortly anyway.
        return false;
    } finally {
        releaseProvider(provider);
    }
}","{
    Objects.requireNonNull(url, ""url"");
    try {
        if (mWrapped != null)
            return mWrapped.refresh(url, extras, cancellationSignal);
    } catch (RemoteException e) {
        return false;
    }
    IContentProvider provider = acquireProvider(url);
    if (provider == null) {
        return false;
    }
    try {
        ICancellationSignal remoteCancellationSignal = null;
        if (cancellationSignal != null) {
            cancellationSignal.throwIfCanceled();
            remoteCancellationSignal = provider.createCancellationSignal();
            cancellationSignal.setRemote(remoteCancellationSignal);
        }
        return provider.refresh(mPackageName, mAttributionTag, url, extras, remoteCancellationSignal);
    } catch (RemoteException e) {
        // Manager will kill this process shortly anyway.
        return false;
    } finally {
        releaseProvider(provider);
    }
}",1,"/**
 * This allows clients to request an explicit refresh of content identified by {@code uri}.
 * <p>
 * Client code should only invoke this method when there is a strong indication (such as a user
 * initiated pull to refresh gesture) that the content is stale.
 * <p>
 *
 * @param url The Uri identifying the data to refresh.
 * @param args Additional options from the client. The definitions of these are specific to the
 * content provider being called.
 * @param cancellationSignal A signal to cancel the operation in progress, or {@code null} if
 * none. For example, if you called refresh on a particular uri, you should call
 * {@link CancellationSignal#throwIfCanceled()} to check whether the client has
 * canceled the refresh request.
 * @return true if the provider actually tried refreshing.
 */
","/**
 * This allows clients to request an explicit refresh of content identified
 * by {@code uri}.
 * <p>
 * Client code should only invoke this method when there is a strong
 * indication (such as a user initiated pull to refresh gesture) that the
 * content is stale.
 * <p>
 *
 * @param url The Uri identifying the data to refresh.
 * @param extras Additional options from the client. The definitions of
 * these are specific to the content provider being called.
 * @param cancellationSignal A signal to cancel the operation in progress,
 * or {@code null} if none. For example, if you called refresh on
 * a particular uri, you should call
 * {@link CancellationSignal#throwIfCanceled()} to check whether
 * the client has canceled the refresh request.
 * @return true if the provider actually tried refreshing.
 */
",1,[@Override],[@Override],0,,,,"1,2","1,4,5",1,5,1,The method name of the dependent API `provider.refresh` has been changed and the number of parameters has also been increased. This change type belongs to 5.,"The change of the dependent API may result in the return value of the current API `refresh` being different, which will cause a compatibility issue. This CI type belongs to 1."
170,<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>,29,30,<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>,<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>,0,"{
    return mStrict;
}","{
    return (mStrictFlags & STRICT_PARENTHESES) != 0;
}",1,"/**
 * Get if the query is marked as strict, as last configured by
 * {@link #setStrict(boolean)}.
 */
","/**
 * Get if the query is marked as strict, as last configured by
 * {@link #setStrict(boolean)}.
 */
",0,,,0,,,,1,1,1,1,1,The return statement in the early version (`return mStrict;`) is changed to a different return statement in the late version (`return (mStrictFlags & STRICT_PARENTHESES) != 0;`).,"The change in the return statement can potentially cause the API to return a different value, which can lead to compatibility issues in the client code that uses this API. In the early version, the API returns the value of `mStrict`, which is a boolean value. However, in the late version, the API returns the result of a bitwise operation (`mStrictFlags & STRICT_PARENTHESES`) and a comparison operation (`!= 0`), which may not be equivalent to the value of `mStrict`. Therefore, the client code that uses this API may need to be updated to handle the new return value."
171,<android.view.View: View getRootView()>,31,32,<android.view.View: View getRootView()>,<android.view.View: View getRootView()>,0,"{
    if (mAttachInfo != null) {
        final View v = mAttachInfo.mRootView;
        if (v != null) {
            return v;
        }
    }
    View parent = this;
    while (parent.mParent != null && parent.mParent instanceof View) {
        parent = (View) parent.mParent;
    }
    return parent;
}","{
    if (mAttachInfo != null) {
        final View v = mAttachInfo.mRootView;
        if (v != null) {
            return v;
        }
    }
    View parent = this;
    while (parent.mParent instanceof View) {
        parent = (View) parent.mParent;
    }
    return parent;
}",1,"/**
 * <p>Finds the topmost view in the current view hierarchy.</p>
 *
 * @return the topmost view containing this view
 */
","/**
 * <p>Finds the topmost view in the current view hierarchy.</p>
 *
 * @return the topmost view containing this view
 */
",0,,,0,,,,1,3,1,3,1,"In the late version, the condition for the while loop has been simplified from `parent.mParent != null && parent.mParent instanceof View` to `parent.mParent instanceof View`. This means that the loop will now terminate when it encounters a parent that is not an instance of View, even if that parent is non-null.","The change in the while loop's condition could potentially lead to a different view being returned as the root view. In the early version, the loop would continue as long as the parent was non-null and an instance of View. In the late version, the loop will terminate as soon as it encounters a non-View parent, even if that parent has further View ancestors. This could result in a lower-level view being returned as the root view, which could cause compatibility issues in code that expects the root view to be a specific type or have specific properties."
172,<android.window.TaskSnapshot.Builder: TaskSnapshot build()>,31,32,<android.window.TaskSnapshot.Builder: TaskSnapshot build()>,<android.window.TaskSnapshot.Builder: TaskSnapshot build()>,0,"{
    return new TaskSnapshot(mId, mTopActivity, mSnapshot, mColorSpace, mOrientation, mRotation, mTaskSize, mContentInsets, // disk.
    false, /* isLowResolution */
    mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface);
}","{
    return new TaskSnapshot(mId, mTopActivity, mSnapshot, mColorSpace, mOrientation, mRotation, mTaskSize, mContentInsets, mLetterboxInsets, // disk.
    false, /* isLowResolution */
    mIsRealSnapshot, mWindowingMode, mAppearance, mIsTranslucent, mHasImeSurface);
}",1,,,0,,,0,,,,2,"1,5",1,5,1,The change is that a new parameter "mLetterboxInsets" is added to the constructor of the TaskSnapshot class in the late version implementation. This means that the TaskSnapshot object created by the build() method in the late version will have different properties compared to the one created in the early version.,"Due to the addition of a new parameter in the constructor of the TaskSnapshot class, the TaskSnapshot object created by the build() method in the late version will have different properties compared to the one created in the early version. This can potentially cause compatibility issues as the code that uses the build() method and the TaskSnapshot object might not be able to handle the new properties or might behave differently due to the changes in the properties."
173,<android.companion.CompanionDeviceManager: List<String> getAssociations()>,32,33,<android.companion.CompanionDeviceManager: List<String> getAssociations()>,<android.companion.CompanionDeviceManager: List<String> getAssociations()>,0,"{
    if (!checkFeaturePresent()) {
        return Collections.emptyList();
    }
    try {
        return mService.getAssociations(getCallingPackage(), mContext.getUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return CollectionUtils.mapNotNull(getMyAssociations(), a -> a.isSelfManaged() ? null : a.getDeviceMacAddressAsString());
}",1,"/**
 * <p>Calling this API requires a uses-feature
 * {@link PackageManager#FEATURE_COMPANION_DEVICE_SETUP} declaration in the manifest</p>
 *
 * @return a list of MAC addresses of devices that have been previously associated with the
 * current app. You can use these with {@link #disassociate}
 */
","/**
 * <p>Calling this API requires a uses-feature
 * {@link PackageManager#FEATURE_COMPANION_DEVICE_SETUP} declaration in the manifest</p>
 *
 * @return a list of MAC addresses of devices that have been previously associated with the
 * current app are managed by CompanionDeviceManager (ie. does not include devices managed by
 * application itself even if they have a MAC address).
 *
 * @deprecated use {@link #getMyAssociations()}
 */
",0,[@NonNull],"[@Deprecated, @UserHandleAware, @NonNull]",1,,,,1,"1,2,3","1,2","1, 5","1,2","The implementation of the method has been completely changed. In the early version, the method checks if the feature is present and then calls the `mService.getAssociations()` method to get the list of associated devices. In the late version, the method calls the `getMyAssociations()` method and then maps the result to get the list of MAC addresses of the associated devices. Additionally, the method has been deprecated in the late version.","The change in the implementation of the method can potentially lead to compatibility issues. In the early version, the method returns the list of all associated devices, whereas in the late version, the method returns only the list of MAC addresses of the devices that are managed by the `CompanionDeviceManager`. This can cause issues for the apps that are expecting the list of all associated devices. Additionally, the apps that are using the deprecated method will get a warning in the IDE and may need to update their code to use the recommended method."
174,android.hardware.camera2.CameraCharacteristics.get,31,32,<android.hardware.camera2.CameraCharacteristics: T get(Key<T>)>,<android.hardware.camera2.CameraCharacteristics: T get(Key<T>)>,0,"{
    return mProperties.get(key);
}","{
    T propertyOverride = overrideProperty(key);
    return (propertyOverride != null) ? propertyOverride : mProperties.get(key);
}",1,"/**
 * Get a camera characteristics field value.
 *
 * <p>The field definitions can be
 * found in {@link CameraCharacteristics}.</p>
 *
 * <p>Querying the value for the same key more than once will return a value
 * which is equal to the previous queried value.</p>
 *
 * @throws IllegalArgumentException if the key was not valid
 *
 * @param key The characteristics field to read.
 * @return The value of that key, or {@code null} if the field is not set.
 */
","/**
 * Get a camera characteristics field value.
 *
 * <p>The field definitions can be
 * found in {@link CameraCharacteristics}.</p>
 *
 * <p>Querying the value for the same key more than once will return a value
 * which is equal to the previous queried value.</p>
 *
 * @throws IllegalArgumentException if the key was not valid
 *
 * @param key The characteristics field to read.
 * @return The value of that key, or {@code null} if the field is not set.
 */
",0,[@Nullable],[@Nullable],0,,,,1,"1,4",1,1,1,"The implementation of the API has been changed to first check if there is an override for the requested key before returning the value from the properties map. This means that in the late version, if there is an override for the key, the API will return the override value instead of the value from the properties map.","The change in the implementation can potentially lead to compatibility issues if the application is relying on the value from the properties map for a specific key and there is an override for that key in the late version. In such case, the application will receive a different value than expected, which can cause unexpected behavior or even crashes."
175,android.accessibilityservice.AccessibilityService.createDisplayContext,31,32,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,0,"{
    final Context context = super.createDisplayContext(display);
    final int displayId = display.getDisplayId();
    setDefaultTokenInternal(context, displayId);
    return context;
}","{
    return new AccessibilityContext(super.createDisplayContext(display), mConnectionId);
}",1,,,0,[@Override],"[@NonNull, @Override]",1,,,,1,"1,4",1,"1, 5",1,"The implementation of the method `createDisplayContext` has been changed from the early version to the late version. In the early version, the method first calls `super.createDisplayContext(display)` and assigns the result to a local variable `context`. Then, it calls `setDefaultTokenInternal(context, displayId)` and returns `context`. In the late version, the method directly returns a new instance of `AccessibilityContext`, which is constructed with the result of `super.createDisplayContext(display)` and `mConnectionId`. The change of the implementation is a combination of return statement change (1) and dependent API change (5), as the method `AccessibilityContext` is a new dependent API in the late version.","The change of the implementation of `createDisplayContext` may lead to a compatibility issue, as the method may return a different type of object in the late version. In the early version, the method returns a `Context` object, while in the late version, it returns an `AccessibilityContext` object, which is a subclass of `Context`. This may cause compatibility issues if the client code assumes that the method always returns a `Context` object and does not handle the `AccessibilityContext` object properly."
176,android.app.ActivityThread.ProviderKey.hashCode,31,32,<android.app.ActivityThread.ProviderKey: int hashCode()>,<android.app.ActivityThread.ProviderKey: int hashCode()>,0,"{
    return hashCode(authority, userId);
}","{
    return ((authority != null) ? authority.hashCode() : 0) ^ userId;
}",1,,,0,[@Override],[@Override],0,,,,1,"1,5",1,1,1,"The hashCode() method in the early version calls another hashCode() method with two parameters, while the hashCode() method in the late version calculates the hash code by itself using a ternary operator and a bitwise XOR operator.","The hash code generated by the hashCode() method in the late version may be different from the one generated by the hashCode() method in the early version, since they use different algorithms. This could cause compatibility issues if the hash code is used for purposes such as object equality comparison or data storage and retrieval."
177,android.view.MotionEvent.PointerCoords.clear,31,32,<android.view.MotionEvent.PointerCoords: void clear()>,<android.view.MotionEvent.PointerCoords: void clear()>,0,"{
    mPackedAxisBits = 0;
    x = 0;
    y = 0;
    pressure = 0;
    size = 0;
    touchMajor = 0;
    touchMinor = 0;
    toolMajor = 0;
    toolMinor = 0;
    orientation = 0;
}","{
    mPackedAxisBits = 0;
    x = 0;
    y = 0;
    pressure = 0;
    size = 0;
    touchMajor = 0;
    touchMinor = 0;
    toolMajor = 0;
    toolMinor = 0;
    orientation = 0;
    relativeX = 0;
    relativeY = 0;
}",1,"/**
 * Clears the contents of this object.
 * Resets all axes to zero.
 */
","/**
 * Clears the contents of this object.
 * Resets all axes to zero.
 */
",0,,,0,,,,1,4,0,4,0,"In the late version, two new lines of code have been added in the implementation of the API: `relativeX = 0;` and `relativeY = 0;`. These two lines are not related to the control flow or exception handling of the API, thus the code change is classified as 'Other statement changed'.","The added two lines of code only reset the values of `relativeX` and `relativeY` to 0, which will not cause the API to return different values or throw different exceptions. Therefore, there is no Compatibility Issue in this case."
1,<android.widget.TextView: void setInputType(int)>,30,31,,,,"{
    final boolean wasPassword = isPasswordInputType(getInputType());
    final boolean wasVisiblePassword = isVisiblePasswordInputType(getInputType());
    setInputType(type, false);
    final boolean isPassword = isPasswordInputType(type);
    final boolean isVisiblePassword = isVisiblePasswordInputType(type);
    boolean forceUpdate = false;
    if (isPassword) {
        setTransformationMethod(PasswordTransformationMethod.getInstance());
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (isVisiblePassword) {
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (wasPassword || wasVisiblePassword) {
        // not in password mode, clean up typeface and transformation
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        DEFAULT_TYPEFACE, /* typeface index */
        Typeface.NORMAL, -1);
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
    }
    boolean singleLine = !isMultilineInputType(type);
    // were previously in password mode.
    if (mSingleLine != singleLine || forceUpdate) {
        // Change single line mode, but only change the transformation if
        // we are not in password mode.
        applySingleLine(singleLine, !isPassword, true);
    }
    if (!isSuggestionsEnabled()) {
        setTextInternal(removeSuggestionSpans(mText));
    }
    InputMethodManager imm = getInputMethodManager();
    if (imm != null)
        imm.restartInput(this);
}","{
    final boolean wasPassword = isPasswordInputType(getInputType());
    final boolean wasVisiblePassword = isVisiblePasswordInputType(getInputType());
    setInputType(type, false);
    final boolean isPassword = isPasswordInputType(type);
    final boolean isVisiblePassword = isVisiblePasswordInputType(type);
    boolean forceUpdate = false;
    if (isPassword) {
        setTransformationMethod(PasswordTransformationMethod.getInstance());
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (isVisiblePassword) {
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        MONOSPACE, Typeface.NORMAL, -1);
    } else if (wasPassword || wasVisiblePassword) {
        // not in password mode, clean up typeface and transformation
        setTypefaceFromAttrs(null, /* fontTypeface */
        null, /* fontFamily */
        DEFAULT_TYPEFACE, /* typeface index */
        Typeface.NORMAL, -1);
        if (mTransformation == PasswordTransformationMethod.getInstance()) {
            forceUpdate = true;
        }
    }
    boolean singleLine = !isMultilineInputType(type);
    // were previously in password mode.
    if (mSingleLine != singleLine || forceUpdate) {
        // Change single line mode, but only change the transformation if
        // we are not in password mode.
        applySingleLine(singleLine, !isPassword, true, true);
    }
    if (!isSuggestionsEnabled()) {
        setTextInternal(removeSuggestionSpans(mText));
    }
    InputMethodManager imm = getInputMethodManager();
    if (imm != null)
        imm.restartInput(this);
}",1,"/**
 * Set the type of the content with a constant as defined for {@link EditorInfo#inputType}. This
 * will take care of changing the key listener, by calling {@link #setKeyListener(KeyListener)},
 * to match the given content type.  If the given content type is {@link EditorInfo#TYPE_NULL}
 * then a soft keyboard will not be displayed for this text view.
 *
 * Note that the maximum number of displayed lines (see {@link #setMaxLines(int)}) will be
 * modified if you change the {@link EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE} flag of the input
 * type.
 *
 * @see #getInputType()
 * @see #setRawInputType(int)
 * @see android.text.InputType
 * @attr ref android.R.styleable#TextView_inputType
 */
","/**
 * Set the type of the content with a constant as defined for {@link EditorInfo#inputType}. This
 * will take care of changing the key listener, by calling {@link #setKeyListener(KeyListener)},
 * to match the given content type.  If the given content type is {@link EditorInfo#TYPE_NULL}
 * then a soft keyboard will not be displayed for this text view.
 *
 * Note that the maximum number of displayed lines (see {@link #setMaxLines(int)}) will be
 * modified if you change the {@link EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE} flag of the input
 * type.
 *
 * @see #getInputType()
 * @see #setRawInputType(int)
 * @see android.text.InputType
 * @attr ref android.R.styleable#TextView_inputType
 */
",0,,,0,,,,2,5,0,4,1,The change between the two versions is that the late version has an additional boolean parameter in the method call "applySingleLine()". This is classified as an "Other statement changed" (change type 4).,"The additional boolean parameter in ""applySingleLine()"" could lead to different behavior in the late version, as it may affect how the text view handles single line mode. Therefore, it is a Compatibility Issue caused by potential different return values or types (CI type 1)."
2,<android.os.UserManager: boolean isUserUnlocked(UserHandle)>,30,31,,,,"{
    return isUserUnlocked(user.getIdentifier());
}","{
    return isUserUnlocked(user.getIdentifier());
}",0,"/**
 * Return whether the given user is running in an ""unlocked"" state.
 * <p>
 * On devices with direct boot, a user is unlocked only after they've
 * entered their credentials (such as a lock pattern or PIN). On devices
 * without direct boot, a user is unlocked as soon as it starts.
 * <p>
 * When a user is locked, only device-protected data storage is available.
 * When a user is unlocked, both device-protected and credential-protected
 * private app data storage is available.
 * <p>Requires {@code android.permission.MANAGE_USERS} or
 * {@code android.permission.INTERACT_ACROSS_USERS}, otherwise specified {@link UserHandle user}
 * must be the calling user or a managed profile associated with it.
 *
 * @param user to retrieve the unlocked state for.
 * @see Intent#ACTION_USER_UNLOCKED
 * @see Context#createDeviceProtectedStorageContext()
 */
","/**
 * Return whether the given user is running in an ""unlocked"" state.
 * <p>
 * On devices with direct boot, a user is unlocked only after they've
 * entered their credentials (such as a lock pattern or PIN). On devices
 * without direct boot, a user is unlocked as soon as it starts.
 * <p>
 * When a user is locked, only device-protected data storage is available.
 * When a user is unlocked, both device-protected and credential-protected
 * private app data storage is available.
 * <p>Requires {@code android.permission.MANAGE_USERS} or
 * {@code android.permission.INTERACT_ACROSS_USERS}, otherwise specified {@link UserHandle user}
 * must be the calling user or a profile associated with it.
 *
 * @param user to retrieve the unlocked state for.
 * @see Intent#ACTION_USER_UNLOCKED
 * @see Context#createDeviceProtectedStorageContext()
 */
",1,"[@RequiresPermission(anyOf = { Manifest.permission.MANAGE_USERS, Manifest.permission.INTERACT_ACROSS_USERS }, conditional = true)]","[@RequiresPermission(anyOf = { Manifest.permission.MANAGE_USERS, Manifest.permission.INTERACT_ACROSS_USERS }, conditional = true)]",0,,,,0,0,0,0,0,There is no code change between the two versions.,There is no Compatibility Issue exist.
3,<android.widget.HorizontalScrollView: boolean onTouchEvent(MotionEvent)>,30,31,,,,"{
    initVelocityTrackerIfNotExists();
    mVelocityTracker.addMovement(ev);
    final int action = ev.getAction();
    switch(action & MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_DOWN:
            {
                if (getChildCount() == 0) {
                    return false;
                }
                if ((mIsBeingDragged = !mScroller.isFinished())) {
                    final ViewParent parent = getParent();
                    if (parent != null) {
                        parent.requestDisallowInterceptTouchEvent(true);
                    }
                }
                /*
                 * If being flinged and user touches, stop the fling. isFinished
                 * will be false if being flinged.
                 */
                if (!mScroller.isFinished()) {
                    mScroller.abortAnimation();
                }
                // Remember where the motion event started
                mLastMotionX = (int) ev.getX();
                mActivePointerId = ev.getPointerId(0);
                break;
            }
        case MotionEvent.ACTION_MOVE:
            final int activePointerIndex = ev.findPointerIndex(mActivePointerId);
            if (activePointerIndex == -1) {
                Log.e(TAG, ""Invalid pointerId="" + mActivePointerId + "" in onTouchEvent"");
                break;
            }
            final int x = (int) ev.getX(activePointerIndex);
            int deltaX = mLastMotionX - x;
            if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
                final ViewParent parent = getParent();
                if (parent != null) {
                    parent.requestDisallowInterceptTouchEvent(true);
                }
                mIsBeingDragged = true;
                if (deltaX > 0) {
                    deltaX -= mTouchSlop;
                } else {
                    deltaX += mTouchSlop;
                }
            }
            if (mIsBeingDragged) {
                // Scroll to follow the motion event
                mLastMotionX = x;
                final int oldX = mScrollX;
                final int oldY = mScrollY;
                final int range = getScrollRange();
                final int overscrollMode = getOverScrollMode();
                final boolean canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS || (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);
                // calls onScrollChanged if applicable.
                if (overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true)) {
                    // Break our velocity if we hit a scroll barrier.
                    mVelocityTracker.clear();
                }
                if (canOverscroll) {
                    final int pulledToX = oldX + deltaX;
                    if (pulledToX < 0) {
                        mEdgeGlowLeft.onPull((float) deltaX / getWidth(), 1.f - ev.getY(activePointerIndex) / getHeight());
                        if (!mEdgeGlowRight.isFinished()) {
                            mEdgeGlowRight.onRelease();
                        }
                    } else if (pulledToX > range) {
                        mEdgeGlowRight.onPull((float) deltaX / getWidth(), ev.getY(activePointerIndex) / getHeight());
                        if (!mEdgeGlowLeft.isFinished()) {
                            mEdgeGlowLeft.onRelease();
                        }
                    }
                    if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())) {
                        postInvalidateOnAnimation();
                    }
                }
            }
            break;
        case MotionEvent.ACTION_UP:
            if (mIsBeingDragged) {
                final VelocityTracker velocityTracker = mVelocityTracker;
                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
                int initialVelocity = (int) velocityTracker.getXVelocity(mActivePointerId);
                if (getChildCount() > 0) {
                    if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
                        fling(-initialVelocity);
                    } else {
                        if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                            postInvalidateOnAnimation();
                        }
                    }
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_CANCEL:
            if (mIsBeingDragged && getChildCount() > 0) {
                if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                    postInvalidateOnAnimation();
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_POINTER_UP:
            onSecondaryPointerUp(ev);
            break;
    }
    return true;
}","{
    initVelocityTrackerIfNotExists();
    mVelocityTracker.addMovement(ev);
    final int action = ev.getAction();
    switch(action & MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_DOWN:
            {
                if (getChildCount() == 0) {
                    return false;
                }
                if (!mScroller.isFinished()) {
                    final ViewParent parent = getParent();
                    if (parent != null) {
                        parent.requestDisallowInterceptTouchEvent(true);
                    }
                }
                /*
                 * If being flinged and user touches, stop the fling. isFinished
                 * will be false if being flinged.
                 */
                if (!mScroller.isFinished()) {
                    mScroller.abortAnimation();
                }
                // Remember where the motion event started
                mLastMotionX = (int) ev.getX();
                mActivePointerId = ev.getPointerId(0);
                break;
            }
        case MotionEvent.ACTION_MOVE:
            final int activePointerIndex = ev.findPointerIndex(mActivePointerId);
            if (activePointerIndex == -1) {
                Log.e(TAG, ""Invalid pointerId="" + mActivePointerId + "" in onTouchEvent"");
                break;
            }
            final int x = (int) ev.getX(activePointerIndex);
            int deltaX = mLastMotionX - x;
            if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
                final ViewParent parent = getParent();
                if (parent != null) {
                    parent.requestDisallowInterceptTouchEvent(true);
                }
                mIsBeingDragged = true;
                if (deltaX > 0) {
                    deltaX -= mTouchSlop;
                } else {
                    deltaX += mTouchSlop;
                }
            }
            if (mIsBeingDragged) {
                // Scroll to follow the motion event
                mLastMotionX = x;
                final int oldX = mScrollX;
                final int range = getScrollRange();
                final int overscrollMode = getOverScrollMode();
                final boolean canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS || (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);
                final float displacement = ev.getY(activePointerIndex) / getHeight();
                if (canOverscroll) {
                    int consumed = 0;
                    if (deltaX < 0 && mEdgeGlowRight.getDistance() != 0f) {
                        consumed = Math.round(getWidth() * mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement));
                    } else if (deltaX > 0 && mEdgeGlowLeft.getDistance() != 0f) {
                        consumed = Math.round(-getWidth() * mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1 - displacement));
                    }
                    deltaX -= consumed;
                }
                // Calling overScrollBy will call onOverScrolled, which
                // calls onScrollChanged if applicable.
                overScrollBy(deltaX, 0, mScrollX, 0, range, 0, mOverscrollDistance, 0, true);
                if (canOverscroll && deltaX != 0f) {
                    final int pulledToX = oldX + deltaX;
                    if (pulledToX < 0) {
                        mEdgeGlowLeft.onPullDistance((float) -deltaX / getWidth(), 1.f - displacement);
                        if (!mEdgeGlowRight.isFinished()) {
                            mEdgeGlowRight.onRelease();
                        }
                    } else if (pulledToX > range) {
                        mEdgeGlowRight.onPullDistance((float) deltaX / getWidth(), displacement);
                        if (!mEdgeGlowLeft.isFinished()) {
                            mEdgeGlowLeft.onRelease();
                        }
                    }
                    if (shouldDisplayEdgeEffects() && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())) {
                        postInvalidateOnAnimation();
                    }
                }
            }
            break;
        case MotionEvent.ACTION_UP:
            if (mIsBeingDragged) {
                final VelocityTracker velocityTracker = mVelocityTracker;
                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
                int initialVelocity = (int) velocityTracker.getXVelocity(mActivePointerId);
                if (getChildCount() > 0) {
                    if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
                        fling(-initialVelocity);
                    } else {
                        if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                            postInvalidateOnAnimation();
                        }
                    }
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_CANCEL:
            if (mIsBeingDragged && getChildCount() > 0) {
                if (mScroller.springBack(mScrollX, mScrollY, 0, getScrollRange(), 0, 0)) {
                    postInvalidateOnAnimation();
                }
                mActivePointerId = INVALID_POINTER;
                mIsBeingDragged = false;
                recycleVelocityTracker();
                if (shouldDisplayEdgeEffects()) {
                    mEdgeGlowLeft.onRelease();
                    mEdgeGlowRight.onRelease();
                }
            }
            break;
        case MotionEvent.ACTION_POINTER_UP:
            onSecondaryPointerUp(ev);
            break;
    }
    return true;
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",0,"3, 4",1,"The code change involves both control dependency change and other statement change. In the late version, the calculation of `deltaX` and the usage of `canOverscroll` are different from the early version in the `MotionEvent.ACTION_MOVE` case, which are not related to the control flow. These changes can potentially cause the API to return a different value (true or false). Additionally, the usage of `overScrollBy` in the late version is different from the early version, which changes the control flow and can also potentially cause the API to return a different value.","The Compatibility Issue (CI) arises because the changes in the calculation of `deltaX`, usage of `canOverscroll`, and usage of `overScrollBy` can potentially cause the API to return a different value in the late version compared to the early version. For instance, the different calculation of `deltaX` can result in a different scrolling position, which can affect the user's interaction with the app. The different usage of `canOverscroll` can result in a different overscrolling behavior, which can also affect the user's interaction with the app. Furthermore, the different usage of `overScrollBy` can result in a different scrolling behavior, which can affect the user's interaction with the app as well. Therefore, the CI type is 1."
4,<android.view.textclassifier.TextClassificationSession: TextLanguage detectLanguage(Request)>,30,31,,,,"{
    checkDestroyed();
    return mDelegate.detectLanguage(request);
}","{
    return checkDestroyedAndRun(() -> mDelegate.detectLanguage(request));
}",1,,,0,[@Override],[@Override],0,,,,2,"1,5",1,"1, 5","1,2","The code change is a combination of return statement change and dependent API change. In the early version, the method `checkDestroyed()` is called and its return value is discarded. In the late version, the method `checkDestroyedAndRun()` is called and its return value is returned. The `checkDestroyedAndRun()` method is a new method introduced in the late version, which takes a lambda function as a parameter and returns the result of the lambda function if the object is not destroyed, or throws an `IllegalStateException` if the object is destroyed.","The code change can potentially lead to compatibility issues of type 1 and 2. The first type of compatibility issue is that the method `detectLanguage()` can potentially return a different value in the late version, because the method `checkDestroyedAndRun()` can potentially modify the input `request` object before it is passed to the method `detectLanguage()`. The second type of compatibility issue is that the method `detectLanguage()` can potentially throw an `IllegalStateException` in the late version, but not in the early version, because the method `checkDestroyedAndRun()` can throw an `IllegalStateException` if the object is destroyed."
5,<android.inputmethodservice.InputMethodService: void requestShowSelf(int)>,30,31,,,,"{
    mPrivOps.showMySoftInput(flags);
}","{
    ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null);
    mPrivOps.showMySoftInput(flags);
}",1,"/**
 * Show the input method's soft input area, so the user sees the input method window and can
 * interact with it.
 *
 * @see InputMethodManager#SHOW_IMPLICIT
 * @see InputMethodManager#SHOW_FORCED
 * @param flags Provides additional operating flags.
 */
","/**
 * Show the input method's soft input area, so the user sees the input method window and can
 * interact with it.
 *
 * @see InputMethodManager#SHOW_IMPLICIT
 * @see InputMethodManager#SHOW_FORCED
 * @param flags Provides additional operating flags.
 */
",0,,,0,,,,"1,2",4,0,4,0,"A new statement has been added to the implementation of the method `requestShowSelf(int)`, which is `ImeTracing.getInstance().triggerServiceDump(""InputMethodService#requestShowSelf"", this, null);`. This statement does not affect the return value or exception handling of the method, and it only adds a new behavior of triggering a service dump when the method is called.","There is no compatibility issue for the method `requestShowSelf(int)` between version 30 and version 31. The new statement added in version 31 does not change the return value or exception handling of the method, and it only adds a new behavior of triggering a service dump. This new behavior is not expected to cause any compatibility issues for the developers using this API."
6,<android.app.LoadedApk.ReceiverDispatcher.Args: Runnable getRunnable()>,30,31,,,,"{
    return () -> {
        final BroadcastReceiver receiver = mReceiver;
        final boolean ordered = mOrdered;
        if (ActivityThread.DEBUG_BROADCAST) {
            int seq = mCurIntent.getIntExtra(""seq"", -1);
            Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq="" + seq + "" to "" + mReceiver);
            Slog.i(ActivityThread.TAG, ""  mRegistered="" + mRegistered + "" mOrderedHint="" + ordered);
        }
        final IActivityManager mgr = ActivityManager.getService();
        final Intent intent = mCurIntent;
        if (intent == null) {
            Log.wtf(TAG, ""Null intent being dispatched, mDispatched="" + mDispatched + (mRunCalled ? "", run() has already been called"" : """"));
        }
        mCurIntent = null;
        mDispatched = true;
        mRunCalled = true;
        if (receiver == null || intent == null || mForgotten) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            return;
        }
        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg"");
        try {
            ClassLoader cl = mReceiver.getClass().getClassLoader();
            intent.setExtrasClassLoader(cl);
            intent.prepareToEnterProcess();
            setExtrasClassLoader(cl);
            receiver.setPendingResult(this);
            receiver.onReceive(mContext, intent);
        } catch (Exception e) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            if (mInstrumentation == null || !mInstrumentation.onException(mReceiver, e)) {
                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
                throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e);
            }
        }
        if (receiver.getPendingResult() != null) {
            finish();
        }
        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
    };
}","{
    return () -> {
        final BroadcastReceiver receiver = mReceiver;
        final boolean ordered = mOrdered;
        if (ActivityThread.DEBUG_BROADCAST) {
            int seq = mCurIntent.getIntExtra(""seq"", -1);
            Slog.i(ActivityThread.TAG, ""Dispatching broadcast "" + mCurIntent.getAction() + "" seq="" + seq + "" to "" + mReceiver);
            Slog.i(ActivityThread.TAG, ""  mRegistered="" + mRegistered + "" mOrderedHint="" + ordered);
        }
        final IActivityManager mgr = ActivityManager.getService();
        final Intent intent = mCurIntent;
        if (intent == null) {
            Log.wtf(TAG, ""Null intent being dispatched, mDispatched="" + mDispatched + (mRunCalled ? "", run() has already been called"" : """"));
        }
        mCurIntent = null;
        mDispatched = true;
        mRunCalled = true;
        if (receiver == null || intent == null || mForgotten) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing null broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            return;
        }
        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, ""broadcastReceiveReg"");
        try {
            ClassLoader cl = mReceiver.getClass().getClassLoader();
            intent.setExtrasClassLoader(cl);
            // TODO: determine at registration time if caller is
            // protecting themselves with signature permission
            intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent), mContext.getAttributionSource());
            setExtrasClassLoader(cl);
            receiver.setPendingResult(this);
            receiver.onReceive(mContext, intent);
        } catch (Exception e) {
            if (mRegistered && ordered) {
                if (ActivityThread.DEBUG_BROADCAST)
                    Slog.i(ActivityThread.TAG, ""Finishing failed broadcast to "" + mReceiver);
                sendFinished(mgr);
            }
            if (mInstrumentation == null || !mInstrumentation.onException(mReceiver, e)) {
                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
                throw new RuntimeException(""Error receiving broadcast "" + intent + "" in "" + mReceiver, e);
            }
        }
        if (receiver.getPendingResult() != null) {
            finish();
        }
        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);
    };
}",1,,,0,,,0,,,,2,5,0,5,1,"In the Late_Implementation, a new parameter `mContext.getAttributionSource()` is added in the method `intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent), mContext.getAttributionSource())`. This is a Dependent API change as the method signature of `prepareToEnterProcess()` in the class `Intent` has been modified by adding a new parameter.","The addition of a new parameter in the method `prepareToEnterProcess()` can potentially lead to different behaviors in the Late_Version of the API. If the calling code has not been updated to include the new parameter, it will result in a compile-time error. Even if the code is updated, the new parameter can affect the functionality of the method, leading to Compatibility Issue. In this case, the CI type is 1 as it can cause potential different return values or types."
7,<android.app.admin.DevicePolicyManager: DevicePolicyManager getParentProfileInstance(ComponentName)>,30,31,,,,"{
    throwIfParentInstance(""getParentProfileInstance"");
    try {
        if (!mService.isManagedProfile(admin)) {
            throw new SecurityException(""The current user does not have a parent profile."");
        }
        return new DevicePolicyManager(mContext, mService, true);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""getParentProfileInstance"");
    try {
        if (!mService.isManagedProfile(admin)) {
            throw new SecurityException(""The current user does not have a parent profile."");
        }
        return new DevicePolicyManager(mContext, mService, true);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",0,"/**
 * Called by the profile owner of a managed profile to obtain a {@link DevicePolicyManager}
 * whose calls act on the parent profile.
 *
 * <p>The following methods are supported for the parent instance, all other methods will
 * throw a SecurityException when called on the parent instance:
 * <ul>
 * <li>{@link #getPasswordQuality}</li>
 * <li>{@link #setPasswordQuality}</li>
 * <li>{@link #getPasswordMinimumLength}</li>
 * <li>{@link #setPasswordMinimumLength}</li>
 * <li>{@link #getPasswordMinimumUpperCase}</li>
 * <li>{@link #setPasswordMinimumUpperCase}</li>
 * <li>{@link #getPasswordMinimumLowerCase}</li>
 * <li>{@link #setPasswordMinimumLowerCase}</li>
 * <li>{@link #getPasswordMinimumLetters}</li>
 * <li>{@link #setPasswordMinimumLetters}</li>
 * <li>{@link #getPasswordMinimumNumeric}</li>
 * <li>{@link #setPasswordMinimumNumeric}</li>
 * <li>{@link #getPasswordMinimumSymbols}</li>
 * <li>{@link #setPasswordMinimumSymbols}</li>
 * <li>{@link #getPasswordMinimumNonLetter}</li>
 * <li>{@link #setPasswordMinimumNonLetter}</li>
 * <li>{@link #getPasswordHistoryLength}</li>
 * <li>{@link #setPasswordHistoryLength}</li>
 * <li>{@link #getPasswordExpirationTimeout}</li>
 * <li>{@link #setPasswordExpirationTimeout}</li>
 * <li>{@link #getPasswordExpiration}</li>
 * <li>{@link #getPasswordMaximumLength}</li>
 * <li>{@link #isActivePasswordSufficient}</li>
 * <li>{@link #getCurrentFailedPasswordAttempts}</li>
 * <li>{@link #getMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #setMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #getMaximumTimeToLock}</li>
 * <li>{@link #setMaximumTimeToLock}</li>
 * <li>{@link #lockNow}</li>
 * <li>{@link #getKeyguardDisabledFeatures}</li>
 * <li>{@link #setKeyguardDisabledFeatures}</li>
 * <li>{@link #getTrustAgentConfiguration}</li>
 * <li>{@link #setTrustAgentConfiguration}</li>
 * <li>{@link #getRequiredStrongAuthTimeout}</li>
 * <li>{@link #setRequiredStrongAuthTimeout}</li>
 * <li>{@link #getAccountTypesWithManagementDisabled}</li>
 * </ul>
 * <p>
 * The following methods are supported for the parent instance but can only be called by the
 * profile owner of a managed profile that was created during the device provisioning flow:
 * <ul>
 * <li>{@link #getPasswordComplexity}</li>
 * <li>{@link #setCameraDisabled}</li>
 * <li>{@link #getCameraDisabled}</li>
 * <li>{@link #setAccountManagementDisabled(ComponentName, String, boolean)}</li>
 * </ul>
 *
 * <p>The following methods can be called by the profile owner of a managed profile
 * on an organization-owned device:
 * <ul>
 * <li>{@link #wipeData}</li>
 * </ul>
 *
 * @return a new instance of {@link DevicePolicyManager} that acts on the parent profile.
 * @throws SecurityException if {@code admin} is not a profile owner.
 */
","/**
 * Called by the profile owner of a managed profile to obtain a {@link DevicePolicyManager}
 * whose calls act on the parent profile.
 *
 * <p>The following methods are supported for the parent instance, all other methods will
 * throw a SecurityException when called on the parent instance:
 * <ul>
 * <li>{@link #getPasswordQuality}</li>
 * <li>{@link #setPasswordQuality}</li>
 * <li>{@link #getPasswordMinimumLength}</li>
 * <li>{@link #setPasswordMinimumLength}</li>
 * <li>{@link #getPasswordMinimumUpperCase}</li>
 * <li>{@link #setPasswordMinimumUpperCase}</li>
 * <li>{@link #getPasswordMinimumLowerCase}</li>
 * <li>{@link #setPasswordMinimumLowerCase}</li>
 * <li>{@link #getPasswordMinimumLetters}</li>
 * <li>{@link #setPasswordMinimumLetters}</li>
 * <li>{@link #getPasswordMinimumNumeric}</li>
 * <li>{@link #setPasswordMinimumNumeric}</li>
 * <li>{@link #getPasswordMinimumSymbols}</li>
 * <li>{@link #setPasswordMinimumSymbols}</li>
 * <li>{@link #getPasswordMinimumNonLetter}</li>
 * <li>{@link #setPasswordMinimumNonLetter}</li>
 * <li>{@link #getPasswordHistoryLength}</li>
 * <li>{@link #setPasswordHistoryLength}</li>
 * <li>{@link #getPasswordExpirationTimeout}</li>
 * <li>{@link #setPasswordExpirationTimeout}</li>
 * <li>{@link #getPasswordExpiration}</li>
 * <li>{@link #getPasswordMaximumLength}</li>
 * <li>{@link #isActivePasswordSufficient}</li>
 * <li>{@link #getCurrentFailedPasswordAttempts}</li>
 * <li>{@link #getMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #setMaximumFailedPasswordsForWipe}</li>
 * <li>{@link #getMaximumTimeToLock}</li>
 * <li>{@link #setMaximumTimeToLock}</li>
 * <li>{@link #lockNow}</li>
 * <li>{@link #getKeyguardDisabledFeatures}</li>
 * <li>{@link #setKeyguardDisabledFeatures}</li>
 * <li>{@link #getTrustAgentConfiguration}</li>
 * <li>{@link #setTrustAgentConfiguration}</li>
 * <li>{@link #getRequiredStrongAuthTimeout}</li>
 * <li>{@link #setRequiredStrongAuthTimeout}</li>
 * <li>{@link #getAccountTypesWithManagementDisabled}</li>
 * <li>{@link #setRequiredPasswordComplexity(int)} </li>
 * <li>{@link #getRequiredPasswordComplexity()}</li>
 * </ul>
 * <p>
 * The following methods are supported for the parent instance but can only be called by the
 * profile owner of a managed profile that was created during the device provisioning flow:
 * <ul>
 * <li>{@link #getPasswordComplexity}</li>
 * <li>{@link #setCameraDisabled}</li>
 * <li>{@link #getCameraDisabled}</li>
 * <li>{@link #setAccountManagementDisabled(ComponentName, String, boolean)}</li>
 * <li>{@link #setPermittedInputMethods}</li>
 * <li>{@link #getPermittedInputMethods}</li>
 * </ul>
 *
 * <p>The following methods can be called by the profile owner of a managed profile
 * on an organization-owned device:
 * <ul>
 * <li>{@link #wipeData}</li>
 * </ul>
 *
 * @return a new instance of {@link DevicePolicyManager} that acts on the parent profile.
 * @throws SecurityException if {@code admin} is not a profile owner.
 */
",1,[@NonNull],[@NonNull],0,,,,0,0,0,0,0,There is no code change between the two versions of the method.,There is no compatibility issue between the two versions of the method.
8,"<android.app.backup.BackupAgent.BackupServiceBinder: void doFullBackup(ParcelFileDescriptor,long,int,IBackupManager,int)>",30,31,,,,"{
    // Ensure that we're running with the app's normal permission level
    long ident = Binder.clearCallingIdentity();
    if (DEBUG)
        Log.v(TAG, ""doFullBackup() invoked"");
    // Ensure that any SharedPreferences writes have landed *before*
    // we potentially try to back up the underlying files directly.
    waitForSharedPrefs();
    try {
        BackupAgent.this.onFullBackup(new FullBackupDataOutput(data, quotaBytes, transportFlags));
    } catch (IOException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw new RuntimeException(ex);
    } catch (RuntimeException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw ex;
    } finally {
        // ... and then again after, as in the doBackup() case
        waitForSharedPrefs();
        // forthcoming from this agent.
        try {
            FileOutputStream out = new FileOutputStream(data.getFileDescriptor());
            byte[] buf = new byte[4];
            out.write(buf);
        } catch (IOException e) {
            Log.e(TAG, ""Unable to finalize backup stream!"");
        }
        Binder.restoreCallingIdentity(ident);
        try {
            callbackBinder.opCompleteForUser(getBackupUserId(), token, 0);
        } catch (RemoteException e) {
        // we'll time out anyway, so we're safe
        }
        if (Binder.getCallingPid() != Process.myPid()) {
            IoUtils.closeQuietly(data);
        }
    }
}","{
    if (DEBUG)
        Log.v(TAG, ""doFullBackup() invoked"");
    // Ensure that any SharedPreferences writes have landed *before*
    // we potentially try to back up the underlying files directly.
    waitForSharedPrefs();
    // Ensure that we're running with the app's normal permission level
    final long ident = Binder.clearCallingIdentity();
    try {
        BackupAgent.this.onFullBackup(new FullBackupDataOutput(data, quotaBytes, transportFlags));
    } catch (IOException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw new RuntimeException(ex);
    } catch (RuntimeException ex) {
        Log.d(TAG, ""onFullBackup ("" + BackupAgent.this.getClass().getName() + "") threw"", ex);
        throw ex;
    } finally {
        // ... and then again after, as in the doBackup() case
        waitForSharedPrefs();
        // forthcoming from this agent.
        try {
            FileOutputStream out = new FileOutputStream(data.getFileDescriptor());
            byte[] buf = new byte[4];
            out.write(buf);
        } catch (IOException e) {
            Log.e(TAG, ""Unable to finalize backup stream!"");
        }
        Binder.restoreCallingIdentity(ident);
        try {
            callbackBinder.opCompleteForUser(getBackupUserId(), token, 0);
        } catch (RemoteException e) {
        // we'll time out anyway, so we're safe
        }
        if (Binder.getCallingPid() != Process.myPid()) {
            IoUtils.closeQuietly(data);
        }
    }
}",1,,,0,[@Override],[@Override],0,,,,1,"3,4",0,4,0,"The statement ""long ident = Binder.clearCallingIdentity();"" has been changed to ""final long ident = Binder.clearCallingIdentity();"" in the late version. This change doesn't fall into the categories of return statement changed, exception handling statement changed, control dependency changed, or dependent API changed. It is considered as other statement changed, so the code change type is 4.","The change of adding a ""final"" keyword to a variable doesn't affect the behavior of the API. The variable ""ident"" is used to store the thread's identity before it is cleared, and then restored later. Making it final doesn't change this behavior, so there is no compatibility issue (CI type is 0)."
9,"<android.text.method.NumberKeyListener: boolean addAmPmChars(Collection<Character>,Locale)>",30,31,,,,"{
    if (locale == null) {
        return false;
    }
    final String[] amPm = LocaleData.get(locale).amPm;
    for (int i = 0; i < amPm.length; i++) {
        for (int j = 0; j < amPm[i].length(); j++) {
            final char ch = amPm[i].charAt(j);
            if (Character.isBmpCodePoint(ch)) {
                collection.add(Character.valueOf(ch));
            } else {
                // We don't support non-BMP characters.
                return false;
            }
        }
    }
    return true;
}","{
    if (locale == null) {
        return false;
    }
    final String[] amPm = DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings();
    for (int i = 0; i < amPm.length; i++) {
        for (int j = 0; j < amPm[i].length(); j++) {
            final char ch = amPm[i].charAt(j);
            if (Character.isBmpCodePoint(ch)) {
                collection.add(Character.valueOf(ch));
            } else {
                // We don't support non-BMP characters.
                return false;
            }
        }
    }
    return true;
}",1,"/* package */
","/* package */
",0,,,0,,,,2,"4,5",0,5,1,"The change is in the way the array of AM/PM strings is obtained. In the early version, it is obtained using `LocaleData.get(locale).amPm`, while in the late version, it is obtained using `DateFormat.getIcuDateFormatSymbols(locale).getAmPmStrings()`. This is a change in the dependent API.","The change in the dependent API can potentially lead to different AM/PM strings being added to the collection, which can result in different behavior when the collection is used. Therefore, it is a compatibility issue caused by potential different return values."
10,<android.app.UiAutomation: void clearWindowAnimationFrameStats()>,30,31,,,,"{
    synchronized (mLock) {
        throwIfNotConnectedLocked();
    }
    try {
        if (DEBUG) {
            Log.i(LOG_TAG, ""Clearing window animation frame stats"");
        }
        // Calling out without a lock held.
        mUiAutomationConnection.clearWindowAnimationFrameStats();
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re);
    }
}","{
    try {
        if (DEBUG) {
            Log.i(LOG_TAG, ""Clearing window animation frame stats"");
        }
        // Calling out without a lock held.
        mUiAutomationConnection.clearWindowAnimationFrameStats();
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error clearing window animation frame stats!"", re);
    }
}",1,"/**
 * Clears the window animation rendering statistics. These statistics contain
 * information about the most recently rendered window animation frames, i.e.
 * for window transition animations.
 *
 * @see android.view.WindowAnimationFrameStats
 * @see #getWindowAnimationFrameStats()
 * @see android.R.styleable#WindowAnimation
 */
","/**
 * Clears the window animation rendering statistics. These statistics contain
 * information about the most recently rendered window animation frames, i.e.
 * for window transition animations.
 *
 * @see android.view.WindowAnimationFrameStats
 * @see #getWindowAnimationFrameStats()
 * @see android.R.styleable#WindowAnimation
 */
",0,,,0,,,,"1,2",4,2,4,0,The code change is removing the synchronized block with mLock in the early version. This is a control dependency change (type 4) since it alters the conditions under which the clearWindowAnimationFrameStats() method is called.,"The removal of the synchronized block does not lead to a compatibility issue. The method clearWindowAnimationFrameStats() is only called if it is connected, which is checked in the throwIfNotConnectedLocked() method. The mLock is only used to synchronize the connection state, so removing it will not affect the behavior of the clearWindowAnimationFrameStats() method."
11,"<android.view.ViewGroup: boolean requestFocus(int,Rect)>",30,31,,,,"{
    if (DBG) {
        System.out.println(this + "" ViewGroup.requestFocus direction="" + direction);
    }
    int descendantFocusability = getDescendantFocusability();
    boolean result;
    switch(descendantFocusability) {
        case FOCUS_BLOCK_DESCENDANTS:
            result = super.requestFocus(direction, previouslyFocusedRect);
            break;
        case FOCUS_BEFORE_DESCENDANTS:
            {
                final boolean took = super.requestFocus(direction, previouslyFocusedRect);
                result = took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);
                break;
            }
        case FOCUS_AFTER_DESCENDANTS:
            {
                final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);
                result = took ? took : super.requestFocus(direction, previouslyFocusedRect);
                break;
            }
        default:
            throw new IllegalStateException(""descendant focusability must be one of FOCUS_BEFORE_DESCENDANTS,"" + "" FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS but is "" + descendantFocusability);
    }
    if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS) == 0)) {
        mPrivateFlags |= PFLAG_WANTS_FOCUS;
    }
    return result;
}","{
    if (DBG) {
        System.out.println(this + "" ViewGroup.requestFocus direction="" + direction);
    }
    int descendantFocusability = getDescendantFocusability();
    boolean result;
    switch(descendantFocusability) {
        case FOCUS_BLOCK_DESCENDANTS:
            result = super.requestFocus(direction, previouslyFocusedRect);
            break;
        case FOCUS_BEFORE_DESCENDANTS:
            {
                final boolean took = super.requestFocus(direction, previouslyFocusedRect);
                result = took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);
                break;
            }
        case FOCUS_AFTER_DESCENDANTS:
            {
                final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);
                result = took ? took : super.requestFocus(direction, previouslyFocusedRect);
                break;
            }
        default:
            throw new IllegalStateException(""descendant focusability must be "" + ""one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS "" + ""but is "" + descendantFocusability);
    }
    if (result && !isLayoutValid() && ((mPrivateFlags & PFLAG_WANTS_FOCUS) == 0)) {
        mPrivateFlags |= PFLAG_WANTS_FOCUS;
    }
    return result;
}",1,"/**
 * {@inheritDoc}
 *
 * Looks for a view to give focus to respecting the setting specified by
 * {@link #getDescendantFocusability()}.
 *
 * Uses {@link #onRequestFocusInDescendants(int, android.graphics.Rect)} to
 * find focus within the children of this group when appropriate.
 *
 * @see #FOCUS_BEFORE_DESCENDANTS
 * @see #FOCUS_AFTER_DESCENDANTS
 * @see #FOCUS_BLOCK_DESCENDANTS
 * @see #onRequestFocusInDescendants(int, android.graphics.Rect)
 */
","/**
 * {@inheritDoc}
 *
 * Looks for a view to give focus to respecting the setting specified by
 * {@link #getDescendantFocusability()}.
 *
 * Uses {@link #onRequestFocusInDescendants(int, android.graphics.Rect)} to
 * find focus within the children of this group when appropriate.
 *
 * @see #FOCUS_BEFORE_DESCENDANTS
 * @see #FOCUS_AFTER_DESCENDANTS
 * @see #FOCUS_BLOCK_DESCENDANTS
 * @see #onRequestFocusInDescendants(int, android.graphics.Rect)
 */
",0,[@Override],[@Override],0,,,,1,2,2,0,0,"There is no change in the implementation, annotations, and comments between the two versions.","As there are no changes in the implementation, annotations, and comments, there is no compatibility issue."
12,<android.os.Parcel: void setDataSize(int)>,30,31,,,,"{
    updateNativeSize(nativeSetDataSize(mNativePtr, size));
}","{
    nativeSetDataSize(mNativePtr, size);
}",1,"/**
 * Change the amount of data in the parcel.  Can be either smaller or
 * larger than the current size.  If larger than the current capacity,
 * more memory will be allocated.
 *
 * @param size The new number of bytes in the Parcel.
 */
","/**
 * Change the amount of data in the parcel.  Can be either smaller or
 * larger than the current size.  If larger than the current capacity,
 * more memory will be allocated.
 *
 * @param size The new number of bytes in the Parcel.
 */
",0,,,0,,,,2,5,0,4,0,"The implementation of the method has changed from ""updateNativeSize(nativeSetDataSize(mNativePtr, size));"" to ""nativeSetDataSize(mNativePtr, size);"". The change is not related to return statement, exception handling statement, or control dependency. It is an ""other statement changed"" type.","The method is a void method, so it does not return any value. The change in the implementation does not introduce new exception handling or remove existing exception handling. The change does not affect the behavior of the method, so there is no compatibility issue."
13,"<android.view.inputmethod.InlineSuggestionsRequest: void writeToParcel(Parcel,int)>",30,31,,,,"{
    // You can override field parcelling by defining methods like:
    // void parcelFieldName(Parcel dest, int flags) { ... }
    byte flg = 0;
    if (mHostInputToken != null)
        flg |= 0x20;
    dest.writeByte(flg);
    dest.writeInt(mMaxSuggestionCount);
    dest.writeParcelableList(mInlinePresentationSpecs, flags);
    dest.writeString(mHostPackageName);
    dest.writeTypedObject(mSupportedLocales, flags);
    dest.writeBundle(mExtras);
    parcelHostInputToken(dest, flags);
    dest.writeInt(mHostDisplayId);
}","{
    // You can override field parcelling by defining methods like:
    // void parcelFieldName(Parcel dest, int flags) { ... }
    int flg = 0;
    if (mHostInputToken != null)
        flg |= 0x20;
    if (mInlineTooltipPresentationSpec != null)
        flg |= 0x80;
    dest.writeInt(flg);
    dest.writeInt(mMaxSuggestionCount);
    dest.writeParcelableList(mInlinePresentationSpecs, flags);
    dest.writeString(mHostPackageName);
    dest.writeTypedObject(mSupportedLocales, flags);
    dest.writeBundle(mExtras);
    parcelHostInputToken(dest, flags);
    dest.writeInt(mHostDisplayId);
    if (mInlineTooltipPresentationSpec != null)
        dest.writeTypedObject(mInlineTooltipPresentationSpec, flags);
}",1,,,0,"[@Override, @DataClass.Generated.Member]","[@Override, @DataClass.Generated.Member]",0,,,,"1,2","3,4,5",0,5,1,"A new condition statement has been introduced in the late version implementation, and the type of variable 'flg' has been changed from 'byte' to 'int'. Moreover, a new dependent API 'writeTypedObject(mInlineTooltipPresentationSpec, flags)' has been added in the late version implementation. The code change type is 5.","As the new condition statement and the change of variable type 'flg' can potentially lead to different values of 'flg' when the late version API is invoked, and the new dependent API 'writeTypedObject(mInlineTooltipPresentationSpec, flags)' can potentially lead to different behaviors of the late version API, thus the CI type is 1."
14,<android.service.voice.VoiceInteractionSession: void onHandleAssist(AssistState)>,31,32,,,,"{
    if (state.getAssistData() == null && state.getAssistStructure() == null && state.getAssistContent() == null) {
        return;
    } else if (state.getIndex() == 0) {
        onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent());
    } else {
        onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount());
    }
}","{
    if (state.getAssistData() == null && state.getAssistStructure() == null && state.getAssistContent() == null) {
        return;
    } else if (state.getIndex() == 0) {
        onHandleAssist(state.getAssistData(), state.getAssistStructure(), state.getAssistContent());
    } else {
        onHandleAssistSecondary(state.getAssistData(), state.getAssistStructure(), state.getAssistContent(), state.getIndex(), state.getCount());
    }
}",0,"/**
 * Called to receive data from the application that the user was currently viewing when
 * an assist session is started. If the original show request did not specify
 * {@link #SHOW_WITH_ASSIST}, {@link AssistState} parameter will only provide
 * {@link ActivityId}.
 *
 * <p>This method is called for all activities along with an index and count that indicates
 * which activity the data is for. {@code index} will be between 0 and {@code count}-1 and
 * this method is called once for each activity in no particular order. The {@code count}
 * indicates how many activities to expect assist data for, including the top focused one.
 * The focused activity can be determined by calling {@link AssistState#isFocused()}.
 *
 * <p>To be responsive to assist requests, process assist data as soon as it is received,
 * without waiting for all queued activities to return assist data.
 *
 * @param state The state object capturing the state of an activity.
 */
","/**
 * Called to receive data from the application that the user was currently viewing when
 * an assist session is started. If the original show request did not specify
 * {@link #SHOW_WITH_ASSIST}, {@link AssistState} parameter will only provide
 * {@link ActivityId}. If there was a failure to write the assist data to
 * {@link AssistStructure}, the {@link AssistState#getAssistStructure()} will return null.
 *
 * <p>This method is called for all activities along with an index and count that indicates
 * which activity the data is for. {@code index} will be between 0 and {@code count}-1 and
 * this method is called once for each activity in no particular order. The {@code count}
 * indicates how many activities to expect assist data for, including the top focused one.
 * The focused activity can be determined by calling {@link AssistState#isFocused()}.
 *
 * <p>To be responsive to assist requests, process assist data as soon as it is received,
 * without waiting for all queued activities to return assist data.
 *
 * @param state The state object capturing the state of an activity.
 */
",1,,,0,,,,0,0,0,0,0,No code change between the two versions.,No Compatibility Issue exists.
15,<android.view.contentcapture.ContentCaptureManager: ComponentName getServiceComponentName()>,31,32,,,,"{
    if (!isContentCaptureEnabled() && !mOptions.lite)
        return null;
    final SyncResultReceiver resultReceiver = new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS);
    try {
        mService.getServiceComponentName(resultReceiver);
        return resultReceiver.getParcelableResult();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (SyncResultReceiver.TimeoutException e) {
        throw new RuntimeException(""Fail to get service componentName."");
    }
}","{
    if (!isContentCaptureEnabled() && !mOptions.lite)
        return null;
    final SyncResultReceiver resultReceiver = new SyncResultReceiver(SYNC_CALLS_TIMEOUT_MS);
    try {
        mService.getServiceComponentName(resultReceiver);
        return resultReceiver.getParcelableResult();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (SyncResultReceiver.TimeoutException e) {
        throw new RuntimeException(""Fail to get service componentName."");
    }
}",0,"/**
 * Returns the component name of the system service that is consuming the captured events for
 * the current user.
 */
","/**
 * Returns the component name of the system service that is consuming the captured events for
 * the current user.
 *
 * @throws RuntimeException if getting the component name is timed out.
 */
",1,[@Nullable],[@Nullable],0,,,,0,0,0,0,0,"There is no change between the early and late versions of the API implementation, as well as the annotations.",There is no compatibility issue between the early and late versions of the API.
16,<android.view.translation.TranslationResponseValue: CharSequence getTransliteration()>,31,32,,,,"{
    return mTransliteration;
}","{
    return mTransliteration;
}",0,"/**
 * The transliteration result of the translated text.
 * TODO: Describe the result structure.
 */
","/**
 * The transliteration result of the translated text.
 *
 * <p>This returns a CharSequence representation of the transliteration of the translated text.
 */
",1,"[@DataClass.Generated.Member, @Nullable]","[@DataClass.Generated.Member, @Nullable]",0,,,,0,0,0,0,0,"The implementation of the API has not changed between the two versions, only the comment has been updated to provide more information about the return value.",There is no compatibility issue as the behavior of the API has not changed. The updated comment does not affect the functionality of the API.
17,<android.view.contentcapture.ContentCaptureContext: void dump(PrintWriter)>,31,32,,,,"{
    if (mComponentName != null) {
        pw.print(""activity="");
        pw.print(mComponentName.flattenToShortString());
    }
    if (mId != null) {
        pw.print("", id="");
        mId.dump(pw);
    }
    pw.print("", activityId="");
    pw.print(mActivityId);
    pw.print("", displayId="");
    pw.print(mDisplayId);
    if (mParentSessionId != NO_SESSION_ID) {
        pw.print("", parentId="");
        pw.print(mParentSessionId);
    }
    if (mFlags > 0) {
        pw.print("", flags="");
        pw.print(mFlags);
    }
    if (mExtras != null) {
        // NOTE: cannot dump because it could contain PII
        pw.print("", hasExtras"");
    }
}","{
    if (mComponentName != null) {
        pw.print(""activity="");
        pw.print(mComponentName.flattenToShortString());
    }
    if (mId != null) {
        pw.print("", id="");
        mId.dump(pw);
    }
    pw.print("", activityId="");
    pw.print(mActivityId);
    pw.print("", displayId="");
    pw.print(mDisplayId);
    pw.print("", windowToken="");
    pw.print(mWindowToken);
    if (mParentSessionId != NO_SESSION_ID) {
        pw.print("", parentId="");
        pw.print(mParentSessionId);
    }
    if (mFlags > 0) {
        pw.print("", flags="");
        pw.print(mFlags);
    }
    if (mExtras != null) {
        // NOTE: cannot dump because it could contain PII
        pw.print("", hasExtras"");
    }
}",1,"// TODO(b/111276913): dump to proto as well
","// TODO(b/111276913): dump to proto as well
",0,,,0,,,,"1,2","4,5",0,4,0,"The late version implementation has an additional statement, ""pw.print("", windowToken=""); pw.print(mWindowToken);"", which prints the value of mWindowToken to the PrintWriter.","This change does not affect the behavior of the API in terms of return values or exception handling, so there is no compatibility issue."
18,<android.appwidget.AppWidgetHostView.ViewApplyListener: void onViewApplied(View)>,31,32,,,,"{
    AppWidgetHostView.this.mLayoutId = mLayoutId;
    mViewMode = VIEW_MODE_CONTENT;
    applyContent(v, mIsReapply, null);
    mLastInflatedRemoteViewsId = mViews.computeUniqueId(mLastInflatedRemoteViews);
    restoreInstanceState();
    mLastExecutionSignal = null;
}","{
    mViewMode = VIEW_MODE_CONTENT;
    applyContent(v, mIsReapply, null);
    mLastInflatedRemoteViewsId = mViews.computeUniqueId(mLastInflatedRemoteViews);
    restoreInstanceState();
    mLastExecutionSignal = null;
}",1,,,0,[@Override],[@Override],0,,,,"1,2",4,0,1,1,The statement "AppWidgetHostView.this.mLayoutId = mLayoutId;" has been removed in the late version. This statement is responsible for assigning the value of mLayoutId to the mLayoutId of the AppWidgetHostView.,The removal of the statement "AppWidgetHostView.this.mLayoutId = mLayoutId;" can cause a Compatibility Issue as the value of mLayoutId is not being updated in the AppWidgetHostView in the late version. This can potentially lead to different behaviors in the application if the value of mLayoutId is being used elsewhere in the code.
19,"<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(ComponentName,int)>",31,32,,,,"{
    if (mService != null) {
        try {
            mService.setPasswordMinimumLowerCase(admin, length, mParentInstance);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}","{
    if (mService != null) {
        try {
            mService.setPasswordMinimumLowerCase(admin, length, mParentInstance);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}",0,"/**
 * Called by an application that is administering the device to set the minimum number of lower
 * case letters required in the password. After setting this, the user will not be able to enter
 * a new password that is not at least as restrictive as what has been set. Note that the
 * current password will remain until the user has set a new one, so the change does not take
 * place immediately. To prompt the user for a new password, use
 * {@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
 * setting this value. This constraint is only imposed if the administrator has also requested
 * {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. If an app targeting
 * SDK level {@link android.os.Build.VERSION_CODES#R} and above enforces this constraint without
 * settings password quality to {@link #PASSWORD_QUALITY_COMPLEX} first, this method will throw
 * {@link IllegalStateException}. The default value is 0.
 * <p>
 * On devices not supporting {@link PackageManager#FEATURE_SECURE_LOCK_SCREEN} feature, the
 * password is always treated as empty.
 * <p>
 * The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
 * not, a security exception will be thrown.
 * <p>
 *
 * Apps targeting {@link android.os.Build.VERSION_CODES#R} and below can call this method on the
 * {@link DevicePolicyManager} instance returned by
 * {@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
 * profile.
 *
 * @deprecated see {@link #setPasswordQuality(ComponentName, int)} for details.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param length The new desired minimum number of lower case letters required in the password.
 * A value of 0 means there is no restriction.
 * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
 * does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}
 * @throws IllegalStateException if the calling app is targeting SDK level
 * {@link android.os.Build.VERSION_CODES#R} and above and didn't set a sufficient password
 * quality requirement prior to calling this method.
 */
","/**
 * Called by an application that is administering the device to set the minimum number of lower
 * case letters required in the password. After setting this, the user will not be able to enter
 * a new password that is not at least as restrictive as what has been set. Note that the
 * current password will remain until the user has set a new one, so the change does not take
 * place immediately. To prompt the user for a new password, use
 * {@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
 * setting this value. This constraint is only imposed if the administrator has also requested
 * {@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. If an app targeting
 * SDK level {@link android.os.Build.VERSION_CODES#R} and above enforces this constraint without
 * settings password quality to {@link #PASSWORD_QUALITY_COMPLEX} first, this method will throw
 * {@link IllegalStateException}. The default value is 0.
 * <p>
 * On devices not supporting {@link PackageManager#FEATURE_SECURE_LOCK_SCREEN} feature, the
 * password is always treated as empty.
 * <p>
 * The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
 * not, a security exception will be thrown.
 * <p>
 * Apps targeting {@link android.os.Build.VERSION_CODES#R} and below can call this method on the
 * {@link DevicePolicyManager} instance returned by
 * {@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
 * profile.
 *
 * <p><string>Note:</strong> this method is ignored on
 * {PackageManager#FEATURE_AUTOMOTIVE automotive builds}.
 *
 * @deprecated see {@link #setPasswordQuality(ComponentName, int)} for details.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param length The new desired minimum number of lower case letters required in the password.
 * A value of 0 means there is no restriction.
 * @throws SecurityException if {@code admin} is not an active administrator or {@code admin}
 * does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}
 * @throws IllegalStateException if the calling app is targeting SDK level
 * {@link android.os.Build.VERSION_CODES#R} and above and didn't set a sufficient password
 * quality requirement prior to calling this method.
 */
",1,[@Deprecated],[@Deprecated],0,,,,0,0,0,0,0,"There is no change between the early and late implementation of the API, the comments have only been updated.",There is no Compatibility Issue (CI) as the behavior of the API has not changed between the two versions.
20,<android.inputmethodservice.IInputMethodWrapper: void executeMessage(Message)>,31,32,,,,"{
    InputMethod inputMethod = mInputMethod.get();
    // Need a valid reference to the inputMethod for everything except a dump.
    if (inputMethod == null && msg.what != DO_DUMP) {
        Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what);
        return;
    }
    switch(msg.what) {
        case DO_DUMP:
            {
                AbstractInputMethodService target = mTarget.get();
                if (target == null) {
                    return;
                }
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3);
                } catch (RuntimeException e) {
                    ((PrintWriter) args.arg2).println(""Exception: "" + e);
                }
                synchronized (args.arg4) {
                    ((CountDownLatch) args.arg4).countDown();
                }
                args.recycle();
                return;
            }
        case DO_INITIALIZE_INTERNAL:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    inputMethod.initializeInternal((IBinder) args.arg1, msg.arg1, (IInputMethodPrivilegedOperations) args.arg2, (int) args.arg3);
                } finally {
                    args.recycle();
                }
                return;
            }
        case DO_SET_INPUT_CONTEXT:
            {
                inputMethod.bindInput((InputBinding) msg.obj);
                return;
            }
        case DO_UNSET_INPUT_CONTEXT:
            inputMethod.unbindInput();
            return;
        case DO_START_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                final IBinder startInputToken = (IBinder) args.arg1;
                final IInputContext inputContext = (IInputContext) args.arg2;
                final EditorInfo info = (EditorInfo) args.arg3;
                final CancellationGroup cancellationGroup = (CancellationGroup) args.arg4;
                SomeArgs moreArgs = (SomeArgs) args.arg5;
                final InputConnection ic = inputContext != null ? new InputConnectionWrapper(mTarget, inputContext, moreArgs.argi3, cancellationGroup) : null;
                info.makeCompatible(mTargetSdkVersion);
                inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1 == 1, /* restarting */
                startInputToken);
                args.recycle();
                moreArgs.recycle();
                return;
            }
        case DO_CREATE_SESSION:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2));
                args.recycle();
                return;
            }
        case DO_SET_SESSION_ENABLED:
            inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 != 0);
            return;
        case DO_REVOKE_SESSION:
            inputMethod.revokeSession((InputMethodSession) msg.obj);
            return;
        case DO_SHOW_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_HIDE_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_CHANGE_INPUTMETHOD_SUBTYPE:
            inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj);
            return;
        case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:
            final SomeArgs args = (SomeArgs) msg.obj;
            inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2);
            args.recycle();
            return;
    }
    Log.w(TAG, ""Unhandled message code: "" + msg.what);
}","{
    InputMethod inputMethod = mInputMethod.get();
    // Need a valid reference to the inputMethod for everything except a dump.
    if (inputMethod == null && msg.what != DO_DUMP) {
        Log.w(TAG, ""Input method reference was null, ignoring message: "" + msg.what);
        return;
    }
    switch(msg.what) {
        case DO_DUMP:
            {
                AbstractInputMethodService target = mTarget.get();
                if (target == null) {
                    return;
                }
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    target.dump((FileDescriptor) args.arg1, (PrintWriter) args.arg2, (String[]) args.arg3);
                } catch (RuntimeException e) {
                    ((PrintWriter) args.arg2).println(""Exception: "" + e);
                }
                synchronized (args.arg4) {
                    ((CountDownLatch) args.arg4).countDown();
                }
                args.recycle();
                return;
            }
        case DO_INITIALIZE_INTERNAL:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                try {
                    inputMethod.initializeInternal((IBinder) args.arg1, (IInputMethodPrivilegedOperations) args.arg2, msg.arg1);
                } finally {
                    args.recycle();
                }
                return;
            }
        case DO_SET_INPUT_CONTEXT:
            {
                inputMethod.bindInput((InputBinding) msg.obj);
                return;
            }
        case DO_UNSET_INPUT_CONTEXT:
            inputMethod.unbindInput();
            return;
        case DO_START_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                final IBinder startInputToken = (IBinder) args.arg1;
                final IInputContext inputContext = (IInputContext) args.arg2;
                final EditorInfo info = (EditorInfo) args.arg3;
                final CancellationGroup cancellationGroup = (CancellationGroup) args.arg4;
                SomeArgs moreArgs = (SomeArgs) args.arg5;
                final InputConnection ic = inputContext != null ? new InputConnectionWrapper(mTarget, inputContext, moreArgs.argi3, cancellationGroup) : null;
                info.makeCompatible(mTargetSdkVersion);
                inputMethod.dispatchStartInputWithToken(ic, info, moreArgs.argi1 == 1, /* restarting */
                startInputToken);
                args.recycle();
                moreArgs.recycle();
                return;
            }
        case DO_CREATE_SESSION:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.createSession(new InputMethodSessionCallbackWrapper(mContext, (InputChannel) args.arg1, (IInputSessionCallback) args.arg2));
                args.recycle();
                return;
            }
        case DO_SET_SESSION_ENABLED:
            inputMethod.setSessionEnabled((InputMethodSession) msg.obj, msg.arg1 != 0);
            return;
        case DO_REVOKE_SESSION:
            inputMethod.revokeSession((InputMethodSession) msg.obj);
            return;
        case DO_SHOW_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.showSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_HIDE_SOFT_INPUT:
            {
                final SomeArgs args = (SomeArgs) msg.obj;
                inputMethod.hideSoftInputWithToken(msg.arg1, (ResultReceiver) args.arg2, (IBinder) args.arg1);
                args.recycle();
                return;
            }
        case DO_CHANGE_INPUTMETHOD_SUBTYPE:
            inputMethod.changeInputMethodSubtype((InputMethodSubtype) msg.obj);
            return;
        case DO_CREATE_INLINE_SUGGESTIONS_REQUEST:
            final SomeArgs args = (SomeArgs) msg.obj;
            inputMethod.onCreateInlineSuggestionsRequest((InlineSuggestionsRequestInfo) args.arg1, (IInlineSuggestionsRequestCallback) args.arg2);
            args.recycle();
            return;
    }
    Log.w(TAG, ""Unhandled message code: "" + msg.what);
}",1,,,0,"[@MainThread, @Override]","[@MainThread, @Override]",0,,,,2,5,0,5,1,"The code change between the two versions is in the implementation of the case `DO_INITIALIZE_INTERNAL`. In the early version, the method `inputMethod.initializeInternal((IBinder) args.arg1, msg.arg1, (IInputMethodPrivilegedOperations) args.arg2, (int) args.arg3);` is called, while in the late version, the method `inputMethod.initializeInternal((IBinder) args.arg1, (IInputMethodPrivilegedOperations) args.arg2, msg.arg1);` is called. The order and number of the parameters have changed, which is a dependent API change.","The Compatibility Issue is caused by the potential different return values or types. The change in the parameters of the `initializeInternal` method can potentially lead to different behavior of the method, which can result in different return values or types. Therefore, the Compatibility Issue type is 1."
21,<android.text.style.StyleSpan: void updateMeasureState(TextPaint)>,31,32,,,,"{
    apply(paint, mStyle);
}","{
    apply(paint, mStyle, mFontWeightAdjustment);
}",1,,,0,[@Override],[@Override],0,,,,2,5,0,5,1,"The method call ""apply(paint, mStyle)"" in the Early Version has been changed to ""apply(paint, mStyle, mFontWeightAdjustment)"" in the Late Version. This is a Dependent API change since the method signature of the dependent API ""apply(...)"" has been modified by adding a new parameter ""mFontWeightAdjustment"".","The Dependent API change in ""apply(...)"" method could potentially affect the measurement state of the text and eventually lead to different rendering of the text. Therefore, this is a Compatibility Issue caused by potential different return values or types (CI type 1)."
22,"<android.app.DisabledWallpaperManager: int setBitmap(Bitmap,Rect,boolean,int)>",31,32,,,,"{
    return unsupported();
}","{
    unsupported();
    return 0;
}",1,,,0,[@Override],[@Override],0,,,,1,"1,4",1,1,1,"The early version of the method returns the result of `unsupported()` method, while the late version of the method first calls the `unsupported()` method and then returns 0. This is a return statement change.","The change in the return statement can cause compatibility issues as the behavior of the method has been modified. In the early version, the method returns the result of `unsupported()` method, which may not always be 0. However, in the late version, the method always returns 0, regardless of the result of `unsupported()` method. This can lead to unexpected behavior in the applications that rely on the return value of this method."
23,"<android.view.View: boolean startDragAndDrop(ClipData,DragShadowBuilder,Object,int)>",31,32,,,,"{
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data="" + data + "" flags="" + flags);
    }
    if (mAttachInfo == null) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view."");
        return false;
    }
    if (!mAttachInfo.mViewRootImpl.mSurface.isValid()) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface."");
        return false;
    }
    if (data != null) {
        data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) != 0);
    }
    Point shadowSize = new Point();
    Point shadowTouchPoint = new Point();
    shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint);
    if ((shadowSize.x < 0) || (shadowSize.y < 0) || (shadowTouchPoint.x < 0) || (shadowTouchPoint.y < 0)) {
        throw new IllegalStateException(""Drag shadow dimensions must not be negative"");
    }
    // does not accept zero size surface.
    if (shadowSize.x == 0 || shadowSize.y == 0) {
        if (!sAcceptZeroSizeDragShadow) {
            throw new IllegalStateException(""Drag shadow dimensions must be positive"");
        }
        shadowSize.x = 1;
        shadowSize.y = 1;
    }
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""drag shadow: width="" + shadowSize.x + "" height="" + shadowSize.y + "" shadowX="" + shadowTouchPoint.x + "" shadowY="" + shadowTouchPoint.y);
    }
    final ViewRootImpl root = mAttachInfo.mViewRootImpl;
    final SurfaceSession session = new SurfaceSession();
    final SurfaceControl surfaceControl = new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build();
    final Surface surface = new Surface();
    surface.copyFrom(surfaceControl);
    IBinder token = null;
    try {
        final Canvas canvas = isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null);
        try {
            canvas.drawColor(0, PorterDuff.Mode.CLEAR);
            shadowBuilder.onDrawShadow(canvas);
        } finally {
            surface.unlockCanvasAndPost(canvas);
        }
        // repurpose 'shadowSize' for the last touch point
        root.getLastTouchPoint(shadowSize);
        token = mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), shadowSize.x, shadowSize.y, shadowTouchPoint.x, shadowTouchPoint.y, data);
        if (ViewDebug.DEBUG_DRAG) {
            Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token);
        }
        if (token != null) {
            if (mAttachInfo.mDragSurface != null) {
                mAttachInfo.mDragSurface.release();
            }
            mAttachInfo.mDragSurface = surface;
            mAttachInfo.mDragToken = token;
            // Cache the local state object for delivery with DragEvents
            root.setLocalDragState(myLocalState);
        }
        return token != null;
    } catch (Exception e) {
        Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e);
        return false;
    } finally {
        if (token == null) {
            surface.destroy();
        }
        session.kill();
    }
}","{
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""startDragAndDrop: data="" + data + "" flags="" + flags);
    }
    if (mAttachInfo == null) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called on a detached view."");
        return false;
    }
    if (!mAttachInfo.mViewRootImpl.mSurface.isValid()) {
        Log.w(VIEW_LOG_TAG, ""startDragAndDrop called with an invalid surface."");
        return false;
    }
    if (data != null) {
        data.prepareToLeaveProcess((flags & View.DRAG_FLAG_GLOBAL) != 0);
    }
    Rect bounds = new Rect();
    getBoundsOnScreen(bounds, true);
    Point lastTouchPoint = new Point();
    mAttachInfo.mViewRootImpl.getLastTouchPoint(lastTouchPoint);
    final ViewRootImpl root = mAttachInfo.mViewRootImpl;
    // Skip surface logic since shadows and animation are not required during the a11y drag
    final boolean a11yEnabled = AccessibilityManager.getInstance(mContext).isEnabled();
    if (a11yEnabled && (flags & View.DRAG_FLAG_ACCESSIBILITY_ACTION) != 0) {
        try {
            IBinder token = mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, null, mAttachInfo.mViewRootImpl.getLastTouchSource(), 0f, 0f, 0f, 0f, data);
            if (ViewDebug.DEBUG_DRAG) {
                Log.d(VIEW_LOG_TAG, ""startDragAndDrop via a11y action returned "" + token);
            }
            if (token != null) {
                root.setLocalDragState(myLocalState);
                mAttachInfo.mDragToken = token;
                mAttachInfo.mViewRootImpl.setDragStartedViewForAccessibility(this);
                setAccessibilityDragStarted(true);
            }
            return token != null;
        } catch (Exception e) {
            Log.e(VIEW_LOG_TAG, ""Unable to initiate a11y drag"", e);
            return false;
        }
    }
    Point shadowSize = new Point();
    Point shadowTouchPoint = new Point();
    shadowBuilder.onProvideShadowMetrics(shadowSize, shadowTouchPoint);
    if ((shadowSize.x < 0) || (shadowSize.y < 0) || (shadowTouchPoint.x < 0) || (shadowTouchPoint.y < 0)) {
        throw new IllegalStateException(""Drag shadow dimensions must not be negative"");
    }
    // does not accept zero size surface.
    if (shadowSize.x == 0 || shadowSize.y == 0) {
        if (!sAcceptZeroSizeDragShadow) {
            throw new IllegalStateException(""Drag shadow dimensions must be positive"");
        }
        shadowSize.x = 1;
        shadowSize.y = 1;
    }
    if (ViewDebug.DEBUG_DRAG) {
        Log.d(VIEW_LOG_TAG, ""drag shadow: width="" + shadowSize.x + "" height="" + shadowSize.y + "" shadowX="" + shadowTouchPoint.x + "" shadowY="" + shadowTouchPoint.y);
    }
    final SurfaceSession session = new SurfaceSession();
    final SurfaceControl surfaceControl = new SurfaceControl.Builder(session).setName(""drag surface"").setParent(root.getSurfaceControl()).setBufferSize(shadowSize.x, shadowSize.y).setFormat(PixelFormat.TRANSLUCENT).setCallsite(""View.startDragAndDrop"").build();
    final Surface surface = new Surface();
    surface.copyFrom(surfaceControl);
    IBinder token = null;
    try {
        final Canvas canvas = isHardwareAccelerated() ? surface.lockHardwareCanvas() : surface.lockCanvas(null);
        try {
            canvas.drawColor(0, PorterDuff.Mode.CLEAR);
            shadowBuilder.onDrawShadow(canvas);
        } finally {
            surface.unlockCanvasAndPost(canvas);
        }
        token = mAttachInfo.mSession.performDrag(mAttachInfo.mWindow, flags, surfaceControl, root.getLastTouchSource(), lastTouchPoint.x, lastTouchPoint.y, shadowTouchPoint.x, shadowTouchPoint.y, data);
        if (ViewDebug.DEBUG_DRAG) {
            Log.d(VIEW_LOG_TAG, ""performDrag returned "" + token);
        }
        if (token != null) {
            if (mAttachInfo.mDragSurface != null) {
                mAttachInfo.mDragSurface.release();
            }
            mAttachInfo.mDragSurface = surface;
            mAttachInfo.mDragToken = token;
            // Cache the local state object for delivery with DragEvents
            root.setLocalDragState(myLocalState);
            if (a11yEnabled) {
                // Set for AccessibilityEvents
                mAttachInfo.mViewRootImpl.setDragStartedViewForAccessibility(this);
            }
        }
        return token != null;
    } catch (Exception e) {
        Log.e(VIEW_LOG_TAG, ""Unable to initiate drag"", e);
        return false;
    } finally {
        if (token == null) {
            surface.destroy();
        }
        session.kill();
    }
}",1,"/**
 * Starts a drag and drop operation. When your application calls this method, it passes a
 * {@link android.view.View.DragShadowBuilder} object to the system. The
 * system calls this object's {@link DragShadowBuilder#onProvideShadowMetrics(Point, Point)}
 * to get metrics for the drag shadow, and then calls the object's
 * {@link DragShadowBuilder#onDrawShadow(Canvas)} to draw the drag shadow itself.
 * <p>
 * Once the system has the drag shadow, it begins the drag and drop operation by sending
 * drag events to all the View objects in your application that are currently visible. It does
 * this either by calling the View object's drag listener (an implementation of
 * {@link android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag()} or by calling the
 * View object's {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} method.
 * Both are passed a {@link android.view.DragEvent} object that has a
 * {@link android.view.DragEvent#getAction()} value of
 * {@link android.view.DragEvent#ACTION_DRAG_STARTED}.
 * </p>
 * <p>
 * Your application can invoke {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object,
 * int) startDragAndDrop()} on any attached View object. The View object does not need to be
 * the one used in {@link android.view.View.DragShadowBuilder}, nor does it need to be related
 * to the View the user selected for dragging.
 * </p>
 * @param data A {@link android.content.ClipData} object pointing to the data to be
 * transferred by the drag and drop operation.
 * @param shadowBuilder A {@link android.view.View.DragShadowBuilder} object for building the
 * drag shadow.
 * @param myLocalState An {@link java.lang.Object} containing local data about the drag and
 * drop operation. When dispatching drag events to views in the same activity this object
 * will be available through {@link android.view.DragEvent#getLocalState()}. Views in other
 * activities will not have access to this data ({@link android.view.DragEvent#getLocalState()}
 * will return null).
 * <p>
 * myLocalState is a lightweight mechanism for the sending information from the dragged View
 * to the target Views. For example, it can contain flags that differentiate between a
 * a copy operation and a move operation.
 * </p>
 * @param flags Flags that control the drag and drop operation. This can be set to 0 for no
 * flags, or any combination of the following:
 * <ul>
 * <li>{@link #DRAG_FLAG_GLOBAL}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_READ}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_WRITE}</li>
 * <li>{@link #DRAG_FLAG_OPAQUE}</li>
 * </ul>
 * @return {@code true} if the method completes successfully, or
 * {@code false} if it fails anywhere. Returning {@code false} means the system was unable to
 * do a drag because of another ongoing operation or some other reasons.
 */
","/**
 * Starts a drag and drop operation. When your application calls this method, it passes a
 * {@link android.view.View.DragShadowBuilder} object to the system. The
 * system calls this object's {@link DragShadowBuilder#onProvideShadowMetrics(Point, Point)}
 * to get metrics for the drag shadow, and then calls the object's
 * {@link DragShadowBuilder#onDrawShadow(Canvas)} to draw the drag shadow itself.
 * <p>
 * Once the system has the drag shadow, it begins the drag and drop operation by sending
 * drag events to all the View objects in your application that are currently visible. It does
 * this either by calling the View object's drag listener (an implementation of
 * {@link android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag()} or by calling the
 * View object's {@link android.view.View#onDragEvent(DragEvent) onDragEvent()} method.
 * Both are passed a {@link android.view.DragEvent} object that has a
 * {@link android.view.DragEvent#getAction()} value of
 * {@link android.view.DragEvent#ACTION_DRAG_STARTED}.
 * </p>
 * <p>
 * Your application can invoke {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object,
 * int) startDragAndDrop()} on any attached View object. The View object does not need to be
 * the one used in {@link android.view.View.DragShadowBuilder}, nor does it need to be related
 * to the View the user selected for dragging.
 * </p>
 * @param data A {@link android.content.ClipData} object pointing to the data to be
 * transferred by the drag and drop operation.
 * @param shadowBuilder A {@link android.view.View.DragShadowBuilder} object for building the
 * drag shadow.
 * @param myLocalState An {@link java.lang.Object} containing local data about the drag and
 * drop operation. When dispatching drag events to views in the same activity this object
 * will be available through {@link android.view.DragEvent#getLocalState()}. Views in other
 * activities will not have access to this data ({@link android.view.DragEvent#getLocalState()}
 * will return null).
 * <p>
 * myLocalState is a lightweight mechanism for the sending information from the dragged View
 * to the target Views. For example, it can contain flags that differentiate between a
 * a copy operation and a move operation.
 * </p>
 * @param flags Flags that control the drag and drop operation. This can be set to 0 for no
 * flags, or any combination of the following:
 * <ul>
 * <li>{@link #DRAG_FLAG_GLOBAL}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_READ}</li>
 * <li>{@link #DRAG_FLAG_GLOBAL_URI_WRITE}</li>
 * <li>{@link #DRAG_FLAG_OPAQUE}</li>
 * <li>{@link #DRAG_FLAG_ACCESSIBILITY_ACTION}</li>
 * </ul>
 * @return {@code true} if the method completes successfully, or
 * {@code false} if it fails anywhere. Returning {@code false} means the system was unable to
 * do a drag because of another ongoing operation or some other reasons.
 */
",1,,,0,,,,"1,2","1,2,3,4,5","1,2","3, 5","1, 2","The code change between the two versions involves control dependency changes and other statement changes. Specifically, the late version introduced a new if-statement block to check whether the accessibility service is enabled and whether the DRAG\_FLAG\_ACCESSIBILITY\_ACTION flag is set. If the conditions are met, the late version performs a drag and drop operation with a null surface control, which is different from the early version. Also, the late version added new statements to set the drag started view for accessibility and the accessibility drag started status.","The Compatibility Issues (CI) in this code change can be caused by potential different return values/types and exception handlings. For the return values/types, the late version may return a different value for the token variable in the case where the accessibility service is enabled and the DRAG\_FLAG\_ACCESSIBILITY\_ACTION flag is set, which can lead to unexpected behavior in the calling code. For the exception handlings, the late version may throw a different exception in the same case, which can also cause compatibility issues. Therefore, both CI types (1 and 2) are possible in this code change."
24,"<android.content.Context: int[] checkUriPermissions(List<Uri>,int,int,int)>",31,32,,,,"{
    throw new RuntimeException(""Not implemented. Must override in a subclass."");
}","{
    throw new RuntimeException(""Not implemented. Must override in a subclass."");
}",0,"/**
 * Determine whether a particular process and user ID has been granted
 * permission to access a list of URIs.  This only checks for permissions
 * that have been explicitly granted -- if the given process/uid has
 * more general access to the URI's content provider then this check will
 * always fail.
 *
 * @param uris The list of URIs that is being checked.
 * @param pid The process ID being checked against.  Must be &gt; 0.
 * @param uid The user ID being checked against.  A uid of 0 is the root
 * user, which will pass every permission check.
 * @param modeFlags The access modes to check for the list of uris
 *
 * @return Array of permission grants corresponding to each entry in the list of uris.
 * {@link PackageManager#PERMISSION_GRANTED} if the given pid/uid is allowed to access that uri,
 * or {@link PackageManager#PERMISSION_DENIED} if it is not.
 *
 * @see #checkCallingUriPermission
 */
","/**
 * Determine whether a particular process and user ID has been granted
 * permission to access a list of URIs.  This only checks for permissions
 * that have been explicitly granted -- if the given process/uid has
 * more general access to the URI's content provider then this check will
 * always fail.
 *
 * <strong>Note:</strong> On SDK Version {@link android.os.Build.VERSION_CODES#S},
 * calling this method from a secondary-user's context will incorrectly return
 * {@link PackageManager#PERMISSION_DENIED} for all {code uris}.
 *
 * @param uris The list of URIs that is being checked.
 * @param pid The process ID being checked against.  Must be &gt; 0.
 * @param uid The user ID being checked against.  A uid of 0 is the root
 * user, which will pass every permission check.
 * @param modeFlags The access modes to check for the list of uris
 *
 * @return Array of permission grants corresponding to each entry in the list of uris.
 * {@link PackageManager#PERMISSION_GRANTED} if the given pid/uid is allowed to access that uri,
 * or {@link PackageManager#PERMISSION_DENIED} if it is not.
 *
 * @see #checkCallingUriPermission
 */
",1,"[@NonNull, @PackageManager.PermissionResult]","[@NonNull, @PackageManager.PermissionResult]",0,,,,0,0,0,0,0,There is no change in the implementation and annotation of the API.,There is no Compatibility Issue as there is no change in the implementation and annotation of the API.
25,<android.content.res.TypedArray: ColorStateList getColorStateList(int)>,32,33,,,,"{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    final TypedValue value = mValue;
    if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {
        if (value.type == TypedValue.TYPE_ATTRIBUTE) {
            throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value);
        }
        return mResources.loadColorStateList(value, value.resourceId, mTheme);
    }
    return null;
}","{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    final TypedValue value = mValue;
    if (getValueAt(index * STYLE_NUM_ENTRIES, value)) {
        if (value.type == TypedValue.TYPE_ATTRIBUTE) {
            throw new UnsupportedOperationException(""Failed to resolve attribute at index "" + index + "": "" + value + "", theme="" + mTheme);
        }
        return mResources.loadColorStateList(value, value.resourceId, mTheme);
    }
    return null;
}",1,"/**
 * Retrieve the ColorStateList for the attribute at <var>index</var>.
 * The value may be either a single solid color or a reference to
 * a color or complex {@link android.content.res.ColorStateList}
 * description.
 * <p>
 * This method will return {@code null} if the attribute is not defined or
 * is not an integer color or color state list.
 *
 * @param index Index of attribute to retrieve.
 *
 * @return ColorStateList for the attribute, or {@code null} if not
 * defined.
 * @throws RuntimeException if the attribute if the TypedArray has already
 * been recycled.
 * @throws UnsupportedOperationException if the attribute is defined but is
 * not an integer color or color state list.
 */
","/**
 * Retrieve the ColorStateList for the attribute at <var>index</var>.
 * The value may be either a single solid color or a reference to
 * a color or complex {@link android.content.res.ColorStateList}
 * description.
 * <p>
 * This method will return {@code null} if the attribute is not defined or
 * is not an integer color or color state list.
 *
 * @param index Index of attribute to retrieve.
 *
 * @return ColorStateList for the attribute, or {@code null} if not
 * defined.
 * @throws RuntimeException if the attribute if the TypedArray has already
 * been recycled.
 * @throws UnsupportedOperationException if the attribute is defined but is
 * not an integer color or color state list.
 */
",0,[@Nullable],[@Nullable],0,,,,2,5,0,2,2,The exception handling statement in the if-branch has been updated with the addition of a new string concatenation "theme=" + mTheme. This change affects the message that is displayed when the UnsupportedOperationException is thrown.,"The Compatibility Issue (CI) in this case arises due to the potential for different exception handling behavior between the two versions of the API. The updated message in the UnsupportedOperationException may cause confusion for developers who are expecting the original message, or it may not provide sufficient information for debugging purposes in certain cases. Additionally, any code that is parsing the exception message for specific information may break due to the added string concatenation. Therefore, the CI type is 2."
26,<android.app.admin.DevicePolicyManager: int logoutUser(ComponentName)>,32,33,,,,"{
    throwIfParentInstance(""logoutUser"");
    try {
        return mService.logoutUser(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""logoutUser"");
    try {
        return mService.logoutUser(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",0,"/**
 * Called by a profile owner of secondary user that is affiliated with the device to stop the
 * calling user and switch back to primary user.
 *
 * <p>Notice that on devices running with
 * {@link UserManager#isHeadlessSystemUserMode() headless system user mode}, there is no primary
 * user, so it switches back to the user that was in the foreground before the first call to
 * {@link #switchUser(ComponentName, UserHandle)} (or fails with
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN} if that method was not called prior to this
 * call).
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return one of the following result codes:
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN},
 * {@link UserManager#USER_OPERATION_SUCCESS},
 * {@link UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE},
 * {@link UserManager#USER_OPERATION_ERROR_CURRENT_USER}
 * @throws SecurityException if {@code admin} is not a profile owner affiliated with the device.
 * @see #getSecondaryUsers(ComponentName)
 */
","/**
 * Called by a profile owner of secondary user that is affiliated with the device to stop the
 * calling user and switch back to primary user (when the user was
 * {@link #switchUser(ComponentName, UserHandle)} switched to) or stop the user (when it was
 * {@link #startUserInBackground(ComponentName, UserHandle) started in background}.
 *
 * <p>Notice that on devices running with
 * {@link UserManager#isHeadlessSystemUserMode() headless system user mode}, there is no primary
 * user, so it switches back to the user that was in the foreground before the first call to
 * {@link #switchUser(ComponentName, UserHandle)} (or fails with
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN} if that method was not called prior to this
 * call).
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return one of the following result codes:
 * {@link UserManager#USER_OPERATION_ERROR_UNKNOWN},
 * {@link UserManager#USER_OPERATION_SUCCESS},
 * {@link UserManager#USER_OPERATION_ERROR_MANAGED_PROFILE},
 * {@link UserManager#USER_OPERATION_ERROR_CURRENT_USER}
 * @throws SecurityException if {@code admin} is not a profile owner affiliated with the device.
 * @see #getSecondaryUsers(ComponentName)
 */
",1,[@UserOperationResult],[@UserOperationResult],0,,,,0,0,0,0,0,There is no change in the implementation and annotation of the API.,There is no compatibility issue for the API.
27,"<android.view.contentcapture.DataRemovalRequest.Builder: Builder addLocusId(LocusId,int)>",32,33,,,,"{
    throwIfDestroyed();
    Preconditions.checkState(!mForEverything, ""Already is for everything"");
    Preconditions.checkNotNull(locusId);
    if (mLocusIds == null) {
        mLocusIds = new ArrayList<>();
        mFlags = new IntArray();
    }
    mLocusIds.add(locusId);
    mFlags.add(flags);
    return this;
}","{
    throwIfDestroyed();
    Preconditions.checkState(!mForEverything, ""Already is for everything"");
    Objects.requireNonNull(locusId);
    if (mLocusIds == null) {
        mLocusIds = new ArrayList<>();
        mFlags = new IntArray();
    }
    mLocusIds.add(locusId);
    mFlags.add(flags);
    return this;
}",1,"/**
 * Request service to remove data associated with a given {@link LocusId}.
 *
 * @param locusId the {@link LocusId} being requested to be removed.
 * @param flags either {@link DataRemovalRequest#FLAG_IS_PREFIX} or {@code 0}
 *
 * @return this builder
 */
","/**
 * Request service to remove data associated with a given {@link LocusId}.
 *
 * @param locusId the {@link LocusId} being requested to be removed.
 * @param flags either {@link DataRemovalRequest#FLAG_IS_PREFIX} or {@code 0}
 *
 * @return this builder
 */
",0,[@NonNull],[@NonNull],0,,,,2,5,0,4,0,"The Early_Implementation uses Preconditions.checkNotNull(locusId) while the Late_Implementation uses Objects.requireNonNull(locusId) to check if the locusId parameter is not null. However, both methods have the same functionality and do not affect the overall behavior of the API. Therefore, the change is classified as '4) Other statement changed'.","The change in the implementation from Preconditions.checkNotNull(locusId) to Objects.requireNonNull(locusId) does not affect the behavior of the API. Both methods have the same functionality of checking if the locusId parameter is not null. Therefore, no Compatibility Issue exists for the API."
28,"<android.text.BoringLayout: BoringLayout replaceOrMake(CharSequence,TextPaint,int,Alignment,float,float,Metrics,boolean,TruncateAt,int)>",32,33,,,,"{
    boolean trust;
    if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {
        replaceWith(source, paint, outerWidth, align, spacingMult, spacingAdd);
        mEllipsizedWidth = outerWidth;
        mEllipsizedStart = 0;
        mEllipsizedCount = 0;
        trust = true;
    } else {
        replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth, ellipsize, true, this), paint, outerWidth, align, spacingMult, spacingAdd);
        mEllipsizedWidth = ellipsizedWidth;
        trust = false;
    }
    init(getText(), paint, align, metrics, includePad, trust);
    return this;
}","{
    return replaceOrMake(source, paint, outerWidth, align, metrics, includePad, ellipsize, ellipsizedWidth, false);
}",1,"/**
 * Returns a BoringLayout for the specified text, potentially reusing
 * this one if it is already suitable.  The caller must make sure that
 * no one is still using this Layout.
 *
 * @param source the text to render
 * @param paint the default paint for the layout
 * @param outerWidth the wrapping width for the text
 * @param align whether to left, right, or center the text
 * @param spacingMult this value is no longer used by BoringLayout
 * @param spacingAdd this value is no longer used by BoringLayout
 * @param metrics {@code #Metrics} instance that contains information about FontMetrics and
 * line width
 * @param includePad set whether to include extra space beyond font ascent and descent which is
 * needed to avoid clipping in some scripts
 * @param ellipsize whether to ellipsize the text if width of the text is longer than the
 * requested width
 * @param ellipsizedWidth the width to which this Layout is ellipsizing. If {@code ellipsize} is
 * {@code null}, or is {@link TextUtils.TruncateAt#MARQUEE} this value is
 * not used, {@code outerwidth} is used instead
 */
","/**
 * Returns a BoringLayout for the specified text, potentially reusing
 * this one if it is already suitable.  The caller must make sure that
 * no one is still using this Layout.
 *
 * @param source the text to render
 * @param paint the default paint for the layout
 * @param outerWidth the wrapping width for the text
 * @param align whether to left, right, or center the text
 * @param spacingMult this value is no longer used by BoringLayout
 * @param spacingAdd this value is no longer used by BoringLayout
 * @param metrics {@code #Metrics} instance that contains information about FontMetrics and
 * line width
 * @param includePad set whether to include extra space beyond font ascent and descent which is
 * needed to avoid clipping in some scripts
 * @param ellipsize whether to ellipsize the text if width of the text is longer than the
 * requested width
 * @param ellipsizedWidth the width to which this Layout is ellipsizing. If {@code ellipsize} is
 * {@code null}, or is {@link TextUtils.TruncateAt#MARQUEE} this value is
 * not used, {@code outerWidth} is used instead
 */
",1,,,0,,,,"1,2","1,3,4,5",1,5,1,"The implementation of the method has been completely changed. In the early version, the method contains an `if-else` statement and two `replaceWith()` method calls, while in the late version, the method only contains one `replaceOrMake()` method call.","The change in the implementation of the method could potentially lead to different behaviors. The `replaceWith()` method and the `replaceOrMake()` method could have different logic and produce different results, which could cause compatibility issues if the app is relying on the specific behavior of the early version."
29,<android.service.dreams.DreamService: boolean isFullscreen()>,32,33,,,,"{
    return mFullscreen;
}","{
    return mFullscreen;
}",0,"/**
 * Returns whether or not this dream is in fullscreen mode. Defaults to false.
 *
 * @see #setFullscreen(boolean)
 */
","/**
 * Returns whether this dream is in fullscreen mode. Defaults to false.
 *
 * @see #setFullscreen(boolean)
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the API between the two versions.,There is no compatibility issue as the implementation of the API has not changed between the two versions.
30,<android.os.Binder: void joinThreadPool()>,32,33,,,,"{
    BinderInternal.joinThreadPool();
}","{
    BinderInternal.joinThreadPool();
}",0,"/**
 * Add the calling thread to the IPC thread pool.  This function does
 * not return until the current process is exiting.
 */
","/**
 * Add the calling thread to the IPC thread pool. This function does
 * not return until the current process is exiting.
 */
",1,,,0,,,,0,0,0,0,0,"The implementation, comment and annotation of the API did not change between the two versions, so the code change type is 0.","As the implementation did not change, the API will behave the same in the two versions, so there is no Compatibility Issue."
31,<android.view.ViewRootImpl.NativePreImeInputStage: int onProcess(QueuedInputEvent)>,32,33,,,,"{
    if (mInputQueue != null && q.mEvent instanceof KeyEvent) {
        mInputQueue.sendInputEvent(q.mEvent, q, true, this);
        return DEFER;
    }
    return FORWARD;
}","{
    if (q.mEvent instanceof KeyEvent) {
        final KeyEvent event = (KeyEvent) q.mEvent;
        // view tree or IME, and invoke the appropriate {@link OnBackInvokedCallback}.
        if (isBack(event) && mContext != null && WindowOnBackInvokedDispatcher.isOnBackInvokedCallbackEnabled(mContext)) {
            OnBackInvokedCallback topCallback = getOnBackInvokedDispatcher().getTopCallback();
            if (event.getAction() == KeyEvent.ACTION_UP) {
                if (topCallback != null) {
                    topCallback.onBackInvoked();
                    return FINISH_HANDLED;
                }
            } else {
                // Drop other actions such as {@link KeyEvent.ACTION_DOWN}.
                return FINISH_NOT_HANDLED;
            }
        }
    }
    if (mInputQueue != null && q.mEvent instanceof KeyEvent) {
        mInputQueue.sendInputEvent(q.mEvent, q, true, this);
        return DEFER;
    }
    return FORWARD;
}",1,,,0,[@Override],[@Override],0,,,,"1,2","1,3,4,5",1,"1, 2, 3","1, 2","The implementation of the API has changed significantly between the two versions. In the early version, the API returns FORWARD if the input queue is null or the event is not an instance of KeyEvent. In the late version, the API has an additional check for the KeyEvent to see if it is a back event and if there is a registered OnBackInvokedCallback. If the event is a back event and there is a registered callback, the API invokes the callback and returns FINISH\_HANDLED. If the event is a back event but there is no registered callback, the API returns FINISH\_NOT\_HANDLED. These changes can be classified as return statement changed (1), exception handling statement changed (2), and control dependency changed (3).","The changes in the implementation of the API can lead to compatibility issues for the clients of the API. In particular, the changes in the return values of the API can cause the clients to behave differently. For example, if a client is expecting the API to return FORWARD for a particular event and the API returns FINISH\_HANDLED or FINISH\_NOT\_HANDLED instead, the client may not handle the event correctly. Similarly, if the API throws an exception in the late version but not in the early version, the clients may not be prepared to handle the exception. These compatibility issues can be classified as compatibility issue caused by potential different return values or types (1), and compatibility issue caused by potential different exception handlings (2)."
32,"<android.view.translation.UiTranslationManager: void registerUiTranslationStateCallback(Executor,UiTranslationStateCallback)>",32,33,,,,"{
    Objects.requireNonNull(executor);
    Objects.requireNonNull(callback);
    synchronized (mCallbacks) {
        if (mCallbacks.containsKey(callback)) {
            Log.w(TAG, ""registerUiTranslationStateCallback: callback already registered;"" + "" ignoring."");
            return;
        }
        final IRemoteCallback remoteCallback = new UiTranslationStateRemoteCallback(executor, callback);
        try {
            mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        mCallbacks.put(callback, remoteCallback);
    }
}","{
    Objects.requireNonNull(executor);
    Objects.requireNonNull(callback);
    synchronized (mCallbacks) {
        if (mCallbacks.containsKey(callback)) {
            Log.w(TAG, ""registerUiTranslationStateCallback: callback already registered;"" + "" ignoring."");
            return;
        }
        final IRemoteCallback remoteCallback = new UiTranslationStateRemoteCallback(executor, callback);
        try {
            mService.registerUiTranslationStateCallback(remoteCallback, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        mCallbacks.put(callback, remoteCallback);
    }
}",0,"/**
 * Register for notifications of UI Translation state changes on the foreground activity. This
 * is available to the owning application itself and also the current input method.
 * <p>
 * The application whose UI is being translated can use this to customize the UI Translation
 * behavior in ways that aren't made easy by methods like
 * {@link View#onCreateViewTranslationRequest(int[], Consumer)}.
 *
 * <p>
 * Input methods can use this to offer complementary features to UI Translation; for example,
 * enabling outgoing message translation when the system is translating incoming messages in a
 * communication app.
 *
 * @param callback the callback to register for receiving the state change
 * notifications
 */
","/**
 * Register for notifications of UI Translation state changes on the foreground Activity. This
 * is available to the owning application itself and also the current input method.
 * <p>
 * The application whose UI is being translated can use this to customize the UI Translation
 * behavior in ways that aren't made easy by methods like
 * {@link View#onCreateViewTranslationRequest(int[], Consumer)}.
 * <p>
 * Input methods can use this to offer complementary features to UI Translation; for example,
 * enabling outgoing message translation when the system is translating incoming messages in a
 * communication app.
 * <p>
 * Starting from {@link android.os.Build.VERSION_CODES#TIRAMISU}, if Activities are already
 * being translated when a callback is registered, methods on the callback will be invoked for
 * each translated activity, depending on the state of translation:
 * <ul>
 * <li>If translation is <em>not</em> paused,
 * {@link UiTranslationStateCallback#onStarted} will be invoked.</li>
 * <li>If translation <em>is</em> paused, {@link UiTranslationStateCallback#onStarted}
 * will first be invoked, followed by {@link UiTranslationStateCallback#onPaused}.</li>
 * </ul>
 *
 * @param callback the callback to register for receiving the state change
 * notifications
 */
",1,,,0,,,,0,0,0,0,0,There is no change between the early version and the late version implementation of the API.,There is no Compatibility Issue (CI) as there is no change in the implementation of the API.
33,<android.view.ViewRootImpl.ViewRootHandler: String getMessageName(Message)>,32,33,,,,"{
    switch(message.what) {
        case MSG_INVALIDATE:
            return ""MSG_INVALIDATE"";
        case MSG_INVALIDATE_RECT:
            return ""MSG_INVALIDATE_RECT"";
        case MSG_DIE:
            return ""MSG_DIE"";
        case MSG_RESIZED:
            return ""MSG_RESIZED"";
        case MSG_RESIZED_REPORT:
            return ""MSG_RESIZED_REPORT"";
        case MSG_WINDOW_FOCUS_CHANGED:
            return ""MSG_WINDOW_FOCUS_CHANGED"";
        case MSG_DISPATCH_INPUT_EVENT:
            return ""MSG_DISPATCH_INPUT_EVENT"";
        case MSG_DISPATCH_APP_VISIBILITY:
            return ""MSG_DISPATCH_APP_VISIBILITY"";
        case MSG_DISPATCH_GET_NEW_SURFACE:
            return ""MSG_DISPATCH_GET_NEW_SURFACE"";
        case MSG_DISPATCH_KEY_FROM_IME:
            return ""MSG_DISPATCH_KEY_FROM_IME"";
        case MSG_DISPATCH_KEY_FROM_AUTOFILL:
            return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"";
        case MSG_CHECK_FOCUS:
            return ""MSG_CHECK_FOCUS"";
        case MSG_CLOSE_SYSTEM_DIALOGS:
            return ""MSG_CLOSE_SYSTEM_DIALOGS"";
        case MSG_DISPATCH_DRAG_EVENT:
            return ""MSG_DISPATCH_DRAG_EVENT"";
        case MSG_DISPATCH_DRAG_LOCATION_EVENT:
            return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"";
        case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:
            return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"";
        case MSG_UPDATE_CONFIGURATION:
            return ""MSG_UPDATE_CONFIGURATION"";
        case MSG_PROCESS_INPUT_EVENTS:
            return ""MSG_PROCESS_INPUT_EVENTS"";
        case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:
            return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"";
        case MSG_WINDOW_MOVED:
            return ""MSG_WINDOW_MOVED"";
        case MSG_SYNTHESIZE_INPUT_EVENT:
            return ""MSG_SYNTHESIZE_INPUT_EVENT"";
        case MSG_DISPATCH_WINDOW_SHOWN:
            return ""MSG_DISPATCH_WINDOW_SHOWN"";
        case MSG_UPDATE_POINTER_ICON:
            return ""MSG_UPDATE_POINTER_ICON"";
        case MSG_POINTER_CAPTURE_CHANGED:
            return ""MSG_POINTER_CAPTURE_CHANGED"";
        case MSG_DRAW_FINISHED:
            return ""MSG_DRAW_FINISHED"";
        case MSG_INSETS_CHANGED:
            return ""MSG_INSETS_CHANGED"";
        case MSG_INSETS_CONTROL_CHANGED:
            return ""MSG_INSETS_CONTROL_CHANGED"";
        case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:
            return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"";
        case MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED:
            return ""MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED"";
        case MSG_SHOW_INSETS:
            return ""MSG_SHOW_INSETS"";
        case MSG_HIDE_INSETS:
            return ""MSG_HIDE_INSETS"";
    }
    return super.getMessageName(message);
}","{
    switch(message.what) {
        case MSG_INVALIDATE:
            return ""MSG_INVALIDATE"";
        case MSG_INVALIDATE_RECT:
            return ""MSG_INVALIDATE_RECT"";
        case MSG_DIE:
            return ""MSG_DIE"";
        case MSG_RESIZED:
            return ""MSG_RESIZED"";
        case MSG_RESIZED_REPORT:
            return ""MSG_RESIZED_REPORT"";
        case MSG_WINDOW_FOCUS_CHANGED:
            return ""MSG_WINDOW_FOCUS_CHANGED"";
        case MSG_DISPATCH_INPUT_EVENT:
            return ""MSG_DISPATCH_INPUT_EVENT"";
        case MSG_DISPATCH_APP_VISIBILITY:
            return ""MSG_DISPATCH_APP_VISIBILITY"";
        case MSG_DISPATCH_GET_NEW_SURFACE:
            return ""MSG_DISPATCH_GET_NEW_SURFACE"";
        case MSG_DISPATCH_KEY_FROM_IME:
            return ""MSG_DISPATCH_KEY_FROM_IME"";
        case MSG_DISPATCH_KEY_FROM_AUTOFILL:
            return ""MSG_DISPATCH_KEY_FROM_AUTOFILL"";
        case MSG_CHECK_FOCUS:
            return ""MSG_CHECK_FOCUS"";
        case MSG_CLOSE_SYSTEM_DIALOGS:
            return ""MSG_CLOSE_SYSTEM_DIALOGS"";
        case MSG_DISPATCH_DRAG_EVENT:
            return ""MSG_DISPATCH_DRAG_EVENT"";
        case MSG_DISPATCH_DRAG_LOCATION_EVENT:
            return ""MSG_DISPATCH_DRAG_LOCATION_EVENT"";
        case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:
            return ""MSG_DISPATCH_SYSTEM_UI_VISIBILITY"";
        case MSG_UPDATE_CONFIGURATION:
            return ""MSG_UPDATE_CONFIGURATION"";
        case MSG_PROCESS_INPUT_EVENTS:
            return ""MSG_PROCESS_INPUT_EVENTS"";
        case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:
            return ""MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST"";
        case MSG_WINDOW_MOVED:
            return ""MSG_WINDOW_MOVED"";
        case MSG_SYNTHESIZE_INPUT_EVENT:
            return ""MSG_SYNTHESIZE_INPUT_EVENT"";
        case MSG_DISPATCH_WINDOW_SHOWN:
            return ""MSG_DISPATCH_WINDOW_SHOWN"";
        case MSG_UPDATE_POINTER_ICON:
            return ""MSG_UPDATE_POINTER_ICON"";
        case MSG_POINTER_CAPTURE_CHANGED:
            return ""MSG_POINTER_CAPTURE_CHANGED"";
        case MSG_INSETS_CONTROL_CHANGED:
            return ""MSG_INSETS_CONTROL_CHANGED"";
        case MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED:
            return ""MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED"";
        case MSG_SHOW_INSETS:
            return ""MSG_SHOW_INSETS"";
        case MSG_HIDE_INSETS:
            return ""MSG_HIDE_INSETS"";
        case MSG_WINDOW_TOUCH_MODE_CHANGED:
            return ""MSG_WINDOW_TOUCH_MODE_CHANGED"";
        case MSG_KEEP_CLEAR_RECTS_CHANGED:
            return ""MSG_KEEP_CLEAR_RECTS_CHANGED"";
    }
    return super.getMessageName(message);
}",1,,,0,[@Override],[@Override],0,,,,1,"1,3",1,"2,5",1,"Two new cases are added in the switch statement, and the API can potentially return a different string value if the message.what is equal to the two new case values.",The API can potentially return a different string value in the late version if the message.what is equal to the two new case values. The difference in return value can lead to compatibility issues if the string value is used for further processing in the application.
34,<android.view.autofill.AutofillManager.TrackedViews: void onVisibleForAutofillChangedLocked()>,32,33,,,,"{
    // The visibility of the views might have changed while the client was not be visible,
    // hence update the visibility state for all views.
    AutofillClient client = getClient();
    ArraySet<AutofillId> updatedVisibleTrackedIds = null;
    ArraySet<AutofillId> updatedInvisibleTrackedIds = null;
    if (client != null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv= "" + mInvisibleTrackedIds + "" vis="" + mVisibleTrackedIds);
        }
        if (mInvisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedInvisibleIds = new ArrayList<>(mInvisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds));
            final int numInvisibleTrackedIds = orderedInvisibleIds.size();
            for (int i = 0; i < numInvisibleTrackedIds; i++) {
                final AutofillId id = orderedInvisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible"");
                    }
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                }
            }
        }
        if (mVisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedVisibleIds = new ArrayList<>(mVisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds));
            final int numVisibleTrackedIds = orderedVisibleIds.size();
            for (int i = 0; i < numVisibleTrackedIds; i++) {
                final AutofillId id = orderedVisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible"");
                    }
                }
            }
        }
        mInvisibleTrackedIds = updatedInvisibleTrackedIds;
        mVisibleTrackedIds = updatedVisibleTrackedIds;
    }
    if (mVisibleTrackedIds == null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids"");
        }
        finishSessionLocked();
    }
}","{
    // The visibility of the views might have changed while the client was not be visible,
    // hence update the visibility state for all views.
    AutofillClient client = getClient();
    ArraySet<AutofillId> updatedVisibleTrackedIds = null;
    ArraySet<AutofillId> updatedInvisibleTrackedIds = null;
    if (client != null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): inv= "" + mInvisibleTrackedIds + "" vis="" + mVisibleTrackedIds);
        }
        if (mInvisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedInvisibleIds = new ArrayList<>(mInvisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedInvisibleIds));
            final int numInvisibleTrackedIds = orderedInvisibleIds.size();
            for (int i = 0; i < numInvisibleTrackedIds; i++) {
                final AutofillId id = orderedInvisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became visible"");
                    }
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                }
            }
        }
        if (mVisibleTrackedIds != null) {
            final ArrayList<AutofillId> orderedVisibleIds = new ArrayList<>(mVisibleTrackedIds);
            final boolean[] isVisible = client.autofillClientGetViewVisibility(Helper.toArray(orderedVisibleIds));
            final int numVisibleTrackedIds = orderedVisibleIds.size();
            for (int i = 0; i < numVisibleTrackedIds; i++) {
                final AutofillId id = orderedVisibleIds.get(i);
                if (isVisible[i]) {
                    updatedVisibleTrackedIds = addToSet(updatedVisibleTrackedIds, id);
                } else {
                    updatedInvisibleTrackedIds = addToSet(updatedInvisibleTrackedIds, id);
                    if (sDebug) {
                        Log.d(TAG, ""onVisibleForAutofill() "" + id + "" became invisible"");
                    }
                }
            }
        }
        mInvisibleTrackedIds = updatedInvisibleTrackedIds;
        mVisibleTrackedIds = updatedVisibleTrackedIds;
    }
    if (mVisibleTrackedIds == null) {
        if (sVerbose) {
            Log.v(TAG, ""onVisibleForAutofillChangedLocked(): no more visible ids"");
        }
        finishSessionLocked(/* commitReason= */
        COMMIT_REASON_VIEW_CHANGED);
    }
}",1,"/**
 * Called once the client becomes visible.
 *
 * @see AutofillClient#autofillClientIsVisibleForAutofill()
 */
","/**
 * Called once the client becomes visible.
 *
 * @see AutofillClient#autofillClientIsVisibleForAutofill()
 */
",0,[@GuardedBy("mLock")],[@GuardedBy("mLock")],0,,,,2,5,0,5,1,"A new parameter is introduced in the method `finishSessionLocked()` in the Late_Implementation. It indicates that the dependent API `finishSessionLocked()` has undergone changes, including modifications to the number of parameters.","The introduction of a new parameter in the dependent API `finishSessionLocked()` can potentially lead to a different behavior in the Late_Version of the API `onVisibleForAutofillChangedLocked()`. The new parameter might trigger a different code path in the `finishSessionLocked()` method, resulting in a different output. Therefore, it is classified as a Compatibility Issue caused by potential different return values or types (1)."
35,"<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>",32,33,,,,"{
    // exceptions for compatibility purposes
    if (repeat < -1 || repeat >= pattern.length) {
        Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length="" + pattern.length + "", index="" + repeat + "")"");
        throw new ArrayIndexOutOfBoundsException();
    }
    try {
        vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes);
    } catch (IllegalArgumentException iae) {
        Log.e(TAG, ""Failed to create VibrationEffect"", iae);
    }
}","{
    // exceptions for compatibility purposes
    if (repeat < -1 || repeat >= pattern.length) {
        Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length="" + pattern.length + "", index="" + repeat + "")"");
        throw new ArrayIndexOutOfBoundsException();
    }
    try {
        vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes);
    } catch (IllegalArgumentException iae) {
        Log.e(TAG, ""Failed to create VibrationEffect"", iae);
    }
}",0,"/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern    an array of longs of times for which to turn the vibrator on or off.
 * @param repeat     the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
","/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * <p>The app should be in the foreground for the vibration to happen. Background apps should
 * specify a ringtone, notification or alarm usage in order to vibrate.</p>
 *
 * @param pattern    an array of longs of times for which to turn the vibrator on or off.
 * @param repeat     the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 * @deprecated Use {@link #vibrate(VibrationEffect, VibrationAttributes)} instead.
 */
",1,"[@Deprecated, @RequiresPermission(android.Manifest.permission.VIBRATE)]","[@Deprecated, @RequiresPermission(android.Manifest.permission.VIBRATE)]",0,,,,0,0,0,0,0,"The given early and late version implementations are exactly the same, except for the deprecated API in the comment section.",No compatibility issue exists as the API implementation has not changed.
36,<android.companion.AssociationRequest.Builder: Builder setSingleDevice(boolean)>,32,33,,,,"{
    checkNotUsed();
    this.mSingleDevice = singleDevice;
    return this;
}","{
    checkNotUsed();
    this.mSingleDevice = singleDevice;
    return this;
}",0,"/**
 * Whether only a single device should match the provided filter.
 *
 * When scanning for a single device with a specifc {@link BluetoothDeviceFilter} mac
 * address, bonded devices are also searched among. This allows to obtain the necessary app
 * privileges even if the device is already paired.
 *
 * @param singleDevice if true, scanning for a device will stop as soon as at least one
 * fitting device is found
 */
","/**
 * Whether only a single device should match the provided filter.
 *
 * When scanning for a single device with a specific {@link BluetoothDeviceFilter} mac
 * address, bonded devices are also searched among. This allows to obtain the necessary app
 * privileges even if the device is already paired.
 *
 * @param singleDevice if true, scanning for a device will stop as soon as at least one
 * fitting device is found
 */
",1,[@NonNull],[@NonNull],0,,,,0,0,0,0,0,"There is no change in the implementation, comment and annotation between the two versions.","As there is no change in the API, there is no Compatibility Issue."
37,<android.app.Activity: void onLowMemory()>,32,33,,,,"{
    if (DEBUG_LIFECYCLE)
        Slog.v(TAG, ""onLowMemory "" + this);
    mCalled = true;
    mFragments.dispatchLowMemory();
}","{
    if (DEBUG_LIFECYCLE)
        Slog.v(TAG, ""onLowMemory "" + this);
    mCalled = true;
    mFragments.dispatchLowMemory();
    if (mCallbacksController != null) {
        mCallbacksController.dispatchLowMemory();
    }
}",1,,,0,,,0,,,,"1,2","3,4",0,4,1,"In the late version of the API, an additional if statement has been added which is checking if mCallbacksController is not null and then invokes the dispatchLowMemory() method on it.","The additional if statement in the late version can lead to different behaviour as compared to the early version. In the late version, if mCallbacksController is not null, then it will invoke dispatchLowMemory() method on it which could potentially change the values of some variables. In the early version, this step is not present and thus it could lead to compatibility issues as the values of the variables in both versions could be different."
38,"<android.hardware.camera2.params.OutputConfiguration: void writeToParcel(Parcel,int)>",32,33,,,,"{
    if (dest == null) {
        throw new IllegalArgumentException(""dest must not be null"");
    }
    dest.writeInt(mRotation);
    dest.writeInt(mSurfaceGroupId);
    dest.writeInt(mSurfaceType);
    dest.writeInt(mConfiguredSize.getWidth());
    dest.writeInt(mConfiguredSize.getHeight());
    dest.writeInt(mIsDeferredConfig ? 1 : 0);
    dest.writeInt(mIsShared ? 1 : 0);
    dest.writeTypedList(mSurfaces);
    dest.writeString(mPhysicalCameraId);
    dest.writeInt(mIsMultiResolution ? 1 : 0);
    // writeList doesn't seem to work well with Integer list.
    dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed));
}","{
    if (dest == null) {
        throw new IllegalArgumentException(""dest must not be null"");
    }
    dest.writeInt(mRotation);
    dest.writeInt(mSurfaceGroupId);
    dest.writeInt(mSurfaceType);
    dest.writeInt(mConfiguredSize.getWidth());
    dest.writeInt(mConfiguredSize.getHeight());
    dest.writeInt(mIsDeferredConfig ? 1 : 0);
    dest.writeInt(mIsShared ? 1 : 0);
    dest.writeTypedList(mSurfaces);
    dest.writeString(mPhysicalCameraId);
    dest.writeInt(mIsMultiResolution ? 1 : 0);
    // writeList doesn't seem to work well with Integer list.
    dest.writeIntArray(convertIntegerToIntList(mSensorPixelModesUsed));
    dest.writeLong(mDynamicRangeProfile);
    dest.writeLong(mStreamUseCase);
    dest.writeInt(mTimestampBase);
    dest.writeInt(mMirrorMode);
}",1,,,0,[@Override],[@Override],0,,,,"1,2",4,0,5,0,"Four new statements have been added to the end of the method, writing new fields (mDynamicRangeProfile, mStreamUseCase, mTimestampBase, mMirrorMode) to the Parcel.","This change does not affect the behavior of the method, it only adds additional information to the Parcel. Therefore, it does not cause any compatibility issues."
39,<android.os.BaseBundle: ArrayList<Integer> getIntegerArrayList(String)>,32,33,,,,"{
    unparcel();
    Object o = mMap.get(key);
    if (o == null) {
        return null;
    }
    try {
        return (ArrayList<Integer>) o;
    } catch (ClassCastException e) {
        typeWarning(key, o, ""ArrayList<Integer>"", e);
        return null;
    }
}","{
    return getArrayList(key, Integer.class);
}",1,"/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return an ArrayList<String> value, or null
 */
","/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return an ArrayList<String> value, or null
 */
",0,[@Nullable],[@Nullable],0,,,,"1,2","1,2,3,4,5","1,2",5,1,1 (Compatibility Issue caused by potential different return values or types),"The change in the implementation of the method could potentially lead to a compatibility issue as the behavior of the `getArrayList` method in the late version might be different from the behavior of the `mMap` object and the casting in the early version. For example, the `getArrayList` method might return a different type of `ArrayList` or might handle null values differently. This could cause issues in the code that uses this method and expects a certain type of `ArrayList` or a certain behavior when null values are encountered."
41,<android.service.dreams.DreamService: void onDreamingStarted()>,32,33,,,,"{
    if (mDebug)
        Slog.v(TAG, ""onDreamingStarted()"");
// hook for subclasses
}","{
    if (mDebug)
        Slog.v(mTag, ""onDreamingStarted()"");
// hook for subclasses
}",1,"/**
 * Called when the dream's window has been created and is visible and animation may now begin.
 */
","/**
 * Called when the dream's window has been created and is visible and animation may now begin.
 */
",0,,,0,,,,1,4,0,4,0,"The implementation of the API `onDreamingStarted()` has changed from using the constant `TAG` to using the variable `mTag` in the logging statement. This is an example of an ""Other statement changed"" type of code change, as it does not involve modifications to the method name, parameter numbers or their types, return statements, exception handling statements, or control dependency.","The code change in the API `onDreamingStarted()` does not lead to any Compatibility Issues (CI). The modification of the logging statement from using `TAG` to `mTag` does not affect the behavior of the API, as it only changes the tag used in the log message. This is an example of a code change that does not have any impact on the compatibility of the API."
42,<android.os.PowerComponents.Builder: double getTotalPower()>,32,33,,,,"{
    double totalPowerMah = 0;
    for (int i = mPowerComponentsMah.length - 1; i >= 0; i--) {
        totalPowerMah += mPowerComponentsMah[i];
    }
    return totalPowerMah;
}","{
    double totalPowerMah = 0;
    for (int componentId = 0; componentId < BatteryConsumer.POWER_COMPONENT_COUNT; componentId++) {
        totalPowerMah += mData.getDouble(mData.getKeyOrThrow(componentId, PROCESS_STATE_ANY).mPowerColumnIndex);
    }
    for (int i = 0; i < mData.layout.customPowerComponentCount; i++) {
        totalPowerMah += mData.getDouble(mData.layout.firstCustomConsumedPowerColumn + i);
    }
    return totalPowerMah;
}",1,"/**
 * Returns the total power accumulated by this builder so far. It may change
 * by the time the {@code build()} method is called.
 */
","/**
 * Returns the total power accumulated by this builder so far. It may change
 * by the time the {@code build()} method is called.
 */
",0,,,0,,,,"1,2","1,3,4",1,"1, 5",1,"The implementation of the method `getTotalPower()` has undergone a significant change. In the early version, the method calculates the total power by iterating over the array `mPowerComponentsMah` and summing up its elements. In the late version, the method calculates the total power by iterating over two different sets of data: the predefined power components and the custom power components. The predefined power components are iterated using a loop that ranges from 0 to `BatteryConsumer.POWER_COMPONENT_COUNT`, and their power values are retrieved using the method `mData.getDouble()`. The custom power components are iterated using a loop that ranges from 0 to `mData.layout.customPowerComponentCount`, and their power values are also retrieved using the method `mData.getDouble()`.","The change in the implementation of `getTotalPower()` can potentially lead to compatibility issues. Since the method calculates the total power using different data and different logic in the two versions, it may produce different results in certain cases. For example, if a custom power component is added or removed in the late version, the total power calculated by the method may be different from that in the early version. Similarly, if the power values of the predefined power components are updated or changed in the late version, the total power may also be different. This can potentially break the functionality of the apps that rely on the accurate and consistent power consumption data."
43,<android.hardware.camera2.CameraDevice: void createExtensionSession(ExtensionSessionConfiguration)>,32,33,,,,"{
    throw new UnsupportedOperationException(""No default implementation"");
}","{
    throw new UnsupportedOperationException(""No default implementation"");
}",0,"/**
 * Initialize a specific device-specific extension augmented camera capture
 * session.
 *
 * <p>Extension sessions can be used to enable device-specific operation modes like
 * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT} or
 * {@link CameraExtensionCharacteristics#EXTENSION_HDR}. These modes are less flexible than the
 * full camera API, but enable access to more sophisticated processing algorithms that can
 * capture multi-frame bursts to generate single output images. To query for available
 * extensions on this device call
 * {@link CameraExtensionCharacteristics#getSupportedExtensions()}.</p>
 *
 * <p>This method will also trigger the setup of the internal
 * processing pipeline for extension augmented preview and multi-frame
 * still capture.</p>
 *
 * <p>If a prior CameraCaptureSession already exists when this method is called, the previous
 * session will no longer be able to accept new capture requests and will be closed. Any
 * in-progress capture requests made on the prior session will be completed before it's closed.
 * </p>
 *
 * <p>The CameraExtensionSession will be active until the client
 * either calls CameraExtensionSession.close() or creates a new camera
 * capture session. In both cases all internal resources will be
 * released, continuous repeating requests stopped and any pending
 * multi-frame capture requests flushed.</p>
 *
 * <p>Note that the CameraExtensionSession currently supports at most wo
 * multi frame capture surface formats: ImageFormat.JPEG will be supported
 * by all extensions and ImageFormat.YUV_420_888 may or may not be supported.
 * Clients must query the multi-frame capture format support using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, int)}.
 * For repeating requests CameraExtensionSession supports only
 * {@link android.graphics.SurfaceTexture} as output. Clients can query the supported resolution
 * for the repeating request output using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, Class)
 * getExtensionSupportedSizes(..., Class)}.</p>
 *
 * <p>At the very minimum the initialization expects either one valid output
 * surface for repeating or one valid output for high-quality single requests registered in the
 * outputs argument of the extension configuration argument. At the maximum the initialization
 * will accept two valid output surfaces, one for repeating and the other for single requests.
 * Additional unsupported surfaces passed to ExtensionSessionConfiguration will cause an
 * {@link IllegalArgumentException} to be thrown.</p>
 *
 * @param extensionConfiguration extension configuration
 * @throws IllegalArgumentException If both the preview and still
 * capture surfaces are not set or invalid, or if any of the
 * registered surfaces do not meet the device-specific
 * extension requirements such as dimensions and/or
 * (output format)/(surface type), or if the extension is not
 * supported.
 * @see CameraExtensionCharacteristics#getSupportedExtensions
 * @see CameraExtensionCharacteristics#getExtensionSupportedSizes
 */
","/**
 * Initialize a specific device-specific extension augmented camera capture
 * session.
 *
 * <p>Extension sessions can be used to enable device-specific operation modes like
 * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT} or
 * {@link CameraExtensionCharacteristics#EXTENSION_HDR}. These modes are less flexible than the
 * full camera API, but enable access to more sophisticated processing algorithms that can
 * capture multi-frame bursts to generate single output images. To query for available
 * extensions on this device call
 * {@link CameraExtensionCharacteristics#getSupportedExtensions()}.</p>
 *
 * <p>This method will also trigger the setup of the internal
 * processing pipeline for extension augmented preview and multi-frame
 * still capture.</p>
 *
 * <p>If a prior CameraCaptureSession already exists when this method is called, the previous
 * session will no longer be able to accept new capture requests and will be closed. Any
 * in-progress capture requests made on the prior session will be completed before it's closed.
 * </p>
 *
 * <p>The CameraExtensionSession will be active until the client
 * either calls CameraExtensionSession.close() or creates a new camera
 * capture session. In both cases all internal resources will be
 * released, continuous repeating requests stopped and any pending
 * multi-frame capture requests flushed.</p>
 *
 * <p>Note that the CameraExtensionSession currently supports at most wo
 * multi frame capture surface formats: ImageFormat.JPEG will be supported
 * by all extensions and ImageFormat.YUV_420_888 may or may not be supported.
 * Clients must query the multi-frame capture format support using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, int)}.
 * For repeating requests CameraExtensionSession supports only
 * {@link android.graphics.SurfaceTexture} as output. Clients can query the supported resolution
 * for the repeating request output using
 * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, Class)
 * getExtensionSupportedSizes(..., Class)}.</p>
 *
 * <p>At the very minimum the initialization expects either one valid output
 * surface for repeating or one valid output for high-quality single requests registered in the
 * outputs argument of the extension configuration argument. At the maximum the initialization
 * will accept two valid output surfaces, one for repeating and the other for single requests.
 * Additional unsupported surfaces passed to ExtensionSessionConfiguration will cause an
 * {@link IllegalArgumentException} to be thrown.</p>
 *
 * @param extensionConfiguration extension configuration
 * @throws IllegalArgumentException If both the preview and still
 * capture surfaces are not set or invalid, or if any of the
 * registered surfaces do not meet the device-specific
 * extension requirements such as dimensions and/or
 * (output format)/(surface type), or if the extension is not
 * supported, or if any of the output configurations select
 * a dynamic range different from
 * {@link android.hardware.camera2.params.DynamicRangeProfiles#STANDARD},
 * or if any of the output configurations sets a stream use
 * case different from {@link
 * android.hardware.camera2.CameraCharacteristics#SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT}.
 * @see CameraExtensionCharacteristics#getSupportedExtensions
 * @see CameraExtensionCharacteristics#getExtensionSupportedSizes
 */
",1,,,0,,,,0,0,0,0,0,The code implementation for the `createExtensionSession` method has not changed between the early (version 32) and late (version 33) versions. The method still throws an `UnsupportedOperationException` with the message "No default implementation".,"There are no compatibility issues (CI) for the `createExtensionSession` method between the early (version 32) and late (version 33) versions as the code implementation has not changed. The method's behavior, which is to throw an `UnsupportedOperationException`, is the same in both versions."
44,"<android.text.TextShaper: void shapeText(CharSequence,int,int,TextDirectionHeuristic,TextPaint,GlyphsConsumer)>",32,33,,,,"{
    MeasuredParagraph mp = MeasuredParagraph.buildForBidi(text, start, start + count, dir, null);
    TextLine tl = TextLine.obtain();
    try {
        tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), false, /* tabstop is not supported */
        null, // ellipsis is not supported.
        -1, // ellipsis is not supported.
        -1);
        tl.shape(consumer);
    } finally {
        TextLine.recycle(tl);
    }
}","{
    MeasuredParagraph mp = MeasuredParagraph.buildForBidi(text, start, start + count, dir, null);
    TextLine tl = TextLine.obtain();
    try {
        tl.set(paint, text, start, start + count, mp.getParagraphDir(), mp.getDirections(0, count), false, /* tabstop is not supported */
        null, // ellipsis is not supported.
        -1, // ellipsis is not supported.
        -1, false);
        tl.shape(consumer);
    } finally {
        TextLine.recycle(tl);
    }
}",1,"/**
 * Shape multi-styled text.
 *
 * In the LTR context, the shape result will go from left to right, thus you may want to draw
 * glyphs from left most position of the canvas. In the RTL context, the shape result will go
 * from right to left, thus you may want to draw glyphs from right most position of the canvas.
 *
 * @param text a styled text.
 * @param start a start index of shaping target in the text.
 * @param count a length of shaping target in the text.
 * @param dir a text direction.
 * @param paint a paint
 * @param consumer a consumer of the shape result.
 */
","/**
 * Shape multi-styled text.
 *
 * In the LTR context, the shape result will go from left to right, thus you may want to draw
 * glyphs from left most position of the canvas. In the RTL context, the shape result will go
 * from right to left, thus you may want to draw glyphs from right most position of the canvas.
 *
 * @param text a styled text.
 * @param start a start index of shaping target in the text.
 * @param count a length of shaping target in the text.
 * @param dir a text direction.
 * @param paint a paint
 * @param consumer a consumer of the shape result.
 */
",0,,,0,,,,2,5,0,1,1,"The code change is in the method `tl.set()`, where a new boolean parameter `false` is added in the late version. This new parameter may affect the behavior of the `tl.set()` method and consequently the `shapeText()` method.","The new boolean parameter `false` added in the `tl.set()` method may cause it to behave differently, which in turn may cause the `shapeText()` method to produce different results. Therefore, this code change may lead to a Compatibility Issue of type 1 - Compatibility Issue caused by potential different return values or types."
45,<android.app.admin.DevicePolicyManager: List<ApnSetting> getOverrideApns(ComponentName)>,32,33,,,,"{
    throwIfParentInstance(""getOverrideApns"");
    if (mService != null) {
        try {
            return mService.getOverrideApns(admin);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
    return Collections.emptyList();
}","{
    throwIfParentInstance(""getOverrideApns"");
    if (mService != null) {
        try {
            return mService.getOverrideApns(admin);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
    return Collections.emptyList();
}",0,"/**
 * Called by device owner to get all override APNs inserted by device owner.
 *
 * @param admin which {@link DeviceAdminReceiver} this request is associated with
 * @return A list of override APNs inserted by device owner.
 * @throws SecurityException if {@code admin} is not a device owner.
 *
 * @see #setOverrideApnsEnabled(ComponentName, boolean)
 */
","/**
 * Called by device owner or managed profile owner to get all override APNs inserted by
 * device owner or managed profile owner previously using {@link #addOverrideApn}.
 *
 * @param admin which {@link DeviceAdminReceiver} this request is associated with
 * @return A list of override APNs inserted by device owner.
 * @throws SecurityException if {@code admin} is not a device owner.
 *
 * @see #setOverrideApnsEnabled(ComponentName, boolean)
 */
",1,,,0,,,,0,0,0,0,0,"There is no change in the implementation, annotations, or comments for the given API between the two versions.","There is no Compatibility Issue (CI) as there is no change in the implementation, annotations, or comments for the given API between the two versions."
46,<android.app.admin.DevicePolicyManager: boolean isPreferentialNetworkServiceEnabled()>,32,33,,,,"{
    throwIfParentInstance(""isPreferentialNetworkServiceEnabled"");
    if (mService == null) {
        return false;
    }
    try {
        return mService.isPreferentialNetworkServiceEnabled(myUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""isPreferentialNetworkServiceEnabled"");
    return getPreferentialNetworkServiceConfigs().stream().anyMatch(c -> c.isEnabled());
}",1,"/**
 * Indicates whether preferential network service is enabled.
 *
 * <p>This method can be called by the profile owner of a managed profile.
 *
 * @return whether preferential network service is enabled.
 * @throws SecurityException if the caller is not the profile owner.
 */
","/**
 * Indicates whether preferential network service is enabled.
 *
 * <p> Before Android version {@link android.os.Build.VERSION_CODES#TIRAMISU}:
 * This method can be called by the profile owner of a managed profile.
 * <p> Starting from Android version {@link android.os.Build.VERSION_CODES#TIRAMISU}:
 * This method can be called by the profile owner of a managed profile
 * or device owner.
 *
 * @return whether preferential network service is enabled.
 * @throws SecurityException if the caller is not the profile owner or device owner.
 */
",1,,,0,,,,"1,2","1,2,3,4","1,2","1, 5",1,"The implementation of the method has been completely changed. In the early version, the method calls a method on a remote service to check if preferential network service is enabled, while in the late version, the method checks the status of preferential network service by examining the preferential network service configs. Additionally, the late version has updated the comment to include the device owner as a valid caller of the method.","The change in implementation could potentially lead to compatibility issues if the behavior of the preferential network service configs is not consistent with the behavior of the remote service. For example, if the preferential network service configs do not correctly reflect the state of preferential network service, the method could return an incorrect value, leading to unexpected behavior in the app."
48,"<android.widget.RemoteViews.ViewGroupActionAdd: void apply(View,ViewGroup,InteractionHandler,ColorResources)>",32,33,,,,"{
    final Context context = root.getContext();
    final ViewGroup target = root.findViewById(viewId);
    if (target == null) {
        return;
    }
    // If removeAllViews was called, this returns the next potential recycled view.
    // If there are no more views to recycle (or removeAllViews was not called), this
    // will return -1.
    final int nextChild = getNextRecyclableChild(target);
    RemoteViews rvToApply = mNestedViews.getRemoteViewsToApply(context);
    if (nextChild >= 0 && mStableId != NO_ID) {
        // At that point, the views starting at index nextChild are the ones recyclable but
        // not yet recycled. All views added on that round of application are placed before.
        // Find the next view with the same stable id, or -1.
        int recycledViewIndex = findViewIndexToRecycle(target, rvToApply);
        if (recycledViewIndex >= 0) {
            View child = target.getChildAt(recycledViewIndex);
            if (rvToApply.canRecycleView(child)) {
                if (nextChild < recycledViewIndex) {
                    target.removeViews(nextChild, recycledViewIndex - nextChild);
                }
                setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
                rvToApply.reapply(context, child, handler, null, /* size */
                colorResources, false);
                return;
            }
            // If we cannot recycle the views, we still remove all views in between to
            // avoid weird behaviors and insert the new view in place of the old one.
            target.removeViews(nextChild, recycledViewIndex - nextChild + 1);
        }
    }
    // If we cannot recycle, insert the new view before the next recyclable child.
    // Inflate nested views and add as children
    View nestedView = rvToApply.apply(context, target, handler, null, /* size */
    colorResources);
    if (mStableId != NO_ID) {
        setStableId(nestedView, mStableId);
    }
    target.addView(nestedView, mIndex >= 0 ? mIndex : nextChild);
    if (nextChild >= 0) {
        // If we are at the end, there is no reason to try to recycle anymore
        setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
    }
}","{
    final Context context = root.getContext();
    final ViewGroup target = root.findViewById(viewId);
    if (target == null) {
        return;
    }
    // If removeAllViews was called, this returns the next potential recycled view.
    // If there are no more views to recycle (or removeAllViews was not called), this
    // will return -1.
    final int nextChild = getNextRecyclableChild(target);
    RemoteViews rvToApply = mNestedViews.getRemoteViewsToApply(context);
    int flagsToPropagate = mApplyFlags & FLAG_MASK_TO_PROPAGATE;
    if (flagsToPropagate != 0)
        rvToApply.addFlags(flagsToPropagate);
    if (nextChild >= 0 && mStableId != NO_ID) {
        // At that point, the views starting at index nextChild are the ones recyclable but
        // not yet recycled. All views added on that round of application are placed before.
        // Find the next view with the same stable id, or -1.
        int recycledViewIndex = findViewIndexToRecycle(target, rvToApply);
        if (recycledViewIndex >= 0) {
            View child = target.getChildAt(recycledViewIndex);
            if (rvToApply.canRecycleView(child)) {
                if (nextChild < recycledViewIndex) {
                    target.removeViews(nextChild, recycledViewIndex - nextChild);
                }
                setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
                rvToApply.reapplyNestedViews(context, child, rootParent, handler, null, /* size */
                colorResources);
                return;
            }
            // If we cannot recycle the views, we still remove all views in between to
            // avoid weird behaviors and insert the new view in place of the old one.
            target.removeViews(nextChild, recycledViewIndex - nextChild + 1);
        }
    }
    // If we cannot recycle, insert the new view before the next recyclable child.
    // Inflate nested views and add as children
    View nestedView = rvToApply.applyNestedViews(context, target, rootParent, handler, null, /* size */
    colorResources);
    if (mStableId != NO_ID) {
        setStableId(nestedView, mStableId);
    }
    target.addView(nestedView, mIndex >= 0 ? mIndex : nextChild);
    if (nextChild >= 0) {
        // If we are at the end, there is no reason to try to recycle anymore
        setNextRecyclableChild(target, nextChild + 1, target.getChildCount());
    }
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",1,"1, 5",1,"Two new lines of code have been added to the late version implementation - `int flagsToPropagate = mApplyFlags & FLAG_MASK_TO_PROPAGATE;` and `rvToApply.addFlags(flagsToPropagate);`. Additionally, the method `rvToApply.reapply(context, child, handler, null, /* size */ colorResources, false);` has been changed to `rvToApply.reapplyNestedViews(context, child, rootParent, handler, null, /* size */ colorResources);` and `rvToApply.apply(context, target, handler, null, /* size */ colorResources);` has been changed to `rvToApply.applyNestedViews(context, target, rootParent, handler, null, /* size */ colorResources);`. These changes fall under Return statement changed (1) and Dependent API changed (5).","The addition of the `flagsToPropagate` variable and the `rvToApply.addFlags(flagsToPropagate);` line of code can potentially lead to different behaviour in the late version of the API. The `FLAG_MASK_TO_PROPAGATE` constant is not defined in the provided code snippet, so it is unclear what flags are being propagated. These flags may affect the way that the `RemoteViews` object is applied to the target `ViewGroup`, leading to a Compatibility Issue (CI) of type 1 - Compatibility Issue caused by potential different return values or types."
49,<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(AutofillId)>,32,33,,,,"{
    Preconditions.checkNotNull(id);
    if (!isContentCaptureEnabled())
        return;
    internalNotifyViewDisappeared(id);
}","{
    Objects.requireNonNull(id);
    if (!isContentCaptureEnabled())
        return;
    internalNotifyViewDisappeared(id);
}",1,"/**
 * Notifies the Content Capture Service that a node has been removed from the view structure.
 *
 * <p>Typically called ""manually"" by views that handle their own virtual view hierarchy, or
 * automatically by the Android System for standard views.
 *
 * @param id id of the node that has been removed.
 */
","/**
 * Notifies the Content Capture Service that a node has been removed from the view structure.
 *
 * <p>Typically called ""manually"" by views that handle their own virtual view hierarchy, or
 * automatically by the Android System for standard views.
 *
 * @param id id of the node that has been removed.
 */
",0,,,0,,,,2,5,0,4,0,The method `Preconditions.checkNotNull(id)` is replaced with `Objects.requireNonNull(id)`. This change only affects how the null check is performed and does not affect the behavior of the method.,There is no compatibility issue as the change only affects the implementation of the null check and does not affect the behavior of the method.
50,"<android.webkit.WebView: String[] getHttpAuthUsernamePassword(String,String)>",27,28,,,,"{
    checkThread();
    return mProvider.getHttpAuthUsernamePassword(host, realm);
}","{
    checkThread();
    return mProvider.getHttpAuthUsernamePassword(host, realm);
}",0,"/**
 * Retrieves HTTP authentication credentials for a given host and realm from the {@link
 * WebViewDatabase} instance.
 * @param host the host to which the credentials apply
 * @param realm the realm to which the credentials apply
 * @return the credentials as a String array, if found. The first element
 * is the username and the second element is the password. Null if
 * no credentials are found.
 * @deprecated Use {@link WebViewDatabase#getHttpAuthUsernamePassword} instead
 */
","/**
 * Retrieves HTTP authentication credentials for a given host and realm from the {@link
 * WebViewDatabase} instance.
 * @param host the host to which the credentials apply
 * @param realm the realm to which the credentials apply
 * @return the credentials as a String array, if found. The first element
 * is the username and the second element is the password. {@code null} if
 * no credentials are found.
 * @deprecated Use {@link WebViewDatabase#getHttpAuthUsernamePassword} instead
 */
",1,[@Deprecated],"[@Deprecated, @Nullable]",1,,,,0,0,0,4,0,"An annotation ""@Nullable"" has been added to the late version, which indicates that the method can return null. However, the method implementation and control flow remain the same, and the method already has the possibility to return null in the early version. Therefore, the code change type is 4.","As the method implementation and control flow remain the same, and the method already has the possibility to return null in the early version, the addition of ""@Nullable"" annotation does not lead to any Compatibility Issue. The CI type is 0."
51,<android.widget.TextView: void setText(int)>,27,28,,,,"{
    setText(getContext().getResources().getText(resid));
    mTextFromResource = true;
}","{
    setText(getContext().getResources().getText(resid));
    mTextSetFromXmlOrResourceId = true;
    mTextId = resid;
}",1,"/**
 * Sets the text to be displayed using a string resource identifier.
 *
 * @param resid the resource identifier of the string resource to be displayed
 *
 * @see #setText(CharSequence)
 *
 * @attr ref android.R.styleable#TextView_text
 */
","/**
 * Sets the text to be displayed using a string resource identifier.
 *
 * @param resid the resource identifier of the string resource to be displayed
 *
 * @see #setText(CharSequence)
 *
 * @attr ref android.R.styleable#TextView_text
 */
",0,[@android.view.RemotableViewMethod],[@android.view.RemotableViewMethod],0,,,,1,4,1,4,1,"The change is classified as ""Other statement changed"" because the variable assignments are different between the two versions. In the early version, the variable `mTextFromResource` is set to `true`, while in the late version, the variables `mTextSetFromXmlOrResourceId` and `mTextId` are set to `true` and `resid`, respectively.","The Compatibility Issue is caused by potential different return values or types because the variable assignments in the late version may affect the behavior of the method, leading to different results or side-effects for the same input `resid`. For example, if the method `setText(CharSequence)` is called later and the variable `mTextSetFromXmlOrResourceId` is used to determine whether to update the text, the text may not be updated as expected in the late version."
52,<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(IBinder)>,27,28,,,,"{
    synchronized (mH) {
        try {
            return mService.switchToLastInputMethod(imeToken);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}","{
    return switchToPreviousInputMethodInternal(imeToken);
}",1,"/**
 * Force switch to the last used input method and subtype. If the last input method didn't have
 * any subtypes, the framework will simply switch to the last input method with no subtype
 * specified.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @return true if the current input method and subtype was successfully switched to the last
 * used input method and subtype.
 */
","/**
 * Force switch to the last used input method and subtype. If the last input method didn't have
 * any subtypes, the framework will simply switch to the last input method with no subtype
 * specified.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @return true if the current input method and subtype was successfully switched to the last
 * used input method and subtype.
 * @deprecated Use {@link InputMethodService#switchToPreviousInputMethod()} instead. This method
 * was intended for IME developers who should be accessing APIs through the service. APIs in
 * this class are intended for app developers interacting with the IME.
 */
",1,,[@Deprecated],1,,,,"1,2","1,2,5","1,2","1,5",1,The implementation of the `switchToLastInputMethod(IBinder)` method has been changed from using a synchronized block and making a remote call to `mService.switchToLastInputMethod(imeToken)` to directly calling the `switchToPreviousInputMethodInternal(imeToken)` method. This change could potentially lead to different behaviors in the way the input method is switched.,"The Compatibility Issue (CI) arises in this case because the code change between the two continuous versions of the same API could lead to different behaviors in the way the input method is switched. Specifically, the use of the synchronized block and the remote call to `mService.switchToLastInputMethod(imeToken)` in the early version could have different timing and threading behaviors compared to the direct call to `switchToPreviousInputMethodInternal(imeToken)` in the late version. This could potentially cause the API to return a different value (i.e., whether the input method was successfully switched or not) or throw an exception differently. Therefore, it should be regarded as a CI."
53,<android.net.IpSecManager.UdpEncapsulationSocket: void close()>,27,28,,,,"{
    try {
        mService.closeUdpEncapsulationSocket(mResourceId);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
    try {
        mPfd.close();
    } catch (IOException e) {
        Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port= "" + mPort);
        throw e;
    }
    mCloseGuard.close();
}","{
    try {
        mService.closeUdpEncapsulationSocket(mResourceId);
        mResourceId = INVALID_RESOURCE_ID;
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    } catch (Exception e) {
        // On close we swallow all random exceptions since failure to close is not
        // actionable by the user.
        Log.e(TAG, ""Failed to close "" + this + "", Exception="" + e);
    } finally {
        mResourceId = INVALID_RESOURCE_ID;
        mCloseGuard.close();
    }
    try {
        mPfd.close();
    } catch (IOException e) {
        Log.e(TAG, ""Failed to close UDP Encapsulation Socket with Port= "" + mPort);
        throw e;
    }
}",1,,"/**
 * Close this socket.
 *
 * <p>This closes the wrapped socket. Open encapsulation sockets count against a user's
 * resource limits, and forgetting to close them eventually will result in {@link
 * ResourceUnavailableException} being thrown.
 */
",1,[@Override],[@Override],0,,,,"1,2","2,4,5",2,"2, 3",2,"The code change between the two versions involves both exception handling and control dependency. Specifically, in the late version, a new exception handling statement (catch (Exception e)) is added, and the statement under it (mResourceId = INVALID\_RESOURCE\_ID) is also moved to the finally block.","The new exception handling statement in the late version can potentially lead to different behaviors compared to the early version. Specifically, in the early version, any exceptions other than RemoteException and IOException will be propagated to the caller. However, in the late version, these exceptions will be swallowed and logged, and the resource id will be set to INVALID\_RESOURCE\_ID. This can potentially cause compatibility issues if the caller is expecting the exception to be propagated or the resource id to remain unchanged."
54,<android.webkit.WebView: WebBackForwardList restoreState(Bundle)>,27,28,,,,"{
    checkThread();
    return mProvider.restoreState(inState);
}","{
    checkThread();
    return mProvider.restoreState(inState);
}",0,"/**
 * Restores the state of this WebView from the given Bundle. This method is
 * intended for use in {@link android.app.Activity#onRestoreInstanceState}
 * and should be called to restore the state of this WebView. If
 * it is called after this WebView has had a chance to build state (load
 * pages, create a back/forward list, etc.) there may be undesirable
 * side-effects. Please note that this method no longer restores the
 * display data for this WebView.
 *
 * @param inState the incoming Bundle of state
 * @return the restored back/forward list or null if restoreState failed
 */
","/**
 * Restores the state of this WebView from the given Bundle. This method is
 * intended for use in {@link android.app.Activity#onRestoreInstanceState}
 * and should be called to restore the state of this WebView. If
 * it is called after this WebView has had a chance to build state (load
 * pages, create a back/forward list, etc.) there may be undesirable
 * side-effects. Please note that this method no longer restores the
 * display data for this WebView.
 *
 * @param inState the incoming Bundle of state
 * @return the restored back/forward list or {@code null} if restoreState failed
 */
",1,,[@Nullable],1,,,,0,0,0,5,0,The code change is that the annotation has been added to the method's return type. The annotation is `@Nullable` which indicates that the method may return null.,"The addition of the annotation does not affect the behavior of the method, it is only used for code documentation and static analysis. Therefore, there is no compatibility issue."
55,<android.widget.TextView: void setElegantTextHeight(boolean)>,27,28,,,,"{
    if (elegant != mTextPaint.isElegantTextHeight()) {
        mTextPaint.setElegantTextHeight(elegant);
        if (mLayout != null) {
            nullLayouts();
            requestLayout();
            invalidate();
        }
    }
}","{
    if (elegant != mTextPaint.isElegantTextHeight()) {
        mTextPaint.setElegantTextHeight(elegant);
        if (mLayout != null) {
            nullLayouts();
            requestLayout();
            invalidate();
        }
    }
}",0,"/**
 * Set the TextView's elegant height metrics flag. This setting selects font
 * variants that have not been compacted to fit Latin-based vertical
 * metrics, and also increases top and bottom bounds to provide more space.
 *
 * @param elegant set the paint's elegant metrics flag.
 *
 * @attr ref android.R.styleable#TextView_elegantTextHeight
 */
","/**
 * Set the TextView's elegant height metrics flag. This setting selects font
 * variants that have not been compacted to fit Latin-based vertical
 * metrics, and also increases top and bottom bounds to provide more space.
 *
 * @param elegant set the paint's elegant metrics flag.
 *
 * @see #isElegantTextHeight()
 * @see Paint#isElegantTextHeight()
 *
 * @attr ref android.R.styleable#TextView_elegantTextHeight
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the API between the two versions.,There is no Compatibility Issue exist as there is no change in the implementation of the API.
56,<android.widget.Toast.TN: void handleHide()>,27,28,,,,"{
    if (localLOGV)
        Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView="" + mView);
    if (mView != null) {
        // the view isn't yet added, so let's try not to crash.
        if (mView.getParent() != null) {
            if (localLOGV)
                Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this);
            mWM.removeViewImmediate(mView);
        }
        mView = null;
    }
}","{
    if (localLOGV)
        Log.v(TAG, ""HANDLE HIDE: "" + this + "" mView="" + mView);
    if (mView != null) {
        // the view isn't yet added, so let's try not to crash.
        if (mView.getParent() != null) {
            if (localLOGV)
                Log.v(TAG, ""REMOVE! "" + mView + "" in "" + this);
            mWM.removeViewImmediate(mView);
        }
        // the resources.
        try {
            getService().finishToken(mPackageName, this);
        } catch (RemoteException e) {
        }
        mView = null;
    }
}",1,,,0,,,0,,,,"1,2","2,4",2,"2, 5","1,2","The code change between the early and late versions of the API involves the addition of a new block of code that calls the `getService().finishToken(mPackageName, this)` method within a try-catch block. This change affects the control flow of the API and also introduces a new dependency on the `getService()` method.","The addition of the new block of code that calls the `getService().finishToken(mPackageName, this)` method within a try-catch block can potentially lead to compatibility issues. Firstly, if the `getService()` method is not available or has been modified in a way that is incompatible with the API, it can cause the API to behave differently or throw an exception. Secondly, the introduction of the try-catch block can potentially mask or modify the exceptions that are thrown by the API, which can also lead to compatibility issues. Therefore, the potential compatibility issues are classified as 1 (Compatibility Issue caused by potential different return values or types) and 2 (Compatibility Issue caused by potential different exception handlings)."
57,"<android.provider.Settings.System: boolean putString(ContentResolver,String,String)>",27,28,,,,"{
    return putStringForUser(resolver, name, value, UserHandle.myUserId());
}","{
    return putStringForUser(resolver, name, value, resolver.getUserId());
}",1,"/**
 * Store a name/value pair into the database.
 * @param resolver to access the database with
 * @param name to store
 * @param value to associate with the name
 * @return true if the value was set, false on database errors
 */
","/**
 * Store a name/value pair into the database.
 * @param resolver to access the database with
 * @param name to store
 * @param value to associate with the name
 * @return true if the value was set, false on database errors
 */
",0,,,0,,,,"1,2","1,5",1,5,1,"The code change is classified as 5, Dependent API changed, because the fourth parameter of the method ""putStringForUser"" has changed from ""UserHandle.myUserId()"" to ""resolver.getUserId()"". This means that the API now uses the user ID associated with the given ContentResolver object instead of the ID of the current user.","The Compatibility Issue is classified as 1, Compatibility Issue caused by potential different return values or types, because the change in the fourth parameter of ""putStringForUser"" could potentially lead to the method accessing a different database or section of the database, depending on the user ID. This could result in the method returning a different value (e.g. false if there is a database error) or throwing an exception if the user ID is invalid or the user does not have permission to access the database."
58,"<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(WebView,String,boolean)>",27,28,,,,"{
}","{
}",0,"/**
 * Notify the host application of the url for an apple-touch-icon.
 * @param view The WebView that initiated the callback.
 * @param url The icon url.
 * @param precomposed True if the url is for a precomposed touch icon.
 */
","/**
 * Notify the host application of the url for an apple-touch-icon.
 * @param view The WebView that initiated the callback.
 * @param url The icon url.
 * @param precomposed {@code true} if the url is for a precomposed touch icon.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation and annotation of the given API between the two versions.,There is no Compatibility Issue exists for the given API.
59,"<android.bluetooth.le.ScanFilter.Builder: Builder setServiceUuid(ParcelUuid,ParcelUuid)>",27,28,,,,"{
    if (mUuidMask != null && mServiceUuid == null) {
        throw new IllegalArgumentException(""uuid is null while uuidMask is not null!"");
    }
    mServiceUuid = serviceUuid;
    mUuidMask = uuidMask;
    return this;
}","{
    if (mUuidMask != null && mServiceUuid == null) {
        throw new IllegalArgumentException(""uuid is null while uuidMask is not null!"");
    }
    mServiceUuid = serviceUuid;
    mUuidMask = uuidMask;
    return this;
}",0,"/**
 * Set filter on partial service uuid. The {@code uuidMask} is the bit mask for the
 * {@code serviceUuid}. Set any bit in the mask to 1 to indicate a match is needed for the
 * bit in {@code serviceUuid}, and 0 to ignore that bit.
 *
 * @throws IllegalArgumentException If {@code serviceUuid} is {@code null} but
 * {@code uuidMask} is not {@code null}.
 */
","/**
 * Set filter on partial service uuid. The {@code uuidMask} is the bit mask for the
 * {@code serviceUuid}. Set any bit in the mask to 1 to indicate a match is needed for the
 * bit in {@code serviceUuid}, and 0 to ignore that bit.
 *
 * @throws IllegalArgumentException If {@code serviceUuid} is {@code null} but {@code
 * uuidMask} is not {@code null}.
 */
",1,,,0,,,,0,0,0,0,0,There is no change between the two versions of the API.,There is no compatibility issue for the API as there are no changes that could lead to different behaviors.
60,"<android.app.usage.NetworkStatsManager: NetworkStats queryDetailsForUid(int,String,long,long,int)>",27,28,,,,"{
    return queryDetailsForUidTag(networkType, subscriberId, startTime, endTime, uid, NetworkStats.Bucket.TAG_NONE);
}","{
    return queryDetailsForUidTagState(networkType, subscriberId, startTime, endTime, uid, NetworkStats.Bucket.TAG_NONE, NetworkStats.Bucket.STATE_ALL);
}",1,"/**
 * Query network usage statistics details for a given uid.
 *
 * #see queryDetailsForUidTag(int, String, long, long, int, int)
 */
","/**
 * Query network usage statistics details for a given uid.
 *
 * #see queryDetailsForUidTagState(int, String, long, long, int, int, int)
 */
",1,,,0,,,,"1,2","1,5",1,5,1,The API implementation has changed from queryDetailsForUidTag() to queryDetailsForUidTagState(). The method name and the number of parameters have been modified. This code change type is 5.,"As the API implementation has changed to another dependent API, and the new dependent API has an additional parameter which could affect the return values, so this code change potentially leads to a Compatibility Issue of type 1."
61,<android.net.NetworkStats.Entry: String toString()>,27,28,,,,"{
    final StringBuilder builder = new StringBuilder();
    builder.append(""iface="").append(iface);
    builder.append("" uid="").append(uid);
    builder.append("" set="").append(setToString(set));
    builder.append("" tag="").append(tagToString(tag));
    builder.append("" metered="").append(meteredToString(metered));
    builder.append("" roaming="").append(roamingToString(roaming));
    builder.append("" rxBytes="").append(rxBytes);
    builder.append("" rxPackets="").append(rxPackets);
    builder.append("" txBytes="").append(txBytes);
    builder.append("" txPackets="").append(txPackets);
    builder.append("" operations="").append(operations);
    return builder.toString();
}","{
    final StringBuilder builder = new StringBuilder();
    builder.append(""iface="").append(iface);
    builder.append("" uid="").append(uid);
    builder.append("" set="").append(setToString(set));
    builder.append("" tag="").append(tagToString(tag));
    builder.append("" metered="").append(meteredToString(metered));
    builder.append("" roaming="").append(roamingToString(roaming));
    builder.append("" defaultNetwork="").append(defaultNetworkToString(defaultNetwork));
    builder.append("" rxBytes="").append(rxBytes);
    builder.append("" rxPackets="").append(rxPackets);
    builder.append("" txBytes="").append(txBytes);
    builder.append("" txPackets="").append(txPackets);
    builder.append("" operations="").append(operations);
    return builder.toString();
}",1,,,0,[@Override],[@Override],0,,,,"1,2","1,4",1,4,0,"The late version implementation has added a new statement ""builder.append(""defaultNetwork="").append(defaultNetworkToString(defaultNetwork));"" to the method, which is an other statement change.","The newly added statement only appends more information to the strings built by the method, it will not change the behaviors of the API, so there is no Compatibility Issue exist."
62,<android.webkit.WebChromeClient: boolean onConsoleMessage(ConsoleMessage)>,27,28,,,,"{
    // Call the old version of this function for backwards compatability.
    onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId());
    return false;
}","{
    // Call the old version of this function for backwards compatability.
    onConsoleMessage(consoleMessage.message(), consoleMessage.lineNumber(), consoleMessage.sourceId());
    return false;
}",0,"/**
 * Report a JavaScript console message to the host application. The ChromeClient
 * should override this to process the log message as they see fit.
 * @param consoleMessage Object containing details of the console message.
 * @return true if the message is handled by the client.
 */
","/**
 * Report a JavaScript console message to the host application. The ChromeClient
 * should override this to process the log message as they see fit.
 * @param consoleMessage Object containing details of the console message.
 * @return {@code true} if the message is handled by the client.
 */
",1,,,0,,,,0,0,0,0,0,The code implementation for the API `android.webkit.WebChromeClient: boolean onConsoleMessage(ConsoleMessage)` has not changed between the early version (version 27) and the late version (version 28).,"As there is no code change, there will be no compatibility issue exist for the API."
63,"<android.hardware.radio.RadioManager.ModuleProperties: void writeToParcel(Parcel,int)>",26,27,,,,"{
    dest.writeInt(mId);
    dest.writeInt(mClassId);
    dest.writeString(mImplementor);
    dest.writeString(mProduct);
    dest.writeString(mVersion);
    dest.writeString(mSerial);
    dest.writeInt(mNumTuners);
    dest.writeInt(mNumAudioSources);
    dest.writeInt(mIsCaptureSupported ? 1 : 0);
    dest.writeParcelableArray(mBands, flags);
}","{
    dest.writeInt(mId);
    dest.writeString(mServiceName);
    dest.writeInt(mClassId);
    dest.writeString(mImplementor);
    dest.writeString(mProduct);
    dest.writeString(mVersion);
    dest.writeString(mSerial);
    dest.writeInt(mNumTuners);
    dest.writeInt(mNumAudioSources);
    dest.writeInt(mIsCaptureSupported ? 1 : 0);
    dest.writeParcelableArray(mBands, flags);
    dest.writeInt(mIsBgScanSupported ? 1 : 0);
    dest.writeIntArray(setToArray(mSupportedProgramTypes));
    dest.writeIntArray(setToArray(mSupportedIdentifierTypes));
    writeStringMap(dest, mVendorInfo);
}",1,,,0,[@Override],[@Override],0,,,,"1,2","1,4",1,"1, 5",1,"Two new variables, mIsBgScanSupported and mSupportedProgramTypes, are introduced in the late version implementation. Additionally, the variable mServiceName is added and the order of mClassId and mServiceName is changed. The code change type is 1, 5.","The introduction of new variables and the change of variable order may cause the API to write different values to the Parcel, which can potentially lead to Compatibility Issue when the Parcel is read by other APIs. The CI type is 1."
64,<android.app.Notification.Builder: Builder setGroupAlertBehavior(int)>,26,27,,,,"{
    mN.mGroupAlertBehavior = groupAlertBehavior;
    return this;
}","{
    mN.mGroupAlertBehavior = groupAlertBehavior;
    return this;
}",0,"/**
 * Sets the group alert behavior for this notification. Use this method to mute this
 * notification if alerts for this notification's group should be handled by a different
 * notification. This is only applicable for notifications that belong to a
 * {@link #setGroup(String) group}.
 *
 * <p> The default value is {@link #GROUP_ALERT_ALL}.</p>
 */
","/**
 * Sets the group alert behavior for this notification. Use this method to mute this
 * notification if alerts for this notification's group should be handled by a different
 * notification. This is only applicable for notifications that belong to a
 * {@link #setGroup(String) group}. This must be called on all notifications you want to
 * mute. For example, if you want only the summary of your group to make noise, all
 * children in the group should have the group alert behavior {@link #GROUP_ALERT_SUMMARY}.
 *
 * <p> The default value is {@link #GROUP_ALERT_ALL}.</p>
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the API between the two versions.,There is no compatibility issue exist for the API as there is no change in the behavior of the API between the two versions.
65,"<android.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(Fragment,Context,boolean)>",26,27,,,,"{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true);
        }
    }
    if (mLifecycleCallbacks == null) {
        return;
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentPreAttached(this, f, context);
        }
    }
}","{
    if (mParent != null) {
        FragmentManager parentManager = mParent.getFragmentManager();
        if (parentManager instanceof FragmentManagerImpl) {
            ((FragmentManagerImpl) parentManager).dispatchOnFragmentPreAttached(f, context, true);
        }
    }
    for (Pair<FragmentLifecycleCallbacks, Boolean> p : mLifecycleCallbacks) {
        if (!onlyRecursive || p.second) {
            p.first.onFragmentPreAttached(this, f, context);
        }
    }
}",1,,,0,,,0,,,,1,"1,3",1,3,1,"A condition statement in the code has been removed. The statement ""if (mLifecycleCallbacks == null) {return;}"" no longer exists in the late version. This means that the method will always execute the for loop, even if mLifecycleCallbacks is null.","The removal of the condition statement can potentially lead to a different behavior in the late version. If mLifecycleCallbacks is null, the method will still execute the for loop and may throw a NullPointerException, whereas in the early version, the method would simply return and not execute the for loop. This can cause compatibility issues for apps that rely on the early version's behavior."
66,<android.widget.ArrayAdapter: CharSequence[] getAutofillOptions()>,26,27,,,,"{
    if (!mObjectsFromResources || mObjects == null || mObjects.isEmpty()) {
        return null;
    }
    final int size = mObjects.size();
    final CharSequence[] options = new CharSequence[size];
    mObjects.toArray(options);
    return options;
}","{
    // First check if app developer explicitly set them.
    final CharSequence[] explicitOptions = super.getAutofillOptions();
    if (explicitOptions != null) {
        return explicitOptions;
    }
    // Otherwise, only return options that came from static resources.
    if (!mObjectsFromResources || mObjects == null || mObjects.isEmpty()) {
        return null;
    }
    final int size = mObjects.size();
    final CharSequence[] options = new CharSequence[size];
    mObjects.toArray(options);
    return options;
}",1,"/**
 * {@inheritDoc}
 *
 * @return values from the string array used by {@link #createFromResource(Context, int, int)},
 * or {@code null} if object was created otherwsie or if contents were dynamically changed after
 * creation.
 */
","/**
 * {@inheritDoc}
 *
 * @return values from the string array used by {@link #createFromResource(Context, int, int)},
 * or {@code null} if object was created otherwsie or if contents were dynamically changed after
 * creation.
 */
",0,[@Override],[@Override],0,,,,"1,2","1,3,4",1,"1,5",1,"The late version of the API introduces a new conditional statement, which first checks if the app developer has explicitly set the autofill options by calling the `super.getAutofillOptions()` method. If this returns a non-null value, it is immediately returned. This is a new control dependency and a new return statement, hence the code change type is 1,5.","The new control dependency and the new return statement in the late version of the API can lead to a different behavior compared to the early version. In the late version, if the app developer has explicitly set the autofill options, these options will be returned, whereas in the early version, the method would have returned null in this case. This is a Compatibility Issue caused by potential different return values or types, hence the CI type is 1."
67,<android.os.PowerManager.WakeLock: String toString()>,26,27,,,,"{
    synchronized (mToken) {
        return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held="" + mHeld + "", refCount="" + mCount + ""}"";
    }
}","{
    synchronized (mToken) {
        return ""WakeLock{"" + Integer.toHexString(System.identityHashCode(this)) + "" held="" + mHeld + "", refCount="" + mInternalCount + ""}"";
    }
}",1,,,0,[@Override],[@Override],0,,,,2,"1,5",1,1,1,"The return statement has changed. Specifically, `mCount` has been replaced by `mInternalCount`.","The change of the variable in the return statement may cause the API to return different values, leading to a Compatibility Issue."
69,<android.hardware.usb.UsbConfiguration: String getName()>,25,26,,,,"{
    return mName;
}","{
    return mName;
}",0,"/**
 * Returns the configuration's name.
 *
 * @return the configuration's name
 */
","/**
 * Returns the configuration's name.
 *
 * @return the configuration's name, or {@code null} if the property could not be read
 */
",1,,[@Nullable],1,,,,0,0,0,0,0,No change in the implementation of the API between the two versions.,No Compatibility Issue exists for the API.
70,"<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(UsbEndpoint,byte[],int,int)>",25,26,,,,"{
    return bulkTransfer(endpoint, buffer, 0, length, timeout);
}","{
    return bulkTransfer(endpoint, buffer, 0, length, timeout);
}",0,"/**
 * Performs a bulk transaction on the given endpoint.
 * The direction of the transfer is determined by the direction of the endpoint.
 * <p>
 * This method transfers data starting from index 0 in the buffer.
 * To specify a different offset, use
 * {@link #bulkTransfer(UsbEndpoint, byte[], int, int, int)}.
 * </p>
 *
 * @param endpoint the endpoint for this transaction
 * @param buffer buffer for data to send or receive
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
","/**
 * Performs a bulk transaction on the given endpoint.
 * The direction of the transfer is determined by the direction of the endpoint.
 * <p>
 * This method transfers data starting from index 0 in the buffer.
 * To specify a different offset, use
 * {@link #bulkTransfer(UsbEndpoint, byte[], int, int, int)}.
 * </p>
 *
 * @param endpoint the endpoint for this transaction
 * @param buffer buffer for data to send or receive; can be {@code null} to wait for next
 * transaction without reading data
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds, 0 is infinite
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the API between the two versions. The comment and the annotation are also the same.,"There is no Compatibility Issue (CI) between the two versions of the API since the implementation, the comment, and the annotation are the same."
71,<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>,25,26,,,,"{
    return (mAllowEnterTransitionOverlap == null) ? true : mAllowEnterTransitionOverlap;
}","{
    return (mAnimationInfo == null || mAnimationInfo.mAllowEnterTransitionOverlap == null) ? true : mAnimationInfo.mAllowEnterTransitionOverlap;
}",1,"/**
 * Returns whether the the exit transition and enter transition overlap or not.
 * When true, the enter transition will start as soon as possible. When false, the
 * enter transition will wait until the exit transition completes before starting.
 *
 * @return true when the enter transition should start as soon as possible or false to
 * when it should wait until the exiting transition completes.
 * @attr ref android.R.styleable#Fragment_fragmentAllowEnterTransitionOverlap
 */
","/**
 * Returns whether the the exit transition and enter transition overlap or not.
 * When true, the enter transition will start as soon as possible. When false, the
 * enter transition will wait until the exit transition completes before starting.
 *
 * @return true when the enter transition should start as soon as possible or false to
 * when it should wait until the exiting transition completes.
 * @attr ref android.R.styleable#Fragment_fragmentAllowEnterTransitionOverlap
 */
",0,,,0,,,,"1,2","1,5",1,1,1,"The return statement has been changed. In the early version, it returns `mAllowEnterTransitionOverlap == null ? true : mAllowEnterTransitionOverlap`. In the late version, it returns `mAnimationInfo == null || mAnimationInfo.mAllowEnterTransitionOverlap == null ? true : mAnimationInfo.mAllowEnterTransitionOverlap`.","The change in the return statement can potentially lead to different return values. In the early version, if `mAllowEnterTransitionOverlap` is null, it returns true. In the late version, if `mAnimationInfo` is null or `mAnimationInfo.mAllowEnterTransitionOverlap` is null, it returns true. This can cause compatibility issues if the calling code is expecting a specific return value."
72,<android.content.pm.ShortcutManager: boolean setDynamicShortcuts(List<ShortcutInfo>)>,25,26,,,,"{
    try {
        return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    try {
        return mService.setDynamicShortcuts(mContext.getPackageName(), new ParceledListSlice(shortcutInfoList), injectMyUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",0,"/**
 * Publish the list of shortcuts.  All existing dynamic shortcuts from the caller application
 * will be replaced.  If there are already pinned shortcuts with the same IDs,
 * the mutable pinned shortcuts are updated.
 *
 * <p>This API will be rate-limited.
 *
 * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.
 *
 * @throws IllegalArgumentException if {@link #getMaxShortcutCountPerActivity()} is exceeded,
 * or when trying to update immutable shortcuts.
 *
 * @throws IllegalStateException when the user is locked.
 */
","/**
 * Publish the list of shortcuts.  All existing dynamic shortcuts from the caller app
 * will be replaced.  If there are already pinned shortcuts with the same IDs,
 * the mutable pinned shortcuts are updated.
 *
 * <p>This API will be rate-limited.
 *
 * @return {@code true} if the call has succeeded. {@code false} if the call is rate-limited.
 *
 * @throws IllegalArgumentException if {@link #getMaxShortcutCountPerActivity()} is exceeded,
 * or when trying to update immutable shortcuts.
 *
 * @throws IllegalStateException when the user is locked.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation and annotation of the API between the two versions.,There is no Compatibility Issue for the API between the two versions.
73,"<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int,Bundle)>",25,26,,,,"{
    startActivityForResult(fragment.mWho, intent, requestCode, options);
}","{
    startActivityForResult(fragment.mWho, intent, requestCode, options);
}",0,"/**
 * This is called when a Fragment in this activity calls its
 * {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}
 * method.
 *
 * <p>This method throws {@link android.content.ActivityNotFoundException}
 * if there was no Activity found to run the given Intent.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 */
","/**
 * This is called when a Fragment in this activity calls its
 * {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}
 * method.
 *
 * <p>This method throws {@link android.content.ActivityNotFoundException}
 * if there was no Activity found to run the given Intent.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)}
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 */
",1,,,0,,,,0,0,0,0,0,"There are no changes in the implementation, comments or annotations between the early version and the late version of the API 'startActivityFromFragment'.",There are no compatibility issues between the early version and the late version of the API 'startActivityFromFragment'.
74,<android.app.FragmentManagerImpl: void dispatchDestroy()>,25,26,,,,"{
    mDestroyed = true;
    execPendingActions();
    moveToState(Fragment.INITIALIZING, false);
    mHost = null;
    mContainer = null;
    mParent = null;
}","{
    mDestroyed = true;
    execPendingActions();
    dispatchMoveToState(Fragment.INITIALIZING);
    mHost = null;
    mContainer = null;
    mParent = null;
}",1,,,0,,,0,,,,2,5,1,4,1,"In the late version, the method call `moveToState(Fragment.INITIALIZING, false)` has been replaced with `dispatchMoveToState(Fragment.INITIALIZING)`. This is a change in the method being called and the number and type of its parameters, so it falls under the ""Dependent API changed"" category (4).","The change in the method being called and its parameters could potentially lead to different behavior in the `dispatchDestroy()` method, including the possibility of it returning a different value or throwing a different exception. Therefore, this is a Compatibility Issue caused by potential different return values or types (1)."
75,"<android.content.res.ResourcesImpl.ThemeImpl: TypedArray obtainStyledAttributes(Theme,AttributeSet,int[],int,int)>",25,26,,,,"{
    synchronized (mKey) {
        final int len = attrs.length;
        final TypedArray array = TypedArray.obtain(wrapper.getResources(), len);
        // XXX note that for now we only work with compiled XML files.
        // To support generic XML files we will need to manually parse
        // out the attributes from the XML file (applying type information
        // contained in the resources and such).
        final XmlBlock.Parser parser = (XmlBlock.Parser) set;
        AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser != null ? parser.mParseState : 0, attrs, array.mData, array.mIndices);
        array.mTheme = wrapper;
        array.mXml = parser;
        return array;
    }
}","{
    synchronized (mKey) {
        final int len = attrs.length;
        final TypedArray array = TypedArray.obtain(wrapper.getResources(), len);
        // XXX note that for now we only work with compiled XML files.
        // To support generic XML files we will need to manually parse
        // out the attributes from the XML file (applying type information
        // contained in the resources and such).
        final XmlBlock.Parser parser = (XmlBlock.Parser) set;
        AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes, parser != null ? parser.mParseState : 0, attrs, attrs.length, array.mDataAddress, array.mIndicesAddress);
        array.mTheme = wrapper;
        array.mXml = parser;
        return array;
    }
}",1,,,0,[@NonNull],[@NonNull],0,,,,2,5,1,5,1,The AssetManager.applyStyle() method has undergone changes in its parameters. The "array.mData" and "array.mIndices" in the early version have been replaced with "array.mDataAddress" and "array.mIndicesAddress" in the late version.,"The changes in the parameters of AssetManager.applyStyle() method can potentially affect the behavior of obtainStyledAttributes() method, leading to different return values and thus, a Compatibility Issue of type 1."
76,<android.app.admin.DevicePolicyManager: int getPermissionPolicy(ComponentName)>,25,26,,,,"{
    throwIfParentInstance(""getPermissionPolicy"");
    try {
        return mService.getPermissionPolicy(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}","{
    throwIfParentInstance(""getPermissionPolicy"");
    try {
        return mService.getPermissionPolicy(admin);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",0,"/**
 * Returns the current runtime permission policy set by the device or profile owner. The
 * default is {@link #PERMISSION_POLICY_PROMPT}.
 * @param admin Which profile or device owner this request is associated with.
 * @return the current policy for future permission requests.
 */
","/**
 * Returns the current runtime permission policy set by the device or profile owner. The
 * default is {@link #PERMISSION_POLICY_PROMPT}.
 *
 * @param admin Which profile or device owner this request is associated with.
 * @return the current policy for future permission requests.
 */
",1,,,0,,,,0,0,0,0,0,"There is no difference in the implementation and annotation of the API between the early version and the late version, so the code change type is 0.","As there is no difference in the behavior of the API between the two versions, there is no compatibility issue, and the CI type is 0."
77,"<android.app.Notification.Builder: Builder setSound(Uri,int)>",25,26,,,,"{
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}","{
    PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"");
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}",1,"/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * <p>
 * A notification that is noisy is more likely to be presented as a heads-up notification.
 * </p>
 * @deprecated use {@link #setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
","/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)}.
 */
",1,[@Deprecated],[@Deprecated],0,,,,2,4,0,4,1,"A new method call ""PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"")"" has been added in the late version, which is not an exception handling statement, a return statement, or a control dependency change. Therefore, the code change type is 4.","The added method ""PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"")"" in the late version potentially causes the API to return a different value, as the method call might affect the value of ""mN.sound"" or ""mN.audioStreamType"". Therefore, the Compatibility Issue type is 1."
78,"<android.provider.DocumentsProvider: String renameDocument(String,String)>",25,26,,,,"{
    throw new UnsupportedOperationException(""Rename not supported"");
}","{
    throw new UnsupportedOperationException(""Rename not supported"");
}",0,"/**
 * Rename an existing document.
 * <p>
 * If a different {@link Document#COLUMN_DOCUMENT_ID} must be used to
 * represent the renamed document, generate and return it. Any outstanding
 * URI permission grants will be updated to point at the new document. If
 * the original {@link Document#COLUMN_DOCUMENT_ID} is still valid after the
 * rename, return {@code null}.
 *
 * @param documentId the document to rename.
 * @param displayName the updated display name of the document. The provider
 * may alter this name to meet any internal constraints, such as
 * avoiding conflicting names.
 */
","/**
 * Rename an existing document.
 * <p>
 * If a different {@link Document#COLUMN_DOCUMENT_ID} must be used to
 * represent the renamed document, generate and return it. Any outstanding
 * URI permission grants will be updated to point at the new document. If
 * the original {@link Document#COLUMN_DOCUMENT_ID} is still valid after the
 * rename, return {@code null}.
 *
 * @param documentId the document to rename.
 * @param displayName the updated display name of the document. The provider
 * may alter this name to meet any internal constraints, such as
 * avoiding conflicting names.
 * @throws AuthenticationRequiredException If authentication is required from
 * the user (such as login credentials), but it is not guaranteed
 * that the client will handle this properly.
 */
",1,[@SuppressWarnings("unused")],[@SuppressWarnings("unused")],0,,,,0,0,0,0,0,"There are no changes in the implementation, annotation or comment of the given API between the early version and the late version.",Compatibility Issue does not exist for the given API between the early version and the late version.
79,"<android.app.admin.DevicePolicyManager: boolean isPackageSuspended(ComponentName,String)>",25,26,,,,"{
    throwIfParentInstance(""isPackageSuspended"");
    if (mService != null) {
        try {
            return mService.isPackageSuspended(admin, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        } catch (IllegalArgumentException ex) {
            throw new NameNotFoundException(packageName);
        }
    }
    return false;
}","{
    throwIfParentInstance(""isPackageSuspended"");
    if (mService != null) {
        try {
            return mService.isPackageSuspended(admin, mContext.getPackageName(), packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        } catch (IllegalArgumentException ex) {
            throw new NameNotFoundException(packageName);
        }
    }
    return false;
}",1,"/**
 * Called by device or profile owners to determine if a package is suspended.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param packageName The name of the package to retrieve the suspended status of.
 * @return {@code true} if the package is suspended or {@code false} if the package is not
 * suspended, could not be found or an error occurred.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if the package could not be found.
 */
","/**
 * Determine if a package is suspended. This function can be called by a device owner, profile
 * owner, or by a delegate given the {@link #DELEGATION_PACKAGE_ACCESS} scope via
 * {@link #setDelegatedScopes}.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with, or
 * {@code null} if the caller is a package access delegate.
 * @param packageName The name of the package to retrieve the suspended status of.
 * @return {@code true} if the package is suspended or {@code false} if the package is not
 * suspended, could not be found or an error occurred.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if the package could not be found.
 * @see #setDelegatedScopes
 * @see #DELEGATION_PACKAGE_ACCESS
 */
",1,,,0,,,,2,"1,5",1,5,1,"The parameter of the method ""mService.isPackageSuspended"" has been changed from (admin, packageName) to (admin, mContext.getPackageName(), packageName). This is a change in the dependent API, so it is classified as 5.","The change in the dependent API ""mService.isPackageSuspended"" may lead to different return values, as the additional parameter ""mContext.getPackageName()"" may affect the result of the method. Therefore, it is a compatibility issue caused by potential different return values or types, so it is classified as 1."
80,<android.app.UiAutomation: AccessibilityNodeInfo findFocus(int)>,25,26,,,,"{
    return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityNodeInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus);
}","{
    return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, AccessibilityWindowInfo.ANY_WINDOW_ID, AccessibilityNodeInfo.ROOT_NODE_ID, focus);
}",1,"/**
 * Find the view that has the specified focus type. The search is performed
 * across all windows.
 * <p>
 * <strong>Note:</strong> In order to access the windows you have to opt-in
 * to retrieve the interactive windows by setting the
 * {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
 * Otherwise, the search will be performed only in the active window.
 * </p>
 *
 * @param focus The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or
 * {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.
 * @return The node info of the focused view or null.
 *
 * @see AccessibilityNodeInfo#FOCUS_INPUT
 * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY
 */
","/**
 * Find the view that has the specified focus type. The search is performed
 * across all windows.
 * <p>
 * <strong>Note:</strong> In order to access the windows you have to opt-in
 * to retrieve the interactive windows by setting the
 * {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
 * Otherwise, the search will be performed only in the active window.
 * </p>
 *
 * @param focus The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or
 * {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.
 * @return The node info of the focused view or null.
 *
 * @see AccessibilityNodeInfo#FOCUS_INPUT
 * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY
 */
",0,,,0,,,,"1,2","1,5",1,5,1,The implementation has changed from using AccessibilityNodeInfo.ANY_WINDOW_ID to using AccessibilityWindowInfo.ANY_WINDOW_ID as the second argument in the AccessibilityInteractionClient.getInstance().findFocus() method call. This is a change in the dependent API.,"The change in the dependent API might affect the behavior of the findFocus() method, potentially causing it to return a different value or type, leading to a compatibility issue."
81,"<android.net.nsd.NsdServiceInfo: Map<String, byte[]> getAttributes()>",25,26,,,,"{
    return Collections.unmodifiableMap(mTxtRecord);
}","{
    return Collections.unmodifiableMap(mTxtRecord);
}",0,"/**
 * Retrive attributes as a map of String keys to byte[] values.
 *
 * <p> The returned map is unmodifiable; changes must be made through {@link #setAttribute} and
 * {@link #removeAttribute}.
 */
","/**
 * Retrieve attributes as a map of String keys to byte[] values. The attributes map is only
 * valid for a resolved service.
 *
 * <p> The returned map is unmodifiable; changes must be made through {@link #setAttribute} and
 * {@link #removeAttribute}.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation or annotations of the given API between the early and late versions.,There is no Compatibility Issue as there is no change in the implementation or annotations of the given API between the early and late versions.
82,"<android.content.pm.PackageInstaller.SessionParams: void writeToParcel(Parcel,int)>",25,26,,,,"{
    dest.writeInt(mode);
    dest.writeInt(installFlags);
    dest.writeInt(installLocation);
    dest.writeLong(sizeBytes);
    dest.writeString(appPackageName);
    dest.writeParcelable(appIcon, flags);
    dest.writeString(appLabel);
    dest.writeParcelable(originatingUri, flags);
    dest.writeInt(originatingUid);
    dest.writeParcelable(referrerUri, flags);
    dest.writeString(abiOverride);
    dest.writeString(volumeUuid);
    dest.writeStringArray(grantedRuntimePermissions);
}","{
    dest.writeInt(mode);
    dest.writeInt(installFlags);
    dest.writeInt(installLocation);
    dest.writeInt(installReason);
    dest.writeLong(sizeBytes);
    dest.writeString(appPackageName);
    dest.writeParcelable(appIcon, flags);
    dest.writeString(appLabel);
    dest.writeParcelable(originatingUri, flags);
    dest.writeInt(originatingUid);
    dest.writeParcelable(referrerUri, flags);
    dest.writeString(abiOverride);
    dest.writeString(volumeUuid);
    dest.writeStringArray(grantedRuntimePermissions);
}",1,,,0,[@Override],[@Override],0,,,,1,4,1,5,0,The implementation of the method has changed from writing an integer value of "installLocation" to writing an integer value of "installReason" to the "Parcel" object. This is a change in the dependent API.,"There is no compatibility issue in this case, as the method is still writing the same type of data (integer) to the ""Parcel"" object and the method signature has not changed. The change in the dependent API only affects the value that is written to the ""Parcel"" object, which is not considered a compatibility issue."
83,<android.os.ParcelFileDescriptor.AutoCloseOutputStream: void close()>,28,29,,,,"{
    try {
        mPfd.close();
    } finally {
        super.close();
    }
}","{
    try {
        super.close();
    } finally {
        mPfd.close();
    }
}",1,,,0,[@Override],[@Override],0,,,,1,3,0,3,1,"The order of the statements in the `try-finally` block has changed. In the early version, `mPfd.close()` is called first, while in the late version, `super.close()` is called first.","The change of the order in which the statements are called can potentially lead to different behaviors. For example, if `super.close()` in the late version throws an exception, `mPfd.close()` will not be called, which is different from the behavior in the early version. Therefore, this change can be a Compatibility Issue (CI) caused by potential different return values or types."
84,"<android.app.usage.UsageStatsManager: List<UsageStats> queryUsageStats(int,long,long)>",28,29,,,,"{
    try {
        @SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice = mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName());
        if (slice != null) {
            return slice.getList();
        }
    } catch (RemoteException e) {
    // fallthrough and return the empty list.
    }
    return Collections.emptyList();
}","{
    try {
        @SuppressWarnings(""unchecked"") ParceledListSlice<UsageStats> slice = mService.queryUsageStats(intervalType, beginTime, endTime, mContext.getOpPackageName());
        if (slice != null) {
            return slice.getList();
        }
    } catch (RemoteException e) {
    // fallthrough and return the empty list.
    }
    return Collections.emptyList();
}",0,"/**
 * Gets application usage stats for the given time range, aggregated by the specified interval.
 * <p>The returned list will contain a {@link UsageStats} object for each package that
 * has data for an interval that is a subset of the time range given. To illustrate:</p>
 * <pre>
 * intervalType = INTERVAL_YEARLY
 * beginTime = 2013
 * endTime = 2015 (exclusive)
 *
 * Results:
 * 2013 - com.example.alpha
 * 2013 - com.example.beta
 * 2014 - com.example.alpha
 * 2014 - com.example.beta
 * 2014 - com.example.charlie
 * </pre>
 *
 * <p> The caller must have {@link android.Manifest.permission#PACKAGE_USAGE_STATS} </p>
 *
 * @param intervalType The time interval by which the stats are aggregated.
 * @param beginTime The inclusive beginning of the range of stats to include in the results.
 * @param endTime The exclusive end of the range of stats to include in the results.
 * @return A list of {@link UsageStats}
 *
 * @see #INTERVAL_DAILY
 * @see #INTERVAL_WEEKLY
 * @see #INTERVAL_MONTHLY
 * @see #INTERVAL_YEARLY
 * @see #INTERVAL_BEST
 */
","/**
 * Gets application usage stats for the given time range, aggregated by the specified interval.
 *
 * <p>
 * The returned list will contain one or more {@link UsageStats} objects for each package, with
 * usage data that covers at least the given time range.
 * Note: The begin and end times of the time range may be expanded to the nearest whole interval
 * period.
 * </p>
 *
 * <p> The caller must have {@link android.Manifest.permission#PACKAGE_USAGE_STATS} </p>
 *
 * @param intervalType The time interval by which the stats are aggregated.
 * @param beginTime The inclusive beginning of the range of stats to include in the results.
 * Defined in terms of ""Unix time"", see
 * {@link java.lang.System#currentTimeMillis}.
 * @param endTime The exclusive end of the range of stats to include in the results. Defined
 * in terms of ""Unix time"", see {@link java.lang.System#currentTimeMillis}.
 * @return A list of {@link UsageStats}
 *
 * @see #INTERVAL_DAILY
 * @see #INTERVAL_WEEKLY
 * @see #INTERVAL_MONTHLY
 * @see #INTERVAL_YEARLY
 * @see #INTERVAL_BEST
 */
",1,,,0,,,,0,0,0,0,0,The implementation of the method is the same between the early and late version. There is no change in the code.,There is no compatibility issue in the method between the early and late version. The method behaves the same in both versions.
85,"<android.view.LayoutInflater: View createViewFromTag(View,String,Context,AttributeSet,boolean)>",28,29,,,,"{
    if (name.equals(""view"")) {
        name = attrs.getAttributeValue(null, ""class"");
    }
    // Apply a theme wrapper, if allowed and one is specified.
    if (!ignoreThemeAttr) {
        final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);
        final int themeResId = ta.getResourceId(0, 0);
        if (themeResId != 0) {
            context = new ContextThemeWrapper(context, themeResId);
        }
        ta.recycle();
    }
    if (name.equals(TAG_1995)) {
        // Let's party like it's 1995!
        return new BlinkLayout(context, attrs);
    }
    try {
        View view;
        if (mFactory2 != null) {
            view = mFactory2.onCreateView(parent, name, context, attrs);
        } else if (mFactory != null) {
            view = mFactory.onCreateView(name, context, attrs);
        } else {
            view = null;
        }
        if (view == null && mPrivateFactory != null) {
            view = mPrivateFactory.onCreateView(parent, name, context, attrs);
        }
        if (view == null) {
            final Object lastContext = mConstructorArgs[0];
            mConstructorArgs[0] = context;
            try {
                if (-1 == name.indexOf('.')) {
                    view = onCreateView(parent, name, attrs);
                } else {
                    view = createView(name, null, attrs);
                }
            } finally {
                mConstructorArgs[0] = lastContext;
            }
        }
        return view;
    } catch (InflateException e) {
        throw e;
    } catch (ClassNotFoundException e) {
        final InflateException ie = new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    } catch (Exception e) {
        final InflateException ie = new InflateException(attrs.getPositionDescription() + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    }
}","{
    if (name.equals(""view"")) {
        name = attrs.getAttributeValue(null, ""class"");
    }
    // Apply a theme wrapper, if allowed and one is specified.
    if (!ignoreThemeAttr) {
        final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);
        final int themeResId = ta.getResourceId(0, 0);
        if (themeResId != 0) {
            context = new ContextThemeWrapper(context, themeResId);
        }
        ta.recycle();
    }
    try {
        View view = tryCreateView(parent, name, context, attrs);
        if (view == null) {
            final Object lastContext = mConstructorArgs[0];
            mConstructorArgs[0] = context;
            try {
                if (-1 == name.indexOf('.')) {
                    view = onCreateView(context, parent, name, attrs);
                } else {
                    view = createView(context, name, null, attrs);
                }
            } finally {
                mConstructorArgs[0] = lastContext;
            }
        }
        return view;
    } catch (InflateException e) {
        throw e;
    } catch (ClassNotFoundException e) {
        final InflateException ie = new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    } catch (Exception e) {
        final InflateException ie = new InflateException(getParserStateDescription(context, attrs) + "": Error inflating class "" + name, e);
        ie.setStackTrace(EMPTY_STACK_TRACE);
        throw ie;
    }
}",1,"/**
 * Creates a view from a tag name using the supplied attribute set.
 * <p>
 * <strong>Note:</strong> Default visibility so the BridgeInflater can
 * override it.
 *
 * @param parent the parent view, used to inflate layout params
 * @param name the name of the XML tag used to define the view
 * @param context the inflation context for the view, typically the
 * {@code parent} or base layout inflater context
 * @param attrs the attribute set for the XML tag used to define the view
 * @param ignoreThemeAttr {@code true} to ignore the {@code android:theme}
 * attribute (if set) for the view being inflated,
 * {@code false} otherwise
 */
","/**
 * Creates a view from a tag name using the supplied attribute set.
 * <p>
 * <strong>Note:</strong> Default visibility so the BridgeInflater can
 * override it.
 *
 * @param parent the parent view, used to inflate layout params
 * @param name the name of the XML tag used to define the view
 * @param context the inflation context for the view, typically the
 * {@code parent} or base layout inflater context
 * @param attrs the attribute set for the XML tag used to define the view
 * @param ignoreThemeAttr {@code true} to ignore the {@code android:theme}
 * attribute (if set) for the view being inflated,
 * {@code false} otherwise
 */
",0,,[@UnsupportedAppUsage],1,,,,"1,2","1,3,4,5",1,"1, 5","1, 2","The method `tryCreateView()` is introduced in the late version, which changes the control dependency of the code. Also, the method signatures of `onCreateView()` and `createView()` have been changed, which is a dependent API change.","The introduction of `tryCreateView()` method may lead to different behavior as it changes the way the view is created. Also, the changes in the method signatures of `onCreateView()` and `createView()` may cause compatibility issues if the app is using the old method signatures. The app may crash or behave unexpectedly if it is not updated to use the new method signatures. Additionally, the change in the exception handling of `ClassNotFoundException` may also lead to different behavior as the error message is now generated by `getParserStateDescription()` method."
86,"<android.view.textclassifier.TextLinks.Builder: Builder addLink(int,int,Map<String, Float>)>",28,29,,,,"{
    mLinks.add(new TextLink(start, end, entityScores, null));
    return this;
}","{
    return addLink(start, end, entityScores, Bundle.EMPTY, null);
}",1,"/**
 * Adds a TextLink.
 *
 * @param start The start index of the identified subsequence
 * @param end The end index of the identified subsequence
 * @param entityScores A mapping of entity type to confidence score
 *
 * @throws IllegalArgumentException if entityScores is null or empty.
 */
","/**
 * Adds a TextLink.
 *
 * @param start The start index of the identified subsequence
 * @param end The end index of the identified subsequence
 * @param entityScores A mapping of entity type to confidence score
 *
 * @throws IllegalArgumentException if entityScores is null or empty.
 */
",0,[@NonNull],[@NonNull],0,,,,"1,2","1,5",1,5,1,"The implementation of the method `addLink(int, int, Map<String, Float>)` in the early version calls the constructor of `TextLink` and adds the created object to a list named `mLinks`. In the late version, however, the implementation of the same method is changed to call another overloaded `addLink` method with four arguments, `addLink(int, int, Map<String, Float>, Bundle)`. The fourth argument in the overloaded method is set to `Bundle.EMPTY`. This is a dependent API change as the implementation of the method is now relying on the overloaded method and the `Bundle.EMPTY` constant.","The change in the implementation of the method can potentially lead to a compatibility issue as the behavior of the method is now dependent on the behavior of the overloaded method. If the overloaded method is changed in the future, it can have an impact on the behavior of the original method. This can lead to unexpected results when the original method is called, thus it is a compatibility issue caused by potential different return values or types."
87,<android.view.inputmethod.InputMethodManager: InputMethodSubtype getLastInputMethodSubtype()>,28,29,,,,"{
    synchronized (mH) {
        try {
            return mService.getLastInputMethodSubtype();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}","{
    try {
        return mService.getLastInputMethodSubtype();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,,,0,,,0,,,,1,4,0,4,0,"The code change is related to the synchronization mechanism. In the early version, the method `getLastInputMethodSubtype()` is synchronized using `mH` object, while in the late version, the synchronization is removed.","The synchronization mechanism change does not lead to Compatibility Issue, as it only affects the method internal implementation, and does not change the return value or exception handling. Therefore, the pred_CI is 0, which means no Compatibility Issue exist."
88,<android.util.ArrayMap: String toString()>,28,29,,,,"{
    if (isEmpty()) {
        return ""{}"";
    }
    StringBuilder buffer = new StringBuilder(mSize * 28);
    buffer.append('{');
    for (int i = 0; i < mSize; i++) {
        if (i > 0) {
            buffer.append("", "");
        }
        Object key = keyAt(i);
        if (key != this) {
            buffer.append(key);
        } else {
            buffer.append(""(this Map)"");
        }
        buffer.append('=');
        Object value = valueAt(i);
        if (value != this) {
            buffer.append(value);
        } else {
            buffer.append(""(this Map)"");
        }
    }
    buffer.append('}');
    return buffer.toString();
}","{
    if (isEmpty()) {
        return ""{}"";
    }
    StringBuilder buffer = new StringBuilder(mSize * 28);
    buffer.append('{');
    for (int i = 0; i < mSize; i++) {
        if (i > 0) {
            buffer.append("", "");
        }
        Object key = keyAt(i);
        if (key != this) {
            buffer.append(key);
        } else {
            buffer.append(""(this Map)"");
        }
        buffer.append('=');
        Object value = valueAt(i);
        if (value != this) {
            buffer.append(ArrayUtils.deepToString(value));
        } else {
            buffer.append(""(this Map)"");
        }
    }
    buffer.append('}');
    return buffer.toString();
}",1,"/**
 * {@inheritDoc}
 *
 * <p>This implementation composes a string by iterating over its mappings. If
 * this map contains itself as a key or a value, the string ""(this Map)""
 * will appear in its place.
 */
","/**
 * {@inheritDoc}
 *
 * <p>This implementation composes a string by iterating over its mappings. If
 * this map contains itself as a key or a value, the string ""(this Map)""
 * will appear in its place.
 */
",0,[@Override],[@Override],0,,,,"1,2",4,1,1,1,"In the Late\_Implementation, the following line of code has been changed:",`buffer.append(ArrayUtils.deepToString(value));`
89,<android.hardware.camera2.CameraMetadata: List<TKey> getKeys()>,28,29,,,,"{
    Class<CameraMetadata<TKey>> thisClass = (Class<CameraMetadata<TKey>>) getClass();
    return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), this, /*filterTags*/
    null));
}","{
    Class<CameraMetadata<TKey>> thisClass = (Class<CameraMetadata<TKey>>) getClass();
    return Collections.unmodifiableList(getKeys(thisClass, getKeyClass(), this, /*filterTags*/
    null, /*includeSynthetic*/
    true));
}",1,"/**
 * Returns a list of the keys contained in this map.
 *
 * <p>The list returned is not modifiable, so any attempts to modify it will throw
 * a {@code UnsupportedOperationException}.</p>
 *
 * <p>All values retrieved by a key from this list with {@code #get} are guaranteed to be
 * non-{@code null}. Each key is only listed once in the list. The order of the keys
 * is undefined.</p>
 *
 * @return List of the keys contained in this map.
 */
","/**
 * Returns a list of the keys contained in this map.
 *
 * <p>The list returned is not modifiable, so any attempts to modify it will throw
 * a {@code UnsupportedOperationException}.</p>
 *
 * <p>All values retrieved by a key from this list with {@code #get} are guaranteed to be
 * non-{@code null}. Each key is only listed once in the list. The order of the keys
 * is undefined.</p>
 *
 * @return List of the keys contained in this map.
 */
",0,"[@SuppressWarnings(""unchecked""), @NonNull]","[@SuppressWarnings(""unchecked""), @NonNull]",0,,,,2,"1,5",1,5,1,"The late implementation of the method `getKeys()` has introduced a new argument `includeSynthetic` with a value of `true` in the call to the method `getKeys(thisClass, getKeyClass(), this, /*filterTags*/ null, /*includeSynthetic*/ true)`. This change in the method call can potentially lead to a different set of keys being returned by the `getKeys()` method, which in turn can cause the `getKeys()` method to return a different list of keys.","The compatibility issue (CI) in this case is caused by the potential for the `getKeys()` method to return a different list of keys in the late version of the API as compared to the early version. This can happen if the introduction of the `includeSynthetic` argument with a value of `true` in the `getKeys()` method call causes the method to include synthetic keys in the list of keys that it returns. This, in turn, can cause the `getKeys()` method to return a list of keys that is different from the list of keys that it would have returned in the early version of the API, where synthetic keys were not included. This can potentially break the code that uses the `getKeys()` method and expects a certain set of keys to be present in the list of keys that the method returns."
90,<android.app.Activity: int getRequestedOrientation()>,28,29,,,,"{
    if (mParent == null) {
        try {
            return ActivityManager.getService().getRequestedOrientation(mToken);
        } catch (RemoteException e) {
        // Empty
        }
    } else {
        return mParent.getRequestedOrientation();
    }
    return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
}","{
    if (mParent == null) {
        try {
            return ActivityTaskManager.getService().getRequestedOrientation(mToken);
        } catch (RemoteException e) {
        // Empty
        }
    } else {
        return mParent.getRequestedOrientation();
    }
    return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
}",1,"/**
 * Return the current requested orientation of the activity.  This will
 * either be the orientation requested in its component's manifest, or
 * the last requested orientation given to
 * {@link #setRequestedOrientation(int)}.
 *
 * @return Returns an orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 */
","/**
 * Return the current requested orientation of the activity.  This will
 * either be the orientation requested in its component's manifest, or
 * the last requested orientation given to
 * {@link #setRequestedOrientation(int)}.
 *
 * @return Returns an orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 */
",0,[@ActivityInfo.ScreenOrientation],[@ActivityInfo.ScreenOrientation],0,,,,2,"1,5",1,5,1,"The implementation of the method `getRequestedOrientation()` has changed between the two versions. In the early version, the method `ActivityManager.getService().getRequestedOrientation(mToken)` is used to get the requested orientation, while in the late version, the method `ActivityTaskManager.getService().getRequestedOrientation(mToken)` is used instead. This is a dependent API change.","The change in the implementation of the method `getRequestedOrientation()` could potentially lead to a different value being returned between the two versions, since the method used to get the requested orientation has changed. This means that any code that relies on the value returned by this method could behave differently between the two versions, leading to a compatibility issue. The CI type is 1, which means Compatibility Issue caused by potential different return values or types."
91,<android.view.MenuItem: Mode getIconTintMode()>,28,29,,,,"{
    return null;
}","{
    return null;
}",0,"/**
 * Returns the blending mode used to apply the tint to this item's icon, if specified.
 *
 * @return the blending mode used to apply the tint to this item's icon
 * @attr ref android.R.styleable#MenuItem_iconTintMode
 * @see #setIconTintMode(PorterDuff.Mode)
 */
","/**
 * Returns the blending mode used to apply the tint to this item's icon, if specified.
 *
 * @return the blending mode used to apply the tint to this item's icon
 * @attr ref android.R.styleable#MenuItem_iconTintMode
 * @see #setIconTintMode(PorterDuff.Mode)
 * @see #setIconTintBlendMode(BlendMode)
 */
",1,[@Nullable],[@Nullable],0,,,,0,0,0,0,0,"The implementation of the method `getIconTintMode()` in both the early version (28) and the late version (29) is the same, i.e., it returns `null`. There are no changes in the code.","As there are no changes in the code of the method `getIconTintMode()` in both the early version (28) and the late version (29), there is no compatibility issue. The method will behave the same way in both the versions."
92,<android.view.ViewTreeObserver: void merge(ViewTreeObserver)>,28,29,,,,"{
    if (observer.mOnWindowAttachListeners != null) {
        if (mOnWindowAttachListeners != null) {
            mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners);
        } else {
            mOnWindowAttachListeners = observer.mOnWindowAttachListeners;
        }
    }
    if (observer.mOnWindowFocusListeners != null) {
        if (mOnWindowFocusListeners != null) {
            mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners);
        } else {
            mOnWindowFocusListeners = observer.mOnWindowFocusListeners;
        }
    }
    if (observer.mOnGlobalFocusListeners != null) {
        if (mOnGlobalFocusListeners != null) {
            mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners);
        } else {
            mOnGlobalFocusListeners = observer.mOnGlobalFocusListeners;
        }
    }
    if (observer.mOnGlobalLayoutListeners != null) {
        if (mOnGlobalLayoutListeners != null) {
            mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners);
        } else {
            mOnGlobalLayoutListeners = observer.mOnGlobalLayoutListeners;
        }
    }
    if (observer.mOnPreDrawListeners != null) {
        if (mOnPreDrawListeners != null) {
            mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners);
        } else {
            mOnPreDrawListeners = observer.mOnPreDrawListeners;
        }
    }
    if (observer.mOnDrawListeners != null) {
        if (mOnDrawListeners != null) {
            mOnDrawListeners.addAll(observer.mOnDrawListeners);
        } else {
            mOnDrawListeners = observer.mOnDrawListeners;
        }
    }
    if (observer.mOnTouchModeChangeListeners != null) {
        if (mOnTouchModeChangeListeners != null) {
            mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners);
        } else {
            mOnTouchModeChangeListeners = observer.mOnTouchModeChangeListeners;
        }
    }
    if (observer.mOnComputeInternalInsetsListeners != null) {
        if (mOnComputeInternalInsetsListeners != null) {
            mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners);
        } else {
            mOnComputeInternalInsetsListeners = observer.mOnComputeInternalInsetsListeners;
        }
    }
    if (observer.mOnScrollChangedListeners != null) {
        if (mOnScrollChangedListeners != null) {
            mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners);
        } else {
            mOnScrollChangedListeners = observer.mOnScrollChangedListeners;
        }
    }
    if (observer.mOnWindowShownListeners != null) {
        if (mOnWindowShownListeners != null) {
            mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners);
        } else {
            mOnWindowShownListeners = observer.mOnWindowShownListeners;
        }
    }
    observer.kill();
}","{
    if (observer.mOnWindowAttachListeners != null) {
        if (mOnWindowAttachListeners != null) {
            mOnWindowAttachListeners.addAll(observer.mOnWindowAttachListeners);
        } else {
            mOnWindowAttachListeners = observer.mOnWindowAttachListeners;
        }
    }
    if (observer.mOnWindowFocusListeners != null) {
        if (mOnWindowFocusListeners != null) {
            mOnWindowFocusListeners.addAll(observer.mOnWindowFocusListeners);
        } else {
            mOnWindowFocusListeners = observer.mOnWindowFocusListeners;
        }
    }
    if (observer.mOnGlobalFocusListeners != null) {
        if (mOnGlobalFocusListeners != null) {
            mOnGlobalFocusListeners.addAll(observer.mOnGlobalFocusListeners);
        } else {
            mOnGlobalFocusListeners = observer.mOnGlobalFocusListeners;
        }
    }
    if (observer.mOnGlobalLayoutListeners != null) {
        if (mOnGlobalLayoutListeners != null) {
            mOnGlobalLayoutListeners.addAll(observer.mOnGlobalLayoutListeners);
        } else {
            mOnGlobalLayoutListeners = observer.mOnGlobalLayoutListeners;
        }
    }
    if (observer.mOnPreDrawListeners != null) {
        if (mOnPreDrawListeners != null) {
            mOnPreDrawListeners.addAll(observer.mOnPreDrawListeners);
        } else {
            mOnPreDrawListeners = observer.mOnPreDrawListeners;
        }
    }
    if (observer.mOnDrawListeners != null) {
        if (mOnDrawListeners != null) {
            mOnDrawListeners.addAll(observer.mOnDrawListeners);
        } else {
            mOnDrawListeners = observer.mOnDrawListeners;
        }
    }
    if (observer.mOnFrameCommitListeners != null) {
        if (mOnFrameCommitListeners != null) {
            mOnFrameCommitListeners.addAll(observer.captureFrameCommitCallbacks());
        } else {
            mOnFrameCommitListeners = observer.captureFrameCommitCallbacks();
        }
    }
    if (observer.mOnTouchModeChangeListeners != null) {
        if (mOnTouchModeChangeListeners != null) {
            mOnTouchModeChangeListeners.addAll(observer.mOnTouchModeChangeListeners);
        } else {
            mOnTouchModeChangeListeners = observer.mOnTouchModeChangeListeners;
        }
    }
    if (observer.mOnComputeInternalInsetsListeners != null) {
        if (mOnComputeInternalInsetsListeners != null) {
            mOnComputeInternalInsetsListeners.addAll(observer.mOnComputeInternalInsetsListeners);
        } else {
            mOnComputeInternalInsetsListeners = observer.mOnComputeInternalInsetsListeners;
        }
    }
    if (observer.mOnScrollChangedListeners != null) {
        if (mOnScrollChangedListeners != null) {
            mOnScrollChangedListeners.addAll(observer.mOnScrollChangedListeners);
        } else {
            mOnScrollChangedListeners = observer.mOnScrollChangedListeners;
        }
    }
    if (observer.mOnWindowShownListeners != null) {
        if (mOnWindowShownListeners != null) {
            mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners);
        } else {
            mOnWindowShownListeners = observer.mOnWindowShownListeners;
        }
    }
    if (observer.mGestureExclusionListeners != null) {
        if (mGestureExclusionListeners != null) {
            mGestureExclusionListeners.addAll(observer.mGestureExclusionListeners);
        } else {
            mGestureExclusionListeners = observer.mGestureExclusionListeners;
        }
    }
    observer.kill();
}",1,"/**
 * Merges all the listeners registered on the specified observer with the listeners
 * registered on this object. After this method is invoked, the specified observer
 * will return false in {@link #isAlive()} and should not be used anymore.
 *
 * @param observer The ViewTreeObserver whose listeners must be added to this observer
 */
","/**
 * Merges all the listeners registered on the specified observer with the listeners
 * registered on this object. After this method is invoked, the specified observer
 * will return false in {@link #isAlive()} and should not be used anymore.
 *
 * @param observer The ViewTreeObserver whose listeners must be added to this observer
 */
",0,,,0,,,,"1,2","3,4",1,"5, 3","1, 2",There are two main changes in the late implementation compared to the early one:,
93,<android.os.StrictMode.AndroidBlockGuardPolicy: int getPolicyMask()>,28,29,,,,"{
    return mPolicyMask;
}","{
    return mThreadPolicyMask;
}",1,"// Part of BlockGuard.Policy interface:
","// Part of BlockGuard.Policy interface:
",0,,,0,,,,"1,2","1,5",1,1,1,The return statement has changed from returning the value of the field `mPolicyMask` to returning the value of the field `mThreadPolicyMask`.,The change in the return statement can lead to compatibility issues as the API may now return a different value than it did in the earlier version. This could cause unexpected behavior in applications that rely on the API to return the original value.
94,<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>,22,23,,,,"{
    try {
        return mService.isActiveNetworkMetered();
    } catch (RemoteException e) {
        return false;
    }
}","{
    try {
        return mService.isActiveNetworkMetered();
    } catch (RemoteException e) {
        return false;
    }
}",0,"/**
 * Returns if the currently active data network is metered. A network is
 * classified as metered when the user is sensitive to heavy data usage on
 * that connection due to monetary costs, data limitations or
 * battery/performance issues. You should check this before doing large
 * data transfers, and warn the user or delay the operation until another
 * network is available.
 *
 * @return {@code true} if large transfers should be avoided, otherwise
 * {@code false}.
 *
 * <p>This method requires the call to hold the permission
 * {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.
 */
","/**
 * Returns if the currently active data network is metered. A network is
 * classified as metered when the user is sensitive to heavy data usage on
 * that connection due to monetary costs, data limitations or
 * battery/performance issues. You should check this before doing large
 * data transfers, and warn the user or delay the operation until another
 * network is available.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.
 *
 * @return {@code true} if large transfers should be avoided, otherwise
 * {@code false}.
 */
",1,,,0,,,,0,0,0,0,0,There is no change between the two versions of the API.,There is no Compatibility Issue between the two versions of the API.
95,<android.view.InputDevice: String toString()>,22,23,,,,"{
    StringBuilder description = new StringBuilder();
    description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n"");
    description.append(""  Descriptor: "").append(mDescriptor).append(""\n"");
    description.append(""  Generation: "").append(mGeneration).append(""\n"");
    description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"");
    description.append(""  Keyboard Type: "");
    switch(mKeyboardType) {
        case KEYBOARD_TYPE_NONE:
            description.append(""none"");
            break;
        case KEYBOARD_TYPE_NON_ALPHABETIC:
            description.append(""non-alphabetic"");
            break;
        case KEYBOARD_TYPE_ALPHABETIC:
            description.append(""alphabetic"");
            break;
    }
    description.append(""\n"");
    description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n"");
    description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("");
    appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard"");
    appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen"");
    appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse"");
    appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick"");
    appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad"");
    description.append("" )\n"");
    final int numAxes = mMotionRanges.size();
    for (int i = 0; i < numAxes; i++) {
        MotionRange range = mMotionRanges.get(i);
        description.append(""    "").append(MotionEvent.axisToString(range.mAxis));
        description.append("": source=0x"").append(Integer.toHexString(range.mSource));
        description.append("" min="").append(range.mMin);
        description.append("" max="").append(range.mMax);
        description.append("" flat="").append(range.mFlat);
        description.append("" fuzz="").append(range.mFuzz);
        description.append("" resolution="").append(range.mResolution);
        description.append(""\n"");
    }
    return description.toString();
}","{
    StringBuilder description = new StringBuilder();
    description.append(""Input Device "").append(mId).append("": "").append(mName).append(""\n"");
    description.append(""  Descriptor: "").append(mDescriptor).append(""\n"");
    description.append(""  Generation: "").append(mGeneration).append(""\n"");
    description.append(""  Location: "").append(mIsExternal ? ""external"" : ""built-in"").append(""\n"");
    description.append(""  Keyboard Type: "");
    switch(mKeyboardType) {
        case KEYBOARD_TYPE_NONE:
            description.append(""none"");
            break;
        case KEYBOARD_TYPE_NON_ALPHABETIC:
            description.append(""non-alphabetic"");
            break;
        case KEYBOARD_TYPE_ALPHABETIC:
            description.append(""alphabetic"");
            break;
    }
    description.append(""\n"");
    description.append(""  Has Vibrator: "").append(mHasVibrator).append(""\n"");
    description.append(""  Has mic: "").append(mHasMicrophone).append(""\n"");
    description.append(""  Sources: 0x"").append(Integer.toHexString(mSources)).append("" ("");
    appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, ""keyboard"");
    appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, ""dpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, ""touchscreen"");
    appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, ""mouse"");
    appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, ""stylus"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, ""trackball"");
    appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, ""touchpad"");
    appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, ""joystick"");
    appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, ""gamepad"");
    description.append("" )\n"");
    final int numAxes = mMotionRanges.size();
    for (int i = 0; i < numAxes; i++) {
        MotionRange range = mMotionRanges.get(i);
        description.append(""    "").append(MotionEvent.axisToString(range.mAxis));
        description.append("": source=0x"").append(Integer.toHexString(range.mSource));
        description.append("" min="").append(range.mMin);
        description.append("" max="").append(range.mMax);
        description.append("" flat="").append(range.mFlat);
        description.append("" fuzz="").append(range.mFuzz);
        description.append("" resolution="").append(range.mResolution);
        description.append(""\n"");
    }
    return description.toString();
}",1,,,0,[@Override],[@Override],0,,,,1,"1,4",1,4,0,The late version implementation of the API has an additional line of code: `description.append(" Has mic: ").append(mHasMicrophone).append("\n");` which adds the information about the presence of a microphone in the string representation of the InputDevice object.,The additional information about the microphone in the string representation of the InputDevice object does not cause any compatibility issues as it does not change the behavior or the return type of the API.
96,<android.view.ViewGroup: boolean isAnimationCacheEnabled()>,22,23,,,,"{
    return (mGroupFlags & FLAG_ANIMATION_CACHE) == FLAG_ANIMATION_CACHE;
}","{
    return (mGroupFlags & FLAG_ANIMATION_CACHE) == FLAG_ANIMATION_CACHE;
}",0,"/**
 * Indicates whether the children's drawing cache is used during a layout
 * animation. By default, the drawing cache is enabled but this will prevent
 * nested layout animations from working. To nest animations, you must disable
 * the cache.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAnimationCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 */
","/**
 * Indicates whether the children's drawing cache is used during a layout
 * animation. By default, the drawing cache is enabled but this will prevent
 * nested layout animations from working. To nest animations, you must disable
 * the cache.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAnimationCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Caching behavior of children may be controlled through {@link View#setLayerType(int, Paint)}.
 */
",1,[@ViewDebug.ExportedProperty],,1,,,,0,0,0,0,0,"There is no change in the implementation of the API between the two versions. The only difference is in the comment, where a deprecation warning has been added in the late version.","There is no compatibility issue, as the behavior of the API remains the same in both versions. The deprecation warning only indicates that the property being returned by the API is ignored in later versions, and that a different method should be used to control the caching behavior of children."
97,"<android.hardware.SystemSensorManager.TriggerEventQueue: void dispatchSensorEvent(int,float[],int,long)>",22,23,,,,"{
    final Sensor sensor = sHandleToSensor.get(handle);
    TriggerEvent t = null;
    synchronized (mTriggerEvents) {
        t = mTriggerEvents.get(handle);
    }
    if (t == null) {
        Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor);
        return;
    }
    // Copy from the values array.
    System.arraycopy(values, 0, t.values, 0, t.values.length);
    t.timestamp = timestamp;
    t.sensor = sensor;
    // A trigger sensor is auto disabled. So just clean up and don't call native
    // disable.
    mManager.cancelTriggerSensorImpl(mListener, sensor, false);
    mListener.onTrigger(t);
}","{
    final Sensor sensor = mManager.mHandleToSensor.get(handle);
    TriggerEvent t = null;
    synchronized (mTriggerEvents) {
        t = mTriggerEvents.get(handle);
    }
    if (t == null) {
        Log.e(TAG, ""Error: Trigger Event is null for Sensor: "" + sensor);
        return;
    }
    // Copy from the values array.
    System.arraycopy(values, 0, t.values, 0, t.values.length);
    t.timestamp = timestamp;
    t.sensor = sensor;
    // A trigger sensor is auto disabled. So just clean up and don't call native
    // disable.
    mManager.cancelTriggerSensorImpl(mListener, sensor, false);
    mListener.onTrigger(t);
}",1,"// Called from native code.
","// Called from native code.
",0,"[@SuppressWarnings(""unused""), @Override]","[@SuppressWarnings(""unused""), @Override]",0,,,,2,"4,5",0,5,1,"The implementation of mManager.mHandleToSensor.get(handle) in the late version is different from that of sHandleToSensor.get(handle) in the early version. The change of dependent API could potentially lead to different return values or types of variable 'sensor', which is used in the following code.","As the variable 'sensor' could potentially have different values or types, the API's behaviours could be different. For example, the log information might be different or the following code might throw an exception in the late version but not in the early version, which makes it a Compatibility Issue caused by potential different return values or types."
98,<android.os.Bundle: boolean hasFileDescriptors()>,22,23,,,,"{
    if (!mFdsKnown) {
        // keep going until we find one or run out of data
        boolean fdFound = false;
        if (mParcelledData != null) {
            if (mParcelledData.hasFileDescriptors()) {
                fdFound = true;
            }
        } else {
            // It's been unparcelled, so we need to walk the map
            for (int i = mMap.size() - 1; i >= 0; i--) {
                Object obj = mMap.valueAt(i);
                if (obj instanceof Parcelable) {
                    if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                        fdFound = true;
                        break;
                    }
                } else if (obj instanceof Parcelable[]) {
                    Parcelable[] array = (Parcelable[]) obj;
                    for (int n = array.length - 1; n >= 0; n--) {
                        if ((array[n].describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof SparseArray) {
                    SparseArray<? extends Parcelable> array = (SparseArray<? extends Parcelable>) obj;
                    for (int n = array.size() - 1; n >= 0; n--) {
                        if ((array.valueAt(n).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof ArrayList) {
                    ArrayList array = (ArrayList) obj;
                    // Parcelables; only look inside for Parcelables
                    if (!array.isEmpty() && (array.get(0) instanceof Parcelable)) {
                        for (int n = array.size() - 1; n >= 0; n--) {
                            Parcelable p = (Parcelable) array.get(n);
                            if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                fdFound = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        mHasFds = fdFound;
        mFdsKnown = true;
    }
    return mHasFds;
}","{
    if (!mFdsKnown) {
        // keep going until we find one or run out of data
        boolean fdFound = false;
        if (mParcelledData != null) {
            if (mParcelledData.hasFileDescriptors()) {
                fdFound = true;
            }
        } else {
            // It's been unparcelled, so we need to walk the map
            for (int i = mMap.size() - 1; i >= 0; i--) {
                Object obj = mMap.valueAt(i);
                if (obj instanceof Parcelable) {
                    if ((((Parcelable) obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                        fdFound = true;
                        break;
                    }
                } else if (obj instanceof Parcelable[]) {
                    Parcelable[] array = (Parcelable[]) obj;
                    for (int n = array.length - 1; n >= 0; n--) {
                        Parcelable p = array[n];
                        if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof SparseArray) {
                    SparseArray<? extends Parcelable> array = (SparseArray<? extends Parcelable>) obj;
                    for (int n = array.size() - 1; n >= 0; n--) {
                        Parcelable p = array.valueAt(n);
                        if (p != null && (p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    }
                } else if (obj instanceof ArrayList) {
                    ArrayList array = (ArrayList) obj;
                    // Parcelables; only look inside for Parcelables
                    if (!array.isEmpty() && (array.get(0) instanceof Parcelable)) {
                        for (int n = array.size() - 1; n >= 0; n--) {
                            Parcelable p = (Parcelable) array.get(n);
                            if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                fdFound = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        mHasFds = fdFound;
        mFdsKnown = true;
    }
    return mHasFds;
}",1,"/**
 * Reports whether the bundle contains any parcelled file descriptors.
 */
","/**
 * Reports whether the bundle contains any parcelled file descriptors.
 */
",0,,,0,,,,"1,2","3,4",1,3,0,"In the late version of the method hasFileDescriptors(), the code inside the else block of the if-else statement (where mParcelledData is null) has been modified. The changes include the addition of null checks for Parcelable objects before checking their describeContents() method.","The code changes made in the late version do not lead to any compatibility issues. The added null checks are just to avoid NullPointerExceptions in case the Parcelable objects are null. The logic of the method remains the same, and it will still return the same boolean value for a given Bundle object."
99,"<android.content.IntentFilter: void writeToParcel(Parcel,int)>",22,23,,,,"{
    dest.writeStringList(mActions);
    if (mCategories != null) {
        dest.writeInt(1);
        dest.writeStringList(mCategories);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataSchemes);
    } else {
        dest.writeInt(0);
    }
    if (mDataTypes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataTypes);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemeSpecificParts != null) {
        final int N = mDataSchemeSpecificParts.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataAuthorities != null) {
        final int N = mDataAuthorities.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataAuthorities.get(i).writeToParcel(dest);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataPaths != null) {
        final int N = mDataPaths.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataPaths.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(mPriority);
    dest.writeInt(mHasPartialTypes ? 1 : 0);
}","{
    dest.writeStringList(mActions);
    if (mCategories != null) {
        dest.writeInt(1);
        dest.writeStringList(mCategories);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataSchemes);
    } else {
        dest.writeInt(0);
    }
    if (mDataTypes != null) {
        dest.writeInt(1);
        dest.writeStringList(mDataTypes);
    } else {
        dest.writeInt(0);
    }
    if (mDataSchemeSpecificParts != null) {
        final int N = mDataSchemeSpecificParts.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataSchemeSpecificParts.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataAuthorities != null) {
        final int N = mDataAuthorities.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataAuthorities.get(i).writeToParcel(dest);
        }
    } else {
        dest.writeInt(0);
    }
    if (mDataPaths != null) {
        final int N = mDataPaths.size();
        dest.writeInt(N);
        for (int i = 0; i < N; i++) {
            mDataPaths.get(i).writeToParcel(dest, flags);
        }
    } else {
        dest.writeInt(0);
    }
    dest.writeInt(mPriority);
    dest.writeInt(mHasPartialTypes ? 1 : 0);
    dest.writeInt(getAutoVerify() ? 1 : 0);
}",1,,,0,,,0,,,,1,"1,4",1,4,0,"A new statement ""dest.writeInt(getAutoVerify() ? 1 : 0);"" has been added to the end of the method, which writes the value of ""getAutoVerify()"" to the Parcel object. This is an example of ""Other statement changed"".","The added statement does not affect the return value or the exception handling of the method, so it does not introduce a Compatibility Issue."
100,<android.content.res.TypedArray: Resources getResources()>,22,23,,,,"{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    return mResources;
}","{
    if (mRecycled) {
        throw new RuntimeException(""Cannot make calls to a recycled instance!"");
    }
    return mResources;
}",0,"/**
 * Return the Resources object this array was loaded from.
 */
","/**
 * Returns the Resources object this array was loaded from.
 *
 * @throws RuntimeException if the TypedArray has already been recycled.
 */
",1,,,0,,,,0,0,0,0,0,"There is no change in the implementation, so the code change type is 0.","As there is no change in the implementation, the behavior of the API will not be affected and there is no compatibility issue, so the CI type is 0."
101,<android.widget.TimePicker: boolean is24HourView()>,22,23,,,,"{
    return mDelegate.is24HourView();
}","{
    return mDelegate.is24HourView();
}",0,"/**
 * @return true if this is in 24 hour view else false.
 */
","/**
 * @return {@code true} if this widget displays time in 24-hour mode,
 * {@code false} otherwise}
 * @see #setIs24HourView(Boolean)
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the `is24HourView()` method in the `TimePicker` class between version 22 and version 23.,There is no compatibility issue in the `is24HourView()` method in the `TimePicker` class between version 22 and version 23. The method behaves the same way in both versions and returns the same value.
102,<android.net.DhcpStateMachine.StoppedState: boolean processMessage(Message)>,22,23,,,,"{
    boolean retValue = HANDLED;
    if (DBG)
        Log.d(TAG, getName() + message.toString() + ""\n"");
    switch(message.what) {
        case CMD_START_DHCP:
            if (mRegisteredForPreDhcpNotification) {
                /* Notify controller before starting DHCP */
                mController.sendMessage(CMD_PRE_DHCP_ACTION);
                transitionTo(mWaitBeforeStartState);
            } else {
                if (runDhcp(DhcpAction.START)) {
                    transitionTo(mRunningState);
                }
            }
            break;
        case CMD_STOP_DHCP:
            // ignore
            break;
        default:
            retValue = NOT_HANDLED;
            break;
    }
    return retValue;
}","{
    boolean retValue = HANDLED;
    if (DBG)
        Log.d(TAG, getName() + message.toString() + ""\n"");
    switch(message.what) {
        case CMD_START_DHCP:
            if (mRegisteredForPreDhcpNotification) {
                /* Notify controller before starting DHCP */
                mController.sendMessage(CMD_PRE_DHCP_ACTION);
                transitionTo(mWaitBeforeStartState);
            } else {
                if (runDhcpStart()) {
                    transitionTo(mRunningState);
                }
            }
            break;
        case CMD_STOP_DHCP:
            // ignore
            break;
        default:
            retValue = NOT_HANDLED;
            break;
    }
    return retValue;
}",1,,,0,[@Override],[@Override],0,,,,2,"3,5",1,5,1,"The method name of the dependent API in the if-else statement has changed from runDhcp(DhcpAction.START) to runDhcpStart(), which is a dependent API change.","The different method name of the dependent API may cause the API to return a different value, leading to a Compatibility Issue caused by potential different return values or types (class 1)."
103,<android.widget.ProgressBar: void setProgressDrawable(Drawable)>,23,24,,,,"{
    if (mProgressDrawable != d) {
        if (mProgressDrawable != null) {
            mProgressDrawable.setCallback(null);
            unscheduleDrawable(mProgressDrawable);
        }
        mProgressDrawable = d;
        if (d != null) {
            d.setCallback(this);
            d.setLayoutDirection(getLayoutDirection());
            if (d.isStateful()) {
                d.setState(getDrawableState());
            }
            // Make sure the ProgressBar is always tall enough
            int drawableHeight = d.getMinimumHeight();
            if (mMaxHeight < drawableHeight) {
                mMaxHeight = drawableHeight;
                requestLayout();
            }
            applyProgressTints();
        }
        if (!mIndeterminate) {
            mCurrentDrawable = d;
            postInvalidate();
        }
        updateDrawableBounds(getWidth(), getHeight());
        updateDrawableState();
        doRefreshProgress(R.id.progress, mProgress, false, false);
        doRefreshProgress(R.id.secondaryProgress, mSecondaryProgress, false, false);
    }
}","{
    if (mProgressDrawable != d) {
        if (mProgressDrawable != null) {
            mProgressDrawable.setCallback(null);
            unscheduleDrawable(mProgressDrawable);
        }
        mProgressDrawable = d;
        if (d != null) {
            d.setCallback(this);
            d.setLayoutDirection(getLayoutDirection());
            if (d.isStateful()) {
                d.setState(getDrawableState());
            }
            // Make sure the ProgressBar is always tall enough
            int drawableHeight = d.getMinimumHeight();
            if (mMaxHeight < drawableHeight) {
                mMaxHeight = drawableHeight;
                requestLayout();
            }
            applyProgressTints();
        }
        if (!mIndeterminate) {
            swapCurrentDrawable(d);
            postInvalidate();
        }
        updateDrawableBounds(getWidth(), getHeight());
        updateDrawableState();
        doRefreshProgress(R.id.progress, mProgress, false, false, false);
        doRefreshProgress(R.id.secondaryProgress, mSecondaryProgress, false, false, false);
    }
}",1,"/**
 * Define the drawable used to draw the progress bar in progress mode.
 *
 * @param d the new drawable
 * @see #getProgressDrawable()
 * @see #setIndeterminate(boolean)
 */
","/**
 * Define the drawable used to draw the progress bar in progress mode.
 *
 * @param d the new drawable
 * @see #getProgressDrawable()
 * @see #setIndeterminate(boolean)
 */
",0,,,0,,,,"1,2","4,5",1,"1, 4",1,"The implementation of `setProgressDrawable(Drawable)` in the late version has two changes as compared to the early version. First, the statement `mCurrentDrawable = d;` is replaced with `swapCurrentDrawable(d);`. This is a return statement change, and hence the code change type is 1. Second, the method `doRefreshProgress(int, int, boolean, boolean)` is replaced with `doRefreshProgress(int, int, boolean, boolean, boolean)`. This is a dependent API change, and hence the code change type is 5. However, since the method `doRefreshProgress` is called with the same arguments in both versions, and the new argument in the late version is always `false`, this dependent API change does not affect the behavior of `setProgressDrawable(Drawable)`. Hence, we do not consider it as a code change for the purpose of compatibility issues.","The change from `mCurrentDrawable = d;` to `swapCurrentDrawable(d);` can potentially cause a compatibility issue. In the early version, the `ProgressBar`'s current drawable is directly set to the new drawable `d`. In the late version, however, the `swapCurrentDrawable` method is called, which first sets the new drawable `d` as the next drawable, and then sets the current drawable to `null`. This means that the `ProgressBar`'s current drawable is temporarily `null` during the transition from the old drawable to the new drawable. If any code depends on the `ProgressBar`'s current drawable not being `null` during this transition, it may break in the late version. For example, if a custom `Drawable` is used that relies on the `ProgressBar`'s current bounds in its `draw` method, it may throw a `NullPointerException` when the current drawable is `null`."
104,"<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(CharSequence,int)>",23,24,,,,"{
    return mTarget.setComposingText(text, newCursorPosition);
}","{
    return mTarget.setComposingText(text, newCursorPosition);
}",0,,"/**
 * {@inheritDoc}
 * @throws NullPointerException if the target is {@code null}.
 */
",1,,,0,,,,0,0,0,0,0,There is no change in the implementation of the given API between the two versions.,There is no Compatibility Issue for the given API between the two versions.
105,<android.preference.PreferenceFragment: void onDestroyView()>,23,24,,,,"{
    mList = null;
    mHandler.removeCallbacks(mRequestFocus);
    mHandler.removeMessages(MSG_BIND_PREFERENCES);
    super.onDestroyView();
}","{
    if (mList != null) {
        mList.setOnKeyListener(null);
    }
    mList = null;
    mHandler.removeCallbacks(mRequestFocus);
    mHandler.removeMessages(MSG_BIND_PREFERENCES);
    super.onDestroyView();
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4",0,3,0,"In the late version implementation, an additional if statement is included to check if the mList is not null before setting the OnKeyListener to null.","The additional if statement in the late version implementation does not affect the functionality or behavior of the API, as the mList is already being set to null in the next line. Therefore, no compatibility issue exists."
106,"<android.app.admin.DevicePolicyManager: void setUserIcon(ComponentName,Bitmap)>",23,24,,,,"{
    try {
        mService.setUserIcon(admin, icon);
    } catch (RemoteException re) {
        Log.w(TAG, ""Could not set the user icon "", re);
    }
}","{
    throwIfParentInstance(""setUserIcon"");
    try {
        mService.setUserIcon(admin, icon);
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",1,"/**
 * Called by profile or device owners to set the current user's photo.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param icon the bitmap to set as the photo.
 */
","/**
 * Called by profile or device owners to set the user's photo.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param icon the bitmap to set as the photo.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 */
",1,,,0,,,,"1,2","2,4",2,"2, 5",2,"The code changes between the two versions include the addition of a new statement ""throwIfParentInstance(""setUserIcon"");"" and the change of exception handling, where ""Log.w(TAG, ""Could not set the user icon "", re);"" is replaced by ""throw re.rethrowFromSystemServer();"". The first change is classified as ""Other statement changed"" (category 4), while the second change is classified as ""Exception handling statement changed"" (category 2). Additionally, the dependent API ""mService.setUserIcon(admin, icon);"" has not undergone any changes in its method name or parameters, so it is not classified as ""Dependent API changed"" (category 5).","The change of exception handling can potentially lead to a Compatibility Issue (CI). In the early version, when a RemoteException is caught, the API will log a warning message and continue to execute the following statements. However, in the late version, the caught RemoteException is rethrown by ""throw re.rethrowFromSystemServer();"", which may terminate the execution of the API and propagate the exception to the caller. Therefore, the late version of the API may exhibit different behavior in terms of exception handling, which is classified as ""Compatibility Issue caused by potential different exception handlings"" (category 2)."
107,<android.bluetooth.BluetoothGatt: boolean readCharacteristic(BluetoothGattCharacteristic)>,23,24,,,,"{
    if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ) == 0)
        return false;
    if (VDBG)
        Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid());
    if (mService == null || mClientIf == 0)
        return false;
    BluetoothGattService service = characteristic.getService();
    if (service == null)
        return false;
    BluetoothDevice device = service.getDevice();
    if (device == null)
        return false;
    synchronized (mDeviceBusy) {
        if (mDeviceBusy)
            return false;
        mDeviceBusy = true;
    }
    try {
        mService.readCharacteristic(mClientIf, device.getAddress(), service.getType(), service.getInstanceId(), new ParcelUuid(service.getUuid()), characteristic.getInstanceId(), new ParcelUuid(characteristic.getUuid()), AUTHENTICATION_NONE);
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
        mDeviceBusy = false;
        return false;
    }
    return true;
}","{
    if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_READ) == 0)
        return false;
    if (VDBG)
        Log.d(TAG, ""readCharacteristic() - uuid: "" + characteristic.getUuid());
    if (mService == null || mClientIf == 0)
        return false;
    BluetoothGattService service = characteristic.getService();
    if (service == null)
        return false;
    BluetoothDevice device = service.getDevice();
    if (device == null)
        return false;
    synchronized (mDeviceBusy) {
        if (mDeviceBusy)
            return false;
        mDeviceBusy = true;
    }
    try {
        mService.readCharacteristic(mClientIf, device.getAddress(), characteristic.getInstanceId(), AUTHENTICATION_NONE);
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
        mDeviceBusy = false;
        return false;
    }
    return true;
}",1,"/**
 * Reads the requested characteristic from the associated remote device.
 *
 * <p>This is an asynchronous operation. The result of the read operation
 * is reported by the {@link BluetoothGattCallback#onCharacteristicRead}
 * callback.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param characteristic Characteristic to read from the remote device
 * @return true, if the read operation was initiated successfully
 */
","/**
 * Reads the requested characteristic from the associated remote device.
 *
 * <p>This is an asynchronous operation. The result of the read operation
 * is reported by the {@link BluetoothGattCallback#onCharacteristicRead}
 * callback.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param characteristic Characteristic to read from the remote device
 * @return true, if the read operation was initiated successfully
 */
",0,,,0,,,,2,5,1,5,1,"The method mService.readCharacteristic() has undergone changes, including modifications to the method name and alterations in the type or number of parameters. Therefore, the code change type is 5.","The different parameters in the mService.readCharacteristic() method between the two versions may cause the API to return different variable values. Therefore, the Compatibility Issue type is 1."
108,<android.widget.TextView: void drawableStateChanged()>,23,24,,,,"{
    super.drawableStateChanged();
    if (mTextColor != null && mTextColor.isStateful() || (mHintTextColor != null && mHintTextColor.isStateful()) || (mLinkTextColor != null && mLinkTextColor.isStateful())) {
        updateTextColors();
    }
    if (mDrawables != null) {
        final int[] state = getDrawableState();
        for (Drawable dr : mDrawables.mShowing) {
            if (dr != null && dr.isStateful()) {
                dr.setState(state);
            }
        }
    }
}","{
    super.drawableStateChanged();
    if (mTextColor != null && mTextColor.isStateful() || (mHintTextColor != null && mHintTextColor.isStateful()) || (mLinkTextColor != null && mLinkTextColor.isStateful())) {
        updateTextColors();
    }
    if (mDrawables != null) {
        final int[] state = getDrawableState();
        for (Drawable dr : mDrawables.mShowing) {
            if (dr != null && dr.isStateful() && dr.setState(state)) {
                invalidateDrawable(dr);
            }
        }
    }
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",1,3,1,"An additional condition ""dr.setState(state)"" and a new statement ""invalidateDrawable(dr)"" have been added to the if-statement inside the for-loop. The change of control dependency affects the execution of the ""invalidateDrawable(dr)"" statement, which potentially causes the API to return a different value or throw an exception.","The additional condition ""dr.setState(state)"" and the new statement ""invalidateDrawable(dr)"" in the late version might cause the API to return a different value or throw an exception, because the execution of the ""invalidateDrawable(dr)"" statement depends on the result of the ""dr.setState(state)"" statement. This change of control dependency potentially leads to a Compatibility Issue caused by potential different return values or types."
109,<android.widget.AbsSeekBar: void jumpDrawablesToCurrentState()>,23,24,,,,"{
    super.jumpDrawablesToCurrentState();
    if (mThumb != null) {
        mThumb.jumpToCurrentState();
    }
}","{
    super.jumpDrawablesToCurrentState();
    if (mThumb != null) {
        mThumb.jumpToCurrentState();
    }
    if (mTickMark != null) {
        mTickMark.jumpToCurrentState();
    }
}",1,,,0,[@Override],[@Override],0,,,,"1,2","1,3,4",0,4,1,"The new implementation has an additional block of code for updating the state of `mTickMark` if it is not null. This block of code is controlled by an `if` statement, so it is a control dependency change.","The new implementation of `jumpDrawablesToCurrentState()` may lead to different behavior if `mTickMark` is not null, as it will now update the state of `mTickMark` as well. This can potentially affect the visual appearance of the `AbsSeekBar`. Therefore, it is a Compatibility Issue caused by potential different return values or types."
110,"<android.preference.SeekBarVolumizer.Receiver: void onReceive(Context,Intent)>",23,24,,,,"{
    final String action = intent.getAction();
    if (AudioManager.VOLUME_CHANGED_ACTION.equals(action)) {
        int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
        int streamValue = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1);
        final boolean streamMatch = mNotificationOrRing ? isNotificationOrRing(streamType) : (streamType == mStreamType);
        if (mSeekBar != null && streamMatch && streamValue != -1) {
            final boolean muted = mAudioManager.isStreamMute(mStreamType) || streamValue == 0;
            mUiHandler.postUpdateSlider(streamValue, mLastAudibleStreamVolume, muted);
        }
    } else if (AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION.equals(action)) {
        if (mNotificationOrRing) {
            mRingerMode = mAudioManager.getRingerModeInternal();
        }
        if (mAffectedByRingerMode) {
            updateSlider();
        }
    } else if (NotificationManager.ACTION_INTERRUPTION_FILTER_CHANGED.equals(action)) {
        mZenMode = mNotificationManager.getZenMode();
        updateSlider();
    }
}","{
    final String action = intent.getAction();
    if (AudioManager.VOLUME_CHANGED_ACTION.equals(action)) {
        int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
        int streamValue = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, -1);
        updateVolumeSlider(streamType, streamValue);
    } else if (AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION.equals(action)) {
        if (mNotificationOrRing) {
            mRingerMode = mAudioManager.getRingerModeInternal();
        }
        if (mAffectedByRingerMode) {
            updateSlider();
        }
    } else if (AudioManager.STREAM_DEVICES_CHANGED_ACTION.equals(action)) {
        int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
        int streamVolume = mAudioManager.getStreamVolume(streamType);
        updateVolumeSlider(streamType, streamVolume);
    } else if (NotificationManager.ACTION_INTERRUPTION_FILTER_CHANGED.equals(action)) {
        mZenMode = mNotificationManager.getZenMode();
        updateSlider();
    }
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4",0,"1, 5","1, 2",The code change between the two versions falls into the following categories:,"3. Control dependency changed: The control flow of the `onReceive()` method has been changed. In the early version, the method `updateSlider()` is called in three different branches of the if-else statement. In the late version, the method `updateSlider()` is only called in two branches, and a new branch for `AudioManager.STREAM_DEVICES_CHANGED_ACTION` has been added."
111,<android.widget.Editor.PinnedPopupWindow: void hide()>,23,24,,,,"{
    mPopupWindow.dismiss();
    getPositionListener().removeSubscriber(this);
}","{
    if (!isShowing()) {
        return;
    }
    mPopupWindow.dismiss();
    getPositionListener().removeSubscriber(this);
}",1,,,0,,,0,,,,"1,2","1,3,4",1,3,1,"A new 'if' statement has been added in the late version, which makes the code change type 3 (Control dependency changed). This new 'if' statement checks whether the popup window is currently showing before dismissing it.","The added 'if' statement could potentially cause the API to return a different value, specifically in the case where the popup window is not currently showing. In the early version, the 'dismiss()' method would still be called even if the window is not showing, which could result in a 'NullPointerException' or other unexpected behavior. In the late version, the 'dismiss()' method is not called in this case, so the API returns normally without any exception, which is a Compatibility Issue caused by potential different return values or types (type 1)."
112,<android.content.pm.PackageInstaller: List<SessionInfo> getAllSessions()>,23,24,,,,"{
    final ApplicationInfo info = mContext.getApplicationInfo();
    if (""com.google.android.googlequicksearchbox"".equals(info.packageName) && info.versionCode <= 300400110) {
        Log.d(TAG, ""Ignoring callback request from old prebuilt"");
        return Collections.EMPTY_LIST;
    }
    try {
        return mInstaller.getAllSessions(mUserId).getList();
    } catch (RemoteException e) {
        throw e.rethrowAsRuntimeException();
    }
}","{
    try {
        return mInstaller.getAllSessions(mUserId).getList();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Return list of all known install sessions, regardless of the installer.
 */
","/**
 * Return list of all known install sessions, regardless of the installer.
 */
",0,[@NonNull],[@NonNull],0,,,,"1,2","1,2,3,4,5","1,2","1,2","1,2","The code change between the two versions is that the if-statement block in the early version has been removed in the late version. This if-statement block checks the package name and version code, and returns an empty list if the conditions are met. Therefore, the removal of this if-statement block potentially changes the return value of the API, and also changes the exception handling as the catch block in the late version rethrows the exception from system server.","The Compatibility Issue arises due to the potential different return values and exception handling of the API in the two versions. In the early version, if the package name and version code meet the conditions in the if-statement block, the API returns an empty list. However, in the late version, this if-statement block is removed, and the API will not return an empty list in this case, which could lead to different behaviors in the client code. Additionally, the exception handling has also changed, as the catch block in the late version rethrows the exception from system server, which could also lead to different behaviors in the client code."
113,<android.widget.ActionMenuPresenter.OpenOverflowRunnable: void run()>,23,24,,,,"{
    mMenu.changeMenuMode();
    final View menuView = (View) mMenuView;
    if (menuView != null && menuView.getWindowToken() != null && mPopup.tryShow()) {
        mOverflowPopup = mPopup;
    }
    mPostedOpenRunnable = null;
}","{
    if (mMenu != null) {
        mMenu.changeMenuMode();
    }
    final View menuView = (View) mMenuView;
    if (menuView != null && menuView.getWindowToken() != null && mPopup.tryShow()) {
        mOverflowPopup = mPopup;
    }
    mPostedOpenRunnable = null;
}",1,,,0,,,0,,,,1,3,1,3,1,"In the late version, there is an additional null check for `mMenu` before calling `changeMenuMode()` on it. This is a control dependency change because the null check introduces a new condition that affects whether or not the `changeMenuMode()` method is called.","The compatibility issue arises because the late version of the API has a different behavior than the early version when `mMenu` is null. In the early version, a `NullPointerException` would be thrown when trying to call `changeMenuMode()` on a null `mMenu` object. However, in the late version, the null check prevents the `NullPointerException` from being thrown and the `changeMenuMode()` method is simply not called. This means that any code that depends on the `NullPointerException` being thrown in the early version would not behave as expected in the late version."
114,"<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(Account,String,Bundle,boolean,AccountManagerCallback<Bundle>,Handler)>",23,24,,,,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    final Bundle optionsIn = new Bundle();
    if (options != null) {
        optionsIn.putAll(options);
    }
    optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName());
    return new AmsTask(null, handler, callback) {

        public void doWork() throws RemoteException {
            mService.getAuthToken(mResponse, account, authTokenType, notifyAuthFailure, false, /* expectActivityLaunch */
            optionsIn);
        }
    }.start();
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    if (authTokenType == null)
        throw new IllegalArgumentException(""authTokenType is null"");
    final Bundle optionsIn = new Bundle();
    if (options != null) {
        optionsIn.putAll(options);
    }
    optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, mContext.getPackageName());
    return new AmsTask(null, handler, callback) {

        @Override
        public void doWork() throws RemoteException {
            mService.getAuthToken(mResponse, account, authTokenType, notifyAuthFailure, false, /* expectActivityLaunch */
            optionsIn);
        }
    }.start();
}",1,"/**
 * Gets an auth token of the specified type for a particular account,
 * optionally raising a notification if the user must enter credentials.
 * This method is intended for background tasks and services where the
 * user should not be immediately interrupted with a password prompt.
 *
 * <p>If a previously generated auth token is cached for this account and
 * type, then it is returned.  Otherwise, if a saved password is
 * available, it is sent to the server to generate a new auth token.
 * Otherwise, an {@link Intent} is returned which, when started, will
 * prompt the user for a password.  If the notifyAuthFailure parameter is
 * set, a status bar notification is also created with the same Intent,
 * alerting the user that they need to enter a password at some point.
 *
 * <p>In that case, you may need to wait until the user responds, which
 * could take hours or days or forever.  When the user does respond and
 * supply a new password, the account manager will broadcast the
 * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can
 * use to try again.
 *
 * <p>If notifyAuthFailure is not set, it is the application's
 * responsibility to launch the returned Intent at some point.
 * Either way, the result from this call will not wait for user action.
 *
 * <p>Some authenticators have auth token <em>types</em>, whose value
 * is authenticator-dependent.  Some services use different token types to
 * access different functionality -- for example, Google uses different auth
 * tokens to access Gmail and Google Calendar for the same account.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * USE_CREDENTIALS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The account to fetch an auth token for
 * @param authTokenType The auth token type, an authenticator-dependent
 * string token, must not be null
 * @param options Authenticator-specific options for the request,
 * may be null or empty
 * @param notifyAuthFailure True to add a notification to prompt the
 * user for a password if necessary, false to leave that to the caller
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Bundle with
 * at least the following fields on success:
 * <ul>
 * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
 * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
 * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
 * </ul>
 *
 * (Other authenticator-specific values may be returned.)  If the user
 * must enter credentials, the returned Bundle contains only
 * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
 *
 * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
 * <ul>
 * <li> {@link AuthenticatorException} if the authenticator failed to respond
 * <li> {@link OperationCanceledException} if the operation is canceled for
 * any reason, incluidng the user canceling a credential request
 * <li> {@link IOException} if the authenticator experienced an I/O problem
 * creating a new auth token, usually because of network trouble
 * </ul>
 * If the account is no longer present on the device, the return value is
 * authenticator-dependent.  The caller should verify the validity of the
 * account before requesting an auth token.
 */
","/**
 * Gets an auth token of the specified type for a particular account,
 * optionally raising a notification if the user must enter credentials.
 * This method is intended for background tasks and services where the
 * user should not be immediately interrupted with a password prompt.
 *
 * <p>If a previously generated auth token is cached for this account and
 * type, then it is returned.  Otherwise, if a saved password is
 * available, it is sent to the server to generate a new auth token.
 * Otherwise, an {@link Intent} is returned which, when started, will
 * prompt the user for a password.  If the notifyAuthFailure parameter is
 * set, a status bar notification is also created with the same Intent,
 * alerting the user that they need to enter a password at some point.
 *
 * <p>In that case, you may need to wait until the user responds, which
 * could take hours or days or forever.  When the user does respond and
 * supply a new password, the account manager will broadcast the
 * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can
 * use to try again.
 *
 * <p>If notifyAuthFailure is not set, it is the application's
 * responsibility to launch the returned Intent at some point.
 * Either way, the result from this call will not wait for user action.
 *
 * <p>Some authenticators have auth token <em>types</em>, whose value
 * is authenticator-dependent.  Some services use different token types to
 * access different functionality -- for example, Google uses different auth
 * tokens to access Gmail and Google Calendar for the same account.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * USE_CREDENTIALS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The account to fetch an auth token for
 * @param authTokenType The auth token type, an authenticator-dependent
 * string token, must not be null
 * @param options Authenticator-specific options for the request,
 * may be null or empty
 * @param notifyAuthFailure True to add a notification to prompt the
 * user for a password if necessary, false to leave that to the caller
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Bundle with
 * at least the following fields on success:
 * <ul>
 * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
 * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
 * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
 * </ul>
 *
 * (Other authenticator-specific values may be returned.)  If the user
 * must enter credentials, the returned Bundle contains only
 * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
 *
 * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
 * <ul>
 * <li> {@link AuthenticatorException} if the authenticator failed to respond
 * <li> {@link OperationCanceledException} if the operation is canceled for
 * any reason, incluidng the user canceling a credential request
 * <li> {@link IOException} if the authenticator experienced an I/O problem
 * creating a new auth token, usually because of network trouble
 * </ul>
 * If the account is no longer present on the device, the return value is
 * authenticator-dependent.  The caller should verify the validity of the
 * account before requesting an auth token.
 */
",0,,,0,,,,1,4,0,0,0,No code change between the two versions.,No compatibility issue exists.
115,<android.net.NetworkRequest: int hashCode()>,24,25,,,,"{
    return requestId + (legacyType * 1013) + (networkCapabilities.hashCode() * 1051);
}","{
    return Objects.hash(requestId, legacyType, networkCapabilities, type);
}",1,,,0,,,0,,,,"1,2","1,5",1,"1, 5",1,"The implementation of the `hashCode()` method has changed. In the early version, the `hashCode()` value is calculated by summing up the `requestId`, `legacyType` multiplied by 1013, and `networkCapabilities.hashCode()` multiplied by 1051. In the late version, the `hashCode()` value is calculated using the `Objects.hash()` method, which takes `requestId`, `legacyType`, `networkCapabilities`, and `type` as its arguments. The change type is 1 (Return statement changed) and 5 (Dependent API changed) because the return statement has changed and the method for calculating the `hashCode()` value has been changed to a different API (`Objects.hash()`).","The Compatibility Issue (CI) exists in this case because the change in the `hashCode()` method implementation can lead to different `hashCode()` values for the same `NetworkRequest` object in different versions of the API. This can cause compatibility issues in the application that uses the `NetworkRequest` class and its `hashCode()` method. For example, if the application uses a `HashMap` or a `HashSet` to store `NetworkRequest` objects, the objects may not be correctly retrieved or removed from the data structure due to the different `hashCode()` values. The CI type is 1 (Compatibility Issue caused by potential different return values or types)."
116,<android.view.TextureView: HardwareLayer getHardwareLayer()>,24,25,,,,"{
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createTextureLayer();
        if (!mUpdateSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = new SurfaceTexture(false);
            mLayer.setSurfaceTexture(mSurface);
        }
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        nCreateNativeWindow(mSurface);
        mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler);
        if (mListener != null && !mUpdateSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    return mLayer;
}","{
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createTextureLayer();
        boolean createNewSurface = (mSurface == null);
        if (createNewSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = new SurfaceTexture(false);
            nCreateNativeWindow(mSurface);
        }
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler);
        if (mListener != null && createNewSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    return mLayer;
}",1,,,0,,,0,,,,"1,2","3,4,5",1,"1, 4",1,"The code change between the two versions is a combination of return statement change and other statement change. In the early version, the `mSurface` object is created and the `nCreateNativeWindow(mSurface)` method is called only when `!mUpdateSurface`. In the late version, the `mSurface` object is created and the `nCreateNativeWindow(mSurface)` method is called only when `mSurface == null`. Also, the `mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight())` method is called only when `mSurface == null` in the late version. The `mSurface == null` condition is equivalent to `!mUpdateSurface && mSurface == null` in the early version, so the creation of the `mSurface` object and the calling of the `nCreateNativeWindow(mSurface)` and `mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight())` methods may be different between the two versions.","The Compatibility Issue is caused by the potential different return values or types. The `mSurface` object is used to create the `HardwareLayer` object, so the creation of the `mSurface` object may affect the creation of the `HardwareLayer` object. If the `mSurface` object is not created in the late version, the `HardwareLayer` object may not be created correctly, which may lead to different behaviors of the API."
117,<android.nfc.NfcAdapter: void disableReaderMode(Activity)>,24,25,,,,"{
    mNfcActivityManager.disableReaderMode(activity);
}","{
    synchronized (NfcAdapter.class) {
        if (!sHasNfcFeature) {
            throw new UnsupportedOperationException();
        }
    }
    mNfcActivityManager.disableReaderMode(activity);
}",1,"/**
 * Restore the NFC adapter to normal mode of operation: supporting
 * peer-to-peer (Android Beam), card emulation, and polling for
 * all supported tag technologies.
 *
 * @param activity the Activity that currently has reader mode enabled
 */
","/**
 * Restore the NFC adapter to normal mode of operation: supporting
 * peer-to-peer (Android Beam), card emulation, and polling for
 * all supported tag technologies.
 *
 * @param activity the Activity that currently has reader mode enabled
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 */
",1,,,0,,,,"1,2","2,3,4","1,2","2, 5",2,The late version implementation added a synchronized block and a condition check with a throw statement for UnsupportedOperationException.,"The added condition check and throw statement for UnsupportedOperationException in the late version can cause a compatibility issue. In the early version, the method disableReaderMode(Activity) will be called without any condition check. However, in the late version, if the sHasNfcFeature is false, an UnsupportedOperationException will be thrown, and the method disableReaderMode(Activity) will not be called. This can lead to different behaviors between the two versions."
118,<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(ComponentName)>,24,25,,,,"{
    return getPasswordMinimumLength(admin, myUserId());
}","{
    return getPasswordMinimumLength(admin, myUserId());
}",0,"/**
 * Retrieve the current minimum password length for a particular admin or all admins that set
 * retrictions on this user and its participating profiles. Restrictions on profiles that have
 * a separate challenge are not taken into account.
 *
 * <p>This method can be called on the {@link DevicePolicyManager} instance
 * returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
 * restrictions on the parent profile.
 *
 * user and its profiles or a particular one.
 * @param admin The name of the admin component to check, or {@code null} to aggregate
 * all admins.
 */
","/**
 * Retrieve the current minimum password length for a particular admin or all admins that set
 * restrictions on this user and its participating profiles. Restrictions on profiles that have
 * a separate challenge are not taken into account.
 *
 * <p>This method can be called on the {@link DevicePolicyManager} instance
 * returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
 * restrictions on the parent profile.
 *
 * user and its profiles or a particular one.
 * @param admin The name of the admin component to check, or {@code null} to aggregate
 * all admins.
 */
",1,,,0,,,,0,0,0,0,0,"There is no change in the implementation, comment, and annotation between the early and late versions of the API.","There is no compatibility issue in the API between two continuous versions because there is no change in the implementation, comment, and annotation."
119,"<android.provider.DocumentsProvider: String copyDocument(String,String)>",25,26,,,,"{
    throw new UnsupportedOperationException(""Copy not supported"");
}","{
    throw new UnsupportedOperationException(""Copy not supported"");
}",0,"/**
 * Copy the requested document or a document tree.
 * <p>
 * Copies a document including all child documents to another location within
 * the same document provider. Upon completion returns the document id of
 * the copied document at the target destination. {@code null} must never
 * be returned.
 *
 * @param sourceDocumentId the document to copy.
 * @param targetParentDocumentId the target document to be copied into as a child.
 */
","/**
 * Copy the requested document or a document tree.
 * <p>
 * Copies a document including all child documents to another location within
 * the same document provider. Upon completion returns the document id of
 * the copied document at the target destination. {@code null} must never
 * be returned.
 *
 * @param sourceDocumentId the document to copy.
 * @param targetParentDocumentId the target document to be copied into as a child.
 * @throws AuthenticationRequiredException If authentication is required from
 * the user (such as login credentials), but it is not guaranteed
 * that the client will handle this properly.
 */
",1,[@SuppressWarnings("unused")],[@SuppressWarnings("unused")],0,,,,0,0,0,0,0,"There are no changes in the implementation, annotation, and comment between the early and late versions of the API.","There are no compatibility issues between the early and late versions of the API since there are no changes in the implementation, annotation, and comment."
120,<android.widget.TextView: void onCommitCorrection(CorrectionInfo)>,25,26,,,,"{
    if (mEditor != null)
        mEditor.onCommitCorrection(info);
}","{
    if (mEditor != null)
        mEditor.onCommitCorrection(info);
}",0,"/**
 * Called by the framework in response to a text auto-correction (such as fixing a typo using a
 * a dictionnary) from the current input method, provided by it calling
 * {@link InputConnection#commitCorrection} InputConnection.commitCorrection()}. The default
 * implementation flashes the background of the corrected word to provide feedback to the user.
 *
 * @param info The auto correct info about the text that was corrected.
 */
","/**
 * Called by the framework in response to a text auto-correction (such as fixing a typo using a
 * dictionary) from the current input method, provided by it calling
 * {@link InputConnection#commitCorrection(CorrectionInfo) InputConnection.commitCorrection()}.
 * The default implementation flashes the background of the corrected word to provide
 * feedback to the user.
 *
 * @param info The auto correct info about the text that was corrected.
 */
",1,,,0,,,,0,0,0,0,0,"In the given code, there is no change in the implementation of the method onCommitCorrection(CorrectionInfo) between the early version (25) and the late version (26).","As there is no change in the implementation of the method onCommitCorrection(CorrectionInfo) between the early version (25) and the late version (26), there is no compatibility issue that could arise due to potential different return values or types, or due to potential different exception handlings."
121,<android.appwidget.AppWidgetManager: List<AppWidgetProviderInfo> getInstalledProvidersForProfile(UserHandle)>,25,26,,,,"{
    if (mService == null) {
        return Collections.emptyList();
    }
    return getInstalledProvidersForProfile(AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, profile);
}","{
    if (mService == null) {
        return Collections.emptyList();
    }
    return getInstalledProvidersForProfile(AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN, profile, null);
}",1,"/**
 * Gets the AppWidget providers for the given user profile. User profile can only
 * be the current user or a profile of the current user. For example, the current
 * user may have a corporate profile. In this case the parent user profile has a
 * child profile, the corporate one.
 *
 * @param profile The profile for which to get providers. Passing null is equivaled
 * to passing only the current user handle.
 * @return The intalled providers.
 *
 * @see android.os.Process#myUserHandle()
 * @see android.os.UserManager#getUserProfiles()
 */
","/**
 * Gets the AppWidget providers for the given user profile. User profile can only
 * be the current user or a profile of the current user. For example, the current
 * user may have a corporate profile. In this case the parent user profile has a
 * child profile, the corporate one.
 *
 * @param profile The profile for which to get providers. Passing null is equivalent
 * to querying for only the calling user.
 * @return The installed providers, or an empty list if none are found for the given user.
 *
 * @see android.os.Process#myUserHandle()
 * @see android.os.UserManager#getUserProfiles()
 */
",1,,[@NonNull],1,,,,2,"1,5",1,1,1,"The return statement of the API 'getInstalledProvidersForProfile' has changed between the two versions. In the early version, it returns the result of 'getInstalledProvidersForProfile' with two parameters, while in the late version, it returns the result of 'getInstalledProvidersForProfile' with three parameters.","The change in the return statement can potentially lead to different values being returned by the API in the two versions. The third parameter in the late version version of 'getInstalledProvidersForProfile' method can affect the result of the method, so the result of the API 'getInstalledProvidersForProfile' can be different. Therefore, it is a Compatibility Issue caused by potential different return values."
122,"<android.view.View: boolean onKeyDown(int,KeyEvent)>",25,26,,,,"{
    if (KeyEvent.isConfirmKey(keyCode)) {
        if ((mViewFlags & ENABLED_MASK) == DISABLED) {
            return true;
        }
        // Long clickable items don't necessarily have to be clickable.
        if (((mViewFlags & CLICKABLE) == CLICKABLE || (mViewFlags & LONG_CLICKABLE) == LONG_CLICKABLE) && (event.getRepeatCount() == 0)) {
            // For the purposes of menu anchoring and drawable hotspots,
            // key events are considered to be at the center of the view.
            final float x = getWidth() / 2f;
            final float y = getHeight() / 2f;
            setPressed(true, x, y);
            checkForLongClick(0, x, y);
            return true;
        }
    }
    return false;
}","{
    if (KeyEvent.isConfirmKey(keyCode)) {
        if ((mViewFlags & ENABLED_MASK) == DISABLED) {
            return true;
        }
        if (event.getRepeatCount() == 0) {
            // Long clickable items don't necessarily have to be clickable.
            final boolean clickable = (mViewFlags & CLICKABLE) == CLICKABLE || (mViewFlags & LONG_CLICKABLE) == LONG_CLICKABLE;
            if (clickable || (mViewFlags & TOOLTIP) == TOOLTIP) {
                // For the purposes of menu anchoring and drawable hotspots,
                // key events are considered to be at the center of the view.
                final float x = getWidth() / 2f;
                final float y = getHeight() / 2f;
                if (clickable) {
                    setPressed(true, x, y);
                }
                checkForLongClick(0, x, y);
                return true;
            }
        }
    }
    return false;
}",1,"/**
 * Default implementation of {@link KeyEvent.Callback#onKeyDown(int, KeyEvent)
 * KeyEvent.Callback.onKeyDown()}: perform press of the view
 * when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER}
 * is released, if the view is enabled and clickable.
 * <p>
 * Key presses in software keyboards will generally NOT trigger this
 * listener, although some may elect to do so in some situations. Do not
 * rely on this to catch software key presses.
 *
 * @param keyCode a key code that represents the button pressed, from
 * {@link android.view.KeyEvent}
 * @param event the KeyEvent object that defines the button action
 */
","/**
 * Default implementation of {@link KeyEvent.Callback#onKeyDown(int, KeyEvent)
 * KeyEvent.Callback.onKeyDown()}: perform press of the view
 * when {@link KeyEvent#KEYCODE_DPAD_CENTER} or {@link KeyEvent#KEYCODE_ENTER}
 * is released, if the view is enabled and clickable.
 * <p>
 * Key presses in software keyboards will generally NOT trigger this
 * listener, although some may elect to do so in some situations. Do not
 * rely on this to catch software key presses.
 *
 * @param keyCode a key code that represents the button pressed, from
 * {@link android.view.KeyEvent}
 * @param event the KeyEvent object that defines the button action
 */
",0,,,0,,,,"1,2","3,4",1,3,1,"The condition statement inside the first 'if' statement has changed, which will potentially cause the API to return different values.","As the condition statement inside the first 'if' statement has changed, the API may return 'true' in the early version but 'false' in the late version (or vice versa), depending on the input keyCode and viewFlags. Therefore, it should be regarded as a Compatibility Issue (CI) caused by potential different return values."
123,<android.text.method.TimeKeyListener: TimeKeyListener getInstance()>,25,26,,,,"{
    if (sInstance != null)
        return sInstance;
    sInstance = new TimeKeyListener();
    return sInstance;
}","{
    return getInstance(null);
}",1,,"/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
",1,,"[@Deprecated, @NonNull]",1,,,,"1,2","1,3,5",1,"1, 5","1,2",The code change involves a new method call (getInstance(null)) and the removal of the previous implementation that returned a singleton instance of TimeKeyListener. The change in the implementation suggests that the late version of the API relies on another API (getInstance(Locale)) for its functionality.,"The code change has the potential to lead to different behaviors, specifically in terms of the return value and exception handling. The late version of the API could potentially return a different instance of TimeKeyListener, or null, depending on the implementation of the getInstance(Locale) method. Additionally, the late version of the API no longer catches and handles any exceptions that might occur during the initialization of the singleton instance, which could lead to unhandled exceptions being thrown."
124,"<android.app.assist.AssistStructure.ParcelTransferWriter: void writeView(ViewNode,Parcel,PooledStringWriter,int)>",25,26,,,,"{
    if (DEBUG_PARCEL)
        Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows="" + mNumWrittenWindows + "", views="" + mNumWrittenViews + "", level="" + (mCurViewStackPos + levelAdj));
    out.writeInt(VALIDATE_VIEW_TOKEN);
    int flags = child.writeSelfToParcel(out, pwriter, mTmpMatrix);
    mNumWrittenViews++;
    // If the child has children, push it on the stack to write them next.
    if ((flags & ViewNode.FLAGS_HAS_CHILDREN) != 0) {
        if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN)
            Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj));
        out.writeInt(child.mChildren.length);
        int pos = ++mCurViewStackPos;
        pushViewStackEntry(child, pos);
    }
}","{
    if (DEBUG_PARCEL)
        Log.d(TAG, ""write view: at "" + out.dataPosition() + "", windows="" + mNumWrittenWindows + "", views="" + mNumWrittenViews + "", level="" + (mCurViewStackPos + levelAdj));
    out.writeInt(VALIDATE_VIEW_TOKEN);
    int flags = child.writeSelfToParcel(out, pwriter, mSanitizeOnWrite, mTmpMatrix);
    mNumWrittenViews++;
    // If the child has children, push it on the stack to write them next.
    if ((flags & ViewNode.FLAGS_HAS_CHILDREN) != 0) {
        if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN)
            Log.d(TAG, ""Preparing to write "" + child.mChildren.length + "" children: @ #"" + mNumWrittenViews + "", level "" + (mCurViewStackPos + levelAdj));
        out.writeInt(child.mChildren.length);
        int pos = ++mCurViewStackPos;
        pushViewStackEntry(child, pos);
    }
}",1,,,0,,,0,,,,2,5,1,5,1,"The signature of the dependent API 'writeSelfToParcel(out: Parcel, pwriter: ParcelableWriteCallbacks?, mTmpMatrix: Matrix)' has been changed to 'writeSelfToParcel(out: Parcel, pwriter: ParcelableWriteCallbacks?, sanitizeOnWrite: boolean, mTmpMatrix: Matrix)' in the late version. This is a dependent API change, as defined in the given terminology.","The change of the dependent API's signature may cause the API 'writeView' to behave differently. Specifically, the new parameter 'sanitizeOnWrite' of the dependent API may lead to different values being written to the parcel, which may result in compatibility issues in the applications that rely on the specific values being written to the parcel. Thus, this is a compatibility issue caused by potential different return values or types."
125,<android.text.TextUtils: boolean isEmpty(CharSequence)>,25,26,,,,"{
    if (str == null || str.length() == 0)
        return true;
    else
        return false;
}","{
    return str == null || str.length() == 0;
}",1,"/**
 * Returns true if the string is null or 0-length.
 * @param str the string to be examined
 * @return true if str is null or zero length
 */
","/**
 * Returns true if the string is null or 0-length.
 * @param str the string to be examined
 * @return true if str is null or zero length
 */
",0,,,0,,,,1,"1,3",1,1,0,The code has been refactored to remove the if-else statement and return the boolean expression directly. This change does not affect the behavior of the API.,"The code change does not affect the return value or exception handling of the API, so there is no compatibility issue."
126,<android.widget.TextView: void setMinWidth(int)>,25,26,,,,"{
    mMinWidth = minpixels;
    mMinWidthMode = PIXELS;
    requestLayout();
    invalidate();
}","{
    mMinWidth = minPixels;
    mMinWidthMode = PIXELS;
    requestLayout();
    invalidate();
}",1,"/**
 * Makes the TextView at least this many pixels wide
 *
 * @attr ref android.R.styleable#TextView_minWidth
 */
","/**
 * Sets the width of the TextView to be at least {@code minPixels} wide.
 * <p>
 * This value is used for width calculation if LayoutParams does not force TextView to have an
 * exact width. Setting this value overrides previous minimum width configurations such as
 * {@link #setMinEms(int)} or {@link #setEms(int)}.
 * <p>
 * The value given here is different than {@link #setMinimumWidth(int)}. Between
 * {@code minWidth} and the value set in {@link #setMinimumWidth(int)}, the greater one is used
 * to decide the final width.
 *
 * @param minPixels the minimum width of TextView in terms of pixels
 *
 * @see #getMinWidth()
 * @see #setWidth(int)
 *
 * @attr ref android.R.styleable#TextView_minWidth
 */
",1,[@android.view.RemotableViewMethod],[@android.view.RemotableViewMethod],0,,,,1,4,0,0,0,The implementation of the method has not changed between the two versions. The only difference is in the comment where the text has been updated and expanded.,"Since the implementation of the method has not changed, there is no compatibility issue. The method will behave the same way in both versions."
127,<android.service.notification.NotificationListenerService.MyHandler: void handleMessage(Message)>,25,26,,,,"{
    if (!isConnected) {
        return;
    }
    switch(msg.what) {
        case MSG_ON_NOTIFICATION_POSTED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                args.recycle();
                onNotificationPosted(sbn, rankingMap);
            }
            break;
        case MSG_ON_NOTIFICATION_REMOVED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                args.recycle();
                onNotificationRemoved(sbn, rankingMap);
            }
            break;
        case MSG_ON_LISTENER_CONNECTED:
            {
                onListenerConnected();
            }
            break;
        case MSG_ON_NOTIFICATION_RANKING_UPDATE:
            {
                RankingMap rankingMap = (RankingMap) msg.obj;
                onNotificationRankingUpdate(rankingMap);
            }
            break;
        case MSG_ON_LISTENER_HINTS_CHANGED:
            {
                final int hints = msg.arg1;
                onListenerHintsChanged(hints);
            }
            break;
        case MSG_ON_INTERRUPTION_FILTER_CHANGED:
            {
                final int interruptionFilter = msg.arg1;
                onInterruptionFilterChanged(interruptionFilter);
            }
            break;
    }
}","{
    if (!isConnected) {
        return;
    }
    switch(msg.what) {
        case MSG_ON_NOTIFICATION_POSTED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                args.recycle();
                onNotificationPosted(sbn, rankingMap);
            }
            break;
        case MSG_ON_NOTIFICATION_REMOVED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                StatusBarNotification sbn = (StatusBarNotification) args.arg1;
                RankingMap rankingMap = (RankingMap) args.arg2;
                int reason = (int) args.arg3;
                args.recycle();
                onNotificationRemoved(sbn, rankingMap, reason);
            }
            break;
        case MSG_ON_LISTENER_CONNECTED:
            {
                onListenerConnected();
            }
            break;
        case MSG_ON_NOTIFICATION_RANKING_UPDATE:
            {
                RankingMap rankingMap = (RankingMap) msg.obj;
                onNotificationRankingUpdate(rankingMap);
            }
            break;
        case MSG_ON_LISTENER_HINTS_CHANGED:
            {
                final int hints = msg.arg1;
                onListenerHintsChanged(hints);
            }
            break;
        case MSG_ON_INTERRUPTION_FILTER_CHANGED:
            {
                final int interruptionFilter = msg.arg1;
                onInterruptionFilterChanged(interruptionFilter);
            }
            break;
        case MSG_ON_NOTIFICATION_CHANNEL_MODIFIED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                String pkgName = (String) args.arg1;
                UserHandle user = (UserHandle) args.arg2;
                NotificationChannel channel = (NotificationChannel) args.arg3;
                int modificationType = (int) args.arg4;
                onNotificationChannelModified(pkgName, user, channel, modificationType);
            }
            break;
        case MSG_ON_NOTIFICATION_CHANNEL_GROUP_MODIFIED:
            {
                SomeArgs args = (SomeArgs) msg.obj;
                String pkgName = (String) args.arg1;
                UserHandle user = (UserHandle) args.arg2;
                NotificationChannelGroup group = (NotificationChannelGroup) args.arg3;
                int modificationType = (int) args.arg4;
                onNotificationChannelGroupModified(pkgName, user, group, modificationType);
            }
            break;
    }
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4,5",1,"1, 5",1,"In the late version implementation, two new cases have been added to the switch statement, namely, MSG\_ON\_NOTIFICATION\_CHANNEL\_MODIFIED and MSG\_ON\_NOTIFICATION\_CHANNEL\_GROUP\_MODIFIED. Additionally, the onNotificationRemoved method has been modified to include an additional parameter, 'reason'.","The compatibility issue arises due to the modification of the onNotificationRemoved method and the addition of two new cases to the switch statement. In the early version, the onNotificationRemoved method only accepts two parameters, but in the late version, it accepts three. This change can potentially lead to different behavior if the client code is not updated to accommodate the new parameter."
128,<android.app.EnterTransitionCoordinator: void onTransitionsComplete()>,25,26,,,,"{
    moveSharedElementsFromOverlay();
    final ViewGroup decorView = getDecor();
    if (decorView != null) {
        decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
    }
}","{
    moveSharedElementsFromOverlay();
    final ViewGroup decorView = getDecor();
    if (decorView != null) {
        decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);
        Window window = getWindow();
        if (window != null && mReplacedBackground == decorView.getBackground()) {
            window.setBackgroundDrawable(null);
        }
    }
}",1,,,0,[@Override],[@Override],0,,,,"1,2","3,4",1,3,0,"In the late version implementation, there are three additional lines of code after `decorView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED);` which are enclosed in an if statement. The if statement checks if `getWindow()` is not null and if `mReplacedBackground` is equal to `decorView.getBackground()`. If both conditions are true, then `window.setBackgroundDrawable(null);` is executed. This is a control dependency change as the addition of the if statement and the conditional execution of `window.setBackgroundDrawable(null);` can potentially affect the behavior of the API.",The addition of the if statement and the conditional execution of `window.setBackgroundDrawable(null);` do not cause any compatibility issues as they do not affect the return value or the exception handling of the API. The if statement only affects the behavior of the API in certain conditions and does not introduce any breaking changes.
129,<android.widget.VideoView: void stopPlayback()>,25,26,,,,"{
    if (mMediaPlayer != null) {
        mMediaPlayer.stop();
        mMediaPlayer.release();
        mMediaPlayer = null;
        mCurrentState = STATE_IDLE;
        mTargetState = STATE_IDLE;
        AudioManager am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        am.abandonAudioFocus(null);
    }
}","{
    if (mMediaPlayer != null) {
        mMediaPlayer.stop();
        mMediaPlayer.release();
        mMediaPlayer = null;
        mCurrentState = STATE_IDLE;
        mTargetState = STATE_IDLE;
        mAudioManager.abandonAudioFocus(null);
    }
}",1,,,0,,,0,,,,"1,2",4,0,5,1,"The method of obtaining the AudioManager instance has changed from `(AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);` to `mAudioManager`, which indicates that the way of initializing the AudioManager instance may also have changed between the two versions. This may potentially cause the API to return a different value or type, hence it is a code change of type 5.","As the way of initializing the AudioManager instance may have changed between the two versions, the behavior of the `mAudioManager.abandonAudioFocus(null);` statement may also have changed. This means that the API may potentially throw a different exception or return a different value or type, hence it is a Compatibility Issue of type 1."
130,<android.app.Notification.Action.Builder: Action build()>,25,26,,,,"{
    RemoteInput[] remoteInputs = mRemoteInputs != null ? mRemoteInputs.toArray(new RemoteInput[mRemoteInputs.size()]) : null;
    return new Action(mIcon, mTitle, mIntent, mExtras, remoteInputs, mAllowGeneratedReplies);
}","{
    ArrayList<RemoteInput> dataOnlyInputs = new ArrayList<>();
    RemoteInput[] previousDataInputs = (RemoteInput[]) mExtras.getParcelableArray(EXTRA_DATA_ONLY_INPUTS);
    if (previousDataInputs != null) {
        for (RemoteInput input : previousDataInputs) {
            dataOnlyInputs.add(input);
        }
    }
    List<RemoteInput> textInputs = new ArrayList<>();
    if (mRemoteInputs != null) {
        for (RemoteInput input : mRemoteInputs) {
            if (input.isDataOnly()) {
                dataOnlyInputs.add(input);
            } else {
                textInputs.add(input);
            }
        }
    }
    if (!dataOnlyInputs.isEmpty()) {
        RemoteInput[] dataInputsArr = dataOnlyInputs.toArray(new RemoteInput[dataOnlyInputs.size()]);
        mExtras.putParcelableArray(EXTRA_DATA_ONLY_INPUTS, dataInputsArr);
    }
    RemoteInput[] textInputsArr = textInputs.isEmpty() ? null : textInputs.toArray(new RemoteInput[textInputs.size()]);
    return new Action(mIcon, mTitle, mIntent, mExtras, textInputsArr, mAllowGeneratedReplies);
}",1,"/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */
","/**
 * Combine all of the options that have been set and return a new {@link Action}
 * object.
 * @return the built action
 */
",0,,,0,,,,"1,2","1,3,4,5",1,5,1,"The early version directly converts `mRemoteInputs` to an array and passes it to the `Action` constructor, while the late version first categorizes `mRemoteInputs` into `dataOnlyInputs` and `textInputs`, then passes `textInputsArr` to the `Action` constructor and saves `dataInputsArr` into `mExtras`. The change of how `mRemoteInputs` is processed and passed to the `Action` constructor can lead to different behavior in the returned `Action` object.","The change of how `mRemoteInputs` is processed and passed to the `Action` constructor can lead to different behavior in the returned `Action` object, which means that the compatibility issue is caused by potential different return values or types."
131,"<android.app.SharedPreferencesImpl.EditorImpl: Editor putInt(String,int)>",25,26,,,,"{
    synchronized (this) {
        mModified.put(key, value);
        return this;
    }
}","{
    synchronized (mLock) {
        mModified.put(key, value);
        return this;
    }
}",1,,,0,,,0,,,,1,4,0,4,0,The object being used to synchronize the block of code has been changed from 'this' to 'mLock'.,"No Compatibility Issue exists for the API, as the change only affects the internal implementation of the API and does not affect the behavior of the API for the external user. The synchronization object being used has changed, but the overall functionality of the API remains the same."
132,<android.appwidget.AppWidgetHost: int allocateAppWidgetId()>,26,27,,,,"{
    try {
        return sService.allocateAppWidgetId(mContextOpPackageName, mHostId);
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
}","{
    if (sService == null) {
        return -1;
    }
    try {
        return sService.allocateAppWidgetId(mContextOpPackageName, mHostId);
    } catch (RemoteException e) {
        throw new RuntimeException(""system server dead?"", e);
    }
}",1,"/**
 * Get a appWidgetId for a host in the calling process.
 *
 * @return a appWidgetId
 */
","/**
 * Get a appWidgetId for a host in the calling process.
 *
 * @return a appWidgetId
 */
",0,,,0,,,,1,"1,3",1,3,1,"The code change is a control dependency change, where an additional ""if"" statement is added in the late version. This new condition can potentially lead to a different return value (i.e., -1) in the late version, compared to the early version.","As the new ""if"" statement introduced in the late version can potentially lead to a different return value (i.e., -1), it should be regarded as a Compatibility Issue caused by potential different return values or types."
133,<android.webkit.WebView: void shortPressOnTextField()>,4,5,<android.webkit.WebView: void shortPressOnTextField()>,<android.webkit.WebView: void shortPressOnTextField()>,0,"{
    if (inEditingMode()) {
        View v = mTextEntry;
        int x = viewToContent((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContent((v.getTop() + v.getBottom()) >> 1);
        nativeMotionUp(x, y, mNavSlop, true);
    }
}","{
    if (inEditingMode()) {
        View v = mWebTextView;
        int x = viewToContentX((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContentY((v.getTop() + v.getBottom()) >> 1);
        nativeTextInputMotionUp(x, y);
    }
}",1,"/*package*/
","/*package*/
",0,,,0,,,0,"1,2","4,5",0,"1, 5",1,"The implementation of the API `shortPressOnTextField()` has been changed between versions 4 and 5. Specifically, the variable `mTextEntry` has been replaced with `mWebTextView`, the method `viewToContent()` has been replaced with `viewToContentX()` and `viewToContentY()`, and the method `nativeMotionUp()` has been replaced with `nativeTextInputMotionUp()`.","The changes in the implementation of the API could potentially lead to different behaviors, as the replacement of variables and methods could result in different values being passed to the native method `nativeTextInputMotionUp()`. This could cause the API to behave differently in different versions, and therefore, it is a Compatibility Issue."
135,<android.content.SyncManager.SyncQueue: void removeByKey(String)>,5,6,<android.content.SyncManager.SyncQueue: void removeByKey(String)>,<android.content.SyncManager.SyncQueue: void removeByKey(String)>,0, ,"{
    if (DEBUG_CHECK_DATA_CONSISTENCY)
        debugCheckDataStructures(true);
    SyncOperation operationToRemove = mOpsByKey.remove(operationKey);
    if (!mOpsByWhen.remove(operationToRemove)) {
        throw new IllegalStateException(""unable to find "" + operationToRemove + "" in mOpsByWhen"");
    }
    if (!mSyncStorageEngine.deleteFromPending(operationToRemove.pendingOperation)) {
        final String errorMessage = ""unable to find pending row for "" + operationToRemove;
        Log.e(TAG, errorMessage, new IllegalStateException(errorMessage));
    }
    if (DEBUG_CHECK_DATA_CONSISTENCY)
        debugCheckDataStructures(true);
}",1,,,0,,,0,,,0,"1,2","3,4",2,3,1,"The implementation of the method ""removeByKey"" has been added in the late version. The added code includes control dependency statements such as ""if"" and ""for-each"" loop, as well as other statements like ""remove"" and ""deleteFromPending"".","The added implementation in the late version could lead to different behaviors of the method ""removeByKey"". For example, if the key provided in the method does not exist in the ""mOpsByKey"" map, the method will return directly in the early version, while in the late version, it will throw an IllegalStateException exception. This could cause compatibility issues for the apps that are using this method and have not handled the exception."
136,"<android.provider.ContactsContract.QuickContact: void showQuickContact(Context,View,Uri,int,String[])>",5,6,"<android.provider.ContactsContract.QuickContact: void showQuickContact(Context,View,Uri,int,String[])>","<android.provider.ContactsContract.QuickContact: void showQuickContact(Context,View,Uri,int,String[])>",0,"{
    // Find location and bounds of target view
    final int[] location = new int[2];
    target.getLocationOnScreen(location);
    final Rect rect = new Rect();
    rect.left = location[0];
    rect.top = location[1];
    rect.right = rect.left + target.getWidth();
    rect.bottom = rect.top + target.getHeight();
    // Trigger with obtained rectangle
    showQuickContact(context, rect, lookupUri, mode, excludeMimes);
}","{
    // Find location and bounds of target view
    final int[] location = new int[2];
    target.getLocationOnScreen(location);
    final Rect rect = new Rect();
    rect.left = location[0];
    rect.top = location[1];
    rect.right = rect.left + target.getWidth();
    rect.bottom = rect.top + target.getHeight();
    // Trigger with obtained rectangle
    showQuickContact(context, rect, lookupUri, mode, excludeMimes);
}",0,"/**
 * Trigger a dialog that lists the various methods of interacting with
 * the requested {@link Contacts} entry. This may be based on available
 * {@link Data} rows under that contact, and may also include social
 * status and presence details.
 *
 * @param context The parent {@link Context} that may be used as the
 * parent for this dialog.
 * @param target Specific {@link View} from your layout that this dialog
 * should be centered around. In particular, if the dialog
 * has a ""callout"" arrow, it will be pointed and centered
 * around this {@link View}.
 * @param lookupUri A {@link ContactsContract.Contacts#CONTENT_LOOKUP_URI} style
 * {@link Uri} that describes a specific contact to feature
 * in this dialog.
 * @param mode Any of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or
 * {@link #MODE_LARGE}, indicating the desired dialog size,
 * when supported.
 * @param excludeMimes Optional list of {@link Data#MIMETYPE} MIME-types
 * to exclude when showing this dialog. For example, when
 * already viewing the contact details card, this can be used
 * to omit the details entry from the dialog.
 */
","/**
 * Trigger a dialog that lists the various methods of interacting with
 * the requested {@link Contacts} entry. This may be based on available
 * {@link ContactsContract.Data} rows under that contact, and may also
 * include social status and presence details.
 *
 * @param context The parent {@link Context} that may be used as the
 * parent for this dialog.
 * @param target Specific {@link View} from your layout that this dialog
 * should be centered around. In particular, if the dialog
 * has a ""callout"" arrow, it will be pointed and centered
 * around this {@link View}.
 * @param lookupUri A {@link ContactsContract.Contacts#CONTENT_LOOKUP_URI} style
 * {@link Uri} that describes a specific contact to feature
 * in this dialog.
 * @param mode Any of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or
 * {@link #MODE_LARGE}, indicating the desired dialog size,
 * when supported.
 * @param excludeMimes Optional list of {@link Data#MIMETYPE} MIME-types
 * to exclude when showing this dialog. For example, when
 * already viewing the contact details card, this can be used
 * to omit the details entry from the dialog.
 */
",1,,,0,,,0,0,0,0,0,0,"There are no changes in the code implementation, comments, or annotations between the early and late versions of the API.","Since there are no changes, there is no potential for different behaviors or compatibility issues."
137,<android.webkit.WebView: void shortPressOnTextField()>,6,7,<android.webkit.WebView: void shortPressOnTextField()>,<android.webkit.WebView: void shortPressOnTextField()>,0,"{
    if (inEditingMode()) {
        View v = mWebTextView;
        int x = viewToContentX((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContentY((v.getTop() + v.getBottom()) >> 1);
        nativeTextInputMotionUp(x, y);
    }
}","{
    if (inEditingMode()) {
        View v = mWebTextView;
        int x = viewToContentX((v.getLeft() + v.getRight()) >> 1);
        int y = viewToContentY((v.getTop() + v.getBottom()) >> 1);
        displaySoftKeyboard(true);
        nativeTextInputMotionUp(x, y);
    }
}",1,"/*package*/
","/*package*/
",0,,,0,,,0,2,4,0,4,1,"An extra statement is added in the late version implementation, which is `displaySoftKeyboard(true)`. This statement is not related to the return value or exception handling, so it is classified as a change in the ""Other statement"" category.","The added statement `displaySoftKeyboard(true)` in the late version implementation will cause the soft keyboard to be displayed when the `shortPressOnTextField()` method is called. This is a change in the behavior of the method, and it may not be desirable or expected in some cases. Therefore, it can be considered as a Compatibility Issue caused by potential different return values or types."
138,<android.hardware.Camera.Parameters: List<Integer> getSupportedPictureFormats()>,6,7,<android.hardware.Camera.Parameters: List<Integer> getSupportedPictureFormats()>,<android.hardware.Camera.Parameters: List<Integer> getSupportedPictureFormats()>,0,"{
    String str = get(KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX);
    return splitInt(str);
}","{
    String str = get(KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX);
    ArrayList<Integer> formats = new ArrayList<Integer>();
    for (String s : split(str)) {
        int f = pixelFormatForCameraFormat(s);
        if (f == PixelFormat.UNKNOWN)
            continue;
        formats.add(f);
    }
    return formats;
}",1,"/**
 * Gets the supported picture formats.
 *
 * @return a List of Integer objects (values are PixelFormat.XXX). null
 * if picture setting is not supported.
 */
","/**
 * Gets the supported picture formats.
 *
 * @return a List of Integer objects (values are PixelFormat.XXX). This
 * method will always return a list with at least one element.
 */
",1,,,0,,,0,"1,2","1,3,4",1,"1, 5","1,2","The implementation of the `getSupportedPictureFormats()` method has been completely changed between the two versions. In the early version, the method gets a string using the `KEY_PICTURE_SIZE + SUPPORTED_VALUES_SUFFIX` key and returns the result of `splitInt(str)`. In the late version, the method gets a string using the `KEY_PICTURE_FORMAT + SUPPORTED_VALUES_SUFFIX` key and returns a list of integers that are the result of `pixelFormatForCameraFormat(s)` for each element in the split string. Additionally, the late version includes a new dependent API `pixelFormatForCameraFormat(String)`.","The change in the implementation of the `getSupportedPictureFormats()` method may lead to different behaviors and compatibility issues. Firstly, the method may return different values in the two versions, as the early version uses `KEY_PICTURE_SIZE` while the late version uses `KEY_PICTURE_FORMAT`. This means that the list of integers returned by the method may be different, which may cause compatibility issues with the code that uses the method. Secondly, the late version includes a new dependent API `pixelFormatForCameraFormat(String)`, which may also lead to compatibility issues if the behavior of this method changes in the future."
139,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,7,8,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,0,"{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
    }
}","{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ENDED:
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
        case TIMEUPDATE:
            {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
    }
}",1,"// Handler for the messages from WebCore thread to the UI thread.
","// Handler for the messages from WebCore or Timer thread to the UI thread.
",1,[@Override],[@Override],0,,,0,"1,2",3,0,"1,3,5","1,2","Three changes have been made: 1) A new case statement ""case ENDED:"" has been added. 2) The original case statement ""case ERROR:"" has been combined with the new case statement ""case ENDED:"". 3) A new case statement ""case TIMEUPDATE:"" has been added. Therefore, the code change types are 1 (Return statement changed) for the first and third changes, 3 (Control dependency changed) for the second change, and 5 (Dependent API changed) for all three changes.","The first and third changes could lead to different return values, as the new case statements may execute different code paths. The second change could also lead to different return values or exception handling, as the original ""case ERROR:"" statement has been combined with the new ""case ENDED:"" statement, and the code execution may be different. Therefore, the Compatibility Issue types are 1 (Compatibility Issue caused by potential different return values or types) and 2 (Compatibility Issue caused by potential different exception handlings)."
140,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,8,9,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,<android.webkit.HTML5VideoViewProxy: void handleMessage(Message)>,0,"{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ENDED:
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
        case TIMEUPDATE:
            {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
    }
}","{
    // This executes on the UI thread.
    switch(msg.what) {
        case PLAY:
            {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client);
                }
                break;
            }
        case SEEK:
            {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
        case PAUSE:
            {
                VideoPlayer.pause(this);
                break;
            }
        case ENDED:
            if (msg.arg1 == 1)
                VideoPlayer.isVideoSelfEnded = true;
        case ERROR:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
        case LOAD_DEFAULT_POSTER:
            {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
        case TIMEUPDATE:
            {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
    }
}",1,"// Handler for the messages from WebCore or Timer thread to the UI thread.
","// Handler for the messages from WebCore or Timer thread to the UI thread.
",0,[@Override],[@Override],0,,,0,1,"3,4",0,3,1,"The code change is a control dependency change, specifically an if-statement is added for the case of ""ENDED"" in the switch-statement. This if-statement checks the value of ""msg.arg1"" and if it is equal to 1, the boolean variable ""VideoPlayer.isVideoSelfEnded"" is set to true.","The added if-statement in the ""ENDED"" case can potentially lead to a different behavior of the API. If ""msg.arg1"" is equal to 1, the boolean variable ""VideoPlayer.isVideoSelfEnded"" is set to true, which might be used in other parts of the code and lead to different functionality. Therefore, this code change can cause a Compatibility Issue with the potential of different return values or types (indirectly through the boolean variable)."
141,"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",8,9,"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>","<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",0,"{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}","{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}",0,"/**
 * Implement this to insert a set of new rows, or the default implementation will
 * iterate over the values and call {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple
 * threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals:
 * Processes and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * @return The number of values that were inserted.
 */
","/**
 * Override this to handle requests to insert a set of new rows, or the
 * default implementation will iterate over the values and call
 * {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals:
 * Processes and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * @return The number of values that were inserted.
 */
",1,,,0,,,0,0,0,0,0,0,There is no difference between the early version and the late version of the implementation of the Android API `bulkInsert()`.,There is no compatibility issue (CI) between the early version and the late version of the implementation of the Android API `bulkInsert()`.
142,<android.widget.ProgressBar: boolean isIndeterminate()>,8,9,<android.widget.ProgressBar: boolean isIndeterminate()>,<android.widget.ProgressBar: boolean isIndeterminate()>,0,"{
    return mIndeterminate;
}","{
    return mIndeterminate;
}",0,"/**
 * <p>Indicate whether this progress bar is in indeterminate mode.</p>
 *
 * @return true if the progress bar is in indeterminate mode
 */
","/**
 * <p>Indicate whether this progress bar is in indeterminate mode.</p>
 *
 * @return true if the progress bar is in indeterminate mode
 */
",0,[@ViewDebug.ExportedProperty],[@ViewDebug.ExportedProperty(category = "progress")],1,,,0,0,0,0,5,0,The annotation of the API has changed from `@ViewDebug.ExportedProperty` to `@ViewDebug.ExportedProperty(category = "progress")`.,"The change of annotation will not lead to different behaviors of the API, so there is no Compatibility Issue."
143,<android.app.Activity: void performStop()>,9,10,<android.app.Activity: void performStop()>,<android.app.Activity: void performStop()>,0,"{
    if (!mStopped) {
        if (mWindow != null) {
            mWindow.closeAllPanels();
        }
        mCalled = false;
        mInstrumentation.callActivityOnStop(this);
        if (!mCalled) {
            throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()"");
        }
        synchronized (mManagedCursors) {
            final int N = mManagedCursors.size();
            for (int i = 0; i < N; i++) {
                ManagedCursor mc = mManagedCursors.get(i);
                if (!mc.mReleased) {
                    mc.mCursor.deactivate();
                    mc.mReleased = true;
                }
            }
        }
        mStopped = true;
    }
    mResumed = false;
}","{
    if (!mStopped) {
        if (mWindow != null) {
            mWindow.closeAllPanels();
        }
        mCalled = false;
        mInstrumentation.callActivityOnStop(this);
        if (!mCalled) {
            throw new SuperNotCalledException(""Activity "" + mComponent.toShortString() + "" did not call through to super.onStop()"");
        }
        synchronized (mManagedCursors) {
            final int N = mManagedCursors.size();
            for (int i = 0; i < N; i++) {
                ManagedCursor mc = mManagedCursors.get(i);
                if (!mc.mReleased) {
                    mc.mCursor.deactivate();
                    mc.mReleased = true;
                }
            }
        }
        mStopped = true;
    }
}",1,,,0,,,0,,,0,1,4,0,4,1,The last statement "mResumed = false;" is removed in the late version.,The removal of the statement "mResumed = false;" can potentially lead to different behaviors as the value of the "mResumed" variable may not be updated correctly in certain scenarios. This can be considered a compatibility issue caused by potential different return values or types.
144,"<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(String,String,ContentValues)>",9,10,"<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(String,String,ContentValues)>","<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(String,String,ContentValues)>",0,"{
    return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE);
}","{
    return insertWithOnConflict(table, nullColumnHack, initialValues, CONFLICT_REPLACE);
}",0,"/**
 * Convenience method for replacing a row in the database.
 *
 * @param table the table in which to replace the row
 * @param nullColumnHack SQL doesn't allow inserting a completely empty row,
 * so if initialValues is empty this row will explicitly be
 * assigned a NULL value
 * @param initialValues this map contains the initial column values for
 * the row. The key
 * @throws SQLException
 * @return the row ID of the newly inserted row, or -1 if an error occurred
 */
","/**
 * Convenience method for replacing a row in the database.
 *
 * @param table the table in which to replace the row
 * @param nullColumnHack optional; may be <code>null</code>.
 * SQL doesn't allow inserting a completely empty row without
 * naming at least one column name.  If your provided <code>initialValues</code> is
 * empty, no column names are known and an empty row can't be inserted.
 * If not set to null, the <code>nullColumnHack</code> parameter
 * provides the name of nullable column name to explicitly insert a NULL into
 * in the case where your <code>initialValues</code> is empty.
 * @param initialValues this map contains the initial column values for
 * the row. The key
 * @throws SQLException
 * @return the row ID of the newly inserted row, or -1 if an error occurred
 */
",1,,,0,,,0,0,0,0,0,0,"There is no change between the two versions of the API, the implementation and the annotation are the same.","As there is no change, there is no compatibility issue. The API will behave the same way in both versions."
145,<android.widget.AbsListView: void hideSelector()>,13,14,<android.widget.AbsListView: void hideSelector()>,<android.widget.AbsListView: void hideSelector()>,0,"{
    if (mSelectedPosition != INVALID_POSITION) {
        if (mLayoutMode != LAYOUT_SPECIFIC) {
            mResurrectToPosition = mSelectedPosition;
        }
        if (mNextSelectedPosition >= 0 && mNextSelectedPosition != mSelectedPosition) {
            mResurrectToPosition = mNextSelectedPosition;
        }
        setSelectedPositionInt(INVALID_POSITION);
        setNextSelectedPositionInt(INVALID_POSITION);
        mSelectedTop = 0;
        mSelectorShowing = false;
    }
}","{
    if (mSelectedPosition != INVALID_POSITION) {
        if (mLayoutMode != LAYOUT_SPECIFIC) {
            mResurrectToPosition = mSelectedPosition;
        }
        if (mNextSelectedPosition >= 0 && mNextSelectedPosition != mSelectedPosition) {
            mResurrectToPosition = mNextSelectedPosition;
        }
        setSelectedPositionInt(INVALID_POSITION);
        setNextSelectedPositionInt(INVALID_POSITION);
        mSelectedTop = 0;
    }
}",1,,,0,,,0,,,0,1,4,0,3,1,"The code change is related to control dependency, as a statement (mSelectorShowing = false;) has been removed from the if-condition block.","The removal of the statement (mSelectorShowing = false;) from the if-condition block can potentially lead to different return values or types. Therefore, the Compatibility Issue is caused by potential different return values or types."
146,"<android.database.CursorWindow: String getString(int,int)>",13,14,"<android.database.CursorWindow: String getString(int,int)>","<android.database.CursorWindow: String getString(int,int)>",0,"{
    acquireReference();
    try {
        return getString_native(row - mStartPos, col);
    } finally {
        releaseReference();
    }
}","{
    acquireReference();
    try {
        return nativeGetString(mWindowPtr, row - mStartPos, column);
    } finally {
        releaseReference();
    }
}",1,"/**
 * Returns a String for the given field.
 *
 * @param row the row to read from, row - getStartPosition() being the actual row in the window
 * @param col the column to read from
 * @return a String value for the given field
 */
","/**
 * Gets the value of the field at the specified row and column index as a string.
 * <p>
 * The result is determined as follows:
 * <ul>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result
 * is <code>null</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result
 * is the string value.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result
 * is a string representation of the integer in decimal, obtained by formatting the
 * value with the <code>printf</code> family of functions using
 * format specifier <code>%lld</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result
 * is a string representation of the floating-point value in decimal, obtained by
 * formatting the value with the <code>printf</code> family of functions using
 * format specifier <code>%g</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a
 * {@link SQLiteException} is thrown.</li>
 * </ul>
 * </p>
 *
 * @param row The zero-based row index, relative to the cursor window's
 * start position ({@link #getStartPosition()}).
 * @param column The zero-based column index.
 * @return The value of the field as a string.
 */
",1,,,0,,,0,"1,2","1,5",1,5,1,"The implementation of the method has changed from `getString_native(row - mStartPos, col)` to `nativeGetString(mWindowPtr, row - mStartPos, column)`. This is a change in the dependent API, as the method being called to retrieve the string value has been modified.","The change in the dependent API could potentially lead to a different string value being returned by the method, as the new implementation `nativeGetString` might have a different way of retrieving and formatting the string value. Therefore, this is a Compatibility Issue (CI) of type 1 - CI caused by potential different return values or types."
147,<android.view.View: boolean dispatchHoverEvent(MotionEvent)>,14,15,<android.view.View: boolean dispatchHoverEvent(MotionEvent)>,<android.view.View: boolean dispatchHoverEvent(MotionEvent)>,0,"{
    // noinspection SimplifiableIfStatement
    if (mOnHoverListener != null && (mViewFlags & ENABLED_MASK) == ENABLED && mOnHoverListener.onHover(this, event)) {
        return true;
    }
    return onHoverEvent(event);
}","{
    // noinspection SimplifiableIfStatement
    ListenerInfo li = mListenerInfo;
    if (li != null && li.mOnHoverListener != null && (mViewFlags & ENABLED_MASK) == ENABLED && li.mOnHoverListener.onHover(this, event)) {
        return true;
    }
    return onHoverEvent(event);
}",1,"/**
 * Dispatch a hover event.
 * <p>
 * Do not call this method directly.
 * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.
 * </p>
 *
 * @param event The motion event to be dispatched.
 * @return True if the event was handled by the view, false otherwise.
 */
","/**
 * Dispatch a hover event.
 * <p>
 * Do not call this method directly.
 * Call {@link #dispatchGenericMotionEvent(MotionEvent)} instead.
 * </p>
 *
 * @param event The motion event to be dispatched.
 * @return True if the event was handled by the view, false otherwise.
 */
",0,,,0,,,0,1,4,1,5,1,"The implementation of the method has been modified by changing the condition of the if statement. In the early version, the if statement checks whether `mOnHoverListener` is not null, while in the late version, it checks whether `mListenerInfo` and `mListenerInfo.mOnHoverListener` are not null. This change may affect the behavior of the method when `mListenerInfo` is not null but `mListenerInfo.mOnHoverListener` is null, or vice versa.","The change in the implementation of the method may lead to compatibility issues. In particular, it may cause the method to return different values in the two versions when `mListenerInfo` is not null but `mListenerInfo.mOnHoverListener` is null, or vice versa. In the early version, the method may return true if `mOnHoverListener` is not null and the `onHover` method returns true, while in the late version, the method may return false in the same situation. This difference in behavior may affect the correctness of the application that uses this method."
148,"<android.database.CursorWindow: String getString(int,int)>",14,15,"<android.database.CursorWindow: String getString(int,int)>","<android.database.CursorWindow: String getString(int,int)>",0,"{
    acquireReference();
    try {
        return nativeGetString(mWindowPtr, row - mStartPos, column);
    } finally {
        releaseReference();
    }
}","{
    acquireReference();
    try {
        return nativeGetString(mWindowPtr, row - mStartPos, column);
    } finally {
        releaseReference();
    }
}",0,"/**
 * Gets the value of the field at the specified row and column index as a string.
 * <p>
 * The result is determined as follows:
 * <ul>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result
 * is <code>null</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result
 * is the string value.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result
 * is a string representation of the integer in decimal, obtained by formatting the
 * value with the <code>printf</code> family of functions using
 * format specifier <code>%lld</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result
 * is a string representation of the floating-point value in decimal, obtained by
 * formatting the value with the <code>printf</code> family of functions using
 * format specifier <code>%g</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a
 * {@link SQLiteException} is thrown.</li>
 * </ul>
 * </p>
 *
 * @param row The zero-based row index, relative to the cursor window's
 * start position ({@link #getStartPosition()}).
 * @param column The zero-based column index.
 * @return The value of the field as a string.
 */
","/**
 * Gets the value of the field at the specified row and column index as a string.
 * <p>
 * The result is determined as follows:
 * <ul>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result
 * is <code>null</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result
 * is the string value.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result
 * is a string representation of the integer in decimal, obtained by formatting the
 * value with the <code>printf</code> family of functions using
 * format specifier <code>%lld</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result
 * is a string representation of the floating-point value in decimal, obtained by
 * formatting the value with the <code>printf</code> family of functions using
 * format specifier <code>%g</code>.</li>
 * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a
 * {@link SQLiteException} is thrown.</li>
 * </ul>
 * </p>
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return The value of the field as a string.
 */
",1,,,0,,,0,0,0,0,0,0,"Based on the given information, there is no change between the two versions of the API.","Based on the given information, there is no Compatibility Issue exist for the API."
149,<android.content.AsyncTaskLoader.LoadTask: void onPostExecute(D)>,15,16,<android.content.AsyncTaskLoader.LoadTask: void onPostExecute(D)>,<android.content.AsyncTaskLoader.LoadTask: void onPostExecute(D)>,0,"{
    if (DEBUG)
        Slog.v(TAG, this + "" onPostExecute"");
    try {
        AsyncTaskLoader.this.dispatchOnLoadComplete(this, data);
    } finally {
        done.countDown();
    }
}","{
    if (DEBUG)
        Slog.v(TAG, this + "" onPostExecute"");
    try {
        AsyncTaskLoader.this.dispatchOnLoadComplete(this, data);
    } finally {
        mDone.countDown();
    }
}",1,"/* Runs on the UI thread */
","/* Runs on the UI thread */
",0,[@Override],[@Override],0,,,0,"1,2",5,0,4,0,"The variable 'done' has been changed to 'mDone' in the finally block of the try-catch statement. This is an example of 'Other statement changed' as it does not involve return statements, exception handling statements, or control dependency changes.","The change from 'done' to 'mDone' is simply a variable renaming and does not affect the behavior of the API. Therefore, there is no Compatibility Issue in this case."
150,"<android.widget.RemoteViews: void setInt(int,String,int)>",15,16,"<android.widget.RemoteViews: void setInt(int,String,int)>","<android.widget.RemoteViews: void setInt(int,String,int)>",0,"{
    addAction(new ReflectionAction(viewId, methodName, ReflectionAction.INT, value));
}","{
    addAction(new ReflectionAction(viewId, methodName, ReflectionAction.INT, value));
}",0,"/**
 * Call a method taking one int on a view in the layout for this RemoteViews.
 *
 * @param viewId The id of the view whose text should change
 * @param methodName The name of the method to call.
 * @param value The value to pass to the method.
 */
","/**
 * Call a method taking one int on a view in the layout for this RemoteViews.
 *
 * @param viewId The id of the view on which to call the method.
 * @param methodName The name of the method to call.
 * @param value The value to pass to the method.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the implementation of the method between the two versions.,There is no compatibility issue in the method between the two versions.
151,<android.webkit.WebView: boolean shouldDelayChildPressedState()>,15,16,<android.webkit.WebView: boolean shouldDelayChildPressedState()>,<android.webkit.WebView: boolean shouldDelayChildPressedState()>,0,"{
    return true;
}","{
    return mProvider.getViewDelegate().shouldDelayChildPressedState();
}",1,,,0,[@Override],"[@Deprecated, @Override]",1,,,0,"1,2","1,5",1,"1, 5",1,"In the early version, the implementation of shouldDelayChildPressedState() method directly returns a boolean value true. While in the late version, the implementation of the method calls another method from the mProvider object which is an instance of the WebViewProvider class. This means that the return value of the method is now determined by the implementation of the shouldDelayChildPressedState() method in the WebViewProvider class.","The change in the implementation of the shouldDelayChildPressedState() method between the early and late versions can potentially lead to a Compatibility Issue. Since the return value of the method is now determined by the implementation of the method in the WebViewProvider class, it is possible that the method could return a different value in the late version than it did in the early version. This could cause unexpected behavior in any code that relies on the return value of the shouldDelayChildPressedState() method."
152,<android.server.search.SearchManagerService: ComponentName getWebSearchActivity()>,16,17,<android.server.search.SearchManagerService: ComponentName getWebSearchActivity()>,<android.server.search.SearchManagerService: ComponentName getWebSearchActivity()>,0,"{
    return getSearchables().getWebSearchActivity();
}","{
    return getSearchables(UserHandle.getCallingUserId()).getWebSearchActivity();
}",1,"/**
 * Gets the name of the web search activity.
 */
","/**
 * Gets the name of the web search activity.
 */
",0,,,0,,,0,"1,2","1,5",1,5,1,"The method call `getSearchables()` has been replaced by `getSearchables(UserHandle.getCallingUserId())`, which means the current API now relies on the newly added parameter `UserHandle.getCallingUserId()`. This is a dependent API change and thus the code change type is 5.","The newly added parameter `UserHandle.getCallingUserId()` can potentially change the search results returned by `getWebSearchActivity()`, which leads to different return values of the current API. Therefore, the compatibility issue type is 1."
153,<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()>,16,17,<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()>,<android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()>,0,"{
    if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {
        return;
    }
    addTtsApis();
    addCallbackApis();
}","{
    if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {
        return;
    }
    addTtsApis();
    addCallbackApis();
}",0,"/**
 * Attempts to load scripting interfaces for accessibility.
 * <p>
 * This should be called when the window is attached.
 * </p>
 */
","/**
 * Attempts to load scripting interfaces for accessibility.
 * <p>
 * This should only be called before a page loads.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change between the early version and the late version of the `android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()` API.,There is no Compatibility Issue (CI) between the early version and the late version of the `android.webkit.AccessibilityInjector: void addAccessibilityApisIfNecessary()` API.
155,"<android.app.Activity: boolean startNextMatchingActivity(Intent,Bundle)>",17,18,"<android.app.Activity: boolean startNextMatchingActivity(Intent,Bundle)>","<android.app.Activity: boolean startNextMatchingActivity(Intent,Bundle)>",0,"{
    if (mParent == null) {
        try {
            intent.setAllowFds(false);
            return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options);
        } catch (RemoteException e) {
        // Empty
        }
        return false;
    }
    throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity"");
}","{
    if (mParent == null) {
        try {
            intent.migrateExtraStreamToClipData();
            intent.prepareToLeaveProcess();
            return ActivityManagerNative.getDefault().startNextMatchingActivity(mToken, intent, options);
        } catch (RemoteException e) {
        // Empty
        }
        return false;
    }
    throw new UnsupportedOperationException(""startNextMatchingActivity can only be called from a top-level activity"");
}",1,"/**
 * Special version of starting an activity, for use when you are replacing
 * other activity components.  You can use this to hand the Intent off
 * to the next Activity that can handle it.  You typically call this in
 * {@link #onCreate} with the Intent returned by {@link #getIntent}.
 *
 * @param intent The intent to dispatch to the next activity.  For
 * correct behavior, this must be the same as the Intent that started
 * your own activity; the only changes you can make are to the extras
 * inside of it.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @return Returns a boolean indicating whether there was another Activity
 * to start: true if there was a next activity to start, false if there
 * wasn't.  In general, if true is returned you will then want to call
 * finish() on yourself.
 */
","/**
 * Special version of starting an activity, for use when you are replacing
 * other activity components.  You can use this to hand the Intent off
 * to the next Activity that can handle it.  You typically call this in
 * {@link #onCreate} with the Intent returned by {@link #getIntent}.
 *
 * @param intent The intent to dispatch to the next activity.  For
 * correct behavior, this must be the same as the Intent that started
 * your own activity; the only changes you can make are to the extras
 * inside of it.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @return Returns a boolean indicating whether there was another Activity
 * to start: true if there was a next activity to start, false if there
 * wasn't.  In general, if true is returned you will then want to call
 * finish() on yourself.
 */
",0,,,0,,,0,"1,2",5,0,4,0,"The code change between the two versions is that the method ""setAllowFds(false)"" is removed and the methods ""migrateExtraStreamToClipData()"" and ""prepareToLeaveProcess()"" are added before the call to ""startNextMatchingActivity()"". This change is classified as ""Other statement changed"" as it does not involve return statements, exception handling statements, control dependency or dependent API changes.","The added methods ""migrateExtraStreamToClipData()"" and ""prepareToLeaveProcess()"" are only modifying the intent object and they do not have any impact on the returned boolean value or the exception handling of the ""startNextMatchingActivity()"" method. Therefore, there is no Compatibility Issue exist for the API."
156,"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",17,18,"<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>","<android.content.ContentProvider: int bulkInsert(Uri,ContentValues[])>",0,"{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}","{
    int numValues = values.length;
    for (int i = 0; i < numValues; i++) {
        insert(uri, values[i]);
    }
    return numValues;
}",0,"/**
 * Override this to handle requests to insert a set of new rows, or the
 * default implementation will iterate over the values and call
 * {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads"">Processes
 * and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * @return The number of values that were inserted.
 */
","/**
 * Override this to handle requests to insert a set of new rows, or the
 * default implementation will iterate over the values and call
 * {@link #insert} on each of them.
 * As a courtesy, call {@link ContentResolver#notifyChange(android.net.Uri ,android.database.ContentObserver) notifyChange()}
 * after inserting.
 * This method can be called from multiple threads, as described in
 * <a href=""{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads"">Processes
 * and Threads</a>.
 *
 * @param uri The content:// URI of the insertion request.
 * @param values An array of sets of column_name/value pairs to add to the database.
 * This must not be {@code null}.
 * @return The number of values that were inserted.
 */
",1,,,0,,,0,0,0,0,0,0,"There are no code changes in the implementation of the API between the two versions. Therefore, the code change type is 0.","As there are no code changes, the behavior of the API will remain the same between the two versions. Therefore, there is no Compatibility Issue (CI) exist, and the CI type is 0."
157,<android.view.Surface.CompatibleCanvas: void getMatrix(Matrix)>,17,18,<android.view.Surface.CompatibleCanvas: void getMatrix(Matrix)>,<android.view.Surface.CompatibleCanvas: void getMatrix(Matrix)>,0,"{
    super.getMatrix(m);
    if (mOrigMatrix == null) {
        mOrigMatrix = new Matrix();
    }
    mOrigMatrix.set(m);
}","{
    super.getMatrix(m);
    if (mOrigMatrix == null) {
        mOrigMatrix = new Matrix();
    }
    mOrigMatrix.set(m);
}",0,,,0,[@Override],"[@SuppressWarnings(""deprecation""), @Override]",1,,,0,0,0,0,0,0,"The only change between the two versions is the addition of a ""@SuppressWarnings(""deprecation"")"" annotation in the late version. This annotation does not affect the behavior of the method, so it is not a code change that could lead to compatibility issues.",There are no compatibility issues in this case because the addition of the annotation does not affect the behavior of the method.
158,"<android.widget.TextView: boolean onKeyDown(int,KeyEvent)>",18,19,"<android.widget.TextView: boolean onKeyDown(int,KeyEvent)>","<android.widget.TextView: boolean onKeyDown(int,KeyEvent)>",0,"{
    int which = doKeyDown(keyCode, event, null);
    if (which == 0) {
        // Go through default dispatching.
        return super.onKeyDown(keyCode, event);
    }
    return true;
}","{
    int which = doKeyDown(keyCode, event, null);
    if (which == 0) {
        return super.onKeyDown(keyCode, event);
    }
    return true;
}",1,,,0,[@Override],[@Override],0,,,0,0,0,0,0,0,There is no change between the early version and the late version of the `onKeyDown` method.,There is no compatibility issue for the `onKeyDown` method as there is no change between the early version and the late version.
159,<android.view.View: void setSystemUiVisibility(int)>,18,19,<android.view.View: void setSystemUiVisibility(int)>,<android.view.View: void setSystemUiVisibility(int)>,0,"{
    if (visibility != mSystemUiVisibility) {
        mSystemUiVisibility = visibility;
        if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
            mParent.recomputeViewAttributes(this);
        }
    }
}","{
    if (visibility != mSystemUiVisibility) {
        mSystemUiVisibility = visibility;
        if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
            mParent.recomputeViewAttributes(this);
        }
    }
}",0,"/**
 * Request that the visibility of the status bar or other screen/window
 * decorations be changed.
 *
 * <p>This method is used to put the over device UI into temporary modes
 * where the user's attention is focused more on the application content,
 * by dimming or hiding surrounding system affordances.  This is typically
 * used in conjunction with {@link Window#FEATURE_ACTION_BAR_OVERLAY
 * Window.FEATURE_ACTION_BAR_OVERLAY}, allowing the applications content
 * to be placed behind the action bar (and with these flags other system
 * affordances) so that smooth transitions between hiding and showing them
 * can be done.
 *
 * <p>Two representative examples of the use of system UI visibility is
 * implementing a content browsing application (like a magazine reader)
 * and a video playing application.
 *
 * <p>The first code shows a typical implementation of a View in a content
 * browsing application.  In this implementation, the application goes
 * into a content-oriented mode by hiding the status bar and action bar,
 * and putting the navigation elements into lights out mode.  The user can
 * then interact with content while in this mode.  Such an application should
 * provide an easy way for the user to toggle out of the mode (such as to
 * check information in the status bar or access notifications).  In the
 * implementation here, this is done simply by tapping on the content.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/ContentBrowserActivity.java
 * content}
 *
 * <p>This second code sample shows a typical implementation of a View
 * in a video playing application.  In this situation, while the video is
 * playing the application would like to go into a complete full-screen mode,
 * to use as much of the display as possible for the video.  When in this state
 * the user can not interact with the application; the system intercepts
 * touching on the screen to pop the UI out of full screen mode.  See
 * {@link #fitSystemWindows(Rect)} for a sample layout that goes with this code.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/VideoPlayerActivity.java
 * content}
 *
 * @param visibility  Bitwise-or of flags {@link #SYSTEM_UI_FLAG_LOW_PROFILE},
 * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, {@link #SYSTEM_UI_FLAG_FULLSCREEN},
 * {@link #SYSTEM_UI_FLAG_LAYOUT_STABLE}, {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION},
 * and {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
 */
","/**
 * Request that the visibility of the status bar or other screen/window
 * decorations be changed.
 *
 * <p>This method is used to put the over device UI into temporary modes
 * where the user's attention is focused more on the application content,
 * by dimming or hiding surrounding system affordances.  This is typically
 * used in conjunction with {@link Window#FEATURE_ACTION_BAR_OVERLAY
 * Window.FEATURE_ACTION_BAR_OVERLAY}, allowing the applications content
 * to be placed behind the action bar (and with these flags other system
 * affordances) so that smooth transitions between hiding and showing them
 * can be done.
 *
 * <p>Two representative examples of the use of system UI visibility is
 * implementing a content browsing application (like a magazine reader)
 * and a video playing application.
 *
 * <p>The first code shows a typical implementation of a View in a content
 * browsing application.  In this implementation, the application goes
 * into a content-oriented mode by hiding the status bar and action bar,
 * and putting the navigation elements into lights out mode.  The user can
 * then interact with content while in this mode.  Such an application should
 * provide an easy way for the user to toggle out of the mode (such as to
 * check information in the status bar or access notifications).  In the
 * implementation here, this is done simply by tapping on the content.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/ContentBrowserActivity.java
 * content}
 *
 * <p>This second code sample shows a typical implementation of a View
 * in a video playing application.  In this situation, while the video is
 * playing the application would like to go into a complete full-screen mode,
 * to use as much of the display as possible for the video.  When in this state
 * the user can not interact with the application; the system intercepts
 * touching on the screen to pop the UI out of full screen mode.  See
 * {@link #fitSystemWindows(Rect)} for a sample layout that goes with this code.
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/view/VideoPlayerActivity.java
 * content}
 *
 * @param visibility  Bitwise-or of flags {@link #SYSTEM_UI_FLAG_LOW_PROFILE},
 * {@link #SYSTEM_UI_FLAG_HIDE_NAVIGATION}, {@link #SYSTEM_UI_FLAG_FULLSCREEN},
 * {@link #SYSTEM_UI_FLAG_LAYOUT_STABLE}, {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION},
 * {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}, {@link #SYSTEM_UI_FLAG_IMMERSIVE},
 * and {@link #SYSTEM_UI_FLAG_IMMERSIVE_STICKY}.
 */
",1,,,0,,,0,0,0,0,0,0,"There is no change in the implementation of the method between the early and late versions. The only difference is in the comment, where a new flag (SYSTEM_UI_FLAG_IMMERSIVE_STICKY) has been added to the list of possible values for the visibility parameter.",There is no compatibility issue between the two versions since the implementation of the method has not changed. The new flag added in the comment is only for documentation purposes and does not affect the behavior of the method.
160,"<android.webkit.WebView: void onMeasure(int,int)>",18,19,"<android.webkit.WebView: void onMeasure(int,int)>","<android.webkit.WebView: void onMeasure(int,int)>",0,"{
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec);
}","{
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    mProvider.getViewDelegate().onMeasure(widthMeasureSpec, heightMeasureSpec);
}",0,,,0,"[@Deprecated, @Override]",[@Override],1,,,0,0,0,0,5,0,The @Deprecated annotation has been removed from the late version.,"The removal of the @Deprecated annotation does not affect the behavior of the API, hence no compatibility issue arises."
161,<android.print.PrintAttributes.MediaSize: MediaSize asPortrait()>,19,20,<android.print.PrintAttributes.MediaSize: MediaSize asPortrait()>,<android.print.PrintAttributes.MediaSize: MediaSize asPortrait()>,0,"{
    return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId);
}","{
    if (isPortrait()) {
        return this;
    }
    return new MediaSize(mId, mLabel, mPackageName, Math.min(mWidthMils, mHeightMils), Math.max(mWidthMils, mHeightMils), mLabelResId);
}",1,"/**
 * Returns a new media size in a portrait orientation
 * which is the height is the greater dimension.
 *
 * @return New instance in landscape orientation.
 */
","/**
 * Returns a new media size instance in a portrait orientation,
 * which is the height is the greater dimension.
 *
 * @return New instance in landscape orientation if this one
 * is in landscape, otherwise this instance.
 */
",1,,,0,,,0,"1,2","1,3",1,"1,3",1,"In the late version, a new conditional statement (if-else) is added. If the current MediaSize is already in portrait mode, it will return the current instance directly instead of creating a new one. This change affects the return value of the method.","The Compatibility Issue arises in this case because the code change leads to a different return value in the late version. If the developer is using the API in a way that assumes a new MediaSize instance will always be returned, it could cause unexpected behavior in the late version when the current instance is returned instead."
162,"<android.provider.DocumentsProvider: Cursor queryRecentDocuments(String,String[])>",19,20,"<android.provider.DocumentsProvider: Cursor queryRecentDocuments(String,String[])>","<android.provider.DocumentsProvider: Cursor queryRecentDocuments(String,String[])>",0,"{
    throw new UnsupportedOperationException(""Recent not supported"");
}","{
    throw new UnsupportedOperationException(""Recent not supported"");
}",0,"/**
 * Return recently modified documents under the requested root. This will
 * only be called for roots that advertise
 * {@link Root#FLAG_SUPPORTS_RECENTS}. The returned documents should be
 * sorted by {@link Document#COLUMN_LAST_MODIFIED} in descending order, and
 * limited to only return the 64 most recently modified documents.
 *
 * @param projection list of {@link Document} columns to put into the
 * cursor. If {@code null} all supported columns should be
 * included.
 * @see DocumentsContract#EXTRA_LOADING
 */
","/**
 * Return recently modified documents under the requested root. This will
 * only be called for roots that advertise
 * {@link Root#FLAG_SUPPORTS_RECENTS}. The returned documents should be
 * sorted by {@link Document#COLUMN_LAST_MODIFIED} in descending order, and
 * limited to only return the 64 most recently modified documents.
 * <p>
 * Recent documents do not support change notifications.
 *
 * @param projection list of {@link Document} columns to put into the
 * cursor. If {@code null} all supported columns should be
 * included.
 * @see DocumentsContract#EXTRA_LOADING
 */
",1,[@SuppressWarnings("unused")],[@SuppressWarnings("unused")],0,,,0,0,0,0,0,0,"No changes between the two versions, the implementation, comments, and annotations are all the same.",No compatibility issues exist as there are no changes between the two versions.
163,<android.app.MediaRouteActionProvider: View onCreateActionView()>,19,20,<android.app.MediaRouteActionProvider: View onCreateActionView()>,<android.app.MediaRouteActionProvider: View onCreateActionView()>,0,"{
    throw new UnsupportedOperationException(""Use onCreateActionView(MenuItem) instead."");
}","{
    throw new UnsupportedOperationException(""Use onCreateActionView(MenuItem) instead."");
}",0,,,0,[@Override],"[@Override, @SuppressWarnings(""deprecation"")]",1,,,0,0,0,0,5,0,The annotation `@SuppressWarnings("deprecation")` is added to the method in the late version.,"The added annotation does not affect the behavior of the method, so there is no compatibility issue."
164,<android.os.CountDownTimer: CountDownTimer start()>,20,21,<android.os.CountDownTimer: CountDownTimer start()>,<android.os.CountDownTimer: CountDownTimer start()>,0,"{
    if (mMillisInFuture <= 0) {
        onFinish();
        return this;
    }
    mStopTimeInFuture = SystemClock.elapsedRealtime() + mMillisInFuture;
    mHandler.sendMessage(mHandler.obtainMessage(MSG));
    return this;
}","{
    mCancelled = false;
    if (mMillisInFuture <= 0) {
        onFinish();
        return this;
    }
    mStopTimeInFuture = SystemClock.elapsedRealtime() + mMillisInFuture;
    mHandler.sendMessage(mHandler.obtainMessage(MSG));
    return this;
}",1,"/**
 * Start the countdown.
 */
","/**
 * Start the countdown.
 */
",0,,,0,,,0,1,4,0,4,0,"A new statement ""mCancelled = false;"" has been added in the late version of the API implementation, which is not related to return statement, exception handling statement, and control dependency. Thus, the code change type is 4.","The added statement ""mCancelled = false;"" only initializes the value of a variable, and it does not affect the return value or exception handling of the API. Therefore, there is no Compatibility Issue exist for the API."
165,<android.service.dreams.DreamService: boolean isScreenBright()>,20,21,<android.service.dreams.DreamService: boolean isScreenBright()>,<android.service.dreams.DreamService: boolean isScreenBright()>,0,"{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}","{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}",0,"/**
 * Returns whether or not this dream keeps the screen bright while dreaming. Defaults to false,
 * allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
","/**
 * Returns whether or not this dream keeps the screen bright while dreaming.
 * Defaults to false, allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
",1,,,0,,,0,0,0,0,0,0,"The early and late versions of the API have the same implementation, comments, and annotations, so there is no change.","There is no change in the API, so there is no compatibility issue."
166,"<android.app.Activity: Dialog onCreateDialog(int,Bundle)>",20,21,"<android.app.Activity: Dialog onCreateDialog(int,Bundle)>","<android.app.Activity: Dialog onCreateDialog(int,Bundle)>",0,"{
    return onCreateDialog(id);
}","{
    return onCreateDialog(id);
}",0,"/**
 * Callback for creating dialogs that are managed (saved and restored) for you
 * by the activity.  The default implementation calls through to
 * {@link #onCreateDialog(int)} for compatibility.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>If you use {@link #showDialog(int)}, the activity will call through to
 * this method the first time, and hang onto it thereafter.  Any dialog
 * that is created by this method will automatically be saved and restored
 * for you, including whether it is showing.
 *
 * <p>If you would like the activity to manage saving and restoring dialogs
 * for you, you should override this method and handle any ids that are
 * passed to {@link #showDialog}.
 *
 * <p>If you would like an opportunity to prepare your dialog before it is shown,
 * override {@link #onPrepareDialog(int, Dialog, Bundle)}.
 *
 * @param id The id of the dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @return The dialog.  If you return null, the dialog will not be created.
 *
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
","/**
 * Callback for creating dialogs that are managed (saved and restored) for you
 * by the activity.  The default implementation calls through to
 * {@link #onCreateDialog(int)} for compatibility.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>If you use {@link #showDialog(int)}, the activity will call through to
 * this method the first time, and hang onto it thereafter.  Any dialog
 * that is created by this method will automatically be saved and restored
 * for you, including whether it is showing.
 *
 * <p>If you would like the activity to manage saving and restoring dialogs
 * for you, you should override this method and handle any ids that are
 * passed to {@link #showDialog}.
 *
 * <p>If you would like an opportunity to prepare your dialog before it is shown,
 * override {@link #onPrepareDialog(int, Dialog, Bundle)}.
 *
 * @param id The id of the dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @return The dialog.  If you return null, the dialog will not be created.
 *
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
",0,[@Deprecated],"[@Nullable, @Deprecated]",1,,,0,0,0,0,4,0,The only change between the early and late versions of this API is the addition of a `@Nullable` annotation to the return type. This change does not affect the behavior of the API in any way.,The addition of a `@Nullable` annotation does not introduce any compatibility issues. It is purely a documentation change that indicates to callers of the API that the method may return `null`.
167,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,21,22,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,0,"{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            drawFrame(mSurfaceTexture, holder.width, holder.height);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}","{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}",1,"/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
","/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
",0,,,0,,,0,"1,2","4,5",0,1,1,"The change between the two versions of the `drawIntoSurfaces` method is in the `drawFrame` method call. In the early version, the `drawFrame` method is called with three arguments: `mSurfaceTexture`, `holder.width`, and `holder.height`. In the late version, the `drawFrame` method is called with four arguments: `mSurfaceTexture`, `holder.width`, `holder.height`, and a new argument `(mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE`. This new argument is used to determine the type of flipping that should be applied to the frame.","The Compatibility Issue (CI) arises due to the change in the `drawFrame` method call, which can potentially lead to different behavior in the two versions. The new argument in the late version can cause the frame to be flipped horizontally or not flipped at all, depending on the value of `mFacing`. This can result in the API returning a different image in the late version compared to the early version, which is a CI of type 1 (Compatibility Issue caused by potential different return values or types)."
168,"<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>",21,22,"<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>","<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>",0,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    return new Future2Task<Boolean>(handler, callback) {

        public void doWork() throws RemoteException {
            mService.removeAccount(mResponse, account);
        }

        public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {
            if (!bundle.containsKey(KEY_BOOLEAN_RESULT)) {
                throw new AuthenticatorException(""no result in response"");
            }
            return bundle.getBoolean(KEY_BOOLEAN_RESULT);
        }
    }.start();
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    return new Future2Task<Boolean>(handler, callback) {

        public void doWork() throws RemoteException {
            mService.removeAccount(mResponse, account, false);
        }

        public Boolean bundleToResult(Bundle bundle) throws AuthenticatorException {
            if (!bundle.containsKey(KEY_BOOLEAN_RESULT)) {
                throw new AuthenticatorException(""no result in response"");
            }
            return bundle.getBoolean(KEY_BOOLEAN_RESULT);
        }
    }.start();
}",1,"/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 */
","/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 * @deprecated use
 * {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
",1,,[@Deprecated],1,,,0,"1,2",5,0,5,1,"The method `mService.removeAccount()` has changed from `mService.removeAccount(mResponse, account)` to `mService.removeAccount(mResponse, account, false)`, meaning a new parameter is added. This change belongs to the category 5) Dependent API changed.","The new parameter in `mService.removeAccount()` may lead to different behaviors of the method, thus may also affect the result of the current API `removeAccount()`. Therefore, a Compatibility Issue caused by potential different return values or types may exist, which belongs to the category 1) Compatibility Issue caused by potential different return values or types."
169,<android.widget.TextView: void setExtractedText(ExtractedText)>,22,23,<android.widget.TextView: void setExtractedText(ExtractedText)>,<android.widget.TextView: void setExtractedText(ExtractedText)>,0,"{
    Editable content = getEditableText();
    if (text.text != null) {
        if (content == null) {
            setText(text.text, TextView.BufferType.EDITABLE);
        } else if (text.partialStartOffset < 0) {
            removeParcelableSpans(content, 0, content.length());
            content.replace(0, content.length(), text.text);
        } else {
            final int N = content.length();
            int start = text.partialStartOffset;
            if (start > N)
                start = N;
            int end = text.partialEndOffset;
            if (end > N)
                end = N;
            removeParcelableSpans(content, start, end);
            content.replace(start, end, text.text);
        }
    }
    // Now set the selection position...  make sure it is in range, to
    // avoid crashes.  If this is a partial update, it is possible that
    // the underlying text may have changed, causing us problems here.
    // Also we just don't want to trust clients to do the right thing.
    Spannable sp = (Spannable) getText();
    final int N = sp.length();
    int start = text.selectionStart;
    if (start < 0)
        start = 0;
    else if (start > N)
        start = N;
    int end = text.selectionEnd;
    if (end < 0)
        end = 0;
    else if (end > N)
        end = N;
    Selection.setSelection(sp, start, end);
    // Finally, update the selection mode.
    if ((text.flags & ExtractedText.FLAG_SELECTING) != 0) {
        MetaKeyKeyListener.startSelecting(this, sp);
    } else {
        MetaKeyKeyListener.stopSelecting(this, sp);
    }
}","{
    Editable content = getEditableText();
    if (text.text != null) {
        if (content == null) {
            setText(text.text, TextView.BufferType.EDITABLE);
        } else {
            int start = 0;
            int end = content.length();
            if (text.partialStartOffset >= 0) {
                final int N = content.length();
                start = text.partialStartOffset;
                if (start > N)
                    start = N;
                end = text.partialEndOffset;
                if (end > N)
                    end = N;
            }
            removeParcelableSpans(content, start, end);
            if (TextUtils.equals(content.subSequence(start, end), text.text)) {
                if (text.text instanceof Spanned) {
                    // OK to copy spans only.
                    TextUtils.copySpansFrom((Spanned) text.text, start, end, Object.class, content, start);
                }
            } else {
                content.replace(start, end, text.text);
            }
        }
    }
    // Now set the selection position...  make sure it is in range, to
    // avoid crashes.  If this is a partial update, it is possible that
    // the underlying text may have changed, causing us problems here.
    // Also we just don't want to trust clients to do the right thing.
    Spannable sp = (Spannable) getText();
    final int N = sp.length();
    int start = text.selectionStart;
    if (start < 0)
        start = 0;
    else if (start > N)
        start = N;
    int end = text.selectionEnd;
    if (end < 0)
        end = 0;
    else if (end > N)
        end = N;
    Selection.setSelection(sp, start, end);
    // Finally, update the selection mode.
    if ((text.flags & ExtractedText.FLAG_SELECTING) != 0) {
        MetaKeyKeyListener.startSelecting(this, sp);
    } else {
        MetaKeyKeyListener.stopSelecting(this, sp);
    }
}",1,"/**
 * Apply to this text view the given extracted text, as previously
 * returned by {@link #extractText(ExtractedTextRequest, ExtractedText)}.
 */
","/**
 * Apply to this text view the given extracted text, as previously
 * returned by {@link #extractText(ExtractedTextRequest, ExtractedText)}.
 */
",0,,,0,,,0,"1,2","3,4,5",0,"3, 4",1,"The early implementation of the method had two separate conditions for handling partial start offset and replacement of the text. The late implementation combines these two conditions and modifies the way the text is replaced by checking for text equality before replacing it. Additionally, the late implementation handles the spans differently by copying the spans only if the text is a Spanned object.","The modification in the replacement of the text by checking for text equality before replacing it can lead to different behavior in the two versions. If the text is not equal, the late version will replace the text, whereas the early version will not. This can cause compatibility issues if the application relies on the text being unchanged in certain scenarios."
170,<android.net.Uri: Uri normalizeScheme()>,22,23,<android.net.Uri: Uri normalizeScheme()>,<android.net.Uri: Uri normalizeScheme()>,0,"{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}","{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}",0,"/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see {@link android.content.Intent#setData}
 * @see {@link #setNormalizedData}
 */
","/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see {@link android.content.Intent#setData}
 * @see {@link android.content.Intent#setDataAndNormalize}
 */
",1,,,0,,,0,0,0,0,0,0,"There are no changes between the early and late implementation of the API. The code structure, return statements, exception handling statements, control dependency, and other statements are all the same.","As there are no changes in the API implementation, the behavior of the API will not be different between the early and late versions. Therefore, there is no Compatibility Issue."
171,"<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>",22,23,"<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>","<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>",0,"{
    mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras);
}","{
    mBase.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData, initialExtras);
}",0,,,0,[@Override],"[@Override, @Deprecated]",1,,,0,0,0,0,5,0,"The late version implementation has a new annotation @Deprecated, which indicates that this method is deprecated and should not be used in new code.","The deprecated annotation does not affect the behavior of the API, so there is no compatibility issue."
172,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,23,24,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,0,"{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}","{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = new ArrayList();
    try {
        targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
        Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
        request.setOutputAbandoned();
    }
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}",1,"/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
","/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
",0,,,0,,,0,"1,2","2,4,5",2,"3, 5","1, 2",The code change includes modifying the way the `targetSurfaceIds` list is initialized and adding a new `request.setOutputAbandoned()` statement in the catch blocks for `LegacyExceptionUtils.BufferQueueAbandonedException`. The first change is a control dependency change as it affects the initialization of a variable used in the subsequent loops. The second change is an exception handling statement change as it adds a new statement in the catch block.,"The first change (control dependency change) can lead to compatibility issues if the new way of initializing the `targetSurfaceIds` list results in different values being stored in the list, which would in turn affect the behavior of the subsequent loops. The second change (exception handling statement change) can also lead to compatibility issues as the new `request.setOutputAbandoned()` statement can have side effects that were not present in the earlier version of the code, potentially causing the API to behave differently in the presence of `LegacyExceptionUtils.BufferQueueAbandonedException` exceptions."
173,<android.widget.TabWidget: void setRightStripDrawable(Drawable)>,23,24,<android.widget.TabWidget: void setRightStripDrawable(Drawable)>,<android.widget.TabWidget: void setRightStripDrawable(Drawable)>,0,"{
    mRightStrip = drawable;
    requestLayout();
    invalidate();
}","{
    mRightStrip = drawable;
    requestLayout();
    invalidate();
}",0,"/**
 * Sets the drawable to use as the right part of the strip below the
 * tab indicators.
 * @param drawable the right strip drawable
 */
","/**
 * Sets the drawable to use as the right part of the strip below the tab
 * indicators.
 *
 * @param drawable the right strip drawable
 * @see #getRightStripDrawable()
 * @attr ref android.R.styleable#TabWidget_tabStripRight
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the implementation of the method setRightStripDrawable(Drawable) between versions 23 and 24.,There are no compatibility issues between versions 23 and 24 for the method setRightStripDrawable(Drawable) as there is no change in its behavior.
174,<android.app.Dialog: void onActionModeStarted(ActionMode)>,23,24,<android.app.Dialog: void onActionModeStarted(ActionMode)>,<android.app.Dialog: void onActionModeStarted(ActionMode)>,0,"{
    mActionMode = mode;
}","{
    mActionMode = mode;
}",0,"/**
 * {@inheritDoc}
 *
 * Note that if you override this method you should always call through
 * to the superclass implementation by calling super.onActionModeStarted(mode).
 */
","/**
 * {@inheritDoc}
 *
 * Note that if you override this method you should always call through
 * to the superclass implementation by calling super.onActionModeStarted(mode).
 */
",0,[@CallSuper],"[@Override, @CallSuper]",1,,,0,0,0,0,5,0,"The annotation of the method has changed from `@CallSuper` to `@Override, @CallSuper`.","No compatibility issue is introduced by this change, as the `@Override` annotation is optional and does not affect the behavior of the method. The `@CallSuper` annotation is still present, so the requirement to call the superclass implementation is still enforced."
175,<android.service.notification.ZenModeConfig.ZenRule: int hashCode()>,24,25,<android.service.notification.ZenModeConfig.ZenRule: int hashCode()>,<android.service.notification.ZenModeConfig.ZenRule: int hashCode()>,0,"{
    return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime);
}","{
    return Objects.hash(enabled, snoozing, name, zenMode, conditionId, condition, component, id, creationTime, enabler);
}",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,5",1,1,1,"The `hashCode()` method in the `ZenRule` class has been modified between versions 24 and 25. In the late version, an additional variable `enabler` has been added to the `Objects.hash()` method call.","The compatibility issue arises due to the potential difference in the hash code value generated by the `hashCode()` method in the two versions. This can lead to issues in data structures that rely on hash codes, such as `HashMap` or `HashSet`, when used with instances of the `ZenRule` class. For example, if an instance of `ZenRule` is added to a `HashSet` in version 24, and the application is then upgraded to version 25, the `HashSet` may not recognize the instance as already present due to the different hash code, leading to a duplicate entry."
176,<android.view.DragEvent: ClipDescription getClipDescription()>,24,25,<android.view.DragEvent: ClipDescription getClipDescription()>,<android.view.DragEvent: ClipDescription getClipDescription()>,0,"{
    return mClipDescription;
}","{
    return mClipDescription;
}",0,"/**
 * Returns the {@link android.content.ClipDescription} object contained in the
 * {@link android.content.ClipData} object sent to the system as part of the call to
 * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
 * The drag handler or listener for a View can use the metadata in this object to decide if the
 * View can accept the dragged View object's data.
 * <p>
 * This method returns valid data for all event actions.
 * @return The ClipDescription that was part of the ClipData sent to the system by startDrag().
 */
","/**
 * Returns the {@link android.content.ClipDescription} object contained in the
 * {@link android.content.ClipData} object sent to the system as part of the call to
 * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
 * The drag handler or listener for a View can use the metadata in this object to decide if the
 * View can accept the dragged View object's data.
 * <p>
 * This method returns valid data for all event actions except for {@link #ACTION_DRAG_ENDED}.
 * @return The ClipDescription that was part of the ClipData sent to the system by startDrag().
 */
",1,,,0,,,0,0,0,0,0,0,No change has been made between the two versions.,No compatibility issues exist as there have been no changes to the code.
177,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,25,26,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,<android.hardware.camera2.legacy.SurfaceTextureRenderer: void drawIntoSurfaces(CaptureCollector)>,0,"{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = new ArrayList();
    try {
        targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
        Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
        request.setOutputAbandoned();
    }
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}","{
    if ((mSurfaces == null || mSurfaces.size() == 0) && (mConversionSurfaces == null || mConversionSurfaces.size() == 0)) {
        return;
    }
    boolean doTiming = targetCollector.hasPendingPreviewCaptures();
    checkGlError(""before updateTexImage"");
    if (doTiming) {
        beginGlTiming();
    }
    mSurfaceTexture.updateTexImage();
    long timestamp = mSurfaceTexture.getTimestamp();
    Pair<RequestHolder, Long> captureHolder = targetCollector.previewCaptured(timestamp);
    // No preview request queued, drop frame.
    if (captureHolder == null) {
        if (DEBUG) {
            Log.d(TAG, ""Dropping preview frame."");
        }
        if (doTiming) {
            endGlTiming();
        }
        return;
    }
    RequestHolder request = captureHolder.first;
    Collection<Surface> targetSurfaces = request.getHolderTargets();
    if (doTiming) {
        addGlTimestamp(timestamp);
    }
    List<Long> targetSurfaceIds = new ArrayList();
    try {
        targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
    } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
        Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
        request.setOutputAbandoned();
    }
    for (EGLSurfaceHolder holder : mSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            try {
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                makeCurrent(holder.eglSurface);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                swapBuffers(holder.eglSurface);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    for (EGLSurfaceHolder holder : mConversionSurfaces) {
        if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
            makeCurrent(holder.eglSurface);
            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
            try {
                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                // Should never hit this.
                throw new IllegalStateException(""Surface abandoned, skipping drawFrame..."", e);
            }
            mPBufferPixels.clear();
            GLES20.glReadPixels(/*x*/
            0, /*y*/
            0, holder.width, holder.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPBufferPixels);
            checkGlError(""glReadPixels"");
            try {
                int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
            } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                Log.w(TAG, ""Surface abandoned, dropping frame. "", e);
                request.setOutputAbandoned();
            }
        }
    }
    targetCollector.previewProduced();
    if (doTiming) {
        endGlTiming();
    }
}",1,"/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
","/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */
",0,,,0,,,0,"1,2",2,2,3,1,"The change in the code is a new try-catch block added to the second for loop for the drawFrame() method. In the early version, the method is called without any exception handling, while in the late version, a try-catch block is added that catches BufferQueueAbandonedException and throws an IllegalStateException.","The new exception handling in the late version can lead to different behavior than the early version. In the early version, if a BufferQueueAbandonedException is thrown, it is caught in the outer try-catch block and logged, and the request is set as abandoned. However, in the late version, the new try-catch block will catch the exception and throw an IllegalStateException, which is not caught and will propagate up, potentially causing the application to crash. This is a compatibility issue as the same exception can lead to different outcomes in the two versions."
178,<android.net.Uri: Uri normalizeScheme()>,25,26,<android.net.Uri: Uri normalizeScheme()>,<android.net.Uri: Uri normalizeScheme()>,0,"{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}","{
    String scheme = getScheme();
    // give up
    if (scheme == null)
        return this;
    String lowerScheme = scheme.toLowerCase(Locale.ROOT);
    // no change
    if (scheme.equals(lowerScheme))
        return this;
    return buildUpon().scheme(lowerScheme).build();
}",0,"/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see {@link android.content.Intent#setData}
 * @see {@link android.content.Intent#setDataAndNormalize}
 */
","/**
 * Return an equivalent URI with a lowercase scheme component.
 * This aligns the Uri with Android best practices for
 * intent filtering.
 *
 * <p>For example, ""HTTP://www.android.com"" becomes
 * ""http://www.android.com""
 *
 * <p>All URIs received from outside Android (such as user input,
 * or external sources like Bluetooth, NFC, or the Internet) should
 * be normalized before they are used to create an Intent.
 *
 * <p class=""note"">This method does <em>not</em> validate bad URI's,
 * or 'fix' poorly formatted URI's - so do not use it for input validation.
 * A Uri will always be returned, even if the Uri is badly formatted to
 * begin with and a scheme component cannot be found.
 *
 * @return normalized Uri (never null)
 * @see android.content.Intent#setData
 * @see android.content.Intent#setDataAndNormalize
 */
",1,,,0,,,0,0,0,0,0,0,There is no difference in the implementation of the normalizeScheme() method between early and late versions.,There is no compatibility issue as the implementation has not changed between the two versions.
179,<android.widget.GridView: void setRemoteViewsAdapter(Intent)>,25,26,<android.widget.GridView: void setRemoteViewsAdapter(Intent)>,<android.widget.GridView: void setRemoteViewsAdapter(Intent)>,0,"{
    super.setRemoteViewsAdapter(intent);
}","{
    super.setRemoteViewsAdapter(intent);
}",0,"/**
 * Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService
 * through the specified intent.
 * @param intent the intent used to identify the RemoteViewsService for the adapter to connect to.
 */
","/**
 * Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService
 * through the specified intent.
 * @param intent the intent used to identify the RemoteViewsService for the adapter to connect to.
 */
",0,[@android.view.RemotableViewMethod],[@android.view.RemotableViewMethod(asyncImpl = "setRemoteViewsAdapterAsync")],1,,,0,0,0,0,5,0,The annotation of the API has changed by adding an additional attribute "asyncImpl" to the existing annotation "@android.view.RemotableViewMethod".,"The change in the annotation does not affect the behavior of the API, so there is no Compatibility Issue."
180,<android.os.MemoryFile.MemoryInputStream: int available()>,26,27,<android.os.MemoryFile.MemoryInputStream: int available()>,<android.os.MemoryFile.MemoryInputStream: int available()>,0,"{
    if (mOffset >= mLength) {
        return 0;
    }
    return mLength - mOffset;
}","{
    if (mOffset >= mSharedMemory.getSize()) {
        return 0;
    }
    return mSharedMemory.getSize() - mOffset;
}",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,3,4",1,3,1,"The condition in the if statement has changed from `mOffset >= mLength` to `mOffset >= mSharedMemory.getSize()`, and the return value in the else case has changed from `mLength - mOffset` to `mSharedMemory.getSize() - mOffset`.","The change in the if statement condition and the return value can cause the API to return different values in the two versions, leading to a Compatibility Issue."
181,"<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>",26,27,"<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>","<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>",0,,,0,"/**
 * This method is called when the buffer is going to replace the
 * range <code>dstart &hellip; dend</code> of <code>dest</code>
 * with the new text from the range <code>start &hellip; end</code>
 * of <code>source</code>.  Return the CharSequence that you would
 * like to have placed there instead, including an empty string
 * if appropriate, or <code>null</code> to accept the original
 * replacement.  Be careful to not to reject 0-length replacements,
 * as this is what happens when you delete text.  Also beware that
 * you should not attempt to make any changes to <code>dest</code>
 * from this method; you may only examine it for context.
 *
 * Note: If <var>source</var> is an instance of {@link Spanned} or
 * {@link Spannable}, the span objects in the <var>source</var> should be
 * copied into the filtered result (i.e. the non-null return value).
 * {@link TextUtils#copySpansFrom} can be used for convenience.
 */
","/**
 * This method is called when the buffer is going to replace the
 * range <code>dstart &hellip; dend</code> of <code>dest</code>
 * with the new text from the range <code>start &hellip; end</code>
 * of <code>source</code>.  Return the CharSequence that you would
 * like to have placed there instead, including an empty string
 * if appropriate, or <code>null</code> to accept the original
 * replacement.  Be careful to not to reject 0-length replacements,
 * as this is what happens when you delete text.  Also beware that
 * you should not attempt to make any changes to <code>dest</code>
 * from this method; you may only examine it for context.
 *
 * Note: If <var>source</var> is an instance of {@link Spanned} or
 * {@link Spannable}, the span objects in the <var>source</var> should be
 * copied into the filtered result (i.e. the non-null return value).
 * {@link TextUtils#copySpansFrom} can be used for convenience if the
 * span boundary indices would be remaining identical relative to the source.
 */
",1,,,0,,,0,0,0,0,0,0,"The implementation and annotations of the API `android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)` are not provided for both the early version and late version. Therefore, it is impossible to determine whether there is any code change or compatibility issue between the two versions.","The implementation and annotations of the API `android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)` are not provided for both the early version and late version. Therefore, it is impossible to determine whether there is any compatibility issue between the two versions."
182,<android.view.textclassifier.TextClassification: String getText()>,26,27,<android.view.textclassifier.TextClassification: String getText()>,<android.view.textclassifier.TextClassification: String getText()>,0,"{
    return mText;
}","{
    return mText;
}",0,"/**
 * Gets the classified text.
 */
","/**
 * Gets the classified text.
 */
",0,[@NonNull],[@Nullable],1,,,0,0,0,0,5,1,1) Compatibility Issue caused by potential different return values or types,"As the annotation on the return type has been changed from `@NonNull` to `@Nullable`, the return value of the method might be null in the late version, which could cause compatibility issues when the method is called by the client code that assumes the return value is not null."
183,<android.os.MemoryFile.MemoryInputStream: int available()>,26,27,<android.os.MemoryFile.MemoryInputStream: int available()>,<android.os.MemoryFile.MemoryInputStream: int available()>,0,"{
    if (mOffset >= mLength) {
        return 0;
    }
    return mLength - mOffset;
}","{
    if (mOffset >= mSharedMemory.getSize()) {
        return 0;
    }
    return mSharedMemory.getSize() - mOffset;
}",1,,,0,[@Override],[@Override],0,,,0,"1,2","1,3,4",1,3,1,"The condition in the if statement has changed from `mOffset >= mLength` to `mOffset >= mSharedMemory.getSize()`. Additionally, the value being returned in the case where the condition is not met has also changed from `mLength - mOffset` to `mSharedMemory.getSize() - mOffset`.","The changes in the condition and the returned value can potentially cause the API to return a different value, leading to a Compatibility Issue."
184,"<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>",27,28,"<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>","<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>",0,,,0,"/**
 * This method is called when the buffer is going to replace the
 * range <code>dstart &hellip; dend</code> of <code>dest</code>
 * with the new text from the range <code>start &hellip; end</code>
 * of <code>source</code>.  Return the CharSequence that you would
 * like to have placed there instead, including an empty string
 * if appropriate, or <code>null</code> to accept the original
 * replacement.  Be careful to not to reject 0-length replacements,
 * as this is what happens when you delete text.  Also beware that
 * you should not attempt to make any changes to <code>dest</code>
 * from this method; you may only examine it for context.
 *
 * Note: If <var>source</var> is an instance of {@link Spanned} or
 * {@link Spannable}, the span objects in the <var>source</var> should be
 * copied into the filtered result (i.e. the non-null return value).
 * {@link TextUtils#copySpansFrom} can be used for convenience.
 */
","/**
 * This method is called when the buffer is going to replace the
 * range <code>dstart &hellip; dend</code> of <code>dest</code>
 * with the new text from the range <code>start &hellip; end</code>
 * of <code>source</code>.  Return the CharSequence that you would
 * like to have placed there instead, including an empty string
 * if appropriate, or <code>null</code> to accept the original
 * replacement.  Be careful to not to reject 0-length replacements,
 * as this is what happens when you delete text.  Also beware that
 * you should not attempt to make any changes to <code>dest</code>
 * from this method; you may only examine it for context.
 *
 * Note: If <var>source</var> is an instance of {@link Spanned} or
 * {@link Spannable}, the span objects in the <var>source</var> should be
 * copied into the filtered result (i.e. the non-null return value).
 * {@link TextUtils#copySpansFrom} can be used for convenience if the
 * span boundary indices would be remaining identical relative to the source.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the implementation or annotations between the two versions. The only difference is in the comment where a new sentence has been added to the 'Note' section.,"There is no compatibility issue as the implementation and annotations have not changed, and the added comment only provides additional guidance for developers."
185,<android.view.textclassifier.TextClassification: String getText()>,27,28,<android.view.textclassifier.TextClassification: String getText()>,<android.view.textclassifier.TextClassification: String getText()>,0,"{
    return mText;
}","{
    return mText;
}",0,"/**
 * Gets the classified text.
 */
","/**
 * Gets the classified text.
 */
",0,[@NonNull],[@Nullable],1,,,0,0,0,0,5,1,"The change is in the annotation of the method, the annotation has been changed from `@NonNull` to `@Nullable`, which indicates that the return value of the method can now be `null` in the late version.","The Compatibility Issue arises because the return value of the method can now be `null` in the late version, while in the early version it was guaranteed to be non-null. This can cause NullPointerExceptions or other unexpected behavior in the client code that is using this API and is not expecting a `null` value."
186,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",27,28,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>","<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",0,"{
    mEntityConfidence.setEntityType(type, confidenceScore);
    return this;
}","{
    Preconditions.checkNotNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}",1,"/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
","/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
",0,,[@NonNull],1,,,0,"1,2","1,4,5",1,"1, 5",1,"The implementation of the method has been changed from using the `setEntityType()` method to using the `put()` method in the `mEntityConfidence` object. Additionally, a null-check has been added for the `type` parameter using the `Preconditions.checkNotNull()` method.","The change in implementation from `setEntityType()` to `put()` could potentially lead to different behavior in the way the entity type and confidence score are stored and retrieved. This could affect the functionality of any code that relies on the correctness of this information. The addition of the null-check for the `type` parameter could also cause a runtime exception to be thrown in cases where it was previously allowed, which could break existing code that passes null for this parameter."
187,"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",27,28,"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>","<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",0,"{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}","{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}",0,"/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false)
 * or to automatically connect as soon as the remote
 * device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
","/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 *
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false) or to
 * automatically connect as soon as the remote device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
",1,,,0,,,0,0,0,0,0,0,"There is no change in the implementation, comment, and annotations between the two versions of the API.",There is no compatibility issue between the two versions of the API.
188,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,27,28,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,0,"{
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}","{
    if (mIsUnbindIssued != null) {
        Log.e(TAG, ""bindInput must be paired with unbindInput."");
    }
    mIsUnbindIssued = new AtomicBoolean();
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}",1,,,0,[@Override],"[@BinderThread, @Override]",1,,,0,"1,2","3,4,5",0,5,0,The implementation of the method has been modified to include an additional parameter `mIsUnbindIssued` in the `InputConnectionWrapper` constructor and an atomic boolean variable `mIsUnbindIssued` has been added. This change is classified as a dependent API change since it involves modifying the implementation of the method by adding a new parameter to the constructor of a dependent API.,"The added parameter `mIsUnbindIssued` is only used within the `InputConnectionWrapper` class and does not affect the behavior of the `bindInput` method. Therefore, there is no compatibility issue caused by this change."
190,"<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>",28,29,"<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>","<android.text.InputFilter: CharSequence filter(CharSequence,int,int,Spanned,int,int)>",0,,,0,"/**
 * This method is called when the buffer is going to replace the
 * range <code>dstart &hellip; dend</code> of <code>dest</code>
 * with the new text from the range <code>start &hellip; end</code>
 * of <code>source</code>.  Return the CharSequence that you would
 * like to have placed there instead, including an empty string
 * if appropriate, or <code>null</code> to accept the original
 * replacement.  Be careful to not to reject 0-length replacements,
 * as this is what happens when you delete text.  Also beware that
 * you should not attempt to make any changes to <code>dest</code>
 * from this method; you may only examine it for context.
 *
 * Note: If <var>source</var> is an instance of {@link Spanned} or
 * {@link Spannable}, the span objects in the <var>source</var> should be
 * copied into the filtered result (i.e. the non-null return value).
 * {@link TextUtils#copySpansFrom} can be used for convenience.
 */
","/**
 * This method is called when the buffer is going to replace the
 * range <code>dstart &hellip; dend</code> of <code>dest</code>
 * with the new text from the range <code>start &hellip; end</code>
 * of <code>source</code>.  Return the CharSequence that you would
 * like to have placed there instead, including an empty string
 * if appropriate, or <code>null</code> to accept the original
 * replacement.  Be careful to not to reject 0-length replacements,
 * as this is what happens when you delete text.  Also beware that
 * you should not attempt to make any changes to <code>dest</code>
 * from this method; you may only examine it for context.
 *
 * Note: If <var>source</var> is an instance of {@link Spanned} or
 * {@link Spannable}, the span objects in the <var>source</var> should be
 * copied into the filtered result (i.e. the non-null return value).
 * {@link TextUtils#copySpansFrom} can be used for convenience if the
 * span boundary indices would be remaining identical relative to the source.
 */
",1,,,0,,,0,0,0,0,0,0,"The code implementation and annotation between the two versions are the same, so there is no change.","The code implementation and annotation between the two versions are the same, so there is no Compatibility Issue exist."
191,<android.view.textclassifier.TextClassification: String getText()>,28,29,<android.view.textclassifier.TextClassification: String getText()>,<android.view.textclassifier.TextClassification: String getText()>,0,"{
    return mText;
}","{
    return mText;
}",0,"/**
 * Gets the classified text.
 */
","/**
 * Gets the classified text.
 */
",0,[@NonNull],[@Nullable],1,,,0,0,0,0,5,1,"The annotation of the method `getText()` has changed from `@NonNull` to `@Nullable`. This change indicates that the method in the late version can potentially return a null value, while in the early version it is guaranteed to return a non-null value.","The change of annotation from `@NonNull` to `@Nullable` means that the method in the late version can potentially return a null value, which can cause a NullPointerException in the client code that is written based on the early version's guarantee of a non-null return value. Therefore, this change is a Compatibility Issue caused by potential different return values or types (1)."
192,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",28,29,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>","<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",0,"{
    mEntityConfidence.setEntityType(type, confidenceScore);
    return this;
}","{
    Preconditions.checkNotNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}",1,"/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
","/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
",0,,[@NonNull],1,,,0,"1,2","1,4,5",1,"1,5",1,"The return statement has not changed, but the implementation of the method has changed. In the early version, the method `setEntityType` of `mEntityConfidence` is called, while in the late version, the method `put` of `mEntityConfidence` is called, and a null check is added before it.","The change of method implementation may lead to different behavior of the API. In the early version, the method `setEntityType` is used, which may have a different implementation than the method `put` in the late version. Therefore, the API may return different results or throw different exceptions in different versions, which means a Compatibility Issue (CI) exists. The CI type is 1, which means the CI is caused by potential different return values or types."
193,"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",28,29,"<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>","<android.bluetooth.BluetoothDevice: BluetoothGatt connectGatt(Context,boolean,BluetoothGattCallback)>",0,"{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}","{
    return (connectGatt(context, autoConnect, callback, TRANSPORT_AUTO));
}",0,"/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false)
 * or to automatically connect as soon as the remote
 * device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
","/**
 * Connect to GATT Server hosted by this device. Caller acts as GATT client.
 * The callback is used to deliver results to Caller, such as connection status as well
 * as any further GATT client operations.
 * The method returns a BluetoothGatt instance. You can use BluetoothGatt to conduct
 * GATT client operations.
 *
 * @param callback GATT callback handler that will receive asynchronous callbacks.
 * @param autoConnect Whether to directly connect to the remote device (false) or to
 * automatically connect as soon as the remote device becomes available (true).
 * @throws IllegalArgumentException if callback is null
 */
",1,,,0,,,0,0,0,0,0,0,"There is no change in the code implementation, hence the change type is 0.","Since there is no change in the code implementation, there is no potential different behavior, hence the CI type is 0."
194,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,28,29,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,<android.inputmethodservice.IInputMethodWrapper: void bindInput(InputBinding)>,0,"{
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}","{
    if (mIsUnbindIssued != null) {
        Log.e(TAG, ""bindInput must be paired with unbindInput."");
    }
    mIsUnbindIssued = new AtomicBoolean();
    // This IInputContext is guaranteed to implement all the methods.
    final int missingMethodFlags = 0;
    InputConnection ic = new InputConnectionWrapper(mTarget, IInputContext.Stub.asInterface(binding.getConnectionToken()), missingMethodFlags, mIsUnbindIssued);
    InputBinding nu = new InputBinding(ic, binding);
    mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_SET_INPUT_CONTEXT, nu));
}",1,,,0,[@Override],"[@BinderThread, @Override]",1,,,0,"1,2","3,4,5",0,5,1,"The code change between the two versions is the addition of an if-statement to check the value of `mIsUnbindIssued`, and the addition of a new parameter `mIsUnbindIssued` to the constructor of `InputConnectionWrapper`. The if-statement does not affect the return value or exception handling, but the new parameter in the constructor of `InputConnectionWrapper` may potentially change the behavior of the API, leading to a different return value.","The addition of a new parameter `mIsUnbindIssued` to the constructor of `InputConnectionWrapper` may potentially change the behavior of the API, leading to a different return value. This is a Compatibility Issue caused by potential different return values or types."
195,<android.widget.CheckedTextView: Mode getCheckMarkTintMode()>,28,29,<android.widget.CheckedTextView: Mode getCheckMarkTintMode()>,<android.widget.CheckedTextView: Mode getCheckMarkTintMode()>,0,"{
    return mCheckMarkTintMode;
}","{
    return mCheckMarkBlendMode != null ? BlendMode.blendModeToPorterDuffMode(mCheckMarkBlendMode) : null;
}",1,"/**
 * Returns the blending mode used to apply the tint to the check mark
 * drawable, if specified.
 *
 * @return the blending mode used to apply the tint to the check mark
 * drawable
 * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode
 * @see #setCheckMarkTintMode(PorterDuff.Mode)
 */
","/**
 * Returns the blending mode used to apply the tint to the check mark
 * drawable, if specified.
 *
 * @return the blending mode used to apply the tint to the check mark
 * drawable
 * @attr ref android.R.styleable#CheckedTextView_checkMarkTintMode
 * @see #setCheckMarkTintMode(PorterDuff.Mode)
 */
",0,[@Nullable],"[@InspectableProperty, @Nullable]",1,,,0,"1,2","1,4",1,1,1,"The return statement in the late version is different from the one in the early version. In the early version, the method returns the value of the `mCheckMarkTintMode` field, while in the late version, it returns a value based on the `mCheckMarkBlendMode` field.","The change in the return statement can cause compatibility issues as the method will now return a different value based on the `mCheckMarkBlendMode` field, which was not used in the early version. This can lead to unexpected behavior in applications that rely on the value of the `getCheckMarkTintMode()` method."
196,<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>,28,29,<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>,<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>,0,"{
    final IAccessibilityServiceConnection connection = AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId);
    if (connection != null) {
        try {
            return connection.setSoftKeyboardShowMode(showMode);
        } catch (RemoteException re) {
            Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re);
            re.rethrowFromSystemServer();
        }
    }
    return false;
}","{
    final IAccessibilityServiceConnection connection = AccessibilityInteractionClient.getInstance().getConnection(mService.mConnectionId);
    if (connection != null) {
        try {
            return connection.setSoftKeyboardShowMode(showMode);
        } catch (RemoteException re) {
            Log.w(LOG_TAG, ""Failed to set soft keyboard behavior"", re);
            re.rethrowFromSystemServer();
        }
    }
    return false;
}",0,"/**
 * Sets the soft keyboard show mode. The default show mode is
 * {@code SHOW_MODE_AUTO}, where the soft keyboard is shown when a text input field is
 * focused. An AccessibilityService can also request the show mode
 * {@code SHOW_MODE_HIDDEN}, where the soft keyboard is never shown. The
 * The lastto this method will be honored, regardless of any previous calls (including those
 * made by other AccessibilityServices).
 * <p>
 * <strong>Note:</strong> If the service is not yet connected (e.g.
 * {@link AccessibilityService#onServiceConnected()} has not yet been called) or the
 * service has been disconnected, this method will have no effect and return {@code false}.
 *
 * @param showMode the new show mode for the soft keyboard
 * @return {@code true} on success
 */
","/**
 * Sets the soft keyboard show mode.
 * <p>
 * <strong>Note:</strong> If the service is not yet connected (e.g.
 * {@link AccessibilityService#onServiceConnected()} has not yet been called) or the
 * service has been disconnected, this method will have no effect and return {@code false}.
 *
 * @param showMode the new show mode for the soft keyboard
 * @return {@code true} on success
 *
 * @see AccessibilityService#SHOW_MODE_AUTO
 * @see AccessibilityService#SHOW_MODE_HIDDEN
 * @see AccessibilityService#SHOW_MODE_IGNORE_HARD_KEYBOARD
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in code between the two versions. Only the comment has been updated.,There is no Compatibility Issue since the code implementation remains the same in both versions.
197,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",29,30,"<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>","<android.view.textclassifier.TextSelection.Builder: Builder setEntityType(String,float)>",0,"{
    Preconditions.checkNotNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}","{
    Objects.requireNonNull(type);
    mEntityConfidence.put(type, confidenceScore);
    return this;
}",1,"/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
","/**
 * Sets an entity type for the classified text and assigns a confidence score.
 *
 * @param confidenceScore a value from 0 (low confidence) to 1 (high confidence).
 * 0 implies the entity does not exist for the classified text.
 * Values greater than 1 are clamped to 1.
 */
",0,[@NonNull],[@NonNull],0,,,0,"1,2",5,0,4,0,"The method implementation has changed from using 'Preconditions.checkNotNull(type)' to 'Objects.requireNonNull(type)'. This change falls under the category of 'Other statement changed' as it does not involve changes to return statements, exception handling statements, control dependencies or dependent APIs.","The change in the method implementation does not affect the behavior of the API. Both 'Preconditions.checkNotNull(type)' and 'Objects.requireNonNull(type)' perform the same function of checking if the 'type' parameter is null. Therefore, there are no compatibility issues (CI) caused by this change."
198,"<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(Network,LinkProperties)>",29,30,"<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(Network,LinkProperties)>","<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(Network,LinkProperties)>",0,"{
}","{
}",0,"/**
 * Called when the network the framework connected to for this request
 * changes {@link LinkProperties}.
 *
 * @param network The {@link Network} whose link properties have changed.
 * @param linkProperties The new {@link LinkProperties} for this network.
 */
","/**
 * Called when the network corresponding to this request changes {@link LinkProperties}.
 *
 * <p>Starting with {@link android.os.Build.VERSION_CODES#O} this method is guaranteed
 * to be called immediately after {@link #onAvailable}.
 *
 * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or other synchronous
 * ConnectivityManager methods in this callback as this is prone to race conditions :
 * calling these methods while in a callback may return an outdated or even a null object.
 *
 * @param network The {@link Network} whose link properties have changed.
 * @param linkProperties The new {@link LinkProperties} for this network.
 */
",1,,,0,,,0,0,0,0,0,0,There is no change in the implementation of the API between the two versions.,There is no Compatibility Issue exist for the API.
199,<android.hardware.radio.RadioManager.ModuleProperties: String toString()>,29,30,<android.hardware.radio.RadioManager.ModuleProperties: String toString()>,<android.hardware.radio.RadioManager.ModuleProperties: String toString()>,0,"{
    return ""ModuleProperties [mId="" + mId + "", mServiceName="" + mServiceName + "", mClassId="" + mClassId + "", mImplementor="" + mImplementor + "", mProduct="" + mProduct + "", mVersion="" + mVersion + "", mSerial="" + mSerial + "", mNumTuners="" + mNumTuners + "", mNumAudioSources="" + mNumAudioSources + "", mIsInitializationRequired="" + mIsInitializationRequired + "", mIsCaptureSupported="" + mIsCaptureSupported + "", mIsBgScanSupported="" + mIsBgScanSupported + "", mBands="" + Arrays.toString(mBands) + ""]"";
}","{
    return ""ModuleProperties [mId="" + mId + "", mServiceName="" + mServiceName + "", mClassId="" + mClassId + "", mImplementor="" + mImplementor + "", mProduct="" + mProduct + "", mVersion="" + mVersion + "", mSerial="" + mSerial + "", mNumTuners="" + mNumTuners + "", mNumAudioSources="" + mNumAudioSources + "", mIsInitializationRequired="" + mIsInitializationRequired + "", mIsCaptureSupported="" + mIsCaptureSupported + "", mIsBgScanSupported="" + mIsBgScanSupported + "", mBands="" + Arrays.toString(mBands) + ""]"";
}",0,,,0,[@Override],"[@NonNull, @Override]",1,,,0,0,0,0,4,0,"The only difference between the two versions is the addition of the `@NonNull` annotation in the late version. This annotation is used to indicate that the method will not return a `null` value. However, since the method is already implemented to return a non-null string, the annotation does not change the behavior of the method.","The addition of the `@NonNull` annotation does not introduce any compatibility issues, as it does not change the behavior of the method. The method will still return a non-null string in both versions."
200,"<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>",30,31,"<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>","<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>",0,"{
}","{
    if (LOCAL_LOGV) {
        Log.v(TAG, getClass().getName() + "".onUserSwitched() on user "" + context.getUserId());
    }
}",1,"/**
 * Called when a user or profile is switched to.
 *
 * <p>This callback is only applicable to device owners.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 * @param switchedUser The {@link UserHandle} of the user that has just been switched to.
 */
","/**
 * Called when a user or profile is switched to.
 *
 * <p>This callback is only applicable to device owners.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 * @param switchedUser The {@link UserHandle} of the user that has just been switched to.
 */
",0,,,0,,,0,"1,2","3,4",0,4,0,"The change in the code is the addition of an 'if' statement that logs a message when a user is switched. The 'if' statement checks the value of a constant variable 'LOCAL\_LOGV' and if it is true, logs a message. This change is classified as 'Other statement changed' as it does not involve changes in the return statement, exception handling statement, or control dependency.","The log statement added in the code will not affect the behavior of the application, it will only print a debug message when a user is switched. This change does not cause a Compatibility Issue."
201,<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()>,30,31,<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()>,<android.bluetooth.BluetoothGattServer: List<BluetoothGattService> getServices()>,0,"{
    return mServices;
}","{
    return mServices;
}",0,"/**
 * Returns a list of GATT services offered by this device.
 *
 * <p>An application must call {@link #addService} to add a serice to the
 * list of services offered by this device.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @return List of services. Returns an empty list if no services have been added yet.
 */
","/**
 * Returns a list of GATT services offered by this device.
 *
 * <p>An application must call {@link #addService} to add a serice to the
 * list of services offered by this device.
 *
 * @return List of services. Returns an empty list if no services have been added yet.
 */
",1,,"[@RequiresLegacyBluetoothPermission, @RequiresNoPermission]",1,,,0,0,0,0,5,0,The annotation has been added in the late version.,"No compatibility issue has been detected in the code change, as it is only the addition of an annotation, which will not cause the API to return a different value or throw an exception differently."
202,<android.app.Application: void dispatchActivityPostStarted(Activity)>,30,31,<android.app.Application: void dispatchActivityPostStarted(Activity)>,<android.app.Application: void dispatchActivityPostStarted(Activity)>,0,"{
    Object[] callbacks = collectActivityLifecycleCallbacks();
    if (callbacks != null) {
        for (int i = 0; i < callbacks.length; i++) {
            ((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity);
        }
    }
}","{
    Object[] callbacks = collectActivityLifecycleCallbacks();
    if (callbacks != null) {
        for (int i = 0; i < callbacks.length; i++) {
            ((ActivityLifecycleCallbacks) callbacks[i]).onActivityPostStarted(activity);
        }
    }
}",0,,,0,[@UnsupportedAppUsage],"[@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)]",1,,,0,0,0,0,5,0,"The annotation of the method has been changed from `@UnsupportedAppUsage` to `@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)`. This is a dependent API change as the annotation itself is an API.",No compatibility issue exists as the change in the annotation does not affect the behavior of the method. The annotation is only used for lint checks and documentation.
203,"<android.hardware.camera2.impl.CameraMetadataNative: void set(Key<T>,T)>",31,32,"<android.hardware.camera2.impl.CameraMetadataNative: void set(Key<T>,T)>","<android.hardware.camera2.impl.CameraMetadataNative: void set(Key<T>,T)>",0,"{
    set(key.getNativeKey(), value);
}","{
    SetCommand s = sSetCommandMap.get(key);
    if (s != null) {
        s.setValue(this, value);
        return;
    }
    setBase(key, value);
}",1,,"/**
 * Set a camera metadata field to a value. The field definitions can be
 * found in {@link CameraCharacteristics}, {@link CaptureResult}, and
 * {@link CaptureRequest}.
 *
 * @param key The metadata field to write.
 * @param value The value to set the field to, which must be of a matching
 * type to the key.
 */
",1,,,0,,,0,"1,2","1,3,4,5",1,"5, 3","1, 2","The implementation of the set method has been changed from directly calling the set method with the native key to first checking if the key has a corresponding SetCommand in the sSetCommandMap. If it does, the value is set using the SetCommand's setValue method. If it doesn't, the value is set using the setBase method. This is a code change of type 5 (Dependent API changed) as the implementation now depends on the sSetCommandMap and SetCommand. Additionally, there is a control dependency change (type 3) as the code now has an if statement that affects the flow of the method.","The Compatibility Issue arises from the fact that the new implementation may not set the value for certain keys if they don't have a corresponding SetCommand in the sSetCommandMap. This can lead to different behaviors in the application as the values for those keys will not be updated. Additionally, there is a potential for different exception handling as the SetCommand's setValue method may throw different exceptions than the setBase method. Therefore, the CI type is 1 (Compatibility Issue caused by potential different return values or types) and 2 (Compatibility Issue caused by potential different exception handlings)."
204,<android.view.accessibility.AccessibilityEvent: void setEventType(int)>,31,32,<android.view.accessibility.AccessibilityEvent: void setEventType(int)>,<android.view.accessibility.AccessibilityEvent: void setEventType(int)>,0,"{
    enforceNotSealed();
    mEventType = eventType;
}","{
    enforceNotSealed();
    mEventType = eventType;
}",0,"/**
 * Sets the event type.
 *
 * @param eventType The event type.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
","/**
 * Sets the event type.
 *
 * <b>Note: An event must represent a single event type.</b>
 * @param eventType The event type.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 */
",1,,,0,,,0,0,0,0,0,0,"The code implementation has not changed between the two versions, only the comment has been updated. The added text in the comment is a note that an event must represent a single event type, which does not affect the behavior of the code.",There are no compatibility issues between the two versions since the code implementation has not changed and the added text in the comment does not affect the behavior of the code.
205,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,31,32,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,<android.accessibilityservice.AccessibilityService: Context createDisplayContext(Display)>,0,"{
    final Context context = super.createDisplayContext(display);
    final int displayId = display.getDisplayId();
    setDefaultTokenInternal(context, displayId);
    return context;
}","{
    return new AccessibilityContext(super.createDisplayContext(display), mConnectionId);
}",1,,,0,[@Override],"[@NonNull, @Override]",1,,,0,"1,2","1,4",1,1,1,The implementation of `createDisplayContext` method has been changed from returning the `Context` object returned by `super.createDisplayContext(display)` to returning a new `AccessibilityContext` object created with the `Context` object returned by `super.createDisplayContext(display)` and a `mConnectionId` variable.,The change in implementation of `createDisplayContext` method can cause compatibility issues as the returned object type has been changed from `Context` to `AccessibilityContext`. This can lead to different behaviors in the application if the returned object is used in a way that is specific to the `Context` class and not applicable to the `AccessibilityContext` class.
206,<android.os.UserManager: Bundle getUserRestrictions()>,32,33,<android.os.UserManager: Bundle getUserRestrictions()>,<android.os.UserManager: Bundle getUserRestrictions()>,0,"{
    return getUserRestrictions(Process.myUserHandle());
}","{
    try {
        return mService.getUserRestrictions(getContextUserIfAppropriate());
    } catch (RemoteException re) {
        throw re.rethrowFromSystemServer();
    }
}",1,"/**
 * Returns the user-wide restrictions imposed on this user.
 * @return a Bundle containing all the restrictions.
 */
","/**
 * Returns the user-wide restrictions imposed on the context user.
 * @return a Bundle containing all the restrictions.
 */
",1,,"[@UserHandleAware(enabledSinceTargetSdkVersion = Build.VERSION_CODES.TIRAMISU, requiresAnyOfPermissionsIfNotCallerProfileGroup = { android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.INTERACT_ACROSS_USERS })]",1,,,0,"1,2","1,2,5","1,2","5, 1","1,2","The implementation of the method has been completely changed. In the early version, the method `getUserRestrictions(Process.myUserHandle())` is called. In the late version, the method `mService.getUserRestrictions(getContextUserIfAppropriate())` is called within a try-catch block. Additionally, the late version has a new annotation `@UserHandleAware`.","The method may return a different Bundle of restrictions in the late version due to the change in the user handle being passed to the `getUserRestrictions` method. The late version is passing the context user, while the early version is passing the current user. This change in user handle may result in a different set of restrictions being applied to the user. Additionally, the late version has a new try-catch block that may result in a different exception being thrown. The late version is rethrowing the `RemoteException` from the system server, while the early version does not have any exception handling."
207,<android.service.dreams.DreamService: boolean isScreenBright()>,32,33,<android.service.dreams.DreamService: boolean isScreenBright()>,<android.service.dreams.DreamService: boolean isScreenBright()>,0,"{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}","{
    return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
}",0,"/**
 * Returns whether or not this dream keeps the screen bright while dreaming.
 * Defaults to false, allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
","/**
 * Returns whether this dream keeps the screen bright while dreaming.
 * Defaults to false, allowing the screen to dim if necessary.
 *
 * @see #setScreenBright(boolean)
 */
",1,,,0,,,0,0,0,0,0,0,"No change has been made in the implementation, comments, or annotations of the API between the two versions.","No Compatibility Issue exists for the API as there is no change in the implementation, comments, or annotations of the API between the two versions."
208,<android.os.Parcel: Parcelable[] readParcelableArray(ClassLoader)>,32,33,<android.os.Parcel: Parcelable[] readParcelableArray(ClassLoader)>,<android.os.Parcel: Parcelable[] readParcelableArray(ClassLoader)>,0,"{
    int N = readInt();
    if (N < 0) {
        return null;
    }
    Parcelable[] p = new Parcelable[N];
    for (int i = 0; i < N; i++) {
        p[i] = readParcelable(loader);
    }
    return p;
}","{
    return readParcelableArrayInternal(loader, /* clazz */
    null);
}",1,"/**
 * Read and return a new Parcelable array from the parcel.
 * The given class loader will be used to load any enclosed
 * Parcelables.
 * @return the Parcelable array, or null if the array is null
 */
","/**
 * Read and return a new Parcelable array from the parcel.
 * The given class loader will be used to load any enclosed
 * Parcelables.
 * @return the Parcelable array, or null if the array is null
 *
 * @deprecated Use the type-safer version {@link #readParcelableArray(ClassLoader, Class)}
 * starting from Android {@link Build.VERSION_CODES#TIRAMISU}. Also consider changing the
 * format to use {@link #createTypedArray(Parcelable.Creator)} if possible (eg. if the
 * items' class is final) since this is also more performant. Note that changing to the
 * latter also requires changing the writes.
 */
",1,[@Nullable],"[@Deprecated, @Nullable]",1,,,0,"1,2","1,2,5","1,2","1, 5","1, 2","The implementation of the `readParcelableArray` method has been completely changed between the two versions. In the early version, the method uses a `for` loop to iterate over the number of Parcelable objects in the Parcel and reads each one using the `readParcelable` method. In the late version, the method calls the `readParcelableArrayInternal` method, passing in the ClassLoader and `null` as the Class.",
502,"<android.os.image.DynamicSystemClient.DynSystemServiceConnection: void onServiceConnected(ComponentName,IBinder)>",30,31,"<android.os.image.DynamicSystemClient.DynSystemServiceConnection: void onServiceConnected(ComponentName,IBinder)>","<android.os.image.DynamicSystemClient.DynSystemServiceConnection: void onServiceConnected(ComponentName,IBinder)>",0,"{
    Slog.v(TAG, ""DynSystemService connected"");
    mService = new Messenger(service);
    try {
        Message msg = Message.obtain(null, MSG_REGISTER_LISTENER);
        msg.replyTo = mMessenger;
        mService.send(msg);
    } catch (RemoteException e) {
        Slog.e(TAG, ""Unable to get status from installation service"");
        if (mExecutor != null) {
            mExecutor.execute(() -> {
                mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e);
            });
        } else {
            mListener.onStatusChanged(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e);
        }
    }
}","{
    Slog.v(TAG, ""onServiceConnected: "" + className);
    mService = new Messenger(service);
    try {
        Message msg = Message.obtain(null, MSG_REGISTER_LISTENER);
        msg.replyTo = mMessenger;
        mService.send(msg);
    } catch (RemoteException e) {
        Slog.e(TAG, ""Unable to get status from installation service"");
        notifyOnStatusChangedListener(STATUS_UNKNOWN, CAUSE_ERROR_IPC, 0, e);
    }
}",1,,,-1,,,-1,-1,-1,-1,-1,"2,3,4",0,"3, 4",1,"In the late implementation, the log information in Slog.v() has changed. Also, the handling of exception RemoteException has been modified. Instead of using the mExecutor to execute a lambda function, the method notifyOnStatusChangedListener() is directly called.","The Compatibility Issue arises from the potential different return values of the API. In the early version, the listener's onStatusChanged() method may be executed asynchronously by mExecutor. However, in the late version, the listener's onStatusChanged() method is directly called synchronously. This may lead to different behaviors of the program that uses this API, especially when the execution of onStatusChanged() takes a long time."
168,<android.hardware.display.DisplayManagerInternal.DisplayPowerRequest: boolean equals(DisplayPowerRequest)>,29,30,<android.hardware.display.DisplayManagerInternal.DisplayPowerRequest: boolean equals(DisplayPowerRequest)>,<android.hardware.display.DisplayManagerInternal.DisplayPowerRequest: boolean equals(DisplayPowerRequest)>,0,"{
    return other != null && policy == other.policy && useProximitySensor == other.useProximitySensor && screenBrightnessOverride == other.screenBrightnessOverride && useAutoBrightness == other.useAutoBrightness && floatEquals(screenAutoBrightnessAdjustmentOverride, other.screenAutoBrightnessAdjustmentOverride) && screenLowPowerBrightnessFactor == other.screenLowPowerBrightnessFactor && blockScreenOn == other.blockScreenOn && lowPowerMode == other.lowPowerMode && boostScreenBrightness == other.boostScreenBrightness && dozeScreenBrightness == other.dozeScreenBrightness && dozeScreenState == other.dozeScreenState;
}","{
    return other != null && policy == other.policy && useProximitySensor == other.useProximitySensor && floatEquals(screenBrightnessOverride, other.screenBrightnessOverride) && useAutoBrightness == other.useAutoBrightness && floatEquals(screenAutoBrightnessAdjustmentOverride, other.screenAutoBrightnessAdjustmentOverride) && screenLowPowerBrightnessFactor == other.screenLowPowerBrightnessFactor && blockScreenOn == other.blockScreenOn && lowPowerMode == other.lowPowerMode && boostScreenBrightness == other.boostScreenBrightness && floatEquals(dozeScreenBrightness, other.dozeScreenBrightness) && dozeScreenState == other.dozeScreenState;
}",1,,,-1,,,-1,-1,-1,-1,-1,"1,4",0,4,1,"The code change is classified as ""Other statement changed"" because it involves changes to the comparison of two floating-point variables: 'screenBrightnessOverride' and 'dozeScreenBrightness'. In the early version, 'screenBrightnessOverride' is compared directly using '==', while in the late version, a separate method 'floatEquals()' is used for the comparison. Similarly, 'dozeScreenBrightness' is compared directly using '==' in the early version, but in the late version, the comparison is done using 'floatEquals()'.","The change in the comparison of floating-point variables can lead to compatibility issues. In the early version, the direct comparison using '==' may not always yield the correct results due to the inherent nature of floating-point numbers. This can cause the 'equals()' method to return an incorrect value, leading to unexpected behavior in the application. In the late version, the use of 'floatEquals()' for comparison ensures a more accurate result, but it can also cause the 'equals()' method to return a different value than in the early version, leading to compatibility issues."
223,<android.text.TextUtils: int getLayoutDirectionFromLocale(Locale)>,18,19,<android.text.TextUtils: int getLayoutDirectionFromLocale(Locale)>,<android.text.TextUtils: int getLayoutDirectionFromLocale(Locale)>,0,"{
    if (locale != null && !locale.equals(Locale.ROOT)) {
        final String scriptSubtag = ICU.getScript(ICU.addLikelySubtags(locale.toString()));
        if (scriptSubtag == null)
            return getLayoutDirectionFromFirstChar(locale);
        if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)) {
            return View.LAYOUT_DIRECTION_RTL;
        }
    }
    return View.LAYOUT_DIRECTION_LTR;
}","{
    if (locale != null && !locale.equals(Locale.ROOT)) {
        final String scriptSubtag = ICU.getScript(ICU.addLikelySubtags(locale.toString()));
        if (scriptSubtag == null)
            return getLayoutDirectionFromFirstChar(locale);
        if (scriptSubtag.equalsIgnoreCase(ARAB_SCRIPT_SUBTAG) || scriptSubtag.equalsIgnoreCase(HEBR_SCRIPT_SUBTAG)) {
            return View.LAYOUT_DIRECTION_RTL;
        }
    }
    // If forcing into RTL layout mode, return RTL as default, else LTR
    return SystemProperties.getBoolean(Settings.Global.DEVELOPMENT_FORCE_RTL, false) ? View.LAYOUT_DIRECTION_RTL : View.LAYOUT_DIRECTION_LTR;
}",1,"/**
 * Return the layout direction for a given Locale
 *
 * @param locale the Locale for which we want the layout direction. Can be null.
 * @return the layout direction. This may be one of:
 * {@link android.view.View#LAYOUT_DIRECTION_LTR} or
 * {@link android.view.View#LAYOUT_DIRECTION_RTL}.
 *
 * Be careful: this code will need to be updated when vertical scripts will be supported
 */
","/**
 * Return the layout direction for a given Locale
 *
 * @param locale the Locale for which we want the layout direction. Can be null.
 * @return the layout direction. This may be one of:
 * {@link android.view.View#LAYOUT_DIRECTION_LTR} or
 * {@link android.view.View#LAYOUT_DIRECTION_RTL}.
 *
 * Be careful: this code will need to be updated when vertical scripts will be supported
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1, 3",1,"The implementation of the method has been changed by adding an additional condition in the if statement. The API now returns a different value when the system property ""DEVELOPMENT\_FORCE\_RTL"" is set to true, regardless of the given locale.","The compatibility issue arises when the system property ""DEVELOPMENT\_FORCE\_RTL"" is set to true in the late version. In this case, the API returns View.LAYOUT\_DIRECTION\_RTL, while in the early version, it returns View.LAYOUT\_DIRECTION\_LTR for locales that are not Arabic or Hebrew scripts. This difference in behavior can cause layout and text display issues in applications that rely on this API."
234,"<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(List<Surface>,StateCallback,Handler)>",25,26,"<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(List<Surface>,StateCallback,Handler)>","<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(List<Surface>,StateCallback,Handler)>",0,"{
    if (outputs == null || outputs.size() == 0 || outputs.size() > 2) {
        throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2"");
    }
    StreamConfigurationMap config = getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
    SurfaceUtils.checkConstrainedHighSpeedSurfaces(outputs, /*fpsRange*/
    null, config);
    List<OutputConfiguration> outConfigurations = new ArrayList<>(outputs.size());
    for (Surface surface : outputs) {
        outConfigurations.add(new OutputConfiguration(surface));
    }
    createCaptureSessionInternal(null, outConfigurations, callback, handler, /*isConstrainedHighSpeed*/
    true);
}","{
    if (outputs == null || outputs.size() == 0 || outputs.size() > 2) {
        throw new IllegalArgumentException(""Output surface list must not be null and the size must be no more than 2"");
    }
    StreamConfigurationMap config = getCharacteristics().get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
    SurfaceUtils.checkConstrainedHighSpeedSurfaces(outputs, /*fpsRange*/
    null, config);
    List<OutputConfiguration> outConfigurations = new ArrayList<>(outputs.size());
    for (Surface surface : outputs) {
        outConfigurations.add(new OutputConfiguration(surface));
    }
    createCaptureSessionInternal(null, outConfigurations, callback, handler, /*operatingMode*/
    ICameraDeviceUser.CONSTRAINED_HIGH_SPEED_MODE);
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,4,1,5,1,"The last parameter in the `createCaptureSessionInternal` method call has changed from `true` to `ICameraDeviceUser.CONSTRAINED_HIGH_SPEED_MODE`. This means that the method is now receiving a different value for this parameter, which is a dependent API change (class 5).","The change in the dependent API could potentially cause the `createCaptureSessionInternal` method to behave differently, which in turn could lead to different return values or types for the `createConstrainedHighSpeedCaptureSession` method. Therefore, this is a Compatibility Issue caused by potential different return values or types (class 1)."
695,<android.content.ContentValues: Long getAsLong(String)>,28,29,<android.content.ContentValues: Long getAsLong(String)>,<android.content.ContentValues: Long getAsLong(String)>,0,"{
    Object value = mValues.get(key);
    try {
        return value != null ? ((Number) value).longValue() : null;
    } catch (ClassCastException e) {
        if (value instanceof CharSequence) {
            try {
                return Long.valueOf(value.toString());
            } catch (NumberFormatException e2) {
                Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key);
                return null;
            }
        } else {
            Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e);
            return null;
        }
    }
}","{
    Object value = mMap.get(key);
    try {
        return value != null ? ((Number) value).longValue() : null;
    } catch (ClassCastException e) {
        if (value instanceof CharSequence) {
            try {
                return Long.valueOf(value.toString());
            } catch (NumberFormatException e2) {
                Log.e(TAG, ""Cannot parse Long value for "" + value + "" at key "" + key);
                return null;
            }
        } else {
            Log.e(TAG, ""Cannot cast value for "" + key + "" to a Long: "" + value, e);
            return null;
        }
    }
}",1,"/**
 * Gets a value and converts it to a Long.
 *
 * @param key the value to get
 * @return the Long value, or {@code null} if the value is missing or cannot be converted
 */
","/**
 * Gets a value and converts it to a Long.
 *
 * @param key the value to get
 * @return the Long value, or {@code null} if the value is missing or cannot be converted
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,1,"The implementation of the method has changed from using `mValues` to `mMap` for retrieving the value of the given key. This is a change in the data structure used for storing the values, which is an other statement change.","The change in the data structure used for storing the values could potentially lead to different behavior in the method. For example, if the `mValues` and `mMap` have different ordering of the keys, the method might return a different value for the same key in different versions. Therefore, this change could cause a compatibility issue of type 1."
863,<android.widget.RemoteViews.AsyncApplyTask: ViewTree doInBackground(Void)>,30,31,<android.widget.RemoteViews.AsyncApplyTask: ViewTree doInBackground(Void)>,<android.widget.RemoteViews.AsyncApplyTask: ViewTree doInBackground(Void)>,0,"{
    try {
        if (mResult == null) {
            mResult = inflateView(mContext, mRV, mParent);
        }
        mTree = new ViewTree(mResult);
        if (mRV.mActions != null) {
            int count = mRV.mActions.size();
            mActions = new Action[count];
            for (int i = 0; i < count && !isCancelled(); i++) {
                // TODO: check if isCancelled in nested views.
                mActions[i] = mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler);
            }
        } else {
            mActions = null;
        }
        return mTree;
    } catch (Exception e) {
        mError = e;
        return null;
    }
}","{
    try {
        if (mResult == null) {
            mResult = inflateView(mContext, mRV, mParent, 0, mColorResources);
        }
        mTree = new ViewTree(mResult);
        if (mRV.mActions != null) {
            int count = mRV.mActions.size();
            mActions = new Action[count];
            for (int i = 0; i < count && !isCancelled(); i++) {
                // TODO: check if isCancelled in nested views.
                mActions[i] = mRV.mActions.get(i).initActionAsync(mTree, mParent, mHandler, mColorResources);
            }
        } else {
            mActions = null;
        }
        return mTree;
    } catch (Exception e) {
        mError = e;
        return null;
    }
}",1,,,-1,[@Override],"[@Nullable, @Override]",-1,-1,-1,-1,-1,5,0,5,1,The method 'inflateView' and 'initActionAsync' have changed the number of parameters. This is a Dependent API change.,"The change of Dependent API can potentially cause different behaviors in the late version, as the method's logic may be different with new parameters. Therefore, this is a Compatibility Issue caused by potential different return values or types."
117,<android.hardware.camera2.impl.CameraDeviceImpl: void createExtensionSession(ExtensionSessionConfiguration)>,32,33,,,,"{
    try {
        if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()) {
            mCurrentAdvancedExtensionSession = CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration);
        } else {
            mCurrentExtensionSession = CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration);
        }
    } catch (RemoteException e) {
        throw new CameraAccessException(CameraAccessException.CAMERA_ERROR);
    }
}","{
    try {
        if (CameraExtensionCharacteristics.areAdvancedExtensionsSupported()) {
            mCurrentAdvancedExtensionSession = CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++);
        } else {
            mCurrentExtensionSession = CameraExtensionSessionImpl.createCameraExtensionSession(this, mContext, extensionConfiguration, mNextSessionId++);
        }
    } catch (RemoteException e) {
        throw new CameraAccessException(CameraAccessException.CAMERA_ERROR);
    }
}",1,,,0,[@Override],[@Override],0,,,,,5,0,5,1,The change in code is related to the dependent API. The method 'createCameraAdvancedExtensionSession' and 'createCameraExtensionSession' have an additional parameter 'mNextSessionId++' in the late version.,"As the dependent APIs have undergone changes and the new parameter added may cause different behaviors, thus the CI type is 1."
9,<android.webkit.WebView: void onDraw(Canvas)>,6,7,<android.webkit.WebView: void onDraw(Canvas)>,<android.webkit.WebView: void onDraw(Canvas)>,0,"{
    // if mNativeClass is 0, the WebView has been destroyed. Do nothing.
    if (mNativeClass == 0) {
        return;
    }
    int saveCount = canvas.save();
    if (mTitleBar != null) {
        canvas.translate(0, (int) mTitleBar.getHeight());
    }
    // Update the buttons in the picture, so when we draw the picture
    // to the screen, they are in the correct state.
    // Tell the native side if user is a) touching the screen,
    // b) pressing the trackball down, or c) pressing the enter key
    // If the cursor is on a button, we need to draw it in the pressed
    // state.
    // If mNativeClass is 0, we should not reach here, so we do not
    // need to check it again.
    nativeRecordButtons(hasFocus() && hasWindowFocus(), mTouchMode == TOUCH_SHORTPRESS_START_MODE || mTrackballDown || mGotCenterDown, false);
    drawCoreAndCursorRing(canvas, mBackgroundColor, mDrawCursorRing);
    canvas.restoreToCount(saveCount);
    // Now draw the shadow.
    if (mTitleBar != null) {
        int y = mScrollY + getVisibleTitleHeight();
        int height = (int) (5f * getContext().getResources().getDisplayMetrics().density);
        mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height);
        mTitleShadow.draw(canvas);
    }
    if (AUTO_REDRAW_HACK && mAutoRedraw) {
        invalidate();
    }
}","{
    // if mNativeClass is 0, the WebView has been destroyed. Do nothing.
    if (mNativeClass == 0) {
        return;
    }
    int saveCount = canvas.save();
    if (mTitleBar != null) {
        canvas.translate(0, (int) mTitleBar.getHeight());
    }
    if (mDragTrackerHandler == null || !mDragTrackerHandler.draw(canvas)) {
        drawContent(canvas);
    }
    canvas.restoreToCount(saveCount);
    // Now draw the shadow.
    if (mTitleBar != null) {
        int y = mScrollY + getVisibleTitleHeight();
        int height = (int) (5f * getContext().getResources().getDisplayMetrics().density);
        mTitleShadow.setBounds(mScrollX, y, mScrollX + getWidth(), y + height);
        mTitleShadow.draw(canvas);
    }
    if (AUTO_REDRAW_HACK && mAutoRedraw) {
        invalidate();
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"3, 5",1,"The code change between the two versions is in the control dependency and the dependent API. In the early version, the method `nativeRecordButtons` and `drawCoreAndCursorRing` are called directly. In the late version, a new method `drawContent` is introduced, and it is called under the condition that `mDragTrackerHandler == null || !mDragTrackerHandler.draw(canvas)`. The method `drawContent` is not present in the early version, so it is a dependent API change.","The Compatibility Issue arises due to the potential different return values or types. In the early version, the method `nativeRecordButtons` and `drawCoreAndCursorRing` are called directly, and they might modify the state of the WebView. In the late version, the method `drawContent` is called under a certain condition, and it might not have the same effect as the two methods in the early version. Therefore, the WebView might behave differently in the two versions, leading to a Compatibility Issue."
583,<android.app.ActivityThread.PackageInfo: ClassLoader getClassLoader()>,7,8,<android.app.ActivityThread.PackageInfo: ClassLoader getClassLoader()>,<android.app.ActivityThread.PackageInfo: ClassLoader getClassLoader()>,0,"{
    synchronized (this) {
        if (mClassLoader != null) {
            return mClassLoader;
        }
        if (mIncludeCode && !mPackageName.equals(""android"")) {
            String zip = mAppDir;
            /*
                     * The following is a bit of a hack to inject
                     * instrumentation into the system: If the app
                     * being started matches one of the instrumentation names,
                     * then we combine both the ""instrumentation"" and
                     * ""instrumented"" app into the path, along with the
                     * concatenation of both apps' shared library lists.
                     */
            String instrumentationAppDir = mActivityThread.mInstrumentationAppDir;
            String instrumentationAppPackage = mActivityThread.mInstrumentationAppPackage;
            String instrumentedAppDir = mActivityThread.mInstrumentedAppDir;
            String[] instrumentationLibs = null;
            if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
                zip = instrumentationAppDir + "":"" + instrumentedAppDir;
                if (!instrumentedAppDir.equals(instrumentationAppDir)) {
                    instrumentationLibs = getLibrariesFor(instrumentationAppPackage);
                }
            }
            if ((mSharedLibraries != null) || (instrumentationLibs != null)) {
                zip = combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip;
            }
            if (localLOGV)
                Log.v(TAG, ""Class path: "" + zip);
            mClassLoader = ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader);
        } else {
            if (mBaseClassLoader == null) {
                mClassLoader = ClassLoader.getSystemClassLoader();
            } else {
                mClassLoader = mBaseClassLoader;
            }
        }
        return mClassLoader;
    }
}","{
    synchronized (this) {
        if (mClassLoader != null) {
            return mClassLoader;
        }
        if (mIncludeCode && !mPackageName.equals(""android"")) {
            String zip = mAppDir;
            /*
                     * The following is a bit of a hack to inject
                     * instrumentation into the system: If the app
                     * being started matches one of the instrumentation names,
                     * then we combine both the ""instrumentation"" and
                     * ""instrumented"" app into the path, along with the
                     * concatenation of both apps' shared library lists.
                     */
            String instrumentationAppDir = mActivityThread.mInstrumentationAppDir;
            String instrumentationAppPackage = mActivityThread.mInstrumentationAppPackage;
            String instrumentedAppDir = mActivityThread.mInstrumentedAppDir;
            String[] instrumentationLibs = null;
            if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
                zip = instrumentationAppDir + "":"" + instrumentedAppDir;
                if (!instrumentedAppDir.equals(instrumentationAppDir)) {
                    instrumentationLibs = getLibrariesFor(instrumentationAppPackage);
                }
            }
            if ((mSharedLibraries != null) || (instrumentationLibs != null)) {
                zip = combineLibs(mSharedLibraries, instrumentationLibs) + ':' + zip;
            }
            if (localLOGV)
                Slog.v(TAG, ""Class path: "" + zip);
            mClassLoader = ApplicationLoaders.getDefault().getClassLoader(zip, mDataDir, mBaseClassLoader);
            initializeJavaContextClassLoader();
        } else {
            if (mBaseClassLoader == null) {
                mClassLoader = ClassLoader.getSystemClassLoader();
            } else {
                mClassLoader = mBaseClassLoader;
            }
        }
        return mClassLoader;
    }
}",1,,,-1,,,-1,-1,-1,-1,-1,4,1,"4, 5",1,"The code change is in the method body, where a new statement `initializeJavaContextClassLoader();` is added in the late version. This statement is not related to the control dependency, thus the code change type is 4. Additionally, a logging statement has also changed, where `Log.v` is replaced by `Slog.v` in the late version, and this change is not related to the control dependency, return statement, and exception handling, thus the code change type is 5.","The new statement `initializeJavaContextClassLoader();` added in the late version has the potential to cause different behaviors, as it may modify the state of the `ClassLoader` object. Specifically, it may cause the `ClassLoader` to return different classes or resources, leading to a Compatibility Issue of type 1. The change of the logging statement is not likely to cause any Compatibility Issue, as it only affects the way the log is displayed, but not the functionality of the method."
1032,<android.animation.AnimatorSet: void setStartDelay(long)>,25,26,<android.animation.AnimatorSet: void setStartDelay(long)>,<android.animation.AnimatorSet: void setStartDelay(long)>,0,"{
    // Clamp start delay to non-negative range.
    if (startDelay < 0) {
        Log.w(TAG, ""Start delay should always be non-negative"");
        startDelay = 0;
    }
    long delta = startDelay - mStartDelay;
    if (delta == 0) {
        return;
    }
    mStartDelay = startDelay;
    if (mStartDelay > 0) {
        mReversible = false;
    }
    if (!mDependencyDirty) {
        // Dependency graph already constructed, update all the nodes' start/end time
        int size = mNodes.size();
        for (int i = 0; i < size; i++) {
            Node node = mNodes.get(i);
            if (node == mRootNode) {
                node.mEndTime = mStartDelay;
            } else {
                node.mStartTime = node.mStartTime == DURATION_INFINITE ? DURATION_INFINITE : node.mStartTime + delta;
                node.mEndTime = node.mEndTime == DURATION_INFINITE ? DURATION_INFINITE : node.mEndTime + delta;
            }
        }
        // Update total duration, if necessary.
        if (mTotalDuration != DURATION_INFINITE) {
            mTotalDuration += delta;
        }
    }
}","{
    // Clamp start delay to non-negative range.
    if (startDelay < 0) {
        Log.w(TAG, ""Start delay should always be non-negative"");
        startDelay = 0;
    }
    long delta = startDelay - mStartDelay;
    if (delta == 0) {
        return;
    }
    mStartDelay = startDelay;
    if (!mDependencyDirty) {
        // Dependency graph already constructed, update all the nodes' start/end time
        int size = mNodes.size();
        for (int i = 0; i < size; i++) {
            Node node = mNodes.get(i);
            if (node == mRootNode) {
                node.mEndTime = mStartDelay;
            } else {
                node.mStartTime = node.mStartTime == DURATION_INFINITE ? DURATION_INFINITE : node.mStartTime + delta;
                node.mEndTime = node.mEndTime == DURATION_INFINITE ? DURATION_INFINITE : node.mEndTime + delta;
            }
        }
        // Update total duration, if necessary.
        if (mTotalDuration != DURATION_INFINITE) {
            mTotalDuration += delta;
        }
    }
}",1,"/**
 * The amount of time, in milliseconds, to delay starting the animation after
 * {@link #start()} is called. Note that the start delay should always be non-negative. Any
 * negative start delay will be clamped to 0 on N and above.
 *
 * @param startDelay The amount of the delay, in milliseconds
 */
","/**
 * The amount of time, in milliseconds, to delay starting the animation after
 * {@link #start()} is called. Note that the start delay should always be non-negative. Any
 * negative start delay will be clamped to 0 on N and above.
 *
 * @param startDelay The amount of the delay, in milliseconds
 */
",-1,[@Override],[@Override],-1,-1,-1,-1,-1,3,0,0,0,"The two versions of the code are the same, with no changes in the return statement, exception handling statement, control dependency, or other statements.","The two versions of the code are the same, with no changes that could lead to compatibility issues."
193,<android.pim.vcard.VCardComposer.HandlerForOutputStream: boolean onInit(Context)>,8,9,<android.pim.vcard.VCardComposer.HandlerForOutputStream: boolean onInit(Context)>,<android.pim.vcard.VCardComposer.HandlerForOutputStream: boolean onInit(Context)>,0,"{
    try {
        mWriter = new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharsetString));
    } catch (UnsupportedEncodingException e1) {
        Log.e(LOG_TAG, ""Unsupported charset: "" + mCharsetString);
        mErrorReason = ""Encoding is not supported (usually this does not happen!): "" + mCharsetString;
        return false;
    }
    if (mIsDoCoMo) {
        try {
            // Create one empty entry.
            mWriter.write(createOneEntryInternal(""-1"", null));
        } catch (VCardException e) {
            Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage());
            return false;
        } catch (IOException e) {
            Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage());
            mErrorReason = ""IOException occurred: "" + e.getMessage();
            return false;
        }
    }
    return true;
}","{
    try {
        mWriter = new BufferedWriter(new OutputStreamWriter(mOutputStream, mCharset));
    } catch (UnsupportedEncodingException e1) {
        Log.e(LOG_TAG, ""Unsupported charset: "" + mCharset);
        mErrorReason = ""Encoding is not supported (usually this does not happen!): "" + mCharset;
        return false;
    }
    if (mIsDoCoMo) {
        try {
            // Create one empty entry.
            mWriter.write(createOneEntryInternal(""-1"", null));
        } catch (VCardException e) {
            Log.e(LOG_TAG, ""VCardException has been thrown during on Init(): "" + e.getMessage());
            return false;
        } catch (IOException e) {
            Log.e(LOG_TAG, ""IOException occurred during exportOneContactData: "" + e.getMessage());
            mErrorReason = ""IOException occurred: "" + e.getMessage();
            return false;
        }
    }
    return true;
}",1,,,-1,,,-1,-1,-1,-1,-1,4,0,5,1,The 3rd parameter of the constructor `OutputStreamWriter` has changed from `mCharsetString` to `mCharset`. This parameter is about the charset used to encode/decode the data during the input/output process. So the change may cause the API return different values.,"As the change of the charset used in the constructor `OutputStreamWriter` may cause the API return different values, so it is a Compatibility Issue caused by potential different return values or types."
888,"<android.inputmethodservice.InputMethodService: void doStartInput(InputConnection,EditorInfo,boolean)>",29,30,"<android.inputmethodservice.InputMethodService: void doStartInput(InputConnection,EditorInfo,boolean)>","<android.inputmethodservice.InputMethodService: void doStartInput(InputConnection,EditorInfo,boolean)>",0,"{
    if (!restarting) {
        doFinishInput();
    }
    mInputStarted = true;
    mStartedInputConnection = ic;
    mInputEditorInfo = attribute;
    initialize();
    if (DEBUG)
        Log.v(TAG, ""CALL: onStartInput"");
    onStartInput(attribute, restarting);
    if (mDecorViewVisible) {
        if (mShowInputRequested) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartInputView"");
            mInputViewStarted = true;
            onStartInputView(mInputEditorInfo, restarting);
            startExtractingText(true);
        } else if (mCandidatesVisibility == View.VISIBLE) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartCandidatesView"");
            mCandidatesViewStarted = true;
            onStartCandidatesView(mInputEditorInfo, restarting);
        }
    } else if (mCanPreRender && mInputEditorInfo != null && mStartedInputConnection != null) {
        // pre-render IME window and keep it invisible.
        if (DEBUG)
            Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName);
        if (mInShowWindow) {
            Log.w(TAG, ""Re-entrance in to showWindow"");
            return;
        }
        mDecorViewWasVisible = mDecorViewVisible;
        mInShowWindow = true;
        startViews(prepareWindow(true));
        // compute visibility
        mIsPreRendered = true;
        onPreRenderedWindowVisibilityChanged(false);
        // When IME is not pre-rendered, this will actually show the IME.
        if (DEBUG)
            Log.v(TAG, ""showWindow: draw decorView!"");
        mWindow.show();
        maybeNotifyPreRendered();
        mDecorViewWasVisible = true;
        mInShowWindow = false;
    } else {
        mIsPreRendered = false;
    }
}","{
    if (!restarting) {
        doFinishInput();
    }
    mInputStarted = true;
    mStartedInputConnection = ic;
    mInputEditorInfo = attribute;
    initialize();
    mInlineSuggestionSessionController.notifyOnStartInput(attribute == null ? null : attribute.packageName, attribute == null ? null : attribute.autofillId);
    if (DEBUG)
        Log.v(TAG, ""CALL: onStartInput"");
    onStartInput(attribute, restarting);
    if (mDecorViewVisible) {
        if (mShowInputRequested) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartInputView"");
            mInputViewStarted = true;
            mInlineSuggestionSessionController.notifyOnStartInputView();
            onStartInputView(mInputEditorInfo, restarting);
            startExtractingText(true);
        } else if (mCandidatesVisibility == View.VISIBLE) {
            if (DEBUG)
                Log.v(TAG, ""CALL: onStartCandidatesView"");
            mCandidatesViewStarted = true;
            onStartCandidatesView(mInputEditorInfo, restarting);
        }
    } else if (mCanPreRender && mInputEditorInfo != null && mStartedInputConnection != null) {
        // pre-render IME window and keep it invisible.
        if (DEBUG)
            Log.v(TAG, ""Pre-Render IME for "" + mInputEditorInfo.fieldName);
        if (mInShowWindow) {
            Log.w(TAG, ""Re-entrance in to showWindow"");
            return;
        }
        mDecorViewWasVisible = mDecorViewVisible;
        mInShowWindow = true;
        startViews(prepareWindow(true));
        // compute visibility
        mIsPreRendered = true;
        onPreRenderedWindowVisibilityChanged(false);
        // When IME is not pre-rendered, this will actually show the IME.
        if (DEBUG)
            Log.v(TAG, ""showWindow: draw decorView!"");
        mWindow.show();
        maybeNotifyPreRendered();
        mDecorViewWasVisible = true;
        mInShowWindow = false;
    } else {
        mIsPreRendered = false;
    }
}",1,,,-1,,,-1,-1,-1,-1,-1,4,0,"4,5","1,2",The following code snippet has been added in the late version:,```
48,<android.animation.Keyframe.FloatKeyframe: FloatKeyframe clone()>,20,21,<android.animation.Keyframe.FloatKeyframe: FloatKeyframe clone()>,<android.animation.Keyframe.FloatKeyframe: FloatKeyframe clone()>,0,"{
    FloatKeyframe kfClone = mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction());
    kfClone.setInterpolator(getInterpolator());
    return kfClone;
}","{
    FloatKeyframe kfClone = mHasValue ? new FloatKeyframe(getFraction(), mValue) : new FloatKeyframe(getFraction());
    kfClone.setInterpolator(getInterpolator());
    kfClone.mValueWasSetOnStart = mValueWasSetOnStart;
    return kfClone;
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,4,0,4,0,"A new statement `kfClone.mValueWasSetOnStart = mValueWasSetOnStart;` has been added before the return statement. This does not belong to return statement change, exception handling statement change, or control dependency change, so it is classified as other statement change (code change type 4).","The new statement `kfClone.mValueWasSetOnStart = mValueWasSetOnStart;` does not affect the return value of the API, and it does not introduce any new exception or change the existing exception handling. Therefore, there is no compatibility issue (CI type 0)."
212,<android.webkit.WebView: void requestImageRef(Message)>,15,16,<android.webkit.WebView: void requestImageRef(Message)>,<android.webkit.WebView: void requestImageRef(Message)>,0,"{
    checkThread();
    // client isn't initialized
    if (0 == mNativeClass)
        return;
    int contentX = viewToContentX(mLastTouchX + mScrollX);
    int contentY = viewToContentY(mLastTouchY + mScrollY);
    String ref = nativeImageURI(contentX, contentY);
    Bundle data = msg.getData();
    data.putString(""url"", ref);
    msg.setData(data);
    msg.sendToTarget();
}","{
    checkThread();
    mProvider.requestImageRef(msg);
}",1,"/**
 * Request the url of the image last touched by the user. msg will be sent
 * to its target with a String representing the url as its object.
 *
 * @param msg This message will be dispatched with the result of the request
 * as the data member with ""url"" as key. The result can be null.
 */
","/**
 * Requests the URL of the image last touched by the user. msg will be sent
 * to its target with a String representing the URL as its object.
 *
 * @param msg the message to be dispatched with the result of the request
 * as the data member with ""url"" as key. The result can be null.
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,5,1,"In the late version implementation, the method uses a different approach to request the image reference. Instead of directly calling the native `nativeImageURI()` method and constructing the `Message` object, it delegates the task to the `mProvider` object. This change affects the control flow and the way the method interacts with other components.","This change could potentially lead to a compatibility issue because the behavior of the `requestImageRef()` method may be different in the late version. The `mProvider` object may not always provide the same result as the original implementation, especially if the underlying native code or the provider object itself is modified in the future. This can affect the applications that rely on the consistency of the image reference URL."
171,<android.app.ActivityManager: int getLockTaskModeState()>,23,24,<android.app.ActivityManager: int getLockTaskModeState()>,<android.app.ActivityManager: int getLockTaskModeState()>,0,"{
    try {
        return ActivityManagerNative.getDefault().getLockTaskModeState();
    } catch (RemoteException e) {
        return ActivityManager.LOCK_TASK_MODE_NONE;
    }
}","{
    try {
        return ActivityManagerNative.getDefault().getLockTaskModeState();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Return the current state of task locking. The three possible outcomes
 * are {@link #LOCK_TASK_MODE_NONE}, {@link #LOCK_TASK_MODE_LOCKED}
 * and {@link #LOCK_TASK_MODE_PINNED}.
 *
 * @see Activity#startLockTask()
 */
","/**
 * Return the current state of task locking. The three possible outcomes
 * are {@link #LOCK_TASK_MODE_NONE}, {@link #LOCK_TASK_MODE_LOCKED}
 * and {@link #LOCK_TASK_MODE_PINNED}.
 *
 * @see Activity#startLockTask()
 */
",-1,,,-1,-1,-1,-1,-1,"1,2",2,2,2,"The catch block has been modified to rethrow the RemoteException as a runtime exception using the `rethrowFromSystemServer()` method, instead of returning a default value of `ActivityManager.LOCK_TASK_MODE_NONE`.","The modification of the catch block can lead to a compatibility issue as the behavior of the method has been changed when a RemoteException is thrown. In the early version, the method would return a default value of `ActivityManager.LOCK_TASK_MODE_NONE` when a RemoteException is caught, while in the late version, the method would rethrow the exception as a runtime exception, which could propagate up the call stack and potentially crash the application if not handled properly."
785,"<android.app.admin.DevicePolicyManager: void setCameraDisabled(ComponentName,boolean)>",23,24,"<android.app.admin.DevicePolicyManager: void setCameraDisabled(ComponentName,boolean)>","<android.app.admin.DevicePolicyManager: void setCameraDisabled(ComponentName,boolean)>",0,"{
    if (mService != null) {
        try {
            mService.setCameraDisabled(admin, disabled);
        } catch (RemoteException e) {
            Log.w(TAG, ""Failed talking with device policy service"", e);
        }
    }
}","{
    throwIfParentInstance(""setCameraDisabled"");
    if (mService != null) {
        try {
            mService.setCameraDisabled(admin, disabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}",1,"/**
 * Called by an application that is administering the device to disable all cameras
 * on the device, for this user. After setting this, no applications running as this user
 * will be able to access any cameras on the device.
 *
 * <p>The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call
 * this method; if it has not, a security exception will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param disabled Whether or not the camera should be disabled.
 */
","/**
 * Called by an application that is administering the device to disable all cameras on the
 * device, for this user. After setting this, no applications running as this user will be able
 * to access any cameras on the device.
 * <p>
 * If the caller is device owner, then the restriction will be applied to all users.
 * <p>
 * The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call this method; if it has
 * not, a security exception will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param disabled Whether or not the camera should be disabled.
 * @throws SecurityException if {@code admin} is not an active administrator or does not use
 * {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA}.
 */
",-1,,,-1,-1,-1,-1,-1,"2,4",2,"1, 2","1,2","In the late version, a new statement ""throwIfParentInstance(""setCameraDisabled"")"" is added before the if statement. Also, the exception handling statement has been changed, where ""Log.w(TAG, ""Failed talking with device policy service"", e)"" is replaced with ""throw e.rethrowFromSystemServer()"".",The new statement "throwIfParentInstance("setCameraDisabled")" added in the late version may potentially throw a SecurityException if the calling context is not a system server. This is a compatibility issue as it may cause the API to behave differently in certain scenarios.
202,"<android.content.ContentResolver: void requestSync(Account,String,Bundle)>",18,19,"<android.content.ContentResolver: void requestSync(Account,String,Bundle)>","<android.content.ContentResolver: void requestSync(Account,String,Bundle)>",0,"{
    validateSyncExtrasBundle(extras);
    try {
        getContentService().requestSync(account, authority, extras);
    } catch (RemoteException e) {
    }
}","{
    if (extras == null) {
        throw new IllegalArgumentException(""Must specify extras."");
    }
    SyncRequest request = new SyncRequest.Builder().setSyncAdapter(account, authority).setExtras(extras).syncOnce().build();
    requestSync(request);
}",1,"/**
 * Start an asynchronous sync operation. If you want to monitor the progress
 * of the sync you may register a SyncObserver. Only values of the following
 * types may be used in the extras bundle:
 * <ul>
 * <li>Integer</li>
 * <li>Long</li>
 * <li>Boolean</li>
 * <li>Float</li>
 * <li>Double</li>
 * <li>String</li>
 * </ul>
 *
 * @param account which account should be synced
 * @param authority which authority should be synced
 * @param extras any extras to pass to the SyncAdapter.
 */
","/**
 * Start an asynchronous sync operation. If you want to monitor the progress
 * of the sync you may register a SyncObserver. Only values of the following
 * types may be used in the extras bundle:
 * <ul>
 * <li>Integer</li>
 * <li>Long</li>
 * <li>Boolean</li>
 * <li>Float</li>
 * <li>Double</li>
 * <li>String</li>
 * <li>Account</li>
 * <li>null</li>
 * </ul>
 *
 * @param account which account should be synced
 * @param authority which authority should be synced
 * @param extras any extras to pass to the SyncAdapter.
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,"1, 5","1,2","The early version directly calls `getContentService().requestSync(account, authority, extras)` to request a sync operation. The late version, however, first checks if `extras` is null, and throws an `IllegalArgumentException` if it is. Then, it constructs a `SyncRequest` object using the `SyncRequest.Builder` and calls `requestSync(request)` to request the sync operation. The method `requestSync(request)` is a new dependent API in the late version.","The early version of the API does not check for null `extras`, and passes them directly to the `getContentService().requestSync()` method. This could potentially lead to a `NullPointerException` or other unexpected behavior in the sync adapter. In contrast, the late version of the API throws an `IllegalArgumentException` if `extras` is null, which is a more explicit and user-friendly way to indicate the error."
498,"<android.view.Choreographer.FrameDisplayEventReceiver: void onVsync(long,int,int)>",20,21,"<android.view.Choreographer.FrameDisplayEventReceiver: void onVsync(long,int,int)>","<android.view.Choreographer.FrameDisplayEventReceiver: void onVsync(long,int,int)>",0,"{
    // that we need to fix this.
    if (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {
        Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."");
        scheduleVsync();
        return;
    }
    // Post the vsync event to the Handler.
    // The idea is to prevent incoming vsync events from completely starving
    // the message queue.  If there are no messages in the queue with timestamps
    // earlier than the frame time, then the vsync event will be processed immediately.
    // Otherwise, messages that predate the vsync event will be handled first.
    long now = System.nanoTime();
    if (timestampNanos > now) {
        Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."");
        timestampNanos = now;
    }
    if (mHavePendingVsync) {
        Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time."");
    } else {
        mHavePendingVsync = true;
    }
    mTimestampNanos = timestampNanos;
    mFrame = frame;
    Message msg = Message.obtain(mHandler, this);
    msg.setAsynchronous(true);
    mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS);
}","{
    // that we need to fix this.
    if (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {
        Log.d(TAG, ""Received vsync from secondary display, but we don't support "" + ""this case yet.  Choreographer needs a way to explicitly request "" + ""vsync for a specific display to ensure it doesn't lose track "" + ""of its scheduled vsync."");
        scheduleVsync();
        return;
    }
    // Post the vsync event to the Handler.
    // The idea is to prevent incoming vsync events from completely starving
    // the message queue.  If there are no messages in the queue with timestamps
    // earlier than the frame time, then the vsync event will be processed immediately.
    // Otherwise, messages that predate the vsync event will be handled first.
    long now = System.nanoTime();
    if (timestampNanos > now) {
        Log.w(TAG, ""Frame time is "" + ((timestampNanos - now) * 0.000001f) + "" ms in the future!  Check that graphics HAL is generating vsync "" + ""timestamps using the correct timebase."");
        timestampNanos = now;
    }
    if (mHavePendingVsync) {
        Log.w(TAG, ""Already have a pending vsync event.  There should only be "" + ""one at a time."");
    } else {
        mHavePendingVsync = true;
    }
    mTimestampNanos = timestampNanos;
    mFrame = frame;
    Message msg = Message.obtain(mHandler, this);
    msg.setAsynchronous(true);
    mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,5,0,4,0,"The change between the two versions is a modification in the argument of the sendMessageAtTime() method. In the early version, the argument is timestampNanos / NANOS\_PER\_MS, while in the late version, the argument is timestampNanos / TimeUtils.NANOS\_PER\_MS. This change only affects the internal processing of the method and does not cause the method to return different values or throw different exceptions.","Since the change in the argument of the sendMessageAtTime() method does not cause the method to return different values or throw different exceptions, there is no compatibility issue (CI) in this case."
530,<android.view.View: AccessibilityNodeInfo createAccessibilityNodeInfo()>,17,18,<android.view.View: AccessibilityNodeInfo createAccessibilityNodeInfo()>,<android.view.View: AccessibilityNodeInfo createAccessibilityNodeInfo()>,0,"{
    AccessibilityNodeProvider provider = getAccessibilityNodeProvider();
    if (provider != null) {
        return provider.createAccessibilityNodeInfo(View.NO_ID);
    } else {
        AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain(this);
        onInitializeAccessibilityNodeInfo(info);
        return info;
    }
}","{
    if (mAccessibilityDelegate != null) {
        return mAccessibilityDelegate.createAccessibilityNodeInfo(this);
    } else {
        return createAccessibilityNodeInfoInternal();
    }
}",1,"/**
 * Returns an {@link AccessibilityNodeInfo} representing this view from the
 * point of view of an {@link android.accessibilityservice.AccessibilityService}.
 * This method is responsible for obtaining an accessibility node info from a
 * pool of reusable instances and calling
 * {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on this view to
 * initialize the former.
 * <p>
 * Note: The client is responsible for recycling the obtained instance by calling
 * {@link AccessibilityNodeInfo#recycle()} to minimize object creation.
 * </p>
 *
 * @return A populated {@link AccessibilityNodeInfo}.
 *
 * @see AccessibilityNodeInfo
 */
","/**
 * Returns an {@link AccessibilityNodeInfo} representing this view from the
 * point of view of an {@link android.accessibilityservice.AccessibilityService}.
 * This method is responsible for obtaining an accessibility node info from a
 * pool of reusable instances and calling
 * {@link #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)} on this view to
 * initialize the former.
 * <p>
 * Note: The client is responsible for recycling the obtained instance by calling
 * {@link AccessibilityNodeInfo#recycle()} to minimize object creation.
 * </p>
 *
 * @return A populated {@link AccessibilityNodeInfo}.
 *
 * @see AccessibilityNodeInfo
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4,5",1,"1, 5",1,"The implementation of the method has been completely changed, which includes the change of return statement and the introduction of a new method call (mAccessibilityDelegate.createAccessibilityNodeInfo(this) and createAccessibilityNodeInfoInternal()). Therefore, the code change type is 1, 5.","The implementation of the method has been completely changed, which means the behavior of the method could be different between the two versions. The new method call (mAccessibilityDelegate.createAccessibilityNodeInfo(this) and createAccessibilityNodeInfoInternal()) may produce different results or exceptions, leading to a compatibility issue. Therefore, the CI type is 1."
1403,<android.app.WallpaperManager: Drawable peekDrawable()>,23,24,<android.app.WallpaperManager: Drawable peekDrawable()>,<android.app.WallpaperManager: Drawable peekDrawable()>,0,"{
    Bitmap bm = sGlobals.peekWallpaperBitmap(mContext, false);
    if (bm != null) {
        Drawable dr = new BitmapDrawable(mContext.getResources(), bm);
        dr.setDither(false);
        return dr;
    }
    return null;
}","{
    Bitmap bm = sGlobals.peekWallpaperBitmap(mContext, false, FLAG_SYSTEM);
    if (bm != null) {
        Drawable dr = new BitmapDrawable(mContext.getResources(), bm);
        dr.setDither(false);
        return dr;
    }
    return null;
}",1,"/**
 * Retrieve the current system wallpaper; if there is no wallpaper set,
 * a null pointer is returned. This is returned as an
 * abstract Drawable that you can install in a View to display whatever
 * wallpaper the user has currently set.
 *
 * @return Returns a Drawable object that will draw the wallpaper or a
 * null pointer if these is none.
 */
","/**
 * Retrieve the current system wallpaper; if there is no wallpaper set,
 * a null pointer is returned. This is returned as an
 * abstract Drawable that you can install in a View to display whatever
 * wallpaper the user has currently set.
 *
 * @return Returns a Drawable object that will draw the wallpaper or a
 * null pointer if these is none.
 */
",-1,,,-1,-1,-1,-1,-1,5,0,5,1,A new parameter is added to the dependent API call `sGlobals.peekWallpaperBitmap()`. This is considered a change type 5: Dependent API changed.,"The addition of a new parameter to the `sGlobals.peekWallpaperBitmap()` call may result in a different bitmap being returned, which in turn would lead to the `peekDrawable()` method returning a different Drawable object. This is a compatibility issue of type 1: Compatibility Issue caused by potential different return values or types."
65,<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>,29,30,<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>,<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>,0,"{
    Preconditions.checkNotNull(callback);
    if (isDestroyed()) {
        Log.w(TAG, ""Cannot interact with a destroyed voice interactor"");
        return false;
    }
    return mOnDestroyCallbacks.remove(callback) != null;
}","{
    Objects.requireNonNull(callback);
    if (isDestroyed()) {
        Log.w(TAG, ""Cannot interact with a destroyed voice interactor"");
        return false;
    }
    return mOnDestroyCallbacks.remove(callback) != null;
}",1,"/**
 * Unregisters a previously registered onDestroy callback
 *
 * @param callback The callback to remove.
 * @return whether the callback was unregistered.
 */
","/**
 * Unregisters a previously registered onDestroy callback
 *
 * @param callback The callback to remove.
 * @return whether the callback was unregistered.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,0,"In the late version, the method `Preconditions.checkNotNull(callback)` is replaced with `Objects.requireNonNull(callback)`. This is an example of ""Other statement changed"" as per the given terminology.","The change in the implementation does not affect the behavior of the API. Both `Preconditions.checkNotNull(callback)` and `Objects.requireNonNull(callback)` will throw a NullPointerException if the callback is null. Therefore, there is no Compatibility Issue (CI) in this case."
736,"<android.hardware.display.DisplayManager: VirtualDisplay createVirtualDisplay(String,int,int,int,Surface,int)>",20,21,"<android.hardware.display.DisplayManager: VirtualDisplay createVirtualDisplay(String,int,int,int,Surface,int)>","<android.hardware.display.DisplayManager: VirtualDisplay createVirtualDisplay(String,int,int,int,Surface,int)>",0,"{
    return mGlobal.createVirtualDisplay(mContext, name, width, height, densityDpi, surface, flags);
}","{
    return createVirtualDisplay(name, width, height, densityDpi, surface, flags, null, null);
}",1,"/**
 * Creates a virtual display.
 * <p>
 * The content of a virtual display is rendered to a {@link Surface} provided
 * by the application.
 * </p><p>
 * The virtual display should be {@link VirtualDisplay#release released}
 * when no longer needed.  Because a virtual display renders to a surface
 * provided by the application, it will be released automatically when the
 * process terminates and all remaining windows on it will be forcibly removed.
 * </p><p>
 * The behavior of the virtual display depends on the flags that are provided
 * to this method.  By default, virtual displays are created to be private,
 * non-presentation and unsecure.  Permissions may be required to use certain flags.
 * </p>
 *
 * @param name The name of the virtual display, must be non-empty.
 * @param width The width of the virtual display in pixels, must be greater than 0.
 * @param height The height of the virtual display in pixels, must be greater than 0.
 * @param densityDpi The density of the virtual display in dpi, must be greater than 0.
 * @param surface The surface to which the content of the virtual display should
 * be rendered, must be non-null.
 * @param flags A combination of virtual display flags:
 * {@link #VIRTUAL_DISPLAY_FLAG_PUBLIC}, {@link #VIRTUAL_DISPLAY_FLAG_PRESENTATION}
 * or {@link #VIRTUAL_DISPLAY_FLAG_SECURE}.
 * @return The newly created virtual display, or null if the application could
 * not create the virtual display.
 *
 * @throws SecurityException if the caller does not have permission to create
 * a virtual display with the specified flags.
 */
","/**
 * Creates a virtual display.
 *
 * @see #createVirtualDisplay(String, int, int, int, Surface, int, VirtualDisplay.Callback)
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,5,1,"The implementation of the method has been changed from using a global variable `mGlobal` to directly calling the method `createVirtualDisplay` with additional null parameters. This is considered as a dependent API change, as the method being called has changed.","The change in the method implementation could potentially lead to different return values or types, as the method being called has changed. This is considered as a Compatibility Issue caused by potential different return values or types."
138,<android.view.View: boolean hasFocusable()>,20,21,<android.view.View: boolean hasFocusable()>,<android.view.View: boolean hasFocusable()>,0,"{
    return (mViewFlags & VISIBILITY_MASK) == VISIBLE && isFocusable();
}","{
    if (!isFocusableInTouchMode()) {
        for (ViewParent p = mParent; p instanceof ViewGroup; p = p.getParent()) {
            final ViewGroup g = (ViewGroup) p;
            if (g.shouldBlockFocusForTouchscreen()) {
                return false;
            }
        }
    }
    return (mViewFlags & VISIBILITY_MASK) == VISIBLE && isFocusable();
}",1,"/**
 * Returns true if this view is focusable or if it contains a reachable View
 * for which {@link #hasFocusable()} returns true. A ""reachable hasFocusable()""
 * is a View whose parents do not block descendants focus.
 *
 * Only {@link #VISIBLE} views are considered focusable.
 *
 * @return True if the view is focusable or if the view contains a focusable
 * View, false otherwise.
 *
 * @see ViewGroup#FOCUS_BLOCK_DESCENDANTS
 */
","/**
 * Returns true if this view is focusable or if it contains a reachable View
 * for which {@link #hasFocusable()} returns true. A ""reachable hasFocusable()""
 * is a View whose parents do not block descendants focus.
 *
 * Only {@link #VISIBLE} views are considered focusable.
 *
 * @return True if the view is focusable or if the view contains a focusable
 * View, false otherwise.
 *
 * @see ViewGroup#FOCUS_BLOCK_DESCENDANTS
 * @see ViewGroup#getTouchscreenBlocksFocus()
 */
",-1,,,-1,-1,-1,-1,-1,"1,3",1,3,1,"The code in the late version has an additional if statement and a for loop, which checks whether the view is focusable in touch mode and whether its parents block descendants focus for touchscreen.","The additional if statement and for loop in the late version may cause the method to return a different value compared to the early version, as it checks for additional conditions before returning the result. This can potentially lead to compatibility issues if the app relies on the behavior of the method in the early version."
352,<android.preference.PreferenceActivity: void switchToHeader(Header)>,20,21,<android.preference.PreferenceActivity: void switchToHeader(Header)>,<android.preference.PreferenceActivity: void switchToHeader(Header)>,0,"{
    if (mCurHeader == header) {
        // This is the header we are currently displaying.  Just make sure
        // to pop the stack up to its root state.
        getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE);
    } else {
        if (header.fragment == null) {
            throw new IllegalStateException(""can't switch to header that has no fragment"");
        }
        int direction = mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader);
        switchToHeaderInner(header.fragment, header.fragmentArguments, direction);
        setSelectedHeader(header);
    }
}","{
    if (mCurHeader == header) {
        // This is the header we are currently displaying.  Just make sure
        // to pop the stack up to its root state.
        getFragmentManager().popBackStack(BACK_STACK_PREFS, FragmentManager.POP_BACK_STACK_INCLUSIVE);
    } else {
        if (header.fragment == null) {
            throw new IllegalStateException(""can't switch to header that has no fragment"");
        }
        switchToHeaderInner(header.fragment, header.fragmentArguments);
        setSelectedHeader(header);
    }
}",1,"/**
 * When in two-pane mode, switch to the fragment pane to show the given
 * preference fragment.
 *
 * @param header The new header to display.
 */
","/**
 * When in two-pane mode, switch to the fragment pane to show the given
 * preference fragment.
 *
 * @param header The new header to display.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,3,1,"The method switchToHeaderInner(fragment, fragmentArguments, direction) in the early version is modified to switchToHeaderInner(fragment, fragmentArguments) in the late version. The parameter 'direction' is deleted, which may cause the method to have different behavior.","The deletion of the 'direction' parameter may cause the method switchToHeaderInner to have different behavior, which may lead to the preference fragment being displayed incorrectly. Therefore, it is a compatibility issue caused by potential different return values or types."
551,<android.view.View: void setAutofillId(AutofillId)>,28,29,<android.view.View: void setAutofillId(AutofillId)>,<android.view.View: void setAutofillId(AutofillId)>,0,"{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (android.view.autofill.Helper.sVerbose) {
        Log.v(VIEW_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && id.isVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}","{
    // TODO(b/37566627): add unit / CTS test for all possible combinations below
    if (Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)) {
        Log.v(AUTOFILL_LOG_TAG, ""setAutofill(): from "" + mAutofillId + "" to "" + id);
    }
    if (isAttachedToWindow()) {
        throw new IllegalStateException(""Cannot set autofill id when view is attached"");
    }
    if (id != null && !id.isNonVirtual()) {
        throw new IllegalStateException(""Cannot set autofill id assigned to virtual views"");
    }
    if (id == null && (mPrivateFlags3 & PFLAG3_AUTOFILLID_EXPLICITLY_SET) == 0) {
        // Ignore reset because it was never explicitly set before.
        return;
    }
    mAutofillId = id;
    if (id != null) {
        mAutofillViewId = id.getViewId();
        mPrivateFlags3 |= PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    } else {
        mAutofillViewId = NO_ID;
        mPrivateFlags3 &= ~PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    }
}",1,"/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */
","/**
 * Sets the unique, logical identifier of this view in the activity, for autofill purposes.
 *
 * <p>The autofill id is created on demand, and this method should only be called when a view is
 * reused after {@link #dispatchProvideAutofillStructure(ViewStructure, int)} is called, as
 * that method creates a snapshot of the view that is passed along to the autofill service.
 *
 * <p>This method is typically used when view subtrees are recycled to represent different
 * content* &mdash;in this case, the autofill id can be saved before the view content is swapped
 * out, and restored later when it's swapped back in. For example:
 *
 * <pre>
 * EditText reusableView = ...;
 * ViewGroup parentView = ...;
 * AutofillManager afm = ...;
 *
 * // Swap out the view and change its contents
 * AutofillId oldId = reusableView.getAutofillId();
 * CharSequence oldText = reusableView.getText();
 * parentView.removeView(reusableView);
 * AutofillId newId = afm.getNextAutofillId();
 * reusableView.setText(""New I am"");
 * reusableView.setAutofillId(newId);
 * parentView.addView(reusableView);
 *
 * // Later, swap the old content back in
 * parentView.removeView(reusableView);
 * reusableView.setAutofillId(oldId);
 * reusableView.setText(oldText);
 * parentView.addView(reusableView);
 * </pre>
 *
 * @param id an autofill ID that is unique in the {@link android.app.Activity} hosting the view,
 * or {@code null} to reset it. Usually it's an id previously allocated to another view (and
 * obtained through {@link #getAutofillId()}), or a new value obtained through
 * {@link AutofillManager#getNextAutofillId()}.
 *
 * @throws IllegalStateException if the view is already {@link #isAttachedToWindow() attached to
 * a window}.
 *
 * @throws IllegalArgumentException if the id is an autofill id associated with a virtual view.
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,4,0,"The code change between the two versions is the use of a different logging mechanism and the negation of a boolean condition in an if-statement. The logging mechanism change (from `android.view.autofill.Helper.sVerbose` to `Log.isLoggable(AUTOFILL_LOG_TAG, Log.VERBOSE)`) does not affect the functionality of the method. The negation of the boolean condition in the if-statement (from `id != null && id.isVirtual()` to `id != null && !id.isNonVirtual()`) does not introduce a compatibility issue because the two conditions are logically equivalent.",No compatibility issue exists for this API. The code changes between the two versions do not affect the method's functionality or introduce any potential for different return values or exception handling.
363,"<android.app.ContextImpl: void sendOrderedBroadcast(Intent,String)>",16,17,"<android.app.ContextImpl: void sendOrderedBroadcast(Intent,String)>","<android.app.ContextImpl: void sendOrderedBroadcast(Intent,String)>",0,"{
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.setAllowFds(false);
        ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, Binder.getOrigCallingUser());
    } catch (RemoteException e) {
    }
}","{
    warnIfCallingFromSystemProcess();
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.setAllowFds(false);
        ActivityManagerNative.getDefault().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, receiverPermission, true, false, getUserId());
    } catch (RemoteException e) {
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"4,5",1,5,1,"A new method call `warnIfCallingFromSystemProcess()` has been added in the late version implementation, and the parameter `Binder.getOrigCallingUser()` in the method call `ActivityManagerNative.getDefault().broadcastIntent(...)` has been changed to `getUserId()`. The addition of a new method call is classified as ""Other statement changed"" (change type 4), but since it does not affect the return value or exception handling, it does not introduce a compatibility issue. However, the change in the parameter of the `broadcastIntent` method call may potentially cause the method to behave differently, which in turn may cause the `sendOrderedBroadcast` method to return a different value (e.g., if the broadcast intent is not successfully delivered). Therefore, this change is classified as ""Dependent API changed"" (change type 5) and may introduce a compatibility issue of type 1.","The change in the parameter of the `broadcastIntent` method call may potentially cause the method to behave differently, which in turn may cause the `sendOrderedBroadcast` method to return a different value (e.g., if the broadcast intent is not successfully delivered). Therefore, this change may introduce a compatibility issue of type 1."
729,<android.widget.AdapterView: int getPositionForView(View)>,22,23,<android.widget.AdapterView: int getPositionForView(View)>,<android.widget.AdapterView: int getPositionForView(View)>,0,"{
    View listItem = view;
    try {
        View v;
        while (!(v = (View) listItem.getParent()).equals(this)) {
            listItem = v;
        }
    } catch (ClassCastException e) {
        // We made it up to the window without find this list view
        return INVALID_POSITION;
    }
    // Search the children for the list item
    final int childCount = getChildCount();
    for (int i = 0; i < childCount; i++) {
        if (getChildAt(i).equals(listItem)) {
            return mFirstPosition + i;
        }
    }
    // Child not found!
    return INVALID_POSITION;
}","{
    View listItem = view;
    try {
        View v;
        while ((v = (View) listItem.getParent()) != null && !v.equals(this)) {
            listItem = v;
        }
    } catch (ClassCastException e) {
        // We made it up to the window without find this list view
        return INVALID_POSITION;
    }
    if (listItem != null) {
        // Search the children for the list item
        final int childCount = getChildCount();
        for (int i = 0; i < childCount; i++) {
            if (getChildAt(i).equals(listItem)) {
                return mFirstPosition + i;
            }
        }
    }
    // Child not found!
    return INVALID_POSITION;
}",1,"/**
 * Get the position within the adapter's data set for the view, where view is a an adapter item
 * or a descendant of an adapter item.
 *
 * @param view an adapter item, or a descendant of an adapter item. This must be visible in this
 * AdapterView at the time of the call.
 * @return the position within the adapter's data set of the view, or {@link #INVALID_POSITION}
 * if the view does not correspond to a list item (or it is not currently visible).
 */
","/**
 * Get the position within the adapter's data set for the view, where view is a an adapter item
 * or a descendant of an adapter item.
 *
 * @param view an adapter item, or a descendant of an adapter item. This must be visible in this
 * AdapterView at the time of the call.
 * @return the position within the adapter's data set of the view, or {@link #INVALID_POSITION}
 * if the view does not correspond to a list item (or it is not currently visible).
 */
",-1,,,-1,-1,-1,-1,-1,3,1,3,1,"The implementation of the method 'getPositionForView(View)' has been changed from version 22 to 23. In the early version, the while loop condition is '!(v = (View) listItem.getParent()).equals(this))', and in the late version, the while loop condition is '(v = (View) listItem.getParent()) != null && !v.equals(this)'. Additionally, an if statement 'if (listItem != null)' has been added before the for loop in the late version.","The change in the while loop condition and the addition of the if statement can lead to different behaviors in the two versions. In the early version, if the 'listItem.getParent()' returns null, a ClassCastException will be thrown, and the method will return INVALID_POSITION. However, in the late version, the while loop will be terminated when 'listItem.getParent()' returns null, and the method will only return INVALID_POSITION if 'listItem' is null. Therefore, the Compatibility Issue is caused by potential different return values."
800,<android.app.DialogFragment: void onActivityCreated(Bundle)>,23,24,<android.app.DialogFragment: void onActivityCreated(Bundle)>,<android.app.DialogFragment: void onActivityCreated(Bundle)>,0,"{
    super.onActivityCreated(savedInstanceState);
    if (!mShowsDialog) {
        return;
    }
    View view = getView();
    if (view != null) {
        if (view.getParent() != null) {
            throw new IllegalStateException(""DialogFragment can not be attached to a container view"");
        }
        mDialog.setContentView(view);
    }
    mDialog.setOwnerActivity(getActivity());
    mDialog.setCancelable(mCancelable);
    if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)) {
        throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener"");
    }
    if (savedInstanceState != null) {
        Bundle dialogState = savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG);
        if (dialogState != null) {
            mDialog.onRestoreInstanceState(dialogState);
        }
    }
}","{
    super.onActivityCreated(savedInstanceState);
    if (!mShowsDialog) {
        return;
    }
    View view = getView();
    if (view != null) {
        if (view.getParent() != null) {
            throw new IllegalStateException(""DialogFragment can not be attached to a container view"");
        }
        mDialog.setContentView(view);
    }
    final Activity activity = getActivity();
    if (activity != null) {
        mDialog.setOwnerActivity(activity);
    }
    mDialog.setCancelable(mCancelable);
    if (!mDialog.takeCancelAndDismissListeners(""DialogFragment"", this, this)) {
        throw new IllegalStateException(""You can not set Dialog's OnCancelListener or OnDismissListener"");
    }
    if (savedInstanceState != null) {
        Bundle dialogState = savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG);
        if (dialogState != null) {
            mDialog.onRestoreInstanceState(dialogState);
        }
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,3,1,"The code change is in the control dependency. In the early version, mDialog.setOwnerActivity(getActivity()) is called unconditionally. In the late version, it is only called if getActivity() is not null.","The code change can lead to compatibility issues. In the early version, if getActivity() returns null, a NullPointerException will be thrown. In the late version, mDialog.setOwnerActivity(activity) will not be called, and mDialog will not have an owner activity. This can cause unexpected behavior in the application."
768,<android.hardware.radio.RadioManager.ProgramInfo: boolean equals(Object)>,27,28,<android.hardware.radio.RadioManager.ProgramInfo: boolean equals(Object)>,<android.hardware.radio.RadioManager.ProgramInfo: boolean equals(Object)>,0,"{
    if (this == obj)
        return true;
    if (!(obj instanceof ProgramInfo))
        return false;
    ProgramInfo other = (ProgramInfo) obj;
    if (!mSelector.equals(other.getSelector()))
        return false;
    if (mTuned != other.isTuned())
        return false;
    if (mStereo != other.isStereo())
        return false;
    if (mDigital != other.isDigital())
        return false;
    if (mFlags != other.mFlags)
        return false;
    if (mSignalStrength != other.getSignalStrength())
        return false;
    if (mMetadata == null) {
        if (other.getMetadata() != null)
            return false;
    } else if (!mMetadata.equals(other.getMetadata()))
        return false;
    if (!mVendorInfo.equals(other.mVendorInfo))
        return false;
    return true;
}","{
    if (this == obj)
        return true;
    if (!(obj instanceof ProgramInfo))
        return false;
    ProgramInfo other = (ProgramInfo) obj;
    if (!Objects.equals(mSelector, other.mSelector))
        return false;
    if (!Objects.equals(mLogicallyTunedTo, other.mLogicallyTunedTo))
        return false;
    if (!Objects.equals(mPhysicallyTunedTo, other.mPhysicallyTunedTo))
        return false;
    if (!Objects.equals(mRelatedContent, other.mRelatedContent))
        return false;
    if (mInfoFlags != other.mInfoFlags)
        return false;
    if (mSignalQuality != other.mSignalQuality)
        return false;
    if (!Objects.equals(mMetadata, other.mMetadata))
        return false;
    if (!Objects.equals(mVendorInfo, other.mVendorInfo))
        return false;
    return true;
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3,4",1,"1, 4, 5",1,The following changes have been made between the two versions:,"3. The fields `mTuned`, `mStereo`, `mDigital`, `mFlags`, and `mSignalStrength` have been removed."
264,<android.app.ContextImpl: int checkSelfPermission(String)>,30,31,<android.app.ContextImpl: int checkSelfPermission(String)>,<android.app.ContextImpl: int checkSelfPermission(String)>,0,"{
    if (permission == null) {
        throw new IllegalArgumentException(""permission is null"");
    }
    return checkPermission(permission, Process.myPid(), Process.myUid());
}","{
    if (permission == null) {
        throw new IllegalArgumentException(""permission is null"");
    }
    if (mParams.isRenouncedPermission(permission)) {
        Log.v(TAG, ""Treating renounced permission "" + permission + "" as denied"");
        return PERMISSION_DENIED;
    }
    return checkPermission(permission, Process.myPid(), Process.myUid());
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3,4",1,3,1,"The implementation in the late version has an additional conditional statement that checks if the given permission is a renounced permission. If it is, the method returns PERMISSION\_DENIED.","The additional conditional statement in the late version can potentially cause the method to return a different value (PERMISSION\_DENIED) compared to the early version, if the given permission is a renounced permission. This can lead to compatibility issues if the app's logic depends on the specific value returned by this method."
1068,"<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>",25,26,"<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>","<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>",0,"{
    vibrate(Process.myUid(), mPackageName, pattern, repeat, attributes);
}","{
    // exceptions for compatibility purposes
    if (repeat < -1 || repeat >= pattern.length) {
        Log.e(TAG, ""vibrate called with repeat index out of bounds"" + "" (pattern.length="" + pattern.length + "", index="" + repeat + "")"");
        throw new ArrayIndexOutOfBoundsException();
    }
    try {
        vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes);
    } catch (IllegalArgumentException iae) {
        Log.e(TAG, ""Failed to create VibrationEffect"", iae);
    }
}",1,"/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#VIBRATE}.
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 */
","/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
",-1,,"[@Deprecated, @RequiresPermission(android.Manifest.permission.VIBRATE)]",-1,-1,-1,-1,-1,"2,3,4,5",2,"1,2","1,2","The implementation of the API has been changed completely in the late version, which includes the addition of an exception handling statement (throw new ArrayIndexOutOfBoundsException()) and the replacement of the method call (vibrate(Process.myUid(), mPackageName, pattern, repeat, attributes)) with a new method call (vibrate(VibrationEffect.createWaveform(pattern, repeat), attributes)).","The addition of the exception handling statement in the late version leads to a potential different exception being thrown, and the replacement of the method call with a new method call leads to a potential different return value or type, which could cause compatibility issues for the apps using this API. Additionally, the late version has been deprecated, which implies that the behavior of this API may change in the future, and the apps using this API should migrate to the recommended alternative API to avoid compatibility issues."
216,<android.app.UiAutomation: void setRunAsMonkey(boolean)>,30,31,<android.app.UiAutomation: void setRunAsMonkey(boolean)>,<android.app.UiAutomation: void setRunAsMonkey(boolean)>,0,"{
    synchronized (mLock) {
        throwIfNotConnectedLocked();
    }
    try {
        ActivityManager.getService().setUserIsMonkey(enable);
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error while setting run as monkey!"", re);
    }
}","{
    try {
        ActivityManager.getService().setUserIsMonkey(enable);
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error while setting run as monkey!"", re);
    }
}",1,"/**
 * Sets whether this UiAutomation to run in a ""monkey"" mode. Applications can query whether
 * they are executed in a ""monkey"" mode, i.e. run by a test framework, and avoid doing
 * potentially undesirable actions such as calling 911 or posting on public forums etc.
 *
 * @param enable whether to run in a ""monkey"" mode or not. Default is not.
 * @see ActivityManager#isUserAMonkey()
 */
","/**
 * Sets whether this UiAutomation to run in a ""monkey"" mode. Applications can query whether
 * they are executed in a ""monkey"" mode, i.e. run by a test framework, and avoid doing
 * potentially undesirable actions such as calling 911 or posting on public forums etc.
 *
 * @param enable whether to run in a ""monkey"" mode or not. Default is not.
 * @see ActivityManager#isUserAMonkey()
 */
",-1,,,-1,-1,-1,-1,-1,4,0,"2,4",2,"The implementation of the method 'setRunAsMonkey' has changed in two ways. Firstly, the synchronization block that calls the method 'throwIfNotConnectedLocked' has been removed, which affects the control flow of the method. Secondly, the logging statement that logs the message ""Error while setting run as monkey!"" has been changed to include the exception object 're' in the log message.","The removal of the synchronization block that calls the method 'throwIfNotConnectedLocked' may cause compatibility issues if the method 'setRunAsMonkey' is called in a scenario where the connection is not established. In the early version, the method would throw an exception in such a scenario, whereas in the late version, the method may not behave as expected. Therefore, this change can be classified as a compatibility issue caused by potential different exception handlings."
776,<android.os.PowerManager: boolean isPowerSaveMode()>,29,30,<android.os.PowerManager: boolean isPowerSaveMode()>,<android.os.PowerManager: boolean isPowerSaveMode()>,0,"{
    try {
        return mService.isPowerSaveMode();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return mPowerSaveModeCache.query(null);
}",1,"/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
","/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
",-1,,,-1,-1,-1,-1,-1,"1,2,4","1,2",1,1,"The implementation of the method `isPowerSaveMode()` has been changed from the early version to the late version. In the early version, the method calls `mService.isPowerSaveMode()` and returns its result. In the late version, the method calls `mPowerSaveModeCache.query(null)` and returns its result. This is a return statement change, as the method now potentially returns a different value.","The Compatibility Issue (CI) in this case is that the method `isPowerSaveMode()` may now return a different value than it did in the early version. This can potentially cause issues in any code that relies on the result of this method, such as code that reduces functionality in power save mode. As the method now potentially returns a different value, it should be regarded as a CI."
961,<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>,15,16,<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>,<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>,0,"{
    mUseWebViewBackgroundForOverscroll = view;
}","{
    throw new MustOverrideException();
}",1,"/**
 * Set whether the WebView uses its background for over scroll background.
 * If true, it will use the WebView's background. If false, it will use an
 * internal pattern. Default is true.
 * @deprecated This method is now obsolete.
 */
","/**
 * Sets whether the WebView uses its background for over scroll background.
 * If true, it will use the WebView's background. If false, it will use an
 * internal pattern. Default is true.
 *
 * @deprecated This method is now obsolete.
 */
",-1,[@Deprecated],[@Deprecated],-1,-1,-1,-1,-1,2,2,1,1,"In the early version, the implementation of the API sets the value of mUseWebViewBackgroundForOverscroll to the input parameter view. In the late version, the implementation of the API throws a new exception MustOverrideException. This change means that the behavior of the API has been modified significantly, and it will not function in the same way as it did in the early version.","The Compatibility Issue arises because the code change between the two versions could lead to different behaviors. In the early version, the API sets the value of mUseWebViewBackgroundForOverscroll, which could affect the appearance of the WebView. In the late version, the API throws an exception, which could cause the application to crash or malfunction. Therefore, this change is classified as a Compatibility Issue caused by potential different return values or types (1)."
535,<android.text.StaticLayout: int getLineDescent(int)>,23,24,<android.text.StaticLayout: int getLineDescent(int)>,<android.text.StaticLayout: int getLineDescent(int)>,0,"{
    int descent = mLines[mColumns * line + DESCENT];
    if (// -1 intended
    mMaximumVisibleLineCount > 0 && line >= mMaximumVisibleLineCount - 1 && line != mLineCount) {
        descent += getBottomPadding();
    }
    return descent;
}","{
    return mLines[mColumns * line + DESCENT];
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3",1,1,1,"The implementation of the method `getLineDescent(int)` in the `android.text.StaticLayout` class has been simplified from version 23 to 24. In the early version, there is an additional if-statement that adds the bottom padding to the descent if the line is one of the last visible lines. This if-statement has been removed in the late version, which means that the method will now always return the descent of the line without considering the visibility or the bottom padding.","The removal of the if-statement that adds the bottom padding to the descent for the last visible lines can cause a compatibility issue for applications that rely on the exact positioning of text. In the early version, the bottom padding is included in the descent of the last visible lines, which means that the text will be positioned slightly lower than in the late version. This difference in text positioning can cause layout issues or overlapping of text with other elements in the application. Therefore, it is important for developers to be aware of this change and to adjust their layouts accordingly if necessary."
464,<android.app.ContextImpl: void sendBroadcast(Intent)>,30,31,<android.app.ContextImpl: void sendBroadcast(Intent)>,<android.app.ContextImpl: void sendBroadcast(Intent)>,0,"{
    warnIfCallingFromSystemProcess();
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false, getUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    warnIfCallingFromSystemProcess();
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, null, /*excludedPermissions=*/
        AppOpsManager.OP_NONE, null, false, false, getUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,5,0,5,1,"The number of parameters in the method broadcastIntentWithFeature() has changed, the 9th parameter in the early version is null, while in the late version it is also null but there is a new parameter named ""excludedPermissions"" with the value of AppOpsManager.OP\_NONE.","The change in the number of parameters in the method broadcastIntentWithFeature() may cause compatibility issues as the method in the late version expects an additional parameter which is not present in the early version. This may lead to a different behavior of the API, thus the CI type is 1."
292,<android.widget.TimePicker: void setIs24HourView(Boolean)>,18,19,<android.widget.TimePicker: void setIs24HourView(Boolean)>,<android.widget.TimePicker: void setIs24HourView(Boolean)>,0,"{
    if (mIs24HourView == is24HourView) {
        return;
    }
    mIs24HourView = is24HourView;
    // cache the current hour since spinner range changes
    int currentHour = getCurrentHour();
    updateHourControl();
    // set value after spinner range is updated
    setCurrentHour(currentHour);
    updateAmPmControl();
}","{
    if (mIs24HourView == is24HourView) {
        return;
    }
    // cache the current hour since spinner range changes and BEFORE changing mIs24HourView!!
    int currentHour = getCurrentHour();
    // Order is important here.
    mIs24HourView = is24HourView;
    getHourFormatData();
    updateHourControl();
    // set value after spinner range is updated - be aware that because mIs24HourView has
    // changed then getCurrentHour() is not equal to the currentHour we cached before so
    // explicitly ask for *not* propagating any onTimeChanged()
    setCurrentHour(currentHour, false);
    updateMinuteControl();
    updateAmPmControl();
}",1,"/**
 * Set whether in 24 hour or AM/PM mode.
 *
 * @param is24HourView True = 24 hour mode. False = AM/PM.
 */
","/**
 * Set whether in 24 hour or AM/PM mode.
 *
 * @param is24HourView True = 24 hour mode. False = AM/PM.
 */
",-1,,,-1,-1,-1,-1,-1,"4,5",0,"3, 4",1,"In the late version implementation, the order of `mIs24HourView = is24HourView;` and `int currentHour = getCurrentHour();` has changed, which is a control dependency change (type 3). Additionally, two new statements `getHourFormatData();` and `updateMinuteControl();` have been added, which are other statement changes (type 4).","The control dependency change (`mIs24HourView = is24HourView;` and `int currentHour = getCurrentHour();`) in the late version implementation might lead to a different value of `currentHour`, which is later used in the statement `setCurrentHour(currentHour);`. Therefore, the API might return a different value in the late version, causing a compatibility issue (type 1)."
344,"<android.provider.Settings.NameValueCache: boolean putStringForUser(ContentResolver,String,String,int)>",17,18,"<android.provider.Settings.NameValueCache: boolean putStringForUser(ContentResolver,String,String,int)>","<android.provider.Settings.NameValueCache: boolean putStringForUser(ContentResolver,String,String,int)>",0,"{
    try {
        Bundle arg = new Bundle();
        arg.putString(Settings.NameValueTable.VALUE, value);
        arg.putInt(CALL_METHOD_USER_KEY, userHandle);
        IContentProvider cp = lazyGetProvider(cr);
        cp.call(mCallSetCommand, name, arg);
    } catch (RemoteException e) {
        Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e);
        return false;
    }
    return true;
}","{
    try {
        Bundle arg = new Bundle();
        arg.putString(Settings.NameValueTable.VALUE, value);
        arg.putInt(CALL_METHOD_USER_KEY, userHandle);
        IContentProvider cp = lazyGetProvider(cr);
        cp.call(cr.getPackageName(), mCallSetCommand, name, arg);
    } catch (RemoteException e) {
        Log.w(TAG, ""Can't set key "" + name + "" in "" + mUri, e);
        return false;
    }
    return true;
}",1,,,-1,,,-1,-1,-1,-1,-1,"4,5",0,5,1,The code change is that a new parameter `cr.getPackageName()` is added to the method `cp.call()` in the late version. This kind of change belongs to the class 5) Dependent API changed.,"The new parameter `cr.getPackageName()` added to the method `cp.call()` may potentially cause the method to behave differently, and as a result, the API `putStringForUser()` may return a different value (`false` in case of an exception). Therefore, this code change may lead to a Compatibility Issue of class 1) Compatibility Issue caused by potential different return values or types."
120,<android.hardware.camera2.CameraManager: CameraCharacteristics getCameraCharacteristics(String)>,29,30,<android.hardware.camera2.CameraManager: CameraCharacteristics getCameraCharacteristics(String)>,<android.hardware.camera2.CameraManager: CameraCharacteristics getCameraCharacteristics(String)>,0,"{
    CameraCharacteristics characteristics = null;
    if (CameraManagerGlobal.sCameraServiceDisabled) {
        throw new IllegalArgumentException(""No cameras available on device"");
    }
    synchronized (mLock) {
        /*
             * Get the camera characteristics from the camera service directly if it supports it,
             * otherwise get them from the legacy shim instead.
             */
        ICameraService cameraService = CameraManagerGlobal.get().getCameraService();
        if (cameraService == null) {
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"");
        }
        try {
            Size displaySize = getDisplaySize();
            // exception in case cameraId is a hidden physical camera.
            if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {
                // Legacy backwards compatibility path; build static info from the camera
                // parameters
                int id = Integer.parseInt(cameraId);
                String parameters = cameraService.getLegacyParameters(id);
                CameraInfo info = cameraService.getCameraInfo(id);
                characteristics = LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize);
            } else {
                // Normal path: Get the camera characteristics directly from the camera service
                CameraMetadataNative info = cameraService.getCameraCharacteristics(cameraId);
                try {
                    info.setCameraId(Integer.parseInt(cameraId));
                } catch (NumberFormatException e) {
                    Log.e(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer"");
                }
                info.setDisplaySize(displaySize);
                characteristics = new CameraCharacteristics(info);
            }
        } catch (ServiceSpecificException e) {
            throwAsPublicException(e);
        } catch (RemoteException e) {
            // Camera service died - act as if the camera was disconnected
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"", e);
        }
    }
    return characteristics;
}","{
    CameraCharacteristics characteristics = null;
    if (CameraManagerGlobal.sCameraServiceDisabled) {
        throw new IllegalArgumentException(""No cameras available on device"");
    }
    synchronized (mLock) {
        /*
             * Get the camera characteristics from the camera service directly if it supports it,
             * otherwise get them from the legacy shim instead.
             */
        ICameraService cameraService = CameraManagerGlobal.get().getCameraService();
        if (cameraService == null) {
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"");
        }
        try {
            Size displaySize = getDisplaySize();
            // exception in case cameraId is a hidden physical camera.
            if (!isHiddenPhysicalCamera(cameraId) && !supportsCamera2ApiLocked(cameraId)) {
                // Legacy backwards compatibility path; build static info from the camera
                // parameters
                int id = Integer.parseInt(cameraId);
                String parameters = cameraService.getLegacyParameters(id);
                CameraInfo info = cameraService.getCameraInfo(id);
                characteristics = LegacyMetadataMapper.createCharacteristics(parameters, info, id, displaySize);
            } else {
                // Normal path: Get the camera characteristics directly from the camera service
                CameraMetadataNative info = cameraService.getCameraCharacteristics(cameraId);
                try {
                    info.setCameraId(Integer.parseInt(cameraId));
                } catch (NumberFormatException e) {
                    // For external camera, reaching here is expected.
                    Log.v(TAG, ""Failed to parse camera Id "" + cameraId + "" to integer"");
                }
                boolean hasConcurrentStreams = CameraManagerGlobal.get().cameraIdHasConcurrentStreamsLocked(cameraId);
                info.setHasMandatoryConcurrentStreams(hasConcurrentStreams);
                info.setDisplaySize(displaySize);
                characteristics = new CameraCharacteristics(info);
            }
        } catch (ServiceSpecificException e) {
            throwAsPublicException(e);
        } catch (RemoteException e) {
            // Camera service died - act as if the camera was disconnected
            throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED, ""Camera service is currently unavailable"", e);
        }
    }
    return characteristics;
}",1,"/**
 * <p>Query the capabilities of a camera device. These capabilities are
 * immutable for a given camera.</p>
 *
 * <p>From API level 29, this function can also be used to query the capabilities of physical
 * cameras that can only be used as part of logical multi-camera. These cameras cannot be
 * opened directly via {@link #openCamera}</p>
 *
 * @param cameraId The id of the camera device to query. This could be either a standalone
 * camera ID which can be directly opened by {@link #openCamera}, or a physical camera ID that
 * can only used as part of a logical multi-camera.
 * @return The properties of the given camera
 *
 * @throws IllegalArgumentException if the cameraId does not match any
 * known camera device.
 * @throws CameraAccessException if the camera device has been disconnected.
 *
 * @see #getCameraIdList
 * @see android.app.admin.DevicePolicyManager#setCameraDisabled
 */
","/**
 * <p>Query the capabilities of a camera device. These capabilities are
 * immutable for a given camera.</p>
 *
 * <p>From API level 29, this function can also be used to query the capabilities of physical
 * cameras that can only be used as part of logical multi-camera. These cameras cannot be
 * opened directly via {@link #openCamera}</p>
 *
 * <p>Also starting with API level 29, while most basic camera information is still available
 * even without the CAMERA permission, some values are not available to apps that do not hold
 * that permission. The keys not available are listed by
 * {@link CameraCharacteristics#getKeysNeedingPermission}.</p>
 *
 * @param cameraId The id of the camera device to query. This could be either a standalone
 * camera ID which can be directly opened by {@link #openCamera}, or a physical camera ID that
 * can only used as part of a logical multi-camera.
 * @return The properties of the given camera
 *
 * @throws IllegalArgumentException if the cameraId does not match any
 * known camera device.
 * @throws CameraAccessException if the camera device has been disconnected.
 *
 * @see #getCameraIdList
 * @see android.app.admin.DevicePolicyManager#setCameraDisabled
 */
",-1,[@NonNull],[@NonNull],-1,-1,-1,-1,-1,4,0,"4, 5",1,The code changes are as follows:,
541,<android.widget.TextView: int getImeActionId()>,15,16,<android.widget.TextView: int getImeActionId()>,<android.widget.TextView: int getImeActionId()>,0,"{
    return mInputContentType != null ? mInputContentType.imeActionId : 0;
}","{
    return mEditor != null && mEditor.mInputContentType != null ? mEditor.mInputContentType.imeActionId : 0;
}",1,"/**
 * Get the IME action ID previous set with {@link #setImeActionLabel}.
 *
 * @see #setImeActionLabel
 * @see android.view.inputmethod.EditorInfo
 */
","/**
 * Get the IME action ID previous set with {@link #setImeActionLabel}.
 *
 * @see #setImeActionLabel
 * @see android.view.inputmethod.EditorInfo
 */
",-1,,,-1,-1,-1,-1,-1,"1,3",1,1,1,"The implementation of the method ""getImeActionId()"" has changed. In the early version, it returned the value of ""mInputContentType.imeActionId"" if ""mInputContentType"" was not null, and 0 otherwise. In the late version, it returns the value of ""mEditor.mInputContentType.imeActionId"" if ""mEditor"" and ""mEditor.mInputContentType"" are not null, and 0 otherwise. The change in the condition of the ternary operator and the use of an additional variable ""mEditor"" leads to a potential difference in the returned value.","The Compatibility Issue (CI) exists in this case as the code change could lead to different behaviors. Specifically, the API ""getImeActionId()"" may return different values in the early and late versions. For example, if ""mEditor"" is null in the late version, the method will return 0, whereas in the early version, it would have returned the value of ""mInputContentType.imeActionId"" if ""mInputContentType"" was not null. This difference in the returned value could cause unexpected behavior in the calling code, which is why this is considered a CI."
137,<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>,29,30,<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>,<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>,0,"{
    return mTargetSdk;
}","{
    return mSplitPermissionInfoParcelable.getTargetSdk();
}",1,"/**
 * Get the target API level when the permission was split.
 */
","/**
 * Get the target API level when the permission was split.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,5,1,The implementation of the method has been changed from returning the value of a field (mTargetSdk) directly to returning the value of a field (mSplitPermissionInfoParcelable) of another object.,"The change in the implementation of the method can lead to a different value being returned in different versions of the API, which can cause compatibility issues for the applications that rely on the specific value being returned."
323,<android.bluetooth.BluetoothAdapter: String getName()>,16,17,<android.bluetooth.BluetoothAdapter: String getName()>,<android.bluetooth.BluetoothAdapter: String getName()>,0,"{
    try {
        return mService.getName();
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
    }
    return null;
}","{
    try {
        return mManagerService.getName();
    } catch (RemoteException e) {
        Log.e(TAG, """", e);
    }
    return null;
}",1,"/**
 * Get the friendly Bluetooth name of the local Bluetooth adapter.
 * <p>This name is visible to remote Bluetooth devices.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 *
 * @return the Bluetooth name, or null on error
 */
","/**
 * Get the friendly Bluetooth name of the local Bluetooth adapter.
 * <p>This name is visible to remote Bluetooth devices.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 *
 * @return the Bluetooth name, or null on error
 */
",-1,,,-1,-1,-1,-1,-1,"1,5",1,5,1,"The change is in the method call from 'mService.getName()' to 'mManagerService.getName()', this is a dependent API change (type 5).","The change in dependent API can potentially return a different value, which is a Compatibility Issue (type 1)."
683,<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(ComponentName)>,23,24,<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(ComponentName)>,<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(ComponentName)>,0,"{
    return getCameraDisabled(admin, UserHandle.myUserId());
}","{
    throwIfParentInstance(""getCameraDisabled"");
    return getCameraDisabled(admin, myUserId());
}",1,"/**
 * Determine whether or not the device's cameras have been disabled for this user,
 * either by the current admin, if specified, or all admins.
 * @param admin The name of the admin component to check, or {@code null} to check whether any admins
 * have disabled the camera
 */
","/**
 * Determine whether or not the device's cameras have been disabled for this user,
 * either by the calling admin, if specified, or all admins.
 * @param admin The name of the admin component to check, or {@code null} to check whether any admins
 * have disabled the camera
 */
",-1,,,-1,-1,-1,-1,-1,"2,4,5",2,"2,5","1,2",The code change type is 2 as there is a new throw statement introduced and 5 as there is a change in the control dependency. The throw statement will prevent the code from executing if the device policy manager is a parent instance. The change in control dependency is that the method will now call getCameraDisabled with myUserId() instead of UserHandle.myUserId().,"The Compatibility Issue type is 1 as the change in control dependency can potentially lead to different return values. The method will now call getCameraDisabled with myUserId() instead of UserHandle.myUserId(), which can potentially lead to different user ids being passed to the method, resulting in different return values. The Compatibility Issue type is also 2 as the new throw statement can potentially lead to different exception handlings. If the device policy manager is a parent instance, the method will now throw an exception instead of returning a value."
1288,"<android.app.ContextImpl: void revokeUriPermission(Uri,int)>",23,24,"<android.app.ContextImpl: void revokeUriPermission(Uri,int)>","<android.app.ContextImpl: void revokeUriPermission(Uri,int)>",0,"{
    try {
        ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri));
    } catch (RemoteException e) {
    }
}","{
    try {
        ActivityManagerNative.getDefault().revokeUriPermission(mMainThread.getApplicationThread(), ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri));
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,2,2,2,2,"The code change between the two versions is the introduction of a new statement, `throw e.rethrowFromSystemServer()`, in the catch block of the try-catch statement. This change is classified as Exception handling statement changed.","The new statement in the catch block of the try-catch statement could potentially lead to different exception handling behaviors. In the early version, the RemoteException exception is caught and not re-thrown, whereas in the late version, the RemoteException exception is caught, wrapped in a new RuntimeException, and then re-thrown. This change could potentially result in different exception handling behaviors in the calling code, and thus, it is classified as a Compatibility Issue caused by potential different exception handlings."
348,<android.webkit.LoadListener: boolean handleSslErrorRequest(SslError)>,4,5,<android.webkit.LoadListener: boolean handleSslErrorRequest(SslError)>,<android.webkit.LoadListener: boolean handleSslErrorRequest(SslError)>,0,"{
    if (WebView.LOGV_ENABLED) {
        Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate());
    }
    sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error));
    // to unblock the network thread.
    if (!mCancelled) {
        mSslErrorRequestHandle = mRequestHandle;
    }
    return !mCancelled;
}","{
    if (DebugFlags.LOAD_LISTENER) {
        Log.v(LOGTAG, ""LoadListener.handleSslErrorRequest(): url:"" + url() + "" primary error: "" + error.getPrimaryError() + "" certificate: "" + error.getCertificate());
    }
    // will prevent waiting for an already available answer.
    if (Network.getInstance(mContext).checkSslPrefTable(this, error)) {
        return true;
    }
    // deadlock. Just bail on the request.
    if (isSynchronous()) {
        mRequestHandle.handleSslErrorResponse(false);
        return true;
    }
    sendMessageInternal(obtainMessage(MSG_SSL_ERROR, error));
    // to unblock the network thread.
    if (!mCancelled) {
        mSslErrorRequestHandle = mRequestHandle;
    }
    return !mCancelled;
}",1,"/**
 * SSL certificate error callback. Handles SSL error(s) on the way up
 * to the user.
 * IMPORTANT: as this is called from network thread, can't call native
 * directly
 */
","/**
 * SSL certificate error callback. Handles SSL error(s) on the way up
 * to the user.
 * IMPORTANT: as this is called from network thread, can't call native
 * directly
 */
",-1,,,-1,-1,-1,-1,-1,"3,4",1,"1,4,5","1,2",- The logging statement has been updated from using `WebView.LOGV_ENABLED` to `DebugFlags.LOAD_LISTENER`. This is classified as an "Other statement changed" (code change type 4).,
297,"<android.pim.vcard.VCardUtils: String constructNameFromElements(int,String,String,String,String,String)>",7,8,"<android.pim.vcard.VCardUtils: String constructNameFromElements(int,String,String,String,String,String)>","<android.pim.vcard.VCardUtils: String constructNameFromElements(int,String,String,String,String,String)>",0,"{
    StringBuilder builder = new StringBuilder();
    String[] nameList = sortNameElements(nameOrderType, familyName, middleName, givenName);
    boolean first = true;
    if (!TextUtils.isEmpty(prefix)) {
        first = false;
        builder.append(prefix);
    }
    for (String namePart : nameList) {
        if (!TextUtils.isEmpty(namePart)) {
            if (first) {
                first = false;
            } else {
                builder.append(' ');
            }
            builder.append(namePart);
        }
    }
    if (!TextUtils.isEmpty(suffix)) {
        if (!first) {
            builder.append(' ');
        }
        builder.append(suffix);
    }
    return builder.toString();
}","{
    final StringBuilder builder = new StringBuilder();
    final String[] nameList = sortNameElements(vcardType, familyName, middleName, givenName);
    boolean first = true;
    if (!TextUtils.isEmpty(prefix)) {
        first = false;
        builder.append(prefix);
    }
    for (final String namePart : nameList) {
        if (!TextUtils.isEmpty(namePart)) {
            if (first) {
                first = false;
            } else {
                builder.append(' ');
            }
            builder.append(namePart);
        }
    }
    if (!TextUtils.isEmpty(suffix)) {
        if (!first) {
            builder.append(' ');
        }
        builder.append(suffix);
    }
    return builder.toString();
}",1,,,-1,,,-1,-1,-1,-1,-1,"4,5",1,0,0,"There is no change in the implementation of the method `constructNameFromElements` between early and late versions. The only difference is the use of `final` keyword for local variables in late version, which does not affect the behavior of the method.","There is no compatibility issue for the method `constructNameFromElements` between early and late versions, as the behavior of the method is the same."
147,<android.widget.TextView: float getLeftFadingEdgeStrength()>,18,19,<android.widget.TextView: float getLeftFadingEdgeStrength()>,<android.widget.TextView: float getLeftFadingEdgeStrength()>,0,"{
    if (mEllipsize == TextUtils.TruncateAt.MARQUEE && mMarqueeFadeMode != MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS) {
        if (mMarquee != null && !mMarquee.isStopped()) {
            final Marquee marquee = mMarquee;
            if (marquee.shouldDrawLeftFade()) {
                final float scroll = marquee.getScroll();
                return scroll / getHorizontalFadingEdgeLength();
            } else {
                return 0.0f;
            }
        } else if (getLineCount() == 1) {
            final int layoutDirection = getLayoutDirection();
            final int absoluteGravity = Gravity.getAbsoluteGravity(mGravity, layoutDirection);
            switch(absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
                case Gravity.LEFT:
                    return 0.0f;
                case Gravity.RIGHT:
                    return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength();
                case Gravity.CENTER_HORIZONTAL:
                    return 0.0f;
            }
        }
    }
    return super.getLeftFadingEdgeStrength();
}","{
    if (mEllipsize == TextUtils.TruncateAt.MARQUEE && mMarqueeFadeMode != MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS) {
        if (mMarquee != null && !mMarquee.isStopped()) {
            final Marquee marquee = mMarquee;
            if (marquee.shouldDrawLeftFade()) {
                final float scroll = marquee.getScroll();
                return scroll / getHorizontalFadingEdgeLength();
            } else {
                return 0.0f;
            }
        } else if (getLineCount() == 1) {
            final int layoutDirection = getLayoutDirection();
            final int absoluteGravity = Gravity.getAbsoluteGravity(mGravity, layoutDirection);
            switch(absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
                case Gravity.LEFT:
                    return 0.0f;
                case Gravity.RIGHT:
                    return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength();
                case Gravity.CENTER_HORIZONTAL:
                case Gravity.FILL_HORIZONTAL:
                    final int textDirection = mLayout.getParagraphDirection(0);
                    if (textDirection == Layout.DIR_LEFT_TO_RIGHT) {
                        return 0.0f;
                    } else {
                        return (mLayout.getLineRight(0) - (mRight - mLeft) - getCompoundPaddingLeft() - getCompoundPaddingRight() - mLayout.getLineLeft(0)) / getHorizontalFadingEdgeLength();
                    }
            }
        }
    }
    return super.getLeftFadingEdgeStrength();
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,3,4",1,3,1,"In the switch statement, a new case ""Gravity.FILL\_HORIZONTAL"" has been added in the late version. The code block for this new case is the same as the code block for the case ""Gravity.CENTER\_HORIZONTAL"" in the early version.","The addition of the new case ""Gravity.FILL\_HORIZONTAL"" can potentially lead to a different return value for the API. If the value of ""absoluteGravity"" is ""Gravity.FILL\_HORIZONTAL"", the early version will return a value calculated by the code block for the case ""Gravity.CENTER\_HORIZONTAL"", while the late version will return 0.0f. This is a compatibility issue caused by potential different return values."
615,"<android.webkit.CallbackProxy: void onTooManyRedirects(Message,Message)>",7,8,"<android.webkit.CallbackProxy: void onTooManyRedirects(Message,Message)>","<android.webkit.CallbackProxy: void onTooManyRedirects(Message,Message)>",0,"{
    // been set.
    if (mWebViewClient == null) {
        cancelMsg.sendToTarget();
        return;
    }
    Message msg = obtainMessage(TOO_MANY_REDIRECTS);
    Bundle bundle = msg.getData();
    bundle.putParcelable(""cancelMsg"", cancelMsg);
    bundle.putParcelable(""continueMsg"", continueMsg);
    sendMessage(msg);
}","{
// deprecated.
}",1,,"// party of the public classes, we cannot remove this method.
",-1,,,-1,-1,-1,-1,-1,4,1,"1, 4","1, 2","The implementation of the method onTooManyRedirects(Message,Message) in the class CallbackProxy has been entirely removed in the late version. This code change falls under the categories 1) Return statement changed and 4) Other statement changed. The return statement is changed because the method in the early version has a return statement but it is removed in the late version. The other statement changed category is applicable because the entire implementation of the method has been removed which is not covered by the other categories.","The Compatibility Issue (CI) arises due to the potential different return values or types and different exception handlings. The method in the early version has a return statement which returns void. However, in the late version, the method implementation is entirely removed which means the method does not return anything. This can lead to different behaviours in the application. Additionally, the method in the early version does not have any exception handling statements but in the late version, any exceptions that might occur in the method will not be handled which can also lead to different behaviours in the application. Therefore, the CI type is 1) Compatibility Issue caused by potential different return values or types and 2) Compatibility Issue caused by potential different exception handlings."
209,<android.content.Intent: String toUri(int)>,21,22,<android.content.Intent: String toUri(int)>,<android.content.Intent: String toUri(int)>,0,"{
    StringBuilder uri = new StringBuilder(128);
    String scheme = null;
    if (mData != null) {
        String data = mData.toString();
        if ((flags & URI_INTENT_SCHEME) != 0) {
            final int N = data.length();
            for (int i = 0; i < N; i++) {
                char c = data.charAt(i);
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '-') {
                    continue;
                }
                if (c == ':' && i > 0) {
                    // Valid scheme.
                    scheme = data.substring(0, i);
                    uri.append(""intent:"");
                    data = data.substring(i + 1);
                    break;
                }
                // No scheme.
                break;
            }
        }
        uri.append(data);
    } else if ((flags & URI_INTENT_SCHEME) != 0) {
        uri.append(""intent:"");
    }
    uri.append(""#Intent;"");
    toUriInner(uri, scheme, flags);
    if (mSelector != null) {
        uri.append(""SEL;"");
        // Note that for now we are not going to try to handle the
        // data part; not clear how to represent this as a URI, and
        // not much utility in it.
        mSelector.toUriInner(uri, null, flags);
    }
    uri.append(""end"");
    return uri.toString();
}","{
    StringBuilder uri = new StringBuilder(128);
    if ((flags & URI_ANDROID_APP_SCHEME) != 0) {
        if (mPackage == null) {
            throw new IllegalArgumentException(""Intent must include an explicit package name to build an android-app: "" + this);
        }
        uri.append(""android-app://"");
        uri.append(mPackage);
        String scheme = null;
        if (mData != null) {
            scheme = mData.getScheme();
            if (scheme != null) {
                uri.append('/');
                uri.append(scheme);
                String authority = mData.getEncodedAuthority();
                if (authority != null) {
                    uri.append('/');
                    uri.append(authority);
                    String path = mData.getEncodedPath();
                    if (path != null) {
                        uri.append(path);
                    }
                    String queryParams = mData.getEncodedQuery();
                    if (queryParams != null) {
                        uri.append('?');
                        uri.append(queryParams);
                    }
                    String fragment = mData.getEncodedFragment();
                    if (fragment != null) {
                        uri.append('#');
                        uri.append(fragment);
                    }
                }
            }
        }
        toUriFragment(uri, null, scheme == null ? Intent.ACTION_MAIN : Intent.ACTION_VIEW, mPackage, flags);
        return uri.toString();
    }
    String scheme = null;
    if (mData != null) {
        String data = mData.toString();
        if ((flags & URI_INTENT_SCHEME) != 0) {
            final int N = data.length();
            for (int i = 0; i < N; i++) {
                char c = data.charAt(i);
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '-') {
                    continue;
                }
                if (c == ':' && i > 0) {
                    // Valid scheme.
                    scheme = data.substring(0, i);
                    uri.append(""intent:"");
                    data = data.substring(i + 1);
                    break;
                }
                // No scheme.
                break;
            }
        }
        uri.append(data);
    } else if ((flags & URI_INTENT_SCHEME) != 0) {
        uri.append(""intent:"");
    }
    toUriFragment(uri, scheme, Intent.ACTION_VIEW, null, flags);
    return uri.toString();
}",1,"/**
 * Convert this Intent into a String holding a URI representation of it.
 * The returned URI string has been properly URI encoded, so it can be
 * used with {@link Uri#parse Uri.parse(String)}.  The URI contains the
 * Intent's data as the base URI, with an additional fragment describing
 * the action, categories, type, flags, package, component, and extras.
 *
 * <p>You can convert the returned string back to an Intent with
 * {@link #getIntent}.
 *
 * @param flags Additional operating flags.  Either 0 or
 * {@link #URI_INTENT_SCHEME}.
 *
 * @return Returns a URI encoding URI string describing the entire contents
 * of the Intent.
 */
","/**
 * Convert this Intent into a String holding a URI representation of it.
 * The returned URI string has been properly URI encoded, so it can be
 * used with {@link Uri#parse Uri.parse(String)}.  The URI contains the
 * Intent's data as the base URI, with an additional fragment describing
 * the action, categories, type, flags, package, component, and extras.
 *
 * <p>You can convert the returned string back to an Intent with
 * {@link #getIntent}.
 *
 * @param flags Additional operating flags.  Either 0,
 * {@link #URI_INTENT_SCHEME}, or {@link #URI_ANDROID_APP_SCHEME}.
 *
 * @return Returns a URI encoding URI string describing the entire contents
 * of the Intent.
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1, 5",1,"The code change involves both the return statement and control dependency. The `if ((flags & URI_ANDROID_APP_SCHEME) != 0)` condition is added in the late version, which leads to a different code block being executed when this condition is met. This new code block also has a different `return uri.toString()` statement. Therefore, the API can potentially return different values in the two versions.","The Compatibility Issue arises due to the potential of the API returning different values in the two versions. This can happen when the `flags` parameter includes the `URI_ANDROID_APP_SCHEME` bit, as this will lead to a different code block being executed in the late version, which in turn can result in a different `String` being returned."
178,"<android.hardware.Sensor: int getMaxLengthValuesArray(Sensor,int)>",18,19,"<android.hardware.Sensor: int getMaxLengthValuesArray(Sensor,int)>","<android.hardware.Sensor: int getMaxLengthValuesArray(Sensor,int)>",0,"{
    // mType starts from offset 1.
    int len = sMaxLengthValuesArray[sensor.mType - 1];
    // Set it to 3 for backward compatibility.
    if (sensor.getType() == Sensor.TYPE_ROTATION_VECTOR && sdkLevel <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        len = 3;
    }
    return len;
}","{
    int type = sensor.mType;
    // Set it to 3 for backward compatibility.
    if (type == Sensor.TYPE_ROTATION_VECTOR && sdkLevel <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        return 3;
    }
    int offset = type * 2 + 1;
    if (offset >= sSensorReportingModes.length) {
        // sensor
        return 16;
    }
    return sSensorReportingModes[offset];
}",1,,,-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1,5",1,"The implementation of the API has undergone significant changes. In the early version, the length of the values array was retrieved from a static array ""sMaxLengthValuesArray"" based on the sensor type. In the late version, the length is calculated based on the sensor type and the ""sSensorReportingModes"" array. Additionally, the late version also includes a new condition statement to check if the offset is greater than or equal to the length of ""sSensorReportingModes"" array, in which case it returns 16.","The changes in the implementation of the API can lead to different return values for the same sensor, depending on the version of the API being used. Therefore, this is a Compatibility Issue of type 1, where the API potentially returns different values in different versions."
666,<android.view.ScaleGestureDetector: float getCurrentSpanX()>,16,17,<android.view.ScaleGestureDetector: float getCurrentSpanX()>,<android.view.ScaleGestureDetector: float getCurrentSpanX()>,0,"{
    return mCurrFingerDiffX;
}","{
    return mCurrSpanX;
}",1,"/**
 * Return the current x distance between the two pointers forming the
 * gesture in progress.
 *
 * @return Distance between pointers in pixels.
 */
","/**
 * Return the average X distance between each of the pointers forming the
 * gesture in progress through the focal point.
 *
 * @return Distance between pointers in pixels.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,1,1,"The return statement in the method has changed from `mCurrFingerDiffX` to `mCurrSpanX`, which indicates that the method now returns a different value.",This change in the return statement could potentially cause compatibility issues as the method now returns a different value. This could affect the behavior of the code that relies on the previous value returned by the method.
1077,<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(Surface)>,25,26,<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(Surface)>,<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(Surface)>,0,"{
    checkNotNull(surface);
    return LegacyExceptionUtils.throwOnError(nativeDetectSurfaceType(surface));
}","{
    checkNotNull(surface);
    int surfaceType = nativeDetectSurfaceType(surface);
    // ImageFormat.PRIVATE. b/9487482
    if ((surfaceType >= LegacyMetadataMapper.HAL_PIXEL_FORMAT_RGBA_8888 && surfaceType <= LegacyMetadataMapper.HAL_PIXEL_FORMAT_BGRA_8888)) {
        surfaceType = ImageFormat.PRIVATE;
    }
    return LegacyExceptionUtils.throwOnError(surfaceType);
}",1,"/**
 * Query the surface for its currently configured format
 */
","/**
 * Query the surface for its currently configured format
 */
",-1,,,-1,-1,-1,-1,-1,"1,3,4",1,"1, 5",1,"The code change is a combination of two types of changes. Firstly, a new if-statement has been added in the late version of the code which can potentially change the value of the variable ""surfaceType"" (change type 1). Secondly, the method ""nativeDetectSurfaceType"" which is called in the code is a native method and its implementation is not provided. Therefore, it is also possible that the method itself has been changed in the late version (change type 5).","The Compatibility Issue (CI) in this case is caused by the potential different return values of the method. The new if-statement in the late version can potentially change the value of ""surfaceType"" which is then passed to the ""LegacyExceptionUtils.throwOnError"" method and returned as the final value of the ""detectSurfaceType"" method. If the value of ""surfaceType"" is different in the early and late versions for the same input ""surface"", it will lead to a CI. Additionally, if the native method ""nativeDetectSurfaceType"" has been changed in the late version, it can also potentially lead to a different value of ""surfaceType"" and hence a CI."
668,"<android.app.PendingIntent: PendingIntent getService(Context,int,Intent,int)>",16,17,"<android.app.PendingIntent: PendingIntent getService(Context,int,Intent,int)>","<android.app.PendingIntent: PendingIntent getService(Context,int,Intent,int)>",0,"{
    String packageName = context.getPackageName();
    String resolvedType = intent != null ? intent.resolveTypeIfNeeded(context.getContentResolver()) : null;
    try {
        intent.setAllowFds(false);
        IIntentSender target = ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType != null ? new String[] { resolvedType } : null, flags, null);
        return target != null ? new PendingIntent(target) : null;
    } catch (RemoteException e) {
    }
    return null;
}","{
    String packageName = context.getPackageName();
    String resolvedType = intent != null ? intent.resolveTypeIfNeeded(context.getContentResolver()) : null;
    try {
        intent.setAllowFds(false);
        IIntentSender target = ActivityManagerNative.getDefault().getIntentSender(ActivityManager.INTENT_SENDER_SERVICE, packageName, null, null, requestCode, new Intent[] { intent }, resolvedType != null ? new String[] { resolvedType } : null, flags, null, UserHandle.myUserId());
        return target != null ? new PendingIntent(target) : null;
    } catch (RemoteException e) {
    }
    return null;
}",1,"/**
 * Retrieve a PendingIntent that will start a service, like calling
 * {@link Context#startService Context.startService()}.  The start
 * arguments given to the service will come from the extras of the Intent.
 *
 * @param context The Context in which this PendingIntent should start
 * the service.
 * @param requestCode Private request code for the sender (currently
 * not used).
 * @param intent An Intent describing the service to be started.
 * @param flags May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE},
 * {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT},
 * or any of the flags as supported by
 * {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts
 * of the intent that can be supplied when the actual send happens.
 *
 * @return Returns an existing or new PendingIntent matching the given
 * parameters.  May return null only if {@link #FLAG_NO_CREATE} has been
 * supplied.
 */
","/**
 * Retrieve a PendingIntent that will start a service, like calling
 * {@link Context#startService Context.startService()}.  The start
 * arguments given to the service will come from the extras of the Intent.
 *
 * @param context The Context in which this PendingIntent should start
 * the service.
 * @param requestCode Private request code for the sender (currently
 * not used).
 * @param intent An Intent describing the service to be started.
 * @param flags May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE},
 * {@link #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT},
 * or any of the flags as supported by
 * {@link Intent#fillIn Intent.fillIn()} to control which unspecified parts
 * of the intent that can be supplied when the actual send happens.
 *
 * @return Returns an existing or new PendingIntent matching the given
 * parameters.  May return null only if {@link #FLAG_NO_CREATE} has been
 * supplied.
 */
",-1,,,-1,-1,-1,-1,-1,"4,5",1,5,1,The API implementation has a new parameter in the method call to ActivityManagerNative.getDefault().getIntentSender(). The new parameter is UserHandle.myUserId(). This is a change in the dependent API.,"The new parameter in the method call to ActivityManagerNative.getDefault().getIntentSender() may cause the method to return a different IIntentSender object, which in turn may cause the PendingIntent object returned by the API to behave differently. Therefore, this is a compatibility issue caused by potential different return values or types."
67,<android.os.VibrationAttributes: int hashCode()>,30,31,<android.os.VibrationAttributes: int hashCode()>,<android.os.VibrationAttributes: int hashCode()>,0,"{
    return Objects.hash(mUsage, mFlags);
}","{
    return Objects.hash(mUsage, mOriginalAudioUsage, mFlags);
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,4,5",1,1,1,"In the late version, the method `hashCode()` uses a different set of fields to calculate the hash code. Specifically, it includes the `mOriginalAudioUsage` field in addition to the `mUsage` and `mFlags` fields used in the early version.","The change in the fields used to calculate the hash code can lead to different hash codes being returned for the same object in different versions. This can cause compatibility issues in scenarios where the hash code is used to identify or compare objects, such as in hash-based collections or in serialization/deserialization."
192,<android.widget.TextView: int getCompoundPaddingRight()>,22,23,<android.widget.TextView: int getCompoundPaddingRight()>,<android.widget.TextView: int getCompoundPaddingRight()>,0,"{
    final Drawables dr = mDrawables;
    if (dr == null || dr.mDrawableRight == null) {
        return mPaddingRight;
    } else {
        return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight;
    }
}","{
    final Drawables dr = mDrawables;
    if (dr == null || dr.mShowing[Drawables.RIGHT] == null) {
        return mPaddingRight;
    } else {
        return mPaddingRight + dr.mDrawablePadding + dr.mDrawableSizeRight;
    }
}",1,"/**
 * Returns the right padding of the view, plus space for the right
 * Drawable if any.
 */
","/**
 * Returns the right padding of the view, plus space for the right
 * Drawable if any.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,3,1,The condition for the "if" statement has been modified from "dr.mDrawableRight == null" to "dr.mShowing[Drawables.RIGHT] == null". This change affects the control flow of the method and could lead to different return values.,"The Compatibility Issue (CI) arises due to the potential for different return values in the two versions of the API. This is because the condition for the ""if"" statement has been modified, which affects the control flow and, consequently, the value that the method returns."
980,<android.os.PowerManager: boolean isPowerSaveMode()>,23,24,<android.os.PowerManager: boolean isPowerSaveMode()>,<android.os.PowerManager: boolean isPowerSaveMode()>,0,"{
    try {
        return mService.isPowerSaveMode();
    } catch (RemoteException e) {
        return false;
    }
}","{
    try {
        return mService.isPowerSaveMode();
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
","/**
 * Returns true if the device is currently in power save mode.  When in this mode,
 * applications should reduce their functionality in order to conserve battery as
 * much as possible.  You can monitor for changes to this state with
 * {@link #ACTION_POWER_SAVE_MODE_CHANGED}.
 *
 * @return Returns true if currently in low power mode, else false.
 */
",-1,,,-1,-1,-1,-1,-1,2,2,"1,2","1,2","The return statement in the catch block has been changed. In the early version, it returns false, while in the late version, it throws an exception.","The change in the return statement can cause the API to return a different value (false in the early version and not returning in the late version) or throw a different exception (no exception in the early version and RemoteException in the late version). Therefore, it is a Compatibility Issue caused by potential different return values or types and potential different exception handlings."
269,"<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>",17,18,"<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>","<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>",0,"{
    return native_control_request(requestType, request, value, index, buffer, length, timeout);
}","{
    return controlTransfer(requestType, request, value, index, buffer, 0, length, timeout);
}",1,"/**
 * Performs a control transaction on endpoint zero for this device.
 * The direction of the transfer is determined by the request type.
 * If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is
 * {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write,
 * and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer
 * is a read.
 *
 * @param requestType request type for this transaction
 * @param request request ID for this transaction
 * @param value value field for this transaction
 * @param index index field for this transaction
 * @param buffer buffer for data portion of transaction,
 * or null if no data needs to be sent or received
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
","/**
 * Performs a control transaction on endpoint zero for this device.
 * The direction of the transfer is determined by the request type.
 * If requestType & {@link UsbConstants#USB_ENDPOINT_DIR_MASK} is
 * {@link UsbConstants#USB_DIR_OUT}, then the transfer is a write,
 * and if it is {@link UsbConstants#USB_DIR_IN}, then the transfer
 * is a read.
 * <p>
 * This method transfers data starting from index 0 in the buffer.
 * To specify a different offset, use
 * {@link #controlTransfer(int, int, int, int, byte[], int, int, int)}.
 * </p>
 *
 * @param requestType request type for this transaction
 * @param request request ID for this transaction
 * @param value value field for this transaction
 * @param index index field for this transaction
 * @param buffer buffer for data portion of transaction,
 * or null if no data needs to be sent or received
 * @param length the length of the data to send or receive
 * @param timeout in milliseconds
 * @return length of data transferred (or zero) for success,
 * or negative value for failure
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,5,1,"The method implementation has changed from `native_control_request(requestType, request, value, index, buffer, length, timeout)` to `controlTransfer(requestType, request, value, index, buffer, 0, length, timeout)`. This change indicates that the method is now calling a different method (or a different version of the same method) to perform the control transfer. The new method has an additional parameter, which is set to 0 in this case. This change is classified as 5 (Dependent API changed) because the method implementation now depends on a different API.","The change in the method implementation could potentially lead to different behavior, especially if the new method (or the new version of the same method) has a different implementation or a different interpretation of the parameters. In particular, the introduction of a new parameter (even if it is set to a constant value) could have unintended side-effects. Therefore, this change is classified as 1 (Compatibility Issue caused by potential different return values or types) because it could potentially lead to different return values or types."
213,"<android.content.ContentResolver: void takePersistableUriPermission(Uri,int)>",27,28,"<android.content.ContentResolver: void takePersistableUriPermission(Uri,int)>","<android.content.ContentResolver: void takePersistableUriPermission(Uri,int)>",0,"{
    Preconditions.checkNotNull(uri, ""uri"");
    try {
        ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, resolveUserId(uri));
    } catch (RemoteException e) {
    }
}","{
    Preconditions.checkNotNull(uri, ""uri"");
    try {
        ActivityManager.getService().takePersistableUriPermission(ContentProvider.getUriWithoutUserId(uri), modeFlags, /* toPackage= */
        null, resolveUserId(uri));
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Take a persistable URI permission grant that has been offered. Once
 * taken, the permission grant will be remembered across device reboots.
 * Only URI permissions granted with
 * {@link Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION} can be persisted. If
 * the grant has already been persisted, taking it again will touch
 * {@link UriPermission#getPersistedTime()}.
 *
 * @see #getPersistedUriPermissions()
 */
","/**
 * Take a persistable URI permission grant that has been offered. Once
 * taken, the permission grant will be remembered across device reboots.
 * Only URI permissions granted with
 * {@link Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION} can be persisted. If
 * the grant has already been persisted, taking it again will touch
 * {@link UriPermission#getPersistedTime()}.
 *
 * @see #getPersistedUriPermissions()
 */
",-1,,,-1,-1,-1,-1,-1,"2,4,5",2,"2,5","1,2",There are two changes in the code between the two versions:,
218,<android.widget.Switch: Mode getThumbTintMode()>,28,29,<android.widget.Switch: Mode getThumbTintMode()>,<android.widget.Switch: Mode getThumbTintMode()>,0,"{
    return mThumbTintMode;
}","{
    BlendMode mode = getThumbTintBlendMode();
    return mode != null ? BlendMode.blendModeToPorterDuffMode(mode) : null;
}",1,"/**
 * @return the blending mode used to apply the tint to the thumb
 * drawable
 * @attr ref android.R.styleable#Switch_thumbTintMode
 * @see #setThumbTintMode(PorterDuff.Mode)
 */
","/**
 * @return the blending mode used to apply the tint to the thumb
 * drawable
 * @attr ref android.R.styleable#Switch_thumbTintMode
 * @see #setThumbTintMode(PorterDuff.Mode)
 */
",-1,[@Nullable],"[@InspectableProperty, @Nullable]",-1,-1,-1,-1,-1,"1,4",1,"1,5",1,"The return statement has changed from `return mThumbTintMode;` to `BlendMode mode = getThumbTintBlendMode(); return mode != null ? BlendMode.blendModeToPorterDuffMode(mode) : null;`. Also, a new dependent API `getThumbTintBlendMode()` is introduced. This leads to a different behavior of the API as it may now return a different value than before.",The Compatibility Issue arises because the new implementation of the API may return a different value than the old implementation. This may cause unexpected behavior in the client code that relies on the specific value returned by the API.
533,"<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>",23,24,"<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>","<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>",0,"{
    if (DBG)
        Log.d(TAG, ""start("" + sampleRateInHz + "","" + audioFormat + "","" + channelCount + "")"");
    int channelConfig = BlockingAudioTrack.getChannelConfig(channelCount);
    synchronized (mStateLock) {
        if (channelConfig == 0) {
            Log.e(TAG, ""Unsupported number of channels :"" + channelCount);
            mStatusCode = TextToSpeech.ERROR_OUTPUT;
            return TextToSpeech.ERROR;
        }
        if (mStatusCode == TextToSpeech.STOPPED) {
            if (DBG)
                Log.d(TAG, ""stop() called before start(), returning."");
            return errorCodeOnStop();
        }
        if (mStatusCode != TextToSpeech.SUCCESS) {
            if (DBG)
                Log.d(TAG, ""Error was raised"");
            return TextToSpeech.ERROR;
        }
        if (mItem != null) {
            Log.e(TAG, ""Start called twice"");
            return TextToSpeech.ERROR;
        }
        SynthesisPlaybackQueueItem item = new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger);
        mAudioTrackHandler.enqueue(item);
        mItem = item;
    }
    return TextToSpeech.SUCCESS;
}","{
    if (DBG)
        Log.d(TAG, ""start("" + sampleRateInHz + "","" + audioFormat + "","" + channelCount + "")"");
    if (audioFormat != AudioFormat.ENCODING_PCM_8BIT && audioFormat != AudioFormat.ENCODING_PCM_16BIT && audioFormat != AudioFormat.ENCODING_PCM_FLOAT) {
        Log.w(TAG, ""Audio format encoding "" + audioFormat + "" not supported. Please use one "" + ""of AudioFormat.ENCODING_PCM_8BIT, AudioFormat.ENCODING_PCM_16BIT or "" + ""AudioFormat.ENCODING_PCM_FLOAT"");
    }
    mDispatcher.dispatchOnBeginSynthesis(sampleRateInHz, audioFormat, channelCount);
    int channelConfig = BlockingAudioTrack.getChannelConfig(channelCount);
    synchronized (mStateLock) {
        if (channelConfig == 0) {
            Log.e(TAG, ""Unsupported number of channels :"" + channelCount);
            mStatusCode = TextToSpeech.ERROR_OUTPUT;
            return TextToSpeech.ERROR;
        }
        if (mStatusCode == TextToSpeech.STOPPED) {
            if (DBG)
                Log.d(TAG, ""stop() called before start(), returning."");
            return errorCodeOnStop();
        }
        if (mStatusCode != TextToSpeech.SUCCESS) {
            if (DBG)
                Log.d(TAG, ""Error was raised"");
            return TextToSpeech.ERROR;
        }
        if (mItem != null) {
            Log.e(TAG, ""Start called twice"");
            return TextToSpeech.ERROR;
        }
        SynthesisPlaybackQueueItem item = new SynthesisPlaybackQueueItem(mAudioParams, sampleRateInHz, audioFormat, channelCount, mDispatcher, mCallerIdentity, mLogger);
        mAudioTrackHandler.enqueue(item);
        mItem = item;
    }
    return TextToSpeech.SUCCESS;
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",1,"1,5","1,2","The return statement has changed from having a condition that checks for an unsupported number of channels to not having that condition. Additionally, a new conditional statement has been added that checks for an unsupported audio format and logs a warning, and a new method call has been added to mDispatcher.","The change in the return statement could lead to different behavior if an unsupported number of channels is used, which would result in a Compatibility Issue with potential different return values or types (1). The addition of the new conditional statement could also lead to different behavior if an unsupported audio format is used, which would result in a Compatibility Issue with potential different exception handlings (2)."
949,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,20,21,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,<android.accounts.AccountManager: AuthenticatorDescription[] getAuthenticatorTypes()>,0,"{
    try {
        return mService.getAuthenticatorTypes();
    } catch (RemoteException e) {
        // will never happen
        throw new RuntimeException(e);
    }
}","{
    try {
        return mService.getAuthenticatorTypes(UserHandle.getCallingUserId());
    } catch (RemoteException e) {
        // will never happen
        throw new RuntimeException(e);
    }
}",1,"/**
 * Lists the currently registered authenticators.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>No permission is required to call this method.
 *
 * @return An array of {@link AuthenticatorDescription} for every
 * authenticator known to the AccountManager service.  Empty (never
 * null) if no authenticators are known.
 */
","/**
 * Lists the currently registered authenticators.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>No permission is required to call this method.
 *
 * @return An array of {@link AuthenticatorDescription} for every
 * authenticator known to the AccountManager service.  Empty (never
 * null) if no authenticators are known.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4,5",0,5,1,"The method called on `mService` has changed from `getAuthenticatorTypes()` to `getAuthenticatorTypes(UserHandle.getCallingUserId())`. This is a dependent API change, as the method signature of the `mService`'s method has changed.","The change in the `mService`'s method could potentially lead to a different set of authenticators being returned, as it now takes the user ID into account. This means that the API's behavior has changed, and code that relies on the previous behavior may not work as expected. This is a compatibility issue caused by potential different return values."
17,"<android.view.GLES20Canvas: boolean quickReject(Path,EdgeType)>",15,16,"<android.view.GLES20Canvas: boolean quickReject(Path,EdgeType)>","<android.view.GLES20Canvas: boolean quickReject(Path,EdgeType)>",0,"{
    throw new UnsupportedOperationException();
}","{
    path.computeBounds(mPathBounds, true);
    return nQuickReject(mRenderer, mPathBounds.left, mPathBounds.top, mPathBounds.right, mPathBounds.bottom, type.nativeInt);
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2","1,2","1,2,5","1,2","The implementation of the method has been completely changed, from throwing an UnsupportedOperationException to performing some computations and returning a boolean value. This is a change in the return statement, as the method now returns a value instead of throwing an exception. It is also a change in the dependent API, as the method now relies on the nQuickReject method and the Path.computeBounds method.","The change in the return statement and exception handling can cause compatibility issues. In the early version, any call to this method would result in an UnsupportedOperationException being thrown. In the late version, the method will perform some computations and return a boolean value. This means that any code that relies on the exception being thrown will no longer work as expected. Additionally, any code that assumes the method will always return false (which is a valid assumption in the early version, as the method always throws an exception) may also break."
129,"<android.util.Log: int v(String,String)>",7,8,"<android.util.Log: int v(String,String)>","<android.util.Log: int v(String,String)>",0,"{
    return println(VERBOSE, tag, msg);
}","{
    return println_native(LOG_ID_MAIN, VERBOSE, tag, msg);
}",1,"/**
 * Send a {@link #VERBOSE} log message.
 * @param tag Used to identify the source of a log message.  It usually identifies
 * the class or activity where the log call occurs.
 * @param msg The message you would like logged.
 */
","/**
 * Send a {@link #VERBOSE} log message.
 * @param tag Used to identify the source of a log message.  It usually identifies
 * the class or activity where the log call occurs.
 * @param msg The message you would like logged.
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,5,1,"The return statement has changed. In the early version, the method `println` is used to print the log message, while in the late version, the method `println_native` is used.","The change in the return statement may lead to different behaviors of the API. Specifically, the method `println` and `println_native` may have different implementations, which may result in the log message being printed in different ways or even not being printed at all. Therefore, this change may cause a Compatibility Issue, which is classified as type 1."
424,<android.view.autofill.AutofillId: int hashCode()>,28,29,<android.view.autofill.AutofillId: int hashCode()>,<android.view.autofill.AutofillId: int hashCode()>,0,"{
    final int prime = 31;
    int result = 1;
    result = prime * result + mViewId;
    result = prime * result + mVirtualId;
    return result;
}","{
    final int prime = 31;
    int result = 1;
    result = prime * result + mViewId;
    result = prime * result + mVirtualIntId;
    result = prime * result + (int) (mVirtualLongId ^ (mVirtualLongId >>> 32));
    result = prime * result + mSessionId;
    return result;
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,4",1,"1, 5",1,"The implementation of the `hashCode()` method has been changed. In the early version, the hash code is calculated based on `mViewId` and `mVirtualId`. In the late version, the hash code is calculated based on `mViewId`, `mVirtualIntId`, `mVirtualLongId`, and `mSessionId`. This indicates that the dependent API has changed.","The change in the implementation of the `hashCode()` method can lead to compatibility issues. In the late version, the hash code is calculated based on different fields, which means that the same `AutofillId` object may have different hash codes in the early and late versions. This can cause issues in hash-based data structures, such as `HashMap` and `HashSet`, where the object's hash code is used to determine its position in the data structure. If the hash code changes, the object may be stored in a different position, which can lead to incorrect behavior."
741,"<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>",28,29,"<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>","<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>",0,"{
    boolean result = false;
    final IBluetoothHidDevice service = mService;
    if (service != null) {
        try {
            result = service.reportError(device, error);
        } catch (RemoteException e) {
            Log.e(TAG, e.toString());
        }
    } else {
        Log.w(TAG, ""Proxy not attached to service"");
    }
    return result;
}","{
    boolean result = false;
    final IBluetoothHidDevice service = getService();
    if (service != null) {
        try {
            result = service.reportError(device, error);
        } catch (RemoteException e) {
            Log.e(TAG, e.toString());
        }
    } else {
        Log.w(TAG, ""Proxy not attached to service"");
    }
    return result;
}",1,"/**
 * Sends error handshake message as reply for invalid SET_REPORT request from {@link
 * Callback#onSetReport(BluetoothDevice, byte, byte, byte[])}.
 *
 * @param error Error to be sent for SET_REPORT via HANDSHAKE.
 * @return true if the command is successfully sent; otherwise false.
 */
","/**
 * Sends error handshake message as reply for invalid SET_REPORT request from {@link
 * Callback#onSetReport(BluetoothDevice, byte, byte, byte[])}.
 *
 * @param error Error to be sent for SET_REPORT via HANDSHAKE.
 * @return true if the command is successfully sent; otherwise false.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,0,0,"No code change is detected between the two versions. The only difference is the usage of `mService` in the early version and `getService()` in the late version. However, since the `mService` is initialized in the constructor with `getService()`, this difference does not lead to any behavior change.",No Compatibility Issue is detected for the API `reportError()` between the two versions.
350,"<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int,DatabaseErrorHandler)>",27,28,"<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int,DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase: SQLiteDatabase openDatabase(String,CursorFactory,int,DatabaseErrorHandler)>",0,"{
    SQLiteDatabase db = new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1);
    db.open();
    return db;
}","{
    SQLiteDatabase db = new SQLiteDatabase(path, flags, factory, errorHandler, -1, -1, -1, null, null);
    db.open();
    return db;
}",1,"/**
 * Open the database according to the flags {@link #OPEN_READWRITE}
 * {@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}.
 *
 * <p>Sets the locale of the database to the  the system's current locale.
 * Call {@link #setLocale} if you would like something else.</p>
 *
 * <p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be
 * used to handle corruption when sqlite reports database corruption.</p>
 *
 * @param path to database file to open and/or create
 * @param factory an optional factory class that is called to instantiate a
 * cursor when query is called, or null for default
 * @param flags to control database access mode
 * @param errorHandler the {@link DatabaseErrorHandler} obj to be used to handle corruption
 * when sqlite reports database corruption
 * @return the newly opened database
 * @throws SQLiteException if the database cannot be opened
 */
","/**
 * Open the database according to the flags {@link #OPEN_READWRITE}
 * {@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}.
 *
 * <p>Sets the locale of the database to the  the system's current locale.
 * Call {@link #setLocale} if you would like something else.</p>
 *
 * <p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be
 * used to handle corruption when sqlite reports database corruption.</p>
 *
 * @param path to database file to open and/or create
 * @param factory an optional factory class that is called to instantiate a
 * cursor when query is called, or null for default
 * @param flags to control database access mode
 * @param errorHandler the {@link DatabaseErrorHandler} obj to be used to handle corruption
 * when sqlite reports database corruption
 * @return the newly opened database
 * @throws SQLiteException if the database cannot be opened
 */
",-1,,,-1,-1,-1,-1,-1,5,0,5,0,The constructor of the SQLiteDatabase object has been changed by adding two new null parameters. This is a Dependent API change because the constructor of SQLiteDatabase is an API that the openDatabase method depends on.,The compatibility issue does not exist because the two new null parameters do not have any effect on the behavior of the openDatabase method. The method will still open the database and return the same SQLiteDatabase object as before.
206,<android.app.SharedPreferencesImpl.EditorImpl: Editor remove(String)>,25,26,<android.app.SharedPreferencesImpl.EditorImpl: Editor remove(String)>,<android.app.SharedPreferencesImpl.EditorImpl: Editor remove(String)>,0,"{
    synchronized (this) {
        mModified.put(key, this);
        return this;
    }
}","{
    synchronized (mLock) {
        mModified.put(key, this);
        return this;
    }
}",1,,,-1,,,-1,-1,-1,-1,-1,4,0,4,0,The lock object used in the synchronized block has been changed from "this" to "mLock".,"The change of lock object will not affect the return value or exception handling of this API, so there is no compatibility issue."
126,<android.animation.ValueAnimator: void resume()>,23,24,<android.animation.ValueAnimator: void resume()>,<android.animation.ValueAnimator: void resume()>,0,"{
    if (mPaused) {
        mResumed = true;
    }
    super.resume();
}","{
    if (Looper.myLooper() == null) {
        throw new AndroidRuntimeException(""Animators may only be resumed from the same "" + ""thread that the animator was started on"");
    }
    if (mPaused && !mResumed) {
        mResumed = true;
        if (mPauseTime > 0) {
            AnimationHandler handler = AnimationHandler.getInstance();
            handler.addAnimationFrameCallback(this, 0);
        }
    }
    super.resume();
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"2,3,4","1,2","2,3","1,2","In the late version implementation, there are two new additions. The first is a new if statement that throws an AndroidRuntimeException if the current thread is not the same as the one that started the animator. The second is an addition to the existing if statement that adds an animation frame callback to the AnimationHandler if the mPauseTime is greater than 0. These changes change the potential behavior of the resume() method.","The first change, the new if statement that throws an AndroidRuntimeException, means that if the resume() method is called from a different thread than the one that started the animator, the method will throw an exception, which is a different behavior from the early version implementation."
90,<android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache: RemoteViewsIndexMetaData getMetaDataAt(int)>,23,24,<android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache: RemoteViewsIndexMetaData getMetaDataAt(int)>,<android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache: RemoteViewsIndexMetaData getMetaDataAt(int)>,0,"{
    if (mIndexMetaData.containsKey(position)) {
        return mIndexMetaData.get(position);
    }
    return null;
}","{
    return mIndexMetaData.get(position);
}",1,,,-1,,,-1,-1,-1,-1,-1,"1,3",1,1,2,"The code change is that in the early version, there is a condition check before returning the value of `mIndexMetaData.get(position)`, while in the late version, the condition check is removed and the value is directly returned. This means that in the early version, if `mIndexMetaData` does not contain the key `position`, `null` will be returned, while in the late version, a `NullPointerException` will be thrown in this case.","The Compatibility Issue is that the late version of the API may throw a `NullPointerException` when the key `position` is not in `mIndexMetaData`, while the early version will return `null` in this case. This means that any code that calls this API and expects a `null` return value when the key is not present will need to be updated to handle the `NullPointerException` in the late version."
497,"<android.view.GLES20Canvas: void drawHardwareLayer(HardwareLayer,float,float,Paint)>",16,17,"<android.view.GLES20Canvas: void drawHardwareLayer(HardwareLayer,float,float,Paint)>","<android.view.GLES20Canvas: void drawHardwareLayer(HardwareLayer,float,float,Paint)>",0,"{
    final GLES20Layer glLayer = (GLES20Layer) layer;
    int modifier = paint != null ? setupColorFilter(paint) : MODIFIER_NONE;
    try {
        final int nativePaint = paint == null ? 0 : paint.mNativePaint;
        nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint);
    } finally {
        if (modifier != MODIFIER_NONE)
            nResetModifiers(mRenderer, modifier);
    }
}","{
    final GLES20Layer glLayer = (GLES20Layer) layer;
    final int nativePaint = paint == null ? 0 : paint.mNativePaint;
    nDrawLayer(mRenderer, glLayer.getLayer(), x, y, nativePaint);
}",1,,,-1,,,-1,-1,-1,-1,-1,"2,3,4",0,1,1,"The code change is that the `setupColorFilter(paint)` method call has been removed from the early version to the late version. This method call was used to set up a modifier for the rendering process, which would be reset in the finally block. In the late version, this modifier is not set up, and the finally block has been removed.","The Compatibility Issue (CI) arises because the removal of the `setupColorFilter(paint)` method call could potentially lead to different rendering behavior in the two versions. If the `setupColorFilter(paint)` method call had a non-trivial effect on the rendering process, then the late version may not render the hardware layer correctly, or may render it differently from the early version. This could affect the visual appearance of the application, and may cause issues with functionality that relies on the correct rendering of the hardware layer."
288,"<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>",15,16,"<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>","<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>",0,"{
    if (DBG) {
        Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""],"" + offset + "","" + length + "")"");
    }
    if (length > getMaxBufferSize() || length <= 0) {
        throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)"");
    }
    SynthesisMessageParams token = null;
    synchronized (mStateLock) {
        if (mToken == null || mStopped) {
            return TextToSpeech.ERROR;
        }
        token = mToken;
    }
    // Sigh, another copy.
    final byte[] bufferCopy = new byte[length];
    System.arraycopy(buffer, offset, bufferCopy, 0, length);
    // Might block on mToken.this, if there are too many buffers waiting to
    // be consumed.
    token.addBuffer(bufferCopy);
    mAudioTrackHandler.enqueueSynthesisDataAvailable(token);
    mLogger.onEngineDataReceived();
    return TextToSpeech.SUCCESS;
}","{
    if (DBG) {
        Log.d(TAG, ""audioAvailable(byte["" + buffer.length + ""],"" + offset + "","" + length + "")"");
    }
    if (length > getMaxBufferSize() || length <= 0) {
        throw new IllegalArgumentException(""buffer is too large or of zero length ("" + +length + "" bytes)"");
    }
    SynthesisPlaybackQueueItem item = null;
    synchronized (mStateLock) {
        if (mItem == null || mStopped) {
            return TextToSpeech.ERROR;
        }
        item = mItem;
    }
    // Sigh, another copy.
    final byte[] bufferCopy = new byte[length];
    System.arraycopy(buffer, offset, bufferCopy, 0, length);
    // be consumed.
    try {
        item.put(bufferCopy);
    } catch (InterruptedException ie) {
        return TextToSpeech.ERROR;
    }
    mLogger.onEngineDataReceived();
    return TextToSpeech.SUCCESS;
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,4","1,2","1, 5","1, 2",Two changes have been made between the early and late versions of the API:,
317,<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>,30,31,<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>,<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>,0,"{
    if (DEBUG)
        Log.v(TAG, ""finishComposingText"");
    final Editable content = getEditable();
    if (content != null) {
        beginBatchEdit();
        removeComposingSpans(content);
        // Note: sendCurrentText does nothing unless mDummyMode is set
        sendCurrentText();
        endBatchEdit();
    }
    return true;
}","{
    if (DEBUG)
        Log.v(TAG, ""finishComposingText"");
    final Editable content = getEditable();
    if (content != null) {
        beginBatchEdit();
        removeComposingSpans(content);
        // Note: sendCurrentText does nothing unless mFallbackMode is set
        sendCurrentText();
        endBatchEdit();
        endComposingRegionEditInternal();
    }
    return true;
}",1,"/**
 * The default implementation removes the composing state from the
 * current editable text.  In addition, only if dummy mode, a key event is
 * sent for the new text and the current editable buffer cleared.
 */
","/**
 * The default implementation removes the composing state from the
 * current editable text.  In addition, only if fallback mode, a key event is
 * sent for the new text and the current editable buffer cleared.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,3,1,The code change is that a new statement "endComposingRegionEditInternal();" has been added to the late version of the API.,"The new statement ""endComposingRegionEditInternal();"" in the late version of the API could potentially lead to a different behavior compared to the early version. For example, if the ""endComposingRegionEditInternal();"" method affects the value of the ""content"" variable, then it could cause the API to return a different value, which is a compatibility issue."
650,"<android.view.View: boolean awakenScrollBars(int,boolean)>",22,23,"<android.view.View: boolean awakenScrollBars(int,boolean)>","<android.view.View: boolean awakenScrollBars(int,boolean)>",0,"{
    final ScrollabilityCache scrollCache = mScrollCache;
    if (scrollCache == null || !scrollCache.fadeScrollBars) {
        return false;
    }
    if (scrollCache.scrollBar == null) {
        scrollCache.scrollBar = new ScrollBarDrawable();
    }
    if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
        if (invalidate) {
            // Invalidate to show the scrollbars
            postInvalidateOnAnimation();
        }
        if (scrollCache.state == ScrollabilityCache.OFF) {
            // FIXME: this is copied from WindowManagerService.
            // We should get this value from the system when it
            // is possible to do so.
            final int KEY_REPEAT_FIRST_DELAY = 750;
            startDelay = Math.max(KEY_REPEAT_FIRST_DELAY, startDelay);
        }
        // Tell mScrollCache when we should start fading. This may
        // extend the fade start time if one was already scheduled
        long fadeStartTime = AnimationUtils.currentAnimationTimeMillis() + startDelay;
        scrollCache.fadeStartTime = fadeStartTime;
        scrollCache.state = ScrollabilityCache.ON;
        // Schedule our fader to run, unscheduling any old ones first
        if (mAttachInfo != null) {
            mAttachInfo.mHandler.removeCallbacks(scrollCache);
            mAttachInfo.mHandler.postAtTime(scrollCache, fadeStartTime);
        }
        return true;
    }
    return false;
}","{
    final ScrollabilityCache scrollCache = mScrollCache;
    if (scrollCache == null || !scrollCache.fadeScrollBars) {
        return false;
    }
    if (scrollCache.scrollBar == null) {
        scrollCache.scrollBar = new ScrollBarDrawable();
        scrollCache.scrollBar.setCallback(this);
        scrollCache.scrollBar.setState(getDrawableState());
    }
    if (isHorizontalScrollBarEnabled() || isVerticalScrollBarEnabled()) {
        if (invalidate) {
            // Invalidate to show the scrollbars
            postInvalidateOnAnimation();
        }
        if (scrollCache.state == ScrollabilityCache.OFF) {
            // FIXME: this is copied from WindowManagerService.
            // We should get this value from the system when it
            // is possible to do so.
            final int KEY_REPEAT_FIRST_DELAY = 750;
            startDelay = Math.max(KEY_REPEAT_FIRST_DELAY, startDelay);
        }
        // Tell mScrollCache when we should start fading. This may
        // extend the fade start time if one was already scheduled
        long fadeStartTime = AnimationUtils.currentAnimationTimeMillis() + startDelay;
        scrollCache.fadeStartTime = fadeStartTime;
        scrollCache.state = ScrollabilityCache.ON;
        // Schedule our fader to run, unscheduling any old ones first
        if (mAttachInfo != null) {
            mAttachInfo.mHandler.removeCallbacks(scrollCache);
            mAttachInfo.mHandler.postAtTime(scrollCache, fadeStartTime);
        }
        return true;
    }
    return false;
}",1,"/**
 * <p>
 * Trigger the scrollbars to draw. When invoked this method starts an
 * animation to fade the scrollbars out after a fixed delay. If a subclass
 * provides animated scrolling, the start delay should equal the duration of
 * the scrolling animation.
 * </p>
 *
 * <p>
 * The animation starts only if at least one of the scrollbars is enabled,
 * as specified by {@link #isHorizontalScrollBarEnabled()} and
 * {@link #isVerticalScrollBarEnabled()}. When the animation is started,
 * this method returns true, and false otherwise. If the animation is
 * started, this method calls {@link #invalidate()} if the invalidate parameter
 * is set to true; in that case the caller
 * should not call {@link #invalidate()}.
 * </p>
 *
 * <p>
 * This method should be invoked everytime a subclass directly updates the
 * scroll parameters.
 * </p>
 *
 * @param startDelay the delay, in milliseconds, after which the animation
 * should start; when the delay is 0, the animation starts
 * immediately
 *
 * @param invalidate Wheter this method should call invalidate
 *
 * @return true if the animation is played, false otherwise
 *
 * @see #scrollBy(int, int)
 * @see #scrollTo(int, int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
","/**
 * <p>
 * Trigger the scrollbars to draw. When invoked this method starts an
 * animation to fade the scrollbars out after a fixed delay. If a subclass
 * provides animated scrolling, the start delay should equal the duration of
 * the scrolling animation.
 * </p>
 *
 * <p>
 * The animation starts only if at least one of the scrollbars is enabled,
 * as specified by {@link #isHorizontalScrollBarEnabled()} and
 * {@link #isVerticalScrollBarEnabled()}. When the animation is started,
 * this method returns true, and false otherwise. If the animation is
 * started, this method calls {@link #invalidate()} if the invalidate parameter
 * is set to true; in that case the caller
 * should not call {@link #invalidate()}.
 * </p>
 *
 * <p>
 * This method should be invoked every time a subclass directly updates the
 * scroll parameters.
 * </p>
 *
 * @param startDelay the delay, in milliseconds, after which the animation
 * should start; when the delay is 0, the animation starts
 * immediately
 *
 * @param invalidate Whether this method should call invalidate
 *
 * @return true if the animation is played, false otherwise
 *
 * @see #scrollBy(int, int)
 * @see #scrollTo(int, int)
 * @see #isHorizontalScrollBarEnabled()
 * @see #isVerticalScrollBarEnabled()
 * @see #setHorizontalScrollBarEnabled(boolean)
 * @see #setVerticalScrollBarEnabled(boolean)
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,1,"There is a new statement added between lines 10 and 11 in the late implementation of the API. The new statement is 'scrollCache.scrollBar.setCallback(this);' which sets the callback of the scrollBar object to the current instance of the View class. Also, another new statement 'scrollCache.scrollBar.setState(getDrawableState());' is added to set the state of the scrollBar object to the current drawable state of the View object.","The new statements added in the late implementation of the API can potentially change the behavior of the scrollBar object, which in turn can affect the overall behavior of the View object. For example, the callback set in the scrollBar object can trigger some actions in the View object that were not present in the early implementation, leading to a compatibility issue. Similarly, the state set in the scrollBar object can also affect the appearance and behavior of the View object, causing a compatibility issue."
475,<android.preference.Preference: int compareTo(Preference)>,18,19,<android.preference.Preference: int compareTo(Preference)>,<android.preference.Preference: int compareTo(Preference)>,0,"{
    if (mOrder != DEFAULT_ORDER || (mOrder == DEFAULT_ORDER && another.mOrder != DEFAULT_ORDER)) {
        // Do order comparison
        return mOrder - another.mOrder;
    } else if (mTitle == null) {
        return 1;
    } else if (another.mTitle == null) {
        return -1;
    } else {
        // Do name comparison
        return CharSequences.compareToIgnoreCase(mTitle, another.mTitle);
    }
}","{
    if (mOrder != DEFAULT_ORDER || (mOrder == DEFAULT_ORDER && another.mOrder != DEFAULT_ORDER)) {
        // Do order comparison
        return mOrder - another.mOrder;
    } else if (mTitle == another.mTitle) {
        // If titles are null or share same object comparison
        return 0;
    } else if (mTitle == null) {
        return 1;
    } else if (another.mTitle == null) {
        return -1;
    } else {
        // Do name comparison
        return CharSequences.compareToIgnoreCase(mTitle, another.mTitle);
    }
}",1,"/**
 * Compares Preference objects based on order (if set), otherwise alphabetically on the titles.
 *
 * @param another The Preference to compare to this one.
 * @return 0 if the same; less than 0 if this Preference sorts ahead of <var>another</var>;
 * greater than 0 if this Preference sorts after <var>another</var>.
 */
","/**
 * Compares Preference objects based on order (if set), otherwise alphabetically on the titles.
 *
 * @param another The Preference to compare to this one.
 * @return 0 if the same; less than 0 if this Preference sorts ahead of <var>another</var>;
 * greater than 0 if this Preference sorts after <var>another</var>.
 */
",-1,,,-1,-1,-1,-1,-1,"1,3",1,"1, 3",1,"The code change between the early version and the late version is that an additional condition has been added to the first if-else block. In the late version, if `mTitle == another.mTitle`, the method will return 0, whereas in the early version, this condition was not present and the method would have proceeded to the next if-else block. This is a control dependency change (code change type 3) because it changes the conditions that determine the flow of the program. It is also a return statement change (code change type 1) because it adds a new return statement.","The Compatibility Issue (CI) that arises from this code change is that the method may return a different value in the late version compared to the early version. Specifically, if `mTitle == another.mTitle`, the late version will return 0, whereas the early version would have proceeded to the next if-else block and may have returned a different value. This violates the compatibility of the method because it changes the method's behavior in a way that may affect the correctness of the program. The CI type is 1 because it is a CI caused by potential different return values or types."
47,<android.text.PrecomputedText.Params.Builder: Params build()>,32,33,,,,"{
    return new Params(mPaint, mTextDir, mBreakStrategy, mHyphenationFrequency);
}","{
    return new Params(mPaint, mLineBreakConfig, mTextDir, mBreakStrategy, mHyphenationFrequency);
}",1,"/**
 * Build the {@link Params}.
 *
 * @return the layout parameter
 */
","/**
 * Build the {@link Params}.
 *
 * @return the layout parameter
 */
",0,[@NonNull],[@NonNull],0,,,,,"1,5",1,1,1,"The implementation of the `build()` method in the `Params.Builder` class has been changed between version 32 and 33 of the Android public APIs. In the early version, the method returns a new `Params` object with four arguments: `mPaint`, `mTextDir`, `mBreakStrategy`, and `mHyphenationFrequency`. In the late version, the method returns a new `Params` object with five arguments: `mPaint`, `mLineBreakConfig`, `mTextDir`, `mBreakStrategy`, and `mHyphenationFrequency`. The change is in the number and values of the arguments passed to the `Params` constructor.","The code change between the two versions of the `build()` method has the potential to cause a compatibility issue. The `Params` object returned by the method in the late version has a different internal state than the one returned by the method in the early version, due to the addition of the `mLineBreakConfig` argument. This difference in internal state could lead to different behavior in code that uses the `Params` object, such as differences in text layout or hyphenation. Therefore, the code change should be classified as a compatibility issue caused by potential different return values or types (class 1)."
1019,<android.webkit.WebSettings: String getDatabasePath()>,15,16,<android.webkit.WebSettings: String getDatabasePath()>,<android.webkit.WebSettings: String getDatabasePath()>,0,"{
    return mDatabasePath;
}","{
    throw new MustOverrideException();
}",1,"/**
 * Return the path to where database storage API databases are saved for
 * the current WebView.
 * @return the String path to the database storage API databases.
 */
","/**
 * Gets the path to where database storage API databases are saved for
 * the current WebView.
 *
 * @return the String path to the database storage API databases
 */
",-1,,,-1,-1,-1,-1,-1,"1,2","1,2",1,2,The implementation of the method has changed from returning the value of mDatabasePath to throwing an exception MustOverrideException.,"The change in implementation can potentially cause the API to throw an exception instead of returning a value, which can lead to different behaviors in the code that uses this API."
210,<android.hardware.camera2.legacy.LegacyCameraDevice: void finalize()>,23,24,<android.hardware.camera2.legacy.LegacyCameraDevice: void finalize()>,<android.hardware.camera2.legacy.LegacyCameraDevice: void finalize()>,0,"{
    try {
        close();
    } catch (CameraRuntimeException e) {
        Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage());
    } finally {
        super.finalize();
    }
}","{
    try {
        close();
    } catch (ServiceSpecificException e) {
        Log.e(TAG, ""Got error while trying to finalize, ignoring: "" + e.getMessage());
    } finally {
        super.finalize();
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"2,4",2,2,2,"The catch block in the try-catch-finally statement has been modified. Specifically, the exception type that the catch block can handle has changed from CameraRuntimeException in the early version to ServiceSpecificException in the late version.","The change of the exception type in the catch block may lead to different behaviors of the API. In the early version, if a CameraRuntimeException is thrown when the close() method is invoked, the error message will be logged and then the super.finalize() method will be executed. However, in the late version, if a CameraRuntimeException is thrown, it will not be handled by the catch block and may propagate to the caller or even crash the program. Therefore, this is a Compatibility Issue caused by potential different exception handlings."
849,<android.widget.NumberPicker: void onDraw(Canvas)>,15,16,<android.widget.NumberPicker: void onDraw(Canvas)>,<android.widget.NumberPicker: void onDraw(Canvas)>,0,"{
    if (mSelectorWheelState == SELECTOR_WHEEL_STATE_NONE) {
        return;
    }
    float x = (mRight - mLeft) / 2;
    float y = mCurrentScrollOffset;
    final int restoreCount = canvas.save();
    if (mSelectorWheelState == SELECTOR_WHEEL_STATE_SMALL) {
        Rect clipBounds = canvas.getClipBounds();
        clipBounds.inset(0, mSelectorElementHeight);
        canvas.clipRect(clipBounds);
    }
    // draw the selector wheel
    int[] selectorIndices = mSelectorIndices;
    for (int i = 0; i < selectorIndices.length; i++) {
        int selectorIndex = selectorIndices[i];
        String scrollSelectorValue = mSelectorIndexToStringCache.get(selectorIndex);
        // value intermixed with the new one.
        if (i != SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() != VISIBLE) {
            canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint);
        }
        y += mSelectorElementHeight;
    }
    // draw the selection dividers (only if scrolling and drawable specified)
    if (mSelectionDivider != null) {
        // draw the top divider
        int topOfTopDivider = (getHeight() - mSelectorElementHeight - mSelectionDividerHeight) / 2;
        int bottomOfTopDivider = topOfTopDivider + mSelectionDividerHeight;
        mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider);
        mSelectionDivider.draw(canvas);
        // draw the bottom divider
        int topOfBottomDivider = topOfTopDivider + mSelectorElementHeight;
        int bottomOfBottomDivider = bottomOfTopDivider + mSelectorElementHeight;
        mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider);
        mSelectionDivider.draw(canvas);
    }
    canvas.restoreToCount(restoreCount);
}","{
    if (!mHasSelectorWheel) {
        super.onDraw(canvas);
        return;
    }
    float x = (mRight - mLeft) / 2;
    float y = mCurrentScrollOffset;
    // draw the virtual buttons pressed state if needed
    if (mVirtualButtonPressedDrawable != null && mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
        if (mDecrementVirtualButtonPressed) {
            mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
            mVirtualButtonPressedDrawable.setBounds(0, 0, mRight, mTopSelectionDividerTop);
            mVirtualButtonPressedDrawable.draw(canvas);
        }
        if (mIncrementVirtualButtonPressed) {
            mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
            mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, mRight, mBottom);
            mVirtualButtonPressedDrawable.draw(canvas);
        }
    }
    // draw the selector wheel
    int[] selectorIndices = mSelectorIndices;
    for (int i = 0; i < selectorIndices.length; i++) {
        int selectorIndex = selectorIndices[i];
        String scrollSelectorValue = mSelectorIndexToStringCache.get(selectorIndex);
        // with the new one.
        if (i != SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() != VISIBLE) {
            canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint);
        }
        y += mSelectorElementHeight;
    }
    // draw the selection dividers
    if (mSelectionDivider != null) {
        // draw the top divider
        int topOfTopDivider = mTopSelectionDividerTop;
        int bottomOfTopDivider = topOfTopDivider + mSelectionDividerHeight;
        mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider);
        mSelectionDivider.draw(canvas);
        // draw the bottom divider
        int bottomOfBottomDivider = mBottomSelectionDividerBottom;
        int topOfBottomDivider = bottomOfBottomDivider - mSelectionDividerHeight;
        mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider);
        mSelectionDivider.draw(canvas);
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"1, 2, 3, 4","1, 2","- Return statement changed: The early version has a direct return statement in the first if-condition, while the late version has a super.onDraw(canvas) call before the return.","- Other statement changed: The way selection dividers are drawn has been changed. The mTopSelectionDividerTop and mBottomSelectionDividerBottom variables are used in the late version, while the early version has calculations to get these values."
1109,<android.hardware.camera2.legacy.CameraDeviceUserShim: int createStream(OutputConfiguration)>,23,24,<android.hardware.camera2.legacy.CameraDeviceUserShim: int createStream(OutputConfiguration)>,<android.hardware.camera2.legacy.CameraDeviceUserShim: int createStream(OutputConfiguration)>,0,"{
    if (DEBUG) {
        Log.d(TAG, ""createStream called."");
    }
    if (mLegacyDevice.isClosed()) {
        Log.e(TAG, ""Cannot create stream, device has been closed."");
        return CameraBinderDecorator.ENODEV;
    }
    synchronized (mConfigureLock) {
        if (!mConfiguring) {
            Log.e(TAG, ""Cannot create stream, beginConfigure hasn't been called yet."");
            return CameraBinderDecorator.INVALID_OPERATION;
        }
        if (outputConfiguration.getRotation() != OutputConfiguration.ROTATION_0) {
            Log.e(TAG, ""Cannot create stream, stream rotation is not supported."");
            return CameraBinderDecorator.INVALID_OPERATION;
        }
        int id = ++mSurfaceIdCounter;
        mSurfaces.put(id, outputConfiguration.getSurface());
        return id;
    }
}","{
    if (DEBUG) {
        Log.d(TAG, ""createStream called."");
    }
    if (mLegacyDevice.isClosed()) {
        String err = ""Cannot create stream, device has been closed."";
        Log.e(TAG, err);
        throw new ServiceSpecificException(ICameraService.ERROR_DISCONNECTED, err);
    }
    synchronized (mConfigureLock) {
        if (!mConfiguring) {
            String err = ""Cannot create stream, beginConfigure hasn't been called yet."";
            Log.e(TAG, err);
            throw new ServiceSpecificException(ICameraService.ERROR_INVALID_OPERATION, err);
        }
        if (outputConfiguration.getRotation() != OutputConfiguration.ROTATION_0) {
            String err = ""Cannot create stream, stream rotation is not supported."";
            Log.e(TAG, err);
            throw new ServiceSpecificException(ICameraService.ERROR_ILLEGAL_ARGUMENT, err);
        }
        int id = ++mSurfaceIdCounter;
        mSurfaces.put(id, outputConfiguration.getSurface());
        return id;
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,4","1,2","2, 5",2,"The code change is the introduction of a new exception handling mechanism in the late version. In the early version, the method returns an error code when an exception occurs. However, in the late version, the method throws a new ServiceSpecificException with an error message when an exception occurs. This change affects the control flow of the method, and also the exception handling mechanism of the API.","The compatibility issue is caused by the potential different exception handling mechanisms between the two versions of the API. In the early version, the method returns an error code when an exception occurs. However, in the late version, the method throws a new ServiceSpecificException with an error message when an exception occurs. This change can cause the client code that calls the API to behave differently, as it needs to handle the exception differently. For example, the client code that expects the method to return an error code in the early version will not work correctly in the late version, as it does not handle the ServiceSpecificException."
1148,<android.view.TextureView: HardwareLayer getHardwareLayer()>,20,21,<android.view.TextureView: HardwareLayer getHardwareLayer()>,<android.view.TextureView: HardwareLayer getHardwareLayer()>,0,"{
    // NOTE: Maintain these two lines very carefully (see View.java)
    mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;
    mPrivateFlags &= ~PFLAG_DIRTY_MASK;
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createHardwareLayer(mOpaque);
        if (!mUpdateSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = mAttachInfo.mHardwareRenderer.createSurfaceTexture(mLayer);
        }
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        nCreateNativeWindow(mSurface);
        mUpdateListener = new SurfaceTexture.OnFrameAvailableListener() {

            @Override
            public void onFrameAvailable(SurfaceTexture surfaceTexture) {
                // Per SurfaceTexture's documentation, the callback may be invoked
                // from an arbitrary thread
                updateLayer();
                if (Looper.myLooper() == Looper.getMainLooper()) {
                    invalidate();
                } else {
                    postInvalidate();
                }
            }
        };
        mSurface.setOnFrameAvailableListener(mUpdateListener);
        if (mListener != null && !mUpdateSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mAttachInfo.mHardwareRenderer.setSurfaceTexture(mLayer, mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    applyUpdate();
    applyTransformMatrix();
    return mLayer;
}","{
    // NOTE: Maintain these two lines very carefully (see View.java)
    mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;
    mPrivateFlags &= ~PFLAG_DIRTY_MASK;
    if (mLayer == null) {
        if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
            return null;
        }
        mLayer = mAttachInfo.mHardwareRenderer.createTextureLayer();
        if (!mUpdateSurface) {
            // Create a new SurfaceTexture for the layer.
            mSurface = new SurfaceTexture(false);
            mLayer.setSurfaceTexture(mSurface);
        }
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
        nCreateNativeWindow(mSurface);
        mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler);
        if (mListener != null && !mUpdateSurface) {
            mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
        }
        mLayer.setLayerPaint(mLayerPaint);
    }
    if (mUpdateSurface) {
        // Someone has requested that we use a specific SurfaceTexture, so
        // tell mLayer about it and set the SurfaceTexture to use the
        // current view size.
        mUpdateSurface = false;
        // Since we are updating the layer, force an update to ensure its
        // parameters are correct (width, height, transform, etc.)
        updateLayer();
        mMatrixChanged = true;
        mLayer.setSurfaceTexture(mSurface);
        mSurface.setDefaultBufferSize(getWidth(), getHeight());
    }
    applyUpdate();
    applyTransformMatrix();
    return mLayer;
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"3,4",0,"1, 5","1, 2",The implementation of the method has been changed in the following ways:,"3. The method `setOnFrameAvailableListener` of the `SurfaceTexture` object is changed. In the early version, the method `setOnFrameAvailableListener(SurfaceTexture.OnFrameAvailableListener)` is used, while in the late version, the method `setOnFrameAvailableListener(SurfaceTexture.OnFrameAvailableListener, Handler)` is used."
867,"<android.view.GLES20Canvas: boolean clipRegion(Region,Op)>",15,16,"<android.view.GLES20Canvas: boolean clipRegion(Region,Op)>","<android.view.GLES20Canvas: boolean clipRegion(Region,Op)>",0,"{
    throw new UnsupportedOperationException();
}","{
    // TODO: Implement
    region.getBounds(mClipBounds);
    return nClipRect(mRenderer, mClipBounds.left, mClipBounds.top, mClipBounds.right, mClipBounds.bottom, op.nativeInt);
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,4","1,2","1, 5",1,"The implementation of the method `clipRegion` has been completely changed between the two versions. In the early version, the method throws an `UnsupportedOperationException` when called. In the late version, the method is implemented with a region and op parameter, and it returns a boolean value. This is a significant change in the behavior of the method. Besides, the code change type is 1,5.","The Compatibility Issue arises because the behavior of the method `clipRegion` has been completely changed between the two versions. In the early version, the method throws an `UnsupportedOperationException` when called, while in the late version, the method is implemented with a region and op parameter, and it returns a boolean value. This change in behavior can cause the application to crash or malfunction when upgrading to a newer version of the API. The CI type is 1."
550,<android.os.RemoteCallbackList: int beginBroadcast()>,18,19,<android.os.RemoteCallbackList: int beginBroadcast()>,<android.os.RemoteCallbackList: int beginBroadcast()>,0,"{
    synchronized (mCallbacks) {
        if (mBroadcastCount > 0) {
            throw new IllegalStateException(""beginBroadcast() called while already in a broadcast"");
        }
        final int N = mBroadcastCount = mCallbacks.size();
        if (N <= 0) {
            return 0;
        }
        Object[] active = mActiveBroadcast;
        if (active == null || active.length < N) {
            mActiveBroadcast = active = new Object[N];
        }
        int i = 0;
        for (Callback cb : mCallbacks.values()) {
            active[i++] = cb;
        }
        return i;
    }
}","{
    synchronized (mCallbacks) {
        if (mBroadcastCount > 0) {
            throw new IllegalStateException(""beginBroadcast() called while already in a broadcast"");
        }
        final int N = mBroadcastCount = mCallbacks.size();
        if (N <= 0) {
            return 0;
        }
        Object[] active = mActiveBroadcast;
        if (active == null || active.length < N) {
            mActiveBroadcast = active = new Object[N];
        }
        for (int i = 0; i < N; i++) {
            active[i] = mCallbacks.valueAt(i);
        }
        return N;
    }
}",1,"/**
 * Prepare to start making calls to the currently registered callbacks.
 * This creates a copy of the callback list, which you can retrieve items
 * from using {@link #getBroadcastItem}.  Note that only one broadcast can
 * be active at a time, so you must be sure to always call this from the
 * same thread (usually by scheduling with {@link Handler}) or
 * do your own synchronization.  You must call {@link #finishBroadcast}
 * when done.
 *
 * <p>A typical loop delivering a broadcast looks like this:
 *
 * <pre>
 * int i = callbacks.beginBroadcast();
 * while (i &gt; 0) {
 * i--;
 * try {
 * callbacks.getBroadcastItem(i).somethingHappened();
 * } catch (RemoteException e) {
 * // The RemoteCallbackList will take care of removing
 * // the dead object for us.
 * }
 * }
 * callbacks.finishBroadcast();</pre>
 *
 * @return Returns the number of callbacks in the broadcast, to be used
 * with {@link #getBroadcastItem} to determine the range of indices you
 * can supply.
 *
 * @see #getBroadcastItem
 * @see #finishBroadcast
 */
","/**
 * Prepare to start making calls to the currently registered callbacks.
 * This creates a copy of the callback list, which you can retrieve items
 * from using {@link #getBroadcastItem}.  Note that only one broadcast can
 * be active at a time, so you must be sure to always call this from the
 * same thread (usually by scheduling with {@link Handler}) or
 * do your own synchronization.  You must call {@link #finishBroadcast}
 * when done.
 *
 * <p>A typical loop delivering a broadcast looks like this:
 *
 * <pre>
 * int i = callbacks.beginBroadcast();
 * while (i &gt; 0) {
 * i--;
 * try {
 * callbacks.getBroadcastItem(i).somethingHappened();
 * } catch (RemoteException e) {
 * // The RemoteCallbackList will take care of removing
 * // the dead object for us.
 * }
 * }
 * callbacks.finishBroadcast();</pre>
 *
 * @return Returns the number of callbacks in the broadcast, to be used
 * with {@link #getBroadcastItem} to determine the range of indices you
 * can supply.
 *
 * @see #getBroadcastItem
 * @see #finishBroadcast
 */
",-1,,,-1,-1,-1,-1,-1,"1,4",1,"1, 3",1,"In the late version, the loop for filling the active array has been changed from using an iterator to access the values in the mCallbacks map, to using the valueAt(i) method to directly access the values by their index. This is a control dependency change (code change type 3) because it affects how the active array is populated. Additionally, the return value of the method has been changed from returning the number of elements successfully copied to the active array (i), to returning the total number of elements in the mCallbacks map (N). This is a return statement change (code change type 1).","The change in the loop for filling the active array could potentially lead to compatibility issues if the order in which the callbacks are stored in the mCallbacks map is not the same as the order in which they are meant to be broadcasted. In the early version, the iterator is used to access the values in the map, which guarantees that the order of the values will be the same as the order in which they were inserted. In the late version, the valueAt(i) method is used to access the values by their index, which does not guarantee any particular order. If the order of the callbacks is important for the correct functioning of the app, then this change could potentially cause the app to behave differently."
316,"<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(String,int,String)>",29,30,"<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(String,int,String)>","<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(String,int,String)>",0,"{
    try {
        return mService.checkOperationRaw(strOpToOp(op), uid, packageName);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    return unsafeCheckOpRawNoThrow(strOpToOp(op), uid, packageName);
}",1,"/**
 * Like {@link #unsafeCheckOpNoThrow(String, int, String)} but returns the <em>raw</em>
 * mode associated with the op. Does not throw a security exception, does not translate
 * {@link #MODE_FOREGROUND}.
 */
","/**
 * Like {@link #unsafeCheckOpNoThrow(String, int, String)} but returns the <em>raw</em>
 * mode associated with the op. Does not throw a security exception, does not translate
 * {@link #MODE_FOREGROUND}.
 */
",-1,,,-1,-1,-1,-1,-1,4,0,5,1,The implementation in the late version replaces the call to `mService.checkOperationRaw(...)` with a recursive call to `unsafeCheckOpRawNoThrow(...)`. This is a Dependent API change as the method being called is different.,"The recursive call in the late version could potentially lead to a stack overflow if the method is called repeatedly with the same arguments. This is a Compatibility Issue caused by potential different return values or types, since the method could crash and not return a value in the late version."
334,<android.accounts.AccountManager: String getPassword(Account)>,22,23,<android.accounts.AccountManager: String getPassword(Account)>,<android.accounts.AccountManager: String getPassword(Account)>,0,"{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    try {
        return mService.getPassword(account);
    } catch (RemoteException e) {
        // will never happen
        throw new RuntimeException(e);
    }
}","{
    if (account == null)
        throw new IllegalArgumentException(""account is null"");
    try {
        return mService.getPassword(account);
    } catch (RemoteException e) {
        // won't ever happen
        throw new RuntimeException(e);
    }
}",1,"/**
 * Gets the saved password associated with the account.
 * This is intended for authenticators and related code; applications
 * should get an auth token instead.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
 * and to have the same UID as the account's authenticator.
 *
 * @param account The account to query for a password
 * @return The account's password, null if none or if the account doesn't exist
 */
","/**
 * Gets the saved password associated with the account.
 * This is intended for authenticators and related code; applications
 * should get an auth token instead.
 *
 * <p>It is safe to call this method from the main thread.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that owns the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The account to query for a password. Must not be {@code null}.
 * @return The account's password, null if none or if the account doesn't exist
 */
",-1,,,-1,-1,-1,-1,-1,0,0,0,0,There is no change in the implementation of the API between the early version and late version.,There is no Compatibility Issue exists for the API as there is no change in the implementation of the API between the early version and late version.
725,<android.app.ActivityManager: void killBackgroundProcesses(String)>,25,26,<android.app.ActivityManager: void killBackgroundProcesses(String)>,<android.app.ActivityManager: void killBackgroundProcesses(String)>,0,"{
    try {
        ActivityManagerNative.getDefault().killBackgroundProcesses(packageName, UserHandle.myUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    try {
        getService().killBackgroundProcesses(packageName, UserHandle.myUserId());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,"/**
 * Have the system immediately kill all background processes associated
 * with the given package.  This is the same as the kernel killing those
 * processes to reclaim memory; the system will take care of restarting
 * these processes in the future as needed.
 *
 * <p>You must hold the permission
 * {@link android.Manifest.permission#KILL_BACKGROUND_PROCESSES} to be able to
 * call this method.
 *
 * @param packageName The name of the package whose processes are to
 * be killed.
 */
","/**
 * Have the system immediately kill all background processes associated
 * with the given package.  This is the same as the kernel killing those
 * processes to reclaim memory; the system will take care of restarting
 * these processes in the future as needed.
 *
 * @param packageName The name of the package whose processes are to
 * be killed.
 */
",-1,,[@RequiresPermission(Manifest.permission.KILL_BACKGROUND_PROCESSES)],-1,-1,-1,-1,-1,4,0,5,1,"The implementation of the API has been changed from using ActivityManagerNative.getDefault() to using getService(). This is a change in the dependent API, so the code change type is 5.","The change in the dependent API could potentially lead to different behaviors in the API. For example, if the getService() method returns a different implementation of the ActivityManagerService, it could result in the killBackgroundProcesses() method behaving differently and potentially not killing the intended background processes. Therefore, this is a Compatibility Issue caused by potential different return values or types, and the CI type is 1."
60,<android.view.accessibility.AccessibilityNodeInfo: AccessibilityNodeInfo getChild(int)>,32,33,,,,"{
    enforceSealed();
    if (mChildNodeIds == null) {
        return null;
    }
    if (!canPerformRequestOverConnection(mConnectionId, mWindowId, mSourceNodeId)) {
        return null;
    }
    final long childId = mChildNodeIds.get(index);
    final AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
    if (mLeashedChild != null && childId == LEASHED_NODE_ID) {
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mLeashedChild, ROOT_NODE_ID, false, FLAG_PREFETCH_DESCENDANTS, null);
    }
    return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, childId, false, FLAG_PREFETCH_DESCENDANTS, null);
}","{
    return getChild(index, FLAG_PREFETCH_DESCENDANTS_HYBRID);
}",1,"/**
 * Get the child at given index.
 * <p>
 * <strong>Note:</strong> It is a client responsibility to recycle the
 * received info by calling {@link AccessibilityNodeInfo#recycle()}
 * to avoid creating of multiple instances.
 * </p>
 *
 * @param index The child index.
 * @return The child node.
 *
 * @throws IllegalStateException If called outside of an AccessibilityService.
 */
","/**
 * Get the child at given index.
 *
 * @param index The child index.
 * @return The child node.
 *
 * @throws IllegalStateException If called outside of an AccessibilityService.
 */
",1,,,0,,,,,"1,3,4",1,5,1,"The implementation of the getChild(int) method in the later version has changed significantly, introducing a new method getChild(int, int) and invoking it with the FLAG\_PREFETCH\_DESCENDANTS\_HYBRID flag. The original implementation involved multiple conditional statements and two separate calls to AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId().","The Compatibility Issue arises because the new implementation may return a different AccessibilityNodeInfo object than the original implementation. This is due to the fact that the new method getChild(int, int) may have a different logic for fetching and constructing the AccessibilityNodeInfo object, and the FLAG\_PREFETCH\_DESCENDANTS\_HYBRID flag may also affect the content of the returned object. Therefore, any client code that relies on the specific behavior of the original getChild(int) method may break or produce incorrect results when running with the later version of the API."
302,"<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>",29,30,"<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>","<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>",0,"{
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntent(mMainThread.getApplicationThread(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}","{
    String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
    try {
        intent.prepareToLeaveProcess(this);
        ActivityManager.getService().broadcastIntentWithFeature(mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType, null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, true, user.getIdentifier());
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}",1,,,-1,"[@Override, @Deprecated]","[@Override, @Deprecated]",-1,-1,-1,-1,-1,4,0,5,1,The method call in the try block has changed from `ActivityManager.getService().broadcastIntent(...)` to `ActivityManager.getService().broadcastIntentWithFeature(...)`.,"The change in the method call can potentially lead to a different behavior in the broadcast of the intent, depending on the implementation of the `broadcastIntentWithFeature` method. Therefore, it is a Compatibility Issue caused by potential different return values or types."
20,<android.widget.FrameLayout: LayoutParams generateDefaultLayoutParams()>,7,8,<android.widget.FrameLayout: LayoutParams generateDefaultLayoutParams()>,<android.widget.FrameLayout: LayoutParams generateDefaultLayoutParams()>,0,"{
    return new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
}","{
    return new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
}",1,"/**
 * Returns a set of layout parameters with a width of
 * {@link android.view.ViewGroup.LayoutParams#FILL_PARENT},
 * and a height of {@link android.view.ViewGroup.LayoutParams#FILL_PARENT}.
 */
","/**
 * Returns a set of layout parameters with a width of
 * {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT},
 * and a height of {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}.
 */
",-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,4",1,1,1,"The return statement in the implementation has changed from `return new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);` to `return new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);`.",The change in the return statement has the potential to cause different behavior in the API. The `FILL_PARENT` constant has been deprecated and replaced by `MATCH_PARENT` since API level 8. This could lead to compatibility issues in applications that are still using the deprecated constant and expect the behavior of `FILL_PARENT`.
319,"<android.app.Notification.Builder: Builder setSound(Uri,int)>",25,26,"<android.app.Notification.Builder: Builder setSound(Uri,int)>","<android.app.Notification.Builder: Builder setSound(Uri,int)>",0,"{
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}","{
    PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"");
    mN.sound = sound;
    mN.audioStreamType = streamType;
    return this;
}",1,"/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * <p>
 * A notification that is noisy is more likely to be presented as a heads-up notification.
 * </p>
 * @deprecated use {@link #setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
","/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)}.
 */
",-1,[@Deprecated],[@Deprecated],-1,-1,-1,-1,-1,4,0,4,0,"A new statement has been added in the late version implementation, which is ""PlayerBase.deprecateStreamTypeForPlayback(streamType, ""Notification"", ""setSound()"");"". It invokes a static method from another class, but it does not affect the return value or exception handling of the API.",No compatibility issue exists for this API since the added statement does not affect the API's return value or exception handling.
64,<android.app.Activity: void recreate()>,23,24,<android.app.Activity: void recreate()>,<android.app.Activity: void recreate()>,0,"{
    if (mParent != null) {
        throw new IllegalStateException(""Can only be called on top-level activity"");
    }
    if (Looper.myLooper() != mMainThread.getLooper()) {
        throw new IllegalStateException(""Must be called from main thread"");
    }
    mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false);
}","{
    if (mParent != null) {
        throw new IllegalStateException(""Can only be called on top-level activity"");
    }
    if (Looper.myLooper() != mMainThread.getLooper()) {
        throw new IllegalStateException(""Must be called from main thread"");
    }
    mMainThread.requestRelaunchActivity(mToken, null, null, 0, false, null, null, false, false);
}",1,"/**
 * Cause this Activity to be recreated with a new instance.  This results
 * in essentially the same flow as when the Activity is created due to
 * a configuration change -- the current instance will go through its
 * lifecycle to {@link #onDestroy} and a new instance then created after it.
 */
","/**
 * Cause this Activity to be recreated with a new instance.  This results
 * in essentially the same flow as when the Activity is created due to
 * a configuration change -- the current instance will go through its
 * lifecycle to {@link #onDestroy} and a new instance then created after it.
 */
",-1,,,-1,-1,-1,-1,-1,5,0,5,0,"The code change is in the method call 'mMainThread.requestRelaunchActivity()'. In the early version, the method takes 8 parameters, while in the late version, it takes 9 parameters. This is a change in the dependent API, so the code change type is 5.","The change in the number of parameters in the 'requestRelaunchActivity()' method does not affect the behavior of the 'recreate()' method. The new parameter in the late version is a boolean value with a default value of false, which does not change the logic of the 'recreate()' method. Therefore, there is no compatibility issue in this case."
807,<android.app.Activity: void setActionBar(Toolbar)>,22,23,<android.app.Activity: void setActionBar(Toolbar)>,<android.app.Activity: void setActionBar(Toolbar)>,0,"{
    if (getActionBar() instanceof WindowDecorActionBar) {
        throw new IllegalStateException(""This Activity already has an action bar supplied "" + ""by the window decor. Do not request Window.FEATURE_ACTION_BAR and set "" + ""android:windowActionBar to false in your theme to use a Toolbar instead."");
    }
    ToolbarActionBar tbab = new ToolbarActionBar(toolbar, getTitle(), this);
    mActionBar = tbab;
    mWindow.setCallback(tbab.getWrappedWindowCallback());
    mActionBar.invalidateOptionsMenu();
}","{
    if (getActionBar() instanceof WindowDecorActionBar) {
        throw new IllegalStateException(""This Activity already has an action bar supplied "" + ""by the window decor. Do not request Window.FEATURE_ACTION_BAR and set "" + ""android:windowActionBar to false in your theme to use a Toolbar instead."");
    }
    // Clear out the MenuInflater to make sure that it is valid for the new Action Bar
    mMenuInflater = null;
    ToolbarActionBar tbab = new ToolbarActionBar(toolbar, getTitle(), this);
    mActionBar = tbab;
    mWindow.setCallback(tbab.getWrappedWindowCallback());
    mActionBar.invalidateOptionsMenu();
}",1,"/**
 * Set a {@link android.widget.Toolbar Toolbar} to act as the {@link ActionBar} for this
 * Activity window.
 *
 * <p>When set to a non-null value the {@link #getActionBar()} method will return
 * an {@link ActionBar} object that can be used to control the given toolbar as if it were
 * a traditional window decor action bar. The toolbar's menu will be populated with the
 * Activity's options menu and the navigation button will be wired through the standard
 * {@link android.R.id#home home} menu select action.</p>
 *
 * <p>In order to use a Toolbar within the Activity's window content the application
 * must not request the window feature {@link Window#FEATURE_ACTION_BAR FEATURE_ACTION_BAR}.</p>
 *
 * @param toolbar Toolbar to set as the Activity's action bar
 */
","/**
 * Set a {@link android.widget.Toolbar Toolbar} to act as the {@link ActionBar} for this
 * Activity window.
 *
 * <p>When set to a non-null value the {@link #getActionBar()} method will return
 * an {@link ActionBar} object that can be used to control the given toolbar as if it were
 * a traditional window decor action bar. The toolbar's menu will be populated with the
 * Activity's options menu and the navigation button will be wired through the standard
 * {@link android.R.id#home home} menu select action.</p>
 *
 * <p>In order to use a Toolbar within the Activity's window content the application
 * must not request the window feature {@link Window#FEATURE_ACTION_BAR FEATURE_ACTION_BAR}.</p>
 *
 * @param toolbar Toolbar to set as the Activity's action bar
 */
",-1,,,-1,-1,-1,-1,-1,4,0,4,1,"The line ""mMenuInflater = null;"" was added in the late version of the implementation. This statement resets the MenuInflater object to null, which may impact the behavior of the method if the MenuInflater object was being used elsewhere in the code.","The added statement ""mMenuInflater = null;"" may cause a Compatibility Issue if the MenuInflater object was being used elsewhere in the code in the early version. This could lead to unexpected behavior or null pointer exceptions in the late version. However, without additional context or information about the usage of the MenuInflater object, it is difficult to determine the exact impact of this change."
1086,<android.print.PrintManager.PrintDocumentAdapterDelegate.MyWriteResultCallback: void onWriteCancelled()>,20,21,<android.print.PrintManager.PrintDocumentAdapterDelegate.MyWriteResultCallback: void onWriteCancelled()>,<android.print.PrintManager.PrintDocumentAdapterDelegate.MyWriteResultCallback: void onWriteCancelled()>,0,"{
    synchronized (mLock) {
        if (mDestroyed) {
            Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion?"");
            return;
        }
        clearLocked();
    }
}","{
    final IWriteResultCallback callback;
    synchronized (mLock) {
        callback = mCallback;
    }
    // If the callback is null we are destroyed.
    if (callback == null) {
        Log.e(LOG_TAG, ""PrintDocumentAdapter is destroyed. Did you "" + ""finish the printing activity before print completion "" + ""or did you invoke a callback after finish?"");
        return;
    }
    try {
        callback.onWriteCanceled(mSequence);
    } catch (RemoteException re) {
        Log.e(LOG_TAG, ""Error calling onWriteCanceled"", re);
    } finally {
        destroy();
    }
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"1,2,3,4","1,2","1,2,5","1,2","The implementation of the method has been significantly changed in the late version. The method now first retrieves the callback object in a thread-safe manner, then checks if it's null, and finally invokes the onWriteCanceled method on the callback object. In the early version, the method simply clears the internal state in a thread-safe manner. The changes include the introduction of a new variable (callback), a new null-checking statement, and a new method invocation (callback.onWriteCanceled), which are classified as code change type 1 (return statement changed, although in this case it's the return value of the callback.onWriteCanceled method that's potentially different), 2 (exception handling statement changed, as the late version now includes a try-catch block), and 5 (dependent API changed, as the callback.onWriteCanceled method is a dependent API that has been introduced in the late version).","The null-checking statement in the late version can potentially lead to different behavior compared to the early version. In the early version, if the callback object is null, the method simply returns and does not clear the internal state. In the late version, the method always clears the internal state, regardless of whether the callback object is null or not. This can be classified as a compatibility issue of type 1, as it can potentially lead to different return values or types. Additionally, the introduction of the try-catch block in the late version can also potentially lead to different exception handling behavior, which can be classified as a compatibility issue of type 2."
267,<android.util.SparseIntArray: int indexOfKey(int)>,18,19,<android.util.SparseIntArray: int indexOfKey(int)>,<android.util.SparseIntArray: int indexOfKey(int)>,0,"{
    return binarySearch(mKeys, 0, mSize, key);
}","{
    return ContainerHelpers.binarySearch(mKeys, mSize, key);
}",1,"/**
 * Returns the index for which {@link #keyAt} would return the
 * specified key, or a negative number if the specified
 * key is not mapped.
 */
","/**
 * Returns the index for which {@link #keyAt} would return the
 * specified key, or a negative number if the specified
 * key is not mapped.
 */
",-1,,,-1,-1,-1,-1,-1,"1,5",1,5,1,"The implementation of the method `indexOfKey(int)` in the `SparseIntArray` class has been changed between versions 18 and 19. In the early version, the `binarySearch` method from the `Arrays` class is used to search for the specified key in the `mKeys` array. In the late version, the `binarySearch` method from the `ContainerHelpers` class is used instead. This is a case of dependent API change, as the method used to implement the functionality of `indexOfKey(int)` has been changed to a different method in a different class.","The change in the dependent API used to implement `indexOfKey(int)` could potentially lead to compatibility issues, as the `binarySearch` method in the `ContainerHelpers` class may not behave in the same way as the `binarySearch` method in the `Arrays` class. For example, the two methods may have different requirements for the input array to be sorted, or they may return different values when the specified key is not found in the array. These differences could cause the `indexOfKey(int)` method to return incorrect results in certain cases, which would be a compatibility issue."
339,"<android.view.GLES20Canvas: void drawText(String,int,int,float,float,Paint)>",20,21,"<android.view.GLES20Canvas: void drawText(String,int,int,float,float,Paint)>","<android.view.GLES20Canvas: void drawText(String,int,int,float,float,Paint)>",0,"{
    if ((start | end | (end - start) | (text.length() - end)) < 0) {
        throw new IndexOutOfBoundsException();
    }
    int modifiers = setupModifiers(paint);
    try {
        nDrawText(mRenderer, text, start, end, x, y, paint.mBidiFlags, paint.mNativePaint);
    } finally {
        if (modifiers != MODIFIER_NONE)
            nResetModifiers(mRenderer, modifiers);
    }
}","{
    if ((start | end | (end - start) | (text.length() - end)) < 0) {
        throw new IndexOutOfBoundsException();
    }
    nDrawText(mRenderer, text, start, end, x, y, paint.mBidiFlags, paint.mNativePaint, paint.mNativeTypeface);
}",1,,,-1,[@Override],[@Override],-1,-1,-1,-1,-1,"2,4",2,5,1,"The implementation of the `drawText` method in the `android.view.GLES20Canvas` class has changed between versions 20 and 21. Specifically, the method `nResetModifiers` and the usage of `modifiers` variable have been removed, and the method `nDrawText` has been modified to include an additional parameter `paint.mNativeTypeface`. This is a dependent API change as the modification is in the native method `nDrawText`.","The removal of the `nResetModifiers` method and the usage of `modifiers` variable could potentially lead to compatibility issues as it might affect the rendering of the text. Additionally, the inclusion of the `paint.mNativeTypeface` parameter in the `nDrawText` method could also result in different text output if the native typeface has been modified between the two versions. Therefore, this is a Compatibility Issue caused by potential different return values or types."
685,<android.content.pm.ShortcutInfo.Builder: Builder setActivity(ComponentName)>,29,30,<android.content.pm.ShortcutInfo.Builder: Builder setActivity(ComponentName)>,<android.content.pm.ShortcutInfo.Builder: Builder setActivity(ComponentName)>,0,"{
    mActivity = Preconditions.checkNotNull(activity, ""activity cannot be null"");
    return this;
}","{
    mActivity = Objects.requireNonNull(activity, ""activity cannot be null"");
    return this;
}",1,"/**
 * Sets the target activity.  A shortcut will be shown along with this activity's icon
 * on the launcher.
 *
 * When selecting a target activity, keep the following in mind:
 * <ul>
 * <li>All dynamic shortcuts must have a target activity.  When a shortcut with no target
 * activity is published using
 * {@link ShortcutManager#addDynamicShortcuts(List)} or
 * {@link ShortcutManager#setDynamicShortcuts(List)},
 * the first main activity defined in the app's <code>AndroidManifest.xml</code>
 * file is used.
 *
 * <li>Only ""main"" activities&mdash;ones that define the {@link Intent#ACTION_MAIN}
 * and {@link Intent#CATEGORY_LAUNCHER} intent filters&mdash;can be target
 * activities.
 *
 * <li>By default, the first main activity defined in the app's manifest is
 * the target activity.
 *
 * <li>A target activity must belong to the publisher app.
 * </ul>
 *
 * @see ShortcutInfo#getActivity()
 */
","/**
 * Sets the target activity.  A shortcut will be shown along with this activity's icon
 * on the launcher.
 *
 * When selecting a target activity, keep the following in mind:
 * <ul>
 * <li>All dynamic shortcuts must have a target activity.  When a shortcut with no target
 * activity is published using
 * {@link ShortcutManager#addDynamicShortcuts(List)} or
 * {@link ShortcutManager#setDynamicShortcuts(List)},
 * the first main activity defined in the app's <code>AndroidManifest.xml</code>
 * file is used.
 *
 * <li>Only ""main"" activities&mdash;ones that define the {@link Intent#ACTION_MAIN}
 * and {@link Intent#CATEGORY_LAUNCHER} intent filters&mdash;can be target
 * activities.
 *
 * <li>By default, the first main activity defined in the app's manifest is
 * the target activity.
 *
 * <li>A target activity must belong to the publisher app.
 * </ul>
 *
 * @see ShortcutInfo#getActivity()
 */
",-1,[@NonNull],[@NonNull],-1,-1,-1,-1,-1,4,0,4,0,"In the implementation of the method setActivity(ComponentName), the way of checking the nullity of the input parameter has been changed from Preconditions.checkNotNull to Objects.requireNonNull.","Although the way of checking the nullity of the input parameter has been changed, both Preconditions.checkNotNull and Objects.requireNonNull will throw a NullPointerException if the input is null. Therefore, there is no compatibility issue in this case."
2,"<android.util.LongSparseArray: void setValueAt(int,E)>",28,29,"<android.util.LongSparseArray: void setValueAt(int,E)>","<android.util.LongSparseArray: void setValueAt(int,E)>",0,"{
    if (mGarbage) {
        gc();
    }
    mValues[index] = value;
}","{
    if (index >= mSize && UtilConfig.sThrowExceptionForUpperArrayOutOfBounds) {
        // Check if exception should be thrown outside of the critical path.
        throw new ArrayIndexOutOfBoundsException(index);
    }
    if (mGarbage) {
        gc();
    }
    mValues[index] = value;
}",1,"/**
 * Given an index in the range <code>0...size()-1</code>, sets a new
 * value for the <code>index</code>th key-value mapping that this
 * LongSparseArray stores.
 */
","/**
 * Given an index in the range <code>0...size()-1</code>, sets a new
 * value for the <code>index</code>th key-value mapping that this
 * LongSparseArray stores.
 *
 * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for
 * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an
 * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting
 * {@link android.os.Build.VERSION_CODES#Q} and later.</p>
 */
",-1,,,-1,-1,-1,-1,-1,"2,3,4",2,"2, 5",2,"The new implementation adds a condition to check if the index is greater than or equal to the size of the array, and throws an exception if it is. This is a control dependency change (change type 3) since it adds a new condition that affects the flow of the program. It is also a dependent API change (change type 5) since it uses the `UtilConfig.sThrowExceptionForUpperArrayOutOfBounds` flag to decide whether to throw the exception.","The new implementation can potentially throw an `ArrayIndexOutOfBoundsException` for indices outside of the range `0...size()-1`, whereas the old implementation had undefined behavior for such indices. This is a compatibility issue caused by potential different exception handlings (CI type 2)."
1053,"<android.content.res.AssetManager: XmlBlock openXmlBlockAsset(int,String)>",20,21,"<android.content.res.AssetManager: XmlBlock openXmlBlockAsset(int,String)>","<android.content.res.AssetManager: XmlBlock openXmlBlockAsset(int,String)>",0,"{
    synchronized (this) {
        if (!mOpen) {
            throw new RuntimeException(""Assetmanager has been closed"");
        }
        int xmlBlock = openXmlAssetNative(cookie, fileName);
        if (xmlBlock != 0) {
            XmlBlock res = new XmlBlock(this, xmlBlock);
            incRefsLocked(res.hashCode());
            return res;
        }
    }
    throw new FileNotFoundException(""Asset XML file: "" + fileName);
}","{
    synchronized (this) {
        if (!mOpen) {
            throw new RuntimeException(""Assetmanager has been closed"");
        }
        long xmlBlock = openXmlAssetNative(cookie, fileName);
        if (xmlBlock != 0) {
            XmlBlock res = new XmlBlock(this, xmlBlock);
            incRefsLocked(res.hashCode());
            return res;
        }
    }
    throw new FileNotFoundException(""Asset XML file: "" + fileName);
}",1,"/*package*/
","/*package*/
",-1,,,-1,-1,-1,-1,-1,4,0,1,1,"The return type of the native method `openXmlAssetNative` has been changed from `int` to `long` in the late version. This change can potentially lead to different return values of the API `openXmlBlockAsset`, as the value of the `xmlBlock` variable may be different in the two versions.","The Compatibility Issue (CI) in this case is caused by the potential different return values of the API `openXmlBlockAsset`. This CI can affect the behavior of the apps that use this API, as they may receive different `XmlBlock` objects in the two versions of the Android system. This can further lead to other issues, such as crashes or incorrect display of the XML data."
